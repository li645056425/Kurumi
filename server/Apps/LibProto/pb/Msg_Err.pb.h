// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Msg_Err.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Msg_5fErr_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Msg_5fErr_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Msg_5fErr_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Msg_5fErr_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace err {

enum Code : int {
  SUCCESS = 0,
  UNKNOWN = 100001,
  NOT_FOUND = 100002,
  OVERDUE = 100003,
  TARGET_REPEAT = 100004,
  SVR_ERROR = 100005,
  TOKEN_ERR = 100006,
  OCC_NOT_FOUND = 100007,
  NO_MEMORY = 100100,
  OVERLOAD = 100101,
  PARAM_ERROR = 100102,
  NAME_STR_TO_SHORT = 100200,
  NAME_STR_TO_LONG = 100201,
  NAME_STR_CONTAIN_ILLEGAL_CAHR = 100202,
  NAME_TARGET_REPEAT = 100203,
  ACCOUNT_NOT_EXIST = 200000,
  WRONG_PASSWORD = 200001,
  ROLE_NOT_EXIST = 200002,
  LOGIN_TIMEOUT = 200003,
  GATE_CONNECT_FAIL = 200100,
  NOT_FOUND_FIGHT = 210000,
  FIGHT_INIT_FAIL = 210001,
  FIGHT_NOE_FOUND_PLAYER = 210002,
  FIGHT_PLAYING = 210003,
  FIGHT_PLAYER_TOO_MUCH = 210004,
  FIGHT_PLAYERID_REPEAT = 210005,
  FIGHT_LEAVE_GAME = 210006,
  FIGHT_FRAME_ERR = 210007,
  FIGHT_PAST_RECORDS_INC = 210008,
  FIGHT_SVR_BUSY = 210100,
  FIGHT_SVR_NONE = 210101,
  FIGHT_SVR_NOT_FOUND = 210102,
  GAME_LOGIN_MUT_PID = 220001,
  GAME_LOGIN_AGAIN = 220002,
  GAME_LOGIN_NO_FOUND_PLAYER = 220003,
  EXIT_GAME_LOGIN_REPEAT = 220010,
  EXIT_GAME_CLIENT_DIS = 220011,
  EXIT_GAME_PLAYER_REQ = 220012,
  PVP_MATCHING = 220030,
  PVP_MATCH_TIMEOUT = 220031,
  PVP_MATCH_SUC = 220032,
  PVP_MATCH_SUC_NO_SVR = 220033,
  PVP_RIVAL_EXIT = 220034
};
bool Code_IsValid(int value);
constexpr Code Code_MIN = SUCCESS;
constexpr Code Code_MAX = PVP_RIVAL_EXIT;
constexpr int Code_ARRAYSIZE = Code_MAX + 1;

const std::string& Code_Name(Code value);
template<typename T>
inline const std::string& Code_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Code>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Code_Name.");
  return Code_Name(static_cast<Code>(enum_t_value));
}
bool Code_Parse(
    const std::string& name, Code* value);
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace err

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::err::Code> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Msg_5fErr_2eproto
