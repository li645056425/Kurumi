// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Msg_Server.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Msg_Server.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace svr_msg {

void protobuf_ShutdownFile_Msg_5fServer_2eproto() {
  delete CheckTokenReq::default_instance_;
  delete CheckTokenAck::default_instance_;
  delete TokenChangeNtf::default_instance_;
  delete FightRoleSpawnInfo::default_instance_;
  delete NewFightReq::default_instance_;
  delete NewFightAck::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_Msg_5fServer_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_Msg_5fServer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  CheckTokenReq::default_instance_ = new CheckTokenReq();
  CheckTokenAck::default_instance_ = new CheckTokenAck();
  TokenChangeNtf::default_instance_ = new TokenChangeNtf();
  FightRoleSpawnInfo::default_instance_ = new FightRoleSpawnInfo();
  NewFightReq::default_instance_ = new NewFightReq();
  NewFightAck::default_instance_ = new NewFightAck();
  CheckTokenReq::default_instance_->InitAsDefaultInstance();
  CheckTokenAck::default_instance_->InitAsDefaultInstance();
  TokenChangeNtf::default_instance_->InitAsDefaultInstance();
  FightRoleSpawnInfo::default_instance_->InitAsDefaultInstance();
  NewFightReq::default_instance_->InitAsDefaultInstance();
  NewFightAck::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Msg_5fServer_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_Msg_5fServer_2eproto_once_);
void protobuf_AddDesc_Msg_5fServer_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_Msg_5fServer_2eproto_once_,
                 &protobuf_AddDesc_Msg_5fServer_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Msg_5fServer_2eproto {
  StaticDescriptorInitializer_Msg_5fServer_2eproto() {
    protobuf_AddDesc_Msg_5fServer_2eproto();
  }
} static_descriptor_initializer_Msg_5fServer_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int CheckTokenReq::kAccountFieldNumber;
const int CheckTokenReq::kTokenFieldNumber;
const int CheckTokenReq::kPidFieldNumber;
const int CheckTokenReq::kSessionFieldNumber;
#endif  // !_MSC_VER

CheckTokenReq::CheckTokenReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CheckTokenReq::InitAsDefaultInstance() {
}

CheckTokenReq::CheckTokenReq(const CheckTokenReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CheckTokenReq::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pid_ = GOOGLE_LONGLONG(0);
  session_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckTokenReq::~CheckTokenReq() {
  SharedDtor();
}

void CheckTokenReq::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CheckTokenReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CheckTokenReq& CheckTokenReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Msg_5fServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_5fServer_2eproto();
#endif
  return *default_instance_;
}

CheckTokenReq* CheckTokenReq::default_instance_ = NULL;

CheckTokenReq* CheckTokenReq::New() const {
  return new CheckTokenReq;
}

void CheckTokenReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    pid_ = GOOGLE_LONGLONG(0);
    session_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CheckTokenReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // required string token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pid;
        break;
      }

      // required int64 pid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_session;
        break;
      }

      // required uint32 session = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_session:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_)));
          set_has_session();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CheckTokenReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }

  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->token(), output);
  }

  // required int64 pid = 3;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->pid(), output);
  }

  // required uint32 session = 4;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->session(), output);
  }

}

int CheckTokenReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // required string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // required int64 pid = 3;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }

    // required uint32 session = 4;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckTokenReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CheckTokenReq*>(&from));
}

void CheckTokenReq::MergeFrom(const CheckTokenReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_session()) {
      set_session(from.session());
    }
  }
}

void CheckTokenReq::CopyFrom(const CheckTokenReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckTokenReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CheckTokenReq::Swap(CheckTokenReq* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(token_, other->token_);
    std::swap(pid_, other->pid_);
    std::swap(session_, other->session_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CheckTokenReq::GetTypeName() const {
  return "svr_msg.CheckTokenReq";
}


// ===================================================================

#ifndef _MSC_VER
const int CheckTokenAck::kCodeFieldNumber;
const int CheckTokenAck::kPidFieldNumber;
const int CheckTokenAck::kSessionFieldNumber;
const int CheckTokenAck::kAccountFieldNumber;
const int CheckTokenAck::kTokenFieldNumber;
#endif  // !_MSC_VER

CheckTokenAck::CheckTokenAck()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CheckTokenAck::InitAsDefaultInstance() {
}

CheckTokenAck::CheckTokenAck(const CheckTokenAck& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CheckTokenAck::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  pid_ = GOOGLE_LONGLONG(0);
  session_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckTokenAck::~CheckTokenAck() {
  SharedDtor();
}

void CheckTokenAck::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CheckTokenAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CheckTokenAck& CheckTokenAck::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Msg_5fServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_5fServer_2eproto();
#endif
  return *default_instance_;
}

CheckTokenAck* CheckTokenAck::default_instance_ = NULL;

CheckTokenAck* CheckTokenAck::New() const {
  return new CheckTokenAck;
}

void CheckTokenAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    pid_ = GOOGLE_LONGLONG(0);
    session_ = 0;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CheckTokenAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pid;
        break;
      }

      // required int64 pid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_session;
        break;
      }

      // required int32 session = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_session:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_)));
          set_has_session();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_account;
        break;
      }

      // required string account = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_token;
        break;
      }

      // required string token = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CheckTokenAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // required int64 pid = 2;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->pid(), output);
  }

  // required int32 session = 3;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->session(), output);
  }

  // required string account = 4;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->account(), output);
  }

  // required string token = 5;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->token(), output);
  }

}

int CheckTokenAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // required int64 pid = 2;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }

    // required int32 session = 3;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->session());
    }

    // required string account = 4;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // required string token = 5;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckTokenAck::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CheckTokenAck*>(&from));
}

void CheckTokenAck::MergeFrom(const CheckTokenAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_session()) {
      set_session(from.session());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
}

void CheckTokenAck::CopyFrom(const CheckTokenAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckTokenAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void CheckTokenAck::Swap(CheckTokenAck* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(pid_, other->pid_);
    std::swap(session_, other->session_);
    std::swap(account_, other->account_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CheckTokenAck::GetTypeName() const {
  return "svr_msg.CheckTokenAck";
}


// ===================================================================

#ifndef _MSC_VER
const int TokenChangeNtf::kTokenFieldNumber;
const int TokenChangeNtf::kAccountFieldNumber;
#endif  // !_MSC_VER

TokenChangeNtf::TokenChangeNtf()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TokenChangeNtf::InitAsDefaultInstance() {
}

TokenChangeNtf::TokenChangeNtf(const TokenChangeNtf& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TokenChangeNtf::SharedCtor() {
  _cached_size_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TokenChangeNtf::~TokenChangeNtf() {
  SharedDtor();
}

void TokenChangeNtf::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TokenChangeNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TokenChangeNtf& TokenChangeNtf::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Msg_5fServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_5fServer_2eproto();
#endif
  return *default_instance_;
}

TokenChangeNtf* TokenChangeNtf::default_instance_ = NULL;

TokenChangeNtf* TokenChangeNtf::New() const {
  return new TokenChangeNtf;
}

void TokenChangeNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TokenChangeNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string token = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // required string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TokenChangeNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->token(), output);
  }

  // required string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

}

int TokenChangeNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // required string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TokenChangeNtf::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TokenChangeNtf*>(&from));
}

void TokenChangeNtf::MergeFrom(const TokenChangeNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
  }
}

void TokenChangeNtf::CopyFrom(const TokenChangeNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenChangeNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TokenChangeNtf::Swap(TokenChangeNtf* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    std::swap(account_, other->account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TokenChangeNtf::GetTypeName() const {
  return "svr_msg.TokenChangeNtf";
}


// ===================================================================

#ifndef _MSC_VER
const int FightRoleSpawnInfo::kRoleIdFieldNumber;
const int FightRoleSpawnInfo::kOccFieldNumber;
#endif  // !_MSC_VER

FightRoleSpawnInfo::FightRoleSpawnInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FightRoleSpawnInfo::InitAsDefaultInstance() {
}

FightRoleSpawnInfo::FightRoleSpawnInfo(const FightRoleSpawnInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FightRoleSpawnInfo::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_LONGLONG(0);
  occ_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightRoleSpawnInfo::~FightRoleSpawnInfo() {
  SharedDtor();
}

void FightRoleSpawnInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FightRoleSpawnInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FightRoleSpawnInfo& FightRoleSpawnInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Msg_5fServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_5fServer_2eproto();
#endif
  return *default_instance_;
}

FightRoleSpawnInfo* FightRoleSpawnInfo::default_instance_ = NULL;

FightRoleSpawnInfo* FightRoleSpawnInfo::New() const {
  return new FightRoleSpawnInfo;
}

void FightRoleSpawnInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_LONGLONG(0);
    occ_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool FightRoleSpawnInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_occ;
        break;
      }

      // required int32 occ = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_occ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &occ_)));
          set_has_occ();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FightRoleSpawnInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->roleid(), output);
  }

  // required int32 occ = 2;
  if (has_occ()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->occ(), output);
  }

}

int FightRoleSpawnInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roleid());
    }

    // required int32 occ = 2;
    if (has_occ()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->occ());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightRoleSpawnInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FightRoleSpawnInfo*>(&from));
}

void FightRoleSpawnInfo::MergeFrom(const FightRoleSpawnInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_occ()) {
      set_occ(from.occ());
    }
  }
}

void FightRoleSpawnInfo::CopyFrom(const FightRoleSpawnInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightRoleSpawnInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FightRoleSpawnInfo::Swap(FightRoleSpawnInfo* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(occ_, other->occ_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FightRoleSpawnInfo::GetTypeName() const {
  return "svr_msg.FightRoleSpawnInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int NewFightReq::kMapIdFieldNumber;
const int NewFightReq::kRolesFieldNumber;
const int NewFightReq::kTagFieldNumber;
const int NewFightReq::kFightTypeFieldNumber;
#endif  // !_MSC_VER

NewFightReq::NewFightReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NewFightReq::InitAsDefaultInstance() {
}

NewFightReq::NewFightReq(const NewFightReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NewFightReq::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0;
  tag_ = 0;
  fighttype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewFightReq::~NewFightReq() {
  SharedDtor();
}

void NewFightReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NewFightReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NewFightReq& NewFightReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Msg_5fServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_5fServer_2eproto();
#endif
  return *default_instance_;
}

NewFightReq* NewFightReq::default_instance_ = NULL;

NewFightReq* NewFightReq::New() const {
  return new NewFightReq;
}

void NewFightReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0;
    tag_ = 0;
    fighttype_ = 0;
  }
  roles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NewFightReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mapId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roles;
        break;
      }

      // repeated .svr_msg.FightRoleSpawnInfo roles = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roles;
        if (input->ExpectTag(24)) goto parse_tag;
        break;
      }

      // required int32 tag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag_)));
          set_has_tag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fightType;
        break;
      }

      // required int32 fightType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fighttype_)));
          set_has_fighttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NewFightReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mapId = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mapid(), output);
  }

  // repeated .svr_msg.FightRoleSpawnInfo roles = 2;
  for (int i = 0; i < this->roles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->roles(i), output);
  }

  // required int32 tag = 3;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tag(), output);
  }

  // required int32 fightType = 4;
  if (has_fighttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fighttype(), output);
  }

}

int NewFightReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mapId = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // required int32 tag = 3;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag());
    }

    // required int32 fightType = 4;
    if (has_fighttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fighttype());
    }

  }
  // repeated .svr_msg.FightRoleSpawnInfo roles = 2;
  total_size += 1 * this->roles_size();
  for (int i = 0; i < this->roles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roles(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewFightReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NewFightReq*>(&from));
}

void NewFightReq::MergeFrom(const NewFightReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  roles_.MergeFrom(from.roles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_fighttype()) {
      set_fighttype(from.fighttype());
    }
  }
}

void NewFightReq::CopyFrom(const NewFightReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewFightReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  for (int i = 0; i < roles_size(); i++) {
    if (!this->roles(i).IsInitialized()) return false;
  }
  return true;
}

void NewFightReq::Swap(NewFightReq* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    roles_.Swap(&other->roles_);
    std::swap(tag_, other->tag_);
    std::swap(fighttype_, other->fighttype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NewFightReq::GetTypeName() const {
  return "svr_msg.NewFightReq";
}


// ===================================================================

#ifndef _MSC_VER
const int NewFightAck::kCodeFieldNumber;
const int NewFightAck::kUuidFieldNumber;
const int NewFightAck::kTagFieldNumber;
const int NewFightAck::kFightTypeFieldNumber;
#endif  // !_MSC_VER

NewFightAck::NewFightAck()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NewFightAck::InitAsDefaultInstance() {
}

NewFightAck::NewFightAck(const NewFightAck& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NewFightAck::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  uuid_ = 0;
  tag_ = 0;
  fighttype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewFightAck::~NewFightAck() {
  SharedDtor();
}

void NewFightAck::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NewFightAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NewFightAck& NewFightAck::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Msg_5fServer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Msg_5fServer_2eproto();
#endif
  return *default_instance_;
}

NewFightAck* NewFightAck::default_instance_ = NULL;

NewFightAck* NewFightAck::New() const {
  return new NewFightAck;
}

void NewFightAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    uuid_ = 0;
    tag_ = 0;
    fighttype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NewFightAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // required int32 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tag;
        break;
      }

      // required int32 tag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag_)));
          set_has_tag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fightType;
        break;
      }

      // required int32 fightType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fighttype_)));
          set_has_fighttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NewFightAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // required int32 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->uuid(), output);
  }

  // required int32 tag = 3;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tag(), output);
  }

  // required int32 fightType = 4;
  if (has_fighttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fighttype(), output);
  }

}

int NewFightAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // required int32 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uuid());
    }

    // required int32 tag = 3;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag());
    }

    // required int32 fightType = 4;
    if (has_fighttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fighttype());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewFightAck::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NewFightAck*>(&from));
}

void NewFightAck::MergeFrom(const NewFightAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_fighttype()) {
      set_fighttype(from.fighttype());
    }
  }
}

void NewFightAck::CopyFrom(const NewFightAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewFightAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void NewFightAck::Swap(NewFightAck* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(uuid_, other->uuid_);
    std::swap(tag_, other->tag_);
    std::swap(fighttype_, other->fighttype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NewFightAck::GetTypeName() const {
  return "svr_msg.NewFightAck";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace svr_msg

// @@protoc_insertion_point(global_scope)
