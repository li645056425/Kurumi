// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Msg_Server.proto

#include "Msg_Server.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Msg_5fServer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FightRoleSpawnInfo_Msg_5fServer_2eproto;
namespace svr_msg {
class CheckTokenReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckTokenReq> _instance;
} _CheckTokenReq_default_instance_;
class CheckTokenAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckTokenAck> _instance;
} _CheckTokenAck_default_instance_;
class TokenChangeNtfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TokenChangeNtf> _instance;
} _TokenChangeNtf_default_instance_;
class FightRoleSpawnInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FightRoleSpawnInfo> _instance;
} _FightRoleSpawnInfo_default_instance_;
class NewFightReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NewFightReq> _instance;
} _NewFightReq_default_instance_;
class NewFightAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NewFightAck> _instance;
} _NewFightAck_default_instance_;
}  // namespace svr_msg
static void InitDefaultsscc_info_CheckTokenAck_Msg_5fServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::svr_msg::_CheckTokenAck_default_instance_;
    new (ptr) ::svr_msg::CheckTokenAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::svr_msg::CheckTokenAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckTokenAck_Msg_5fServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CheckTokenAck_Msg_5fServer_2eproto}, {}};

static void InitDefaultsscc_info_CheckTokenReq_Msg_5fServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::svr_msg::_CheckTokenReq_default_instance_;
    new (ptr) ::svr_msg::CheckTokenReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::svr_msg::CheckTokenReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckTokenReq_Msg_5fServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CheckTokenReq_Msg_5fServer_2eproto}, {}};

static void InitDefaultsscc_info_FightRoleSpawnInfo_Msg_5fServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::svr_msg::_FightRoleSpawnInfo_default_instance_;
    new (ptr) ::svr_msg::FightRoleSpawnInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::svr_msg::FightRoleSpawnInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FightRoleSpawnInfo_Msg_5fServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FightRoleSpawnInfo_Msg_5fServer_2eproto}, {}};

static void InitDefaultsscc_info_NewFightAck_Msg_5fServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::svr_msg::_NewFightAck_default_instance_;
    new (ptr) ::svr_msg::NewFightAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::svr_msg::NewFightAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NewFightAck_Msg_5fServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NewFightAck_Msg_5fServer_2eproto}, {}};

static void InitDefaultsscc_info_NewFightReq_Msg_5fServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::svr_msg::_NewFightReq_default_instance_;
    new (ptr) ::svr_msg::NewFightReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::svr_msg::NewFightReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NewFightReq_Msg_5fServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NewFightReq_Msg_5fServer_2eproto}, {
      &scc_info_FightRoleSpawnInfo_Msg_5fServer_2eproto.base,}};

static void InitDefaultsscc_info_TokenChangeNtf_Msg_5fServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::svr_msg::_TokenChangeNtf_default_instance_;
    new (ptr) ::svr_msg::TokenChangeNtf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::svr_msg::TokenChangeNtf::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TokenChangeNtf_Msg_5fServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TokenChangeNtf_Msg_5fServer_2eproto}, {}};

namespace svr_msg {
bool CheckTokenReq_MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1001:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CheckTokenReq_MsgId_strings[2] = {};

static const char CheckTokenReq_MsgId_names[] =
  "Id"
  "None";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CheckTokenReq_MsgId_entries[] = {
  { {CheckTokenReq_MsgId_names + 0, 2}, 1001 },
  { {CheckTokenReq_MsgId_names + 2, 4}, 0 },
};

static const int CheckTokenReq_MsgId_entries_by_number[] = {
  1, // 0 -> None
  0, // 1001 -> Id
};

const std::string& CheckTokenReq_MsgId_Name(
    CheckTokenReq_MsgId value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CheckTokenReq_MsgId_entries,
          CheckTokenReq_MsgId_entries_by_number,
          2, CheckTokenReq_MsgId_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CheckTokenReq_MsgId_entries,
      CheckTokenReq_MsgId_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CheckTokenReq_MsgId_strings[idx].get();
}
bool CheckTokenReq_MsgId_Parse(
    const std::string& name, CheckTokenReq_MsgId* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CheckTokenReq_MsgId_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<CheckTokenReq_MsgId>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CheckTokenReq_MsgId CheckTokenReq::None;
constexpr CheckTokenReq_MsgId CheckTokenReq::Id;
constexpr CheckTokenReq_MsgId CheckTokenReq::MsgId_MIN;
constexpr CheckTokenReq_MsgId CheckTokenReq::MsgId_MAX;
constexpr int CheckTokenReq::MsgId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool CheckTokenAck_MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1002:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CheckTokenAck_MsgId_strings[2] = {};

static const char CheckTokenAck_MsgId_names[] =
  "Id"
  "None";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CheckTokenAck_MsgId_entries[] = {
  { {CheckTokenAck_MsgId_names + 0, 2}, 1002 },
  { {CheckTokenAck_MsgId_names + 2, 4}, 0 },
};

static const int CheckTokenAck_MsgId_entries_by_number[] = {
  1, // 0 -> None
  0, // 1002 -> Id
};

const std::string& CheckTokenAck_MsgId_Name(
    CheckTokenAck_MsgId value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CheckTokenAck_MsgId_entries,
          CheckTokenAck_MsgId_entries_by_number,
          2, CheckTokenAck_MsgId_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CheckTokenAck_MsgId_entries,
      CheckTokenAck_MsgId_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CheckTokenAck_MsgId_strings[idx].get();
}
bool CheckTokenAck_MsgId_Parse(
    const std::string& name, CheckTokenAck_MsgId* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CheckTokenAck_MsgId_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<CheckTokenAck_MsgId>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CheckTokenAck_MsgId CheckTokenAck::None;
constexpr CheckTokenAck_MsgId CheckTokenAck::Id;
constexpr CheckTokenAck_MsgId CheckTokenAck::MsgId_MIN;
constexpr CheckTokenAck_MsgId CheckTokenAck::MsgId_MAX;
constexpr int CheckTokenAck::MsgId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool TokenChangeNtf_MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1002:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TokenChangeNtf_MsgId_strings[2] = {};

static const char TokenChangeNtf_MsgId_names[] =
  "Id"
  "None";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry TokenChangeNtf_MsgId_entries[] = {
  { {TokenChangeNtf_MsgId_names + 0, 2}, 1002 },
  { {TokenChangeNtf_MsgId_names + 2, 4}, 0 },
};

static const int TokenChangeNtf_MsgId_entries_by_number[] = {
  1, // 0 -> None
  0, // 1002 -> Id
};

const std::string& TokenChangeNtf_MsgId_Name(
    TokenChangeNtf_MsgId value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          TokenChangeNtf_MsgId_entries,
          TokenChangeNtf_MsgId_entries_by_number,
          2, TokenChangeNtf_MsgId_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      TokenChangeNtf_MsgId_entries,
      TokenChangeNtf_MsgId_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     TokenChangeNtf_MsgId_strings[idx].get();
}
bool TokenChangeNtf_MsgId_Parse(
    const std::string& name, TokenChangeNtf_MsgId* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      TokenChangeNtf_MsgId_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<TokenChangeNtf_MsgId>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TokenChangeNtf_MsgId TokenChangeNtf::None;
constexpr TokenChangeNtf_MsgId TokenChangeNtf::Id;
constexpr TokenChangeNtf_MsgId TokenChangeNtf::MsgId_MIN;
constexpr TokenChangeNtf_MsgId TokenChangeNtf::MsgId_MAX;
constexpr int TokenChangeNtf::MsgId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool NewFightReq_MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 2001:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> NewFightReq_MsgId_strings[2] = {};

static const char NewFightReq_MsgId_names[] =
  "Id"
  "None";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry NewFightReq_MsgId_entries[] = {
  { {NewFightReq_MsgId_names + 0, 2}, 2001 },
  { {NewFightReq_MsgId_names + 2, 4}, 0 },
};

static const int NewFightReq_MsgId_entries_by_number[] = {
  1, // 0 -> None
  0, // 2001 -> Id
};

const std::string& NewFightReq_MsgId_Name(
    NewFightReq_MsgId value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          NewFightReq_MsgId_entries,
          NewFightReq_MsgId_entries_by_number,
          2, NewFightReq_MsgId_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      NewFightReq_MsgId_entries,
      NewFightReq_MsgId_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     NewFightReq_MsgId_strings[idx].get();
}
bool NewFightReq_MsgId_Parse(
    const std::string& name, NewFightReq_MsgId* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      NewFightReq_MsgId_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<NewFightReq_MsgId>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr NewFightReq_MsgId NewFightReq::None;
constexpr NewFightReq_MsgId NewFightReq::Id;
constexpr NewFightReq_MsgId NewFightReq::MsgId_MIN;
constexpr NewFightReq_MsgId NewFightReq::MsgId_MAX;
constexpr int NewFightReq::MsgId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool NewFightAck_MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 2002:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> NewFightAck_MsgId_strings[2] = {};

static const char NewFightAck_MsgId_names[] =
  "Id"
  "None";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry NewFightAck_MsgId_entries[] = {
  { {NewFightAck_MsgId_names + 0, 2}, 2002 },
  { {NewFightAck_MsgId_names + 2, 4}, 0 },
};

static const int NewFightAck_MsgId_entries_by_number[] = {
  1, // 0 -> None
  0, // 2002 -> Id
};

const std::string& NewFightAck_MsgId_Name(
    NewFightAck_MsgId value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          NewFightAck_MsgId_entries,
          NewFightAck_MsgId_entries_by_number,
          2, NewFightAck_MsgId_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      NewFightAck_MsgId_entries,
      NewFightAck_MsgId_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     NewFightAck_MsgId_strings[idx].get();
}
bool NewFightAck_MsgId_Parse(
    const std::string& name, NewFightAck_MsgId* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      NewFightAck_MsgId_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<NewFightAck_MsgId>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr NewFightAck_MsgId NewFightAck::None;
constexpr NewFightAck_MsgId NewFightAck::Id;
constexpr NewFightAck_MsgId NewFightAck::MsgId_MIN;
constexpr NewFightAck_MsgId NewFightAck::MsgId_MAX;
constexpr int NewFightAck::MsgId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void CheckTokenReq::InitAsDefaultInstance() {
}
class CheckTokenReq::_Internal {
 public:
};

CheckTokenReq::CheckTokenReq()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svr_msg.CheckTokenReq)
}
CheckTokenReq::CheckTokenReq(const CheckTokenReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&session_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(session_));
  // @@protoc_insertion_point(copy_constructor:svr_msg.CheckTokenReq)
}

void CheckTokenReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CheckTokenReq_Msg_5fServer_2eproto.base);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(session_));
}

CheckTokenReq::~CheckTokenReq() {
  // @@protoc_insertion_point(destructor:svr_msg.CheckTokenReq)
  SharedDtor();
}

void CheckTokenReq::SharedDtor() {
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CheckTokenReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckTokenReq& CheckTokenReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckTokenReq_Msg_5fServer_2eproto.base);
  return *internal_default_instance();
}


void CheckTokenReq::Clear() {
// @@protoc_insertion_point(message_clear_start:svr_msg.CheckTokenReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(session_));
  _internal_metadata_.Clear();
}

const char* CheckTokenReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 pid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 session = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          session_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckTokenReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:svr_msg.CheckTokenReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 1;
  if (this->account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account().data(), static_cast<int>(this->_internal_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "svr_msg.CheckTokenReq.account");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account(), target);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "svr_msg.CheckTokenReq.token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_token(), target);
  }

  // int64 pid = 3;
  if (this->pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_pid(), target);
  }

  // uint32 session = 4;
  if (this->session() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_session(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svr_msg.CheckTokenReq)
  return target;
}

size_t CheckTokenReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:svr_msg.CheckTokenReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account = 1;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account());
  }

  // string token = 2;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // int64 pid = 3;
  if (this->pid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_pid());
  }

  // uint32 session = 4;
  if (this->session() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_session());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckTokenReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CheckTokenReq*>(
      &from));
}

void CheckTokenReq::MergeFrom(const CheckTokenReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:svr_msg.CheckTokenReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  if (from.session() != 0) {
    _internal_set_session(from._internal_session());
  }
}

void CheckTokenReq::CopyFrom(const CheckTokenReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:svr_msg.CheckTokenReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckTokenReq::IsInitialized() const {
  return true;
}

void CheckTokenReq::InternalSwap(CheckTokenReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_.Swap(&other->account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pid_, other->pid_);
  swap(session_, other->session_);
}

std::string CheckTokenReq::GetTypeName() const {
  return "svr_msg.CheckTokenReq";
}


// ===================================================================

void CheckTokenAck::InitAsDefaultInstance() {
}
class CheckTokenAck::_Internal {
 public:
};

CheckTokenAck::CheckTokenAck()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svr_msg.CheckTokenAck)
}
CheckTokenAck::CheckTokenAck(const CheckTokenAck& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&session_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(session_));
  // @@protoc_insertion_point(copy_constructor:svr_msg.CheckTokenAck)
}

void CheckTokenAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CheckTokenAck_Msg_5fServer_2eproto.base);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(session_));
}

CheckTokenAck::~CheckTokenAck() {
  // @@protoc_insertion_point(destructor:svr_msg.CheckTokenAck)
  SharedDtor();
}

void CheckTokenAck::SharedDtor() {
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CheckTokenAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckTokenAck& CheckTokenAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckTokenAck_Msg_5fServer_2eproto.base);
  return *internal_default_instance();
}


void CheckTokenAck::Clear() {
// @@protoc_insertion_point(message_clear_start:svr_msg.CheckTokenAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(session_));
  _internal_metadata_.Clear();
}

const char* CheckTokenAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 session = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          session_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string account = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string token = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckTokenAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:svr_msg.CheckTokenAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // int64 pid = 2;
  if (this->pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_pid(), target);
  }

  // int32 session = 3;
  if (this->session() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_session(), target);
  }

  // string account = 4;
  if (this->account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account().data(), static_cast<int>(this->_internal_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "svr_msg.CheckTokenAck.account");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_account(), target);
  }

  // string token = 5;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "svr_msg.CheckTokenAck.token");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svr_msg.CheckTokenAck)
  return target;
}

size_t CheckTokenAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:svr_msg.CheckTokenAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account = 4;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account());
  }

  // string token = 5;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // int64 pid = 2;
  if (this->pid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_pid());
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  // int32 session = 3;
  if (this->session() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_session());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckTokenAck::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CheckTokenAck*>(
      &from));
}

void CheckTokenAck::MergeFrom(const CheckTokenAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:svr_msg.CheckTokenAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.session() != 0) {
    _internal_set_session(from._internal_session());
  }
}

void CheckTokenAck::CopyFrom(const CheckTokenAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:svr_msg.CheckTokenAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckTokenAck::IsInitialized() const {
  return true;
}

void CheckTokenAck::InternalSwap(CheckTokenAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_.Swap(&other->account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pid_, other->pid_);
  swap(code_, other->code_);
  swap(session_, other->session_);
}

std::string CheckTokenAck::GetTypeName() const {
  return "svr_msg.CheckTokenAck";
}


// ===================================================================

void TokenChangeNtf::InitAsDefaultInstance() {
}
class TokenChangeNtf::_Internal {
 public:
};

TokenChangeNtf::TokenChangeNtf()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svr_msg.TokenChangeNtf)
}
TokenChangeNtf::TokenChangeNtf(const TokenChangeNtf& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  // @@protoc_insertion_point(copy_constructor:svr_msg.TokenChangeNtf)
}

void TokenChangeNtf::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TokenChangeNtf_Msg_5fServer_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TokenChangeNtf::~TokenChangeNtf() {
  // @@protoc_insertion_point(destructor:svr_msg.TokenChangeNtf)
  SharedDtor();
}

void TokenChangeNtf::SharedDtor() {
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TokenChangeNtf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TokenChangeNtf& TokenChangeNtf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TokenChangeNtf_Msg_5fServer_2eproto.base);
  return *internal_default_instance();
}


void TokenChangeNtf::Clear() {
// @@protoc_insertion_point(message_clear_start:svr_msg.TokenChangeNtf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* TokenChangeNtf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string account = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TokenChangeNtf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:svr_msg.TokenChangeNtf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "svr_msg.TokenChangeNtf.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // string account = 2;
  if (this->account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account().data(), static_cast<int>(this->_internal_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "svr_msg.TokenChangeNtf.account");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_account(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svr_msg.TokenChangeNtf)
  return target;
}

size_t TokenChangeNtf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:svr_msg.TokenChangeNtf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // string account = 2;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TokenChangeNtf::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TokenChangeNtf*>(
      &from));
}

void TokenChangeNtf::MergeFrom(const TokenChangeNtf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:svr_msg.TokenChangeNtf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
}

void TokenChangeNtf::CopyFrom(const TokenChangeNtf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:svr_msg.TokenChangeNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenChangeNtf::IsInitialized() const {
  return true;
}

void TokenChangeNtf::InternalSwap(TokenChangeNtf* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  account_.Swap(&other->account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string TokenChangeNtf::GetTypeName() const {
  return "svr_msg.TokenChangeNtf";
}


// ===================================================================

void FightRoleSpawnInfo::InitAsDefaultInstance() {
}
class FightRoleSpawnInfo::_Internal {
 public:
};

FightRoleSpawnInfo::FightRoleSpawnInfo()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svr_msg.FightRoleSpawnInfo)
}
FightRoleSpawnInfo::FightRoleSpawnInfo(const FightRoleSpawnInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&roleid_, &from.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&occ_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(occ_));
  // @@protoc_insertion_point(copy_constructor:svr_msg.FightRoleSpawnInfo)
}

void FightRoleSpawnInfo::SharedCtor() {
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&occ_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(occ_));
}

FightRoleSpawnInfo::~FightRoleSpawnInfo() {
  // @@protoc_insertion_point(destructor:svr_msg.FightRoleSpawnInfo)
  SharedDtor();
}

void FightRoleSpawnInfo::SharedDtor() {
}

void FightRoleSpawnInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FightRoleSpawnInfo& FightRoleSpawnInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FightRoleSpawnInfo_Msg_5fServer_2eproto.base);
  return *internal_default_instance();
}


void FightRoleSpawnInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:svr_msg.FightRoleSpawnInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&occ_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(occ_));
  _internal_metadata_.Clear();
}

const char* FightRoleSpawnInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 roleId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 occ = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          occ_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FightRoleSpawnInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:svr_msg.FightRoleSpawnInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 roleId = 1;
  if (this->roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_roleid(), target);
  }

  // int32 occ = 2;
  if (this->occ() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_occ(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svr_msg.FightRoleSpawnInfo)
  return target;
}

size_t FightRoleSpawnInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:svr_msg.FightRoleSpawnInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 roleId = 1;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_roleid());
  }

  // int32 occ = 2;
  if (this->occ() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_occ());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FightRoleSpawnInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FightRoleSpawnInfo*>(
      &from));
}

void FightRoleSpawnInfo::MergeFrom(const FightRoleSpawnInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:svr_msg.FightRoleSpawnInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from.occ() != 0) {
    _internal_set_occ(from._internal_occ());
  }
}

void FightRoleSpawnInfo::CopyFrom(const FightRoleSpawnInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:svr_msg.FightRoleSpawnInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightRoleSpawnInfo::IsInitialized() const {
  return true;
}

void FightRoleSpawnInfo::InternalSwap(FightRoleSpawnInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(roleid_, other->roleid_);
  swap(occ_, other->occ_);
}

std::string FightRoleSpawnInfo::GetTypeName() const {
  return "svr_msg.FightRoleSpawnInfo";
}


// ===================================================================

void NewFightReq::InitAsDefaultInstance() {
}
class NewFightReq::_Internal {
 public:
};

NewFightReq::NewFightReq()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svr_msg.NewFightReq)
}
NewFightReq::NewFightReq(const NewFightReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      roles_(from.roles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mapid_, &from.mapid_,
    static_cast<size_t>(reinterpret_cast<char*>(&isofflinemode_) -
    reinterpret_cast<char*>(&mapid_)) + sizeof(isofflinemode_));
  // @@protoc_insertion_point(copy_constructor:svr_msg.NewFightReq)
}

void NewFightReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NewFightReq_Msg_5fServer_2eproto.base);
  ::memset(&mapid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isofflinemode_) -
      reinterpret_cast<char*>(&mapid_)) + sizeof(isofflinemode_));
}

NewFightReq::~NewFightReq() {
  // @@protoc_insertion_point(destructor:svr_msg.NewFightReq)
  SharedDtor();
}

void NewFightReq::SharedDtor() {
}

void NewFightReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewFightReq& NewFightReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NewFightReq_Msg_5fServer_2eproto.base);
  return *internal_default_instance();
}


void NewFightReq::Clear() {
// @@protoc_insertion_point(message_clear_start:svr_msg.NewFightReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roles_.Clear();
  ::memset(&mapid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isofflinemode_) -
      reinterpret_cast<char*>(&mapid_)) + sizeof(isofflinemode_));
  _internal_metadata_.Clear();
}

const char* NewFightReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mapId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .svr_msg.FightRoleSpawnInfo roles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_roles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 tag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fightType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          fighttype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isOfflineMode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          isofflinemode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NewFightReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:svr_msg.NewFightReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mapId = 1;
  if (this->mapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mapid(), target);
  }

  // repeated .svr_msg.FightRoleSpawnInfo roles = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_roles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_roles(i), target, stream);
  }

  // int32 tag = 3;
  if (this->tag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_tag(), target);
  }

  // int32 fightType = 4;
  if (this->fighttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_fighttype(), target);
  }

  // bool isOfflineMode = 5;
  if (this->isofflinemode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_isofflinemode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svr_msg.NewFightReq)
  return target;
}

size_t NewFightReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:svr_msg.NewFightReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .svr_msg.FightRoleSpawnInfo roles = 2;
  total_size += 1UL * this->_internal_roles_size();
  for (const auto& msg : this->roles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 mapId = 1;
  if (this->mapid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mapid());
  }

  // int32 tag = 3;
  if (this->tag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tag());
  }

  // int32 fightType = 4;
  if (this->fighttype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fighttype());
  }

  // bool isOfflineMode = 5;
  if (this->isofflinemode() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewFightReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const NewFightReq*>(
      &from));
}

void NewFightReq::MergeFrom(const NewFightReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:svr_msg.NewFightReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  roles_.MergeFrom(from.roles_);
  if (from.mapid() != 0) {
    _internal_set_mapid(from._internal_mapid());
  }
  if (from.tag() != 0) {
    _internal_set_tag(from._internal_tag());
  }
  if (from.fighttype() != 0) {
    _internal_set_fighttype(from._internal_fighttype());
  }
  if (from.isofflinemode() != 0) {
    _internal_set_isofflinemode(from._internal_isofflinemode());
  }
}

void NewFightReq::CopyFrom(const NewFightReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:svr_msg.NewFightReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewFightReq::IsInitialized() const {
  return true;
}

void NewFightReq::InternalSwap(NewFightReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  roles_.InternalSwap(&other->roles_);
  swap(mapid_, other->mapid_);
  swap(tag_, other->tag_);
  swap(fighttype_, other->fighttype_);
  swap(isofflinemode_, other->isofflinemode_);
}

std::string NewFightReq::GetTypeName() const {
  return "svr_msg.NewFightReq";
}


// ===================================================================

void NewFightAck::InitAsDefaultInstance() {
}
class NewFightAck::_Internal {
 public:
};

NewFightAck::NewFightAck()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svr_msg.NewFightAck)
}
NewFightAck::NewFightAck(const NewFightAck& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&fighttype_) -
    reinterpret_cast<char*>(&code_)) + sizeof(fighttype_));
  // @@protoc_insertion_point(copy_constructor:svr_msg.NewFightAck)
}

void NewFightAck::SharedCtor() {
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fighttype_) -
      reinterpret_cast<char*>(&code_)) + sizeof(fighttype_));
}

NewFightAck::~NewFightAck() {
  // @@protoc_insertion_point(destructor:svr_msg.NewFightAck)
  SharedDtor();
}

void NewFightAck::SharedDtor() {
}

void NewFightAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewFightAck& NewFightAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NewFightAck_Msg_5fServer_2eproto.base);
  return *internal_default_instance();
}


void NewFightAck::Clear() {
// @@protoc_insertion_point(message_clear_start:svr_msg.NewFightAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fighttype_) -
      reinterpret_cast<char*>(&code_)) + sizeof(fighttype_));
  _internal_metadata_.Clear();
}

const char* NewFightAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 uuid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 tag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fightType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          fighttype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NewFightAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:svr_msg.NewFightAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // int32 uuid = 2;
  if (this->uuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_uuid(), target);
  }

  // int32 tag = 3;
  if (this->tag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_tag(), target);
  }

  // int32 fightType = 4;
  if (this->fighttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_fighttype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svr_msg.NewFightAck)
  return target;
}

size_t NewFightAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:svr_msg.NewFightAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  // int32 uuid = 2;
  if (this->uuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uuid());
  }

  // int32 tag = 3;
  if (this->tag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tag());
  }

  // int32 fightType = 4;
  if (this->fighttype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fighttype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewFightAck::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const NewFightAck*>(
      &from));
}

void NewFightAck::MergeFrom(const NewFightAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:svr_msg.NewFightAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.uuid() != 0) {
    _internal_set_uuid(from._internal_uuid());
  }
  if (from.tag() != 0) {
    _internal_set_tag(from._internal_tag());
  }
  if (from.fighttype() != 0) {
    _internal_set_fighttype(from._internal_fighttype());
  }
}

void NewFightAck::CopyFrom(const NewFightAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:svr_msg.NewFightAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewFightAck::IsInitialized() const {
  return true;
}

void NewFightAck::InternalSwap(NewFightAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(code_, other->code_);
  swap(uuid_, other->uuid_);
  swap(tag_, other->tag_);
  swap(fighttype_, other->fighttype_);
}

std::string NewFightAck::GetTypeName() const {
  return "svr_msg.NewFightAck";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace svr_msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::svr_msg::CheckTokenReq* Arena::CreateMaybeMessage< ::svr_msg::CheckTokenReq >(Arena* arena) {
  return Arena::CreateInternal< ::svr_msg::CheckTokenReq >(arena);
}
template<> PROTOBUF_NOINLINE ::svr_msg::CheckTokenAck* Arena::CreateMaybeMessage< ::svr_msg::CheckTokenAck >(Arena* arena) {
  return Arena::CreateInternal< ::svr_msg::CheckTokenAck >(arena);
}
template<> PROTOBUF_NOINLINE ::svr_msg::TokenChangeNtf* Arena::CreateMaybeMessage< ::svr_msg::TokenChangeNtf >(Arena* arena) {
  return Arena::CreateInternal< ::svr_msg::TokenChangeNtf >(arena);
}
template<> PROTOBUF_NOINLINE ::svr_msg::FightRoleSpawnInfo* Arena::CreateMaybeMessage< ::svr_msg::FightRoleSpawnInfo >(Arena* arena) {
  return Arena::CreateInternal< ::svr_msg::FightRoleSpawnInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::svr_msg::NewFightReq* Arena::CreateMaybeMessage< ::svr_msg::NewFightReq >(Arena* arena) {
  return Arena::CreateInternal< ::svr_msg::NewFightReq >(arena);
}
template<> PROTOBUF_NOINLINE ::svr_msg::NewFightAck* Arena::CreateMaybeMessage< ::svr_msg::NewFightAck >(Arena* arena) {
  return Arena::CreateInternal< ::svr_msg::NewFightAck >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
