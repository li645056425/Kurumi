// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: C2Game.proto

#include "C2Game.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_C2Game_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PVEFightInfo_C2Game_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_C2Game_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerAccountInfo_C2Game_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_C2Game_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoleDetailedInfo_C2Game_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_C2Game_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoleSimpleInfo_C2Game_2eproto;
namespace msg {
class PlayerAccountInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerAccountInfo> _instance;
} _PlayerAccountInfo_default_instance_;
class RoleDetailedInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoleDetailedInfo> _instance;
} _RoleDetailedInfo_default_instance_;
class RoleSimpleInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoleSimpleInfo> _instance;
} _RoleSimpleInfo_default_instance_;
class LoginReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginReq> _instance;
} _LoginReq_default_instance_;
class LoginAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginAck> _instance;
} _LoginAck_default_instance_;
class EnterGameReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnterGameReq> _instance;
} _EnterGameReq_default_instance_;
class EnterGameAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnterGameAck> _instance;
} _EnterGameAck_default_instance_;
class CreateRoleReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateRoleReq> _instance;
} _CreateRoleReq_default_instance_;
class CreateRoleAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateRoleAck> _instance;
} _CreateRoleAck_default_instance_;
class ModifyRoleDataReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModifyRoleDataReq> _instance;
} _ModifyRoleDataReq_default_instance_;
class ModifyRoleDataAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModifyRoleDataAck> _instance;
} _ModifyRoleDataAck_default_instance_;
class ExitGameNtfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExitGameNtf> _instance;
} _ExitGameNtf_default_instance_;
class PVEFightInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PVEFightInfo> _instance;
} _PVEFightInfo_default_instance_;
class StartPVEFightReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartPVEFightReq> _instance;
} _StartPVEFightReq_default_instance_;
class StartPVEFightAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartPVEFightAck> _instance;
} _StartPVEFightAck_default_instance_;
class StartPVPFightReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartPVPFightReq> _instance;
} _StartPVPFightReq_default_instance_;
class StartPVPFightAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartPVPFightAck> _instance;
} _StartPVPFightAck_default_instance_;
class StopPVPMatchReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopPVPMatchReq> _instance;
} _StopPVPMatchReq_default_instance_;
class StopPVPMatchAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopPVPMatchAck> _instance;
} _StopPVPMatchAck_default_instance_;
class StartFightNTFDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartFightNTF> _instance;
} _StartFightNTF_default_instance_;
class PushRoleDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PushRoleData> _instance;
} _PushRoleData_default_instance_;
}  // namespace msg
static void InitDefaultsscc_info_CreateRoleAck_C2Game_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_CreateRoleAck_default_instance_;
    new (ptr) ::msg::CreateRoleAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::CreateRoleAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateRoleAck_C2Game_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateRoleAck_C2Game_2eproto}, {}};

static void InitDefaultsscc_info_CreateRoleReq_C2Game_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_CreateRoleReq_default_instance_;
    new (ptr) ::msg::CreateRoleReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::CreateRoleReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateRoleReq_C2Game_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateRoleReq_C2Game_2eproto}, {}};

static void InitDefaultsscc_info_EnterGameAck_C2Game_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_EnterGameAck_default_instance_;
    new (ptr) ::msg::EnterGameAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::EnterGameAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EnterGameAck_C2Game_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EnterGameAck_C2Game_2eproto}, {
      &scc_info_RoleDetailedInfo_C2Game_2eproto.base,}};

static void InitDefaultsscc_info_EnterGameReq_C2Game_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_EnterGameReq_default_instance_;
    new (ptr) ::msg::EnterGameReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::EnterGameReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnterGameReq_C2Game_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnterGameReq_C2Game_2eproto}, {}};

static void InitDefaultsscc_info_ExitGameNtf_C2Game_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_ExitGameNtf_default_instance_;
    new (ptr) ::msg::ExitGameNtf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::ExitGameNtf::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExitGameNtf_C2Game_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ExitGameNtf_C2Game_2eproto}, {}};

static void InitDefaultsscc_info_LoginAck_C2Game_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_LoginAck_default_instance_;
    new (ptr) ::msg::LoginAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::LoginAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoginAck_C2Game_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LoginAck_C2Game_2eproto}, {
      &scc_info_PlayerAccountInfo_C2Game_2eproto.base,}};

static void InitDefaultsscc_info_LoginReq_C2Game_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_LoginReq_default_instance_;
    new (ptr) ::msg::LoginReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::LoginReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginReq_C2Game_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoginReq_C2Game_2eproto}, {}};

static void InitDefaultsscc_info_ModifyRoleDataAck_C2Game_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_ModifyRoleDataAck_default_instance_;
    new (ptr) ::msg::ModifyRoleDataAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::ModifyRoleDataAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModifyRoleDataAck_C2Game_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ModifyRoleDataAck_C2Game_2eproto}, {}};

static void InitDefaultsscc_info_ModifyRoleDataReq_C2Game_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_ModifyRoleDataReq_default_instance_;
    new (ptr) ::msg::ModifyRoleDataReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::ModifyRoleDataReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModifyRoleDataReq_C2Game_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ModifyRoleDataReq_C2Game_2eproto}, {}};

static void InitDefaultsscc_info_PVEFightInfo_C2Game_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_PVEFightInfo_default_instance_;
    new (ptr) ::msg::PVEFightInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::PVEFightInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PVEFightInfo_C2Game_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PVEFightInfo_C2Game_2eproto}, {}};

static void InitDefaultsscc_info_PlayerAccountInfo_C2Game_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_PlayerAccountInfo_default_instance_;
    new (ptr) ::msg::PlayerAccountInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::PlayerAccountInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerAccountInfo_C2Game_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlayerAccountInfo_C2Game_2eproto}, {}};

static void InitDefaultsscc_info_PushRoleData_C2Game_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_PushRoleData_default_instance_;
    new (ptr) ::msg::PushRoleData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::PushRoleData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PushRoleData_C2Game_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PushRoleData_C2Game_2eproto}, {
      &scc_info_RoleSimpleInfo_C2Game_2eproto.base,}};

static void InitDefaultsscc_info_RoleDetailedInfo_C2Game_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_RoleDetailedInfo_default_instance_;
    new (ptr) ::msg::RoleDetailedInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::RoleDetailedInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoleDetailedInfo_C2Game_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RoleDetailedInfo_C2Game_2eproto}, {}};

static void InitDefaultsscc_info_RoleSimpleInfo_C2Game_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_RoleSimpleInfo_default_instance_;
    new (ptr) ::msg::RoleSimpleInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::RoleSimpleInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoleSimpleInfo_C2Game_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RoleSimpleInfo_C2Game_2eproto}, {}};

static void InitDefaultsscc_info_StartFightNTF_C2Game_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_StartFightNTF_default_instance_;
    new (ptr) ::msg::StartFightNTF();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::StartFightNTF::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartFightNTF_C2Game_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StartFightNTF_C2Game_2eproto}, {}};

static void InitDefaultsscc_info_StartPVEFightAck_C2Game_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_StartPVEFightAck_default_instance_;
    new (ptr) ::msg::StartPVEFightAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::StartPVEFightAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartPVEFightAck_C2Game_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StartPVEFightAck_C2Game_2eproto}, {}};

static void InitDefaultsscc_info_StartPVEFightReq_C2Game_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_StartPVEFightReq_default_instance_;
    new (ptr) ::msg::StartPVEFightReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::StartPVEFightReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StartPVEFightReq_C2Game_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StartPVEFightReq_C2Game_2eproto}, {
      &scc_info_PVEFightInfo_C2Game_2eproto.base,}};

static void InitDefaultsscc_info_StartPVPFightAck_C2Game_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_StartPVPFightAck_default_instance_;
    new (ptr) ::msg::StartPVPFightAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::StartPVPFightAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartPVPFightAck_C2Game_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StartPVPFightAck_C2Game_2eproto}, {}};

static void InitDefaultsscc_info_StartPVPFightReq_C2Game_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_StartPVPFightReq_default_instance_;
    new (ptr) ::msg::StartPVPFightReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::StartPVPFightReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartPVPFightReq_C2Game_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StartPVPFightReq_C2Game_2eproto}, {}};

static void InitDefaultsscc_info_StopPVPMatchAck_C2Game_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_StopPVPMatchAck_default_instance_;
    new (ptr) ::msg::StopPVPMatchAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::StopPVPMatchAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopPVPMatchAck_C2Game_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StopPVPMatchAck_C2Game_2eproto}, {}};

static void InitDefaultsscc_info_StopPVPMatchReq_C2Game_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_StopPVPMatchReq_default_instance_;
    new (ptr) ::msg::StopPVPMatchReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::StopPVPMatchReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopPVPMatchReq_C2Game_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StopPVPMatchReq_C2Game_2eproto}, {}};

namespace msg {
bool LoginReq_MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 200001:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> LoginReq_MsgId_strings[2] = {};

static const char LoginReq_MsgId_names[] =
  "Id"
  "None";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry LoginReq_MsgId_entries[] = {
  { {LoginReq_MsgId_names + 0, 2}, 200001 },
  { {LoginReq_MsgId_names + 2, 4}, 0 },
};

static const int LoginReq_MsgId_entries_by_number[] = {
  1, // 0 -> None
  0, // 200001 -> Id
};

const std::string& LoginReq_MsgId_Name(
    LoginReq_MsgId value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          LoginReq_MsgId_entries,
          LoginReq_MsgId_entries_by_number,
          2, LoginReq_MsgId_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      LoginReq_MsgId_entries,
      LoginReq_MsgId_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     LoginReq_MsgId_strings[idx].get();
}
bool LoginReq_MsgId_Parse(
    const std::string& name, LoginReq_MsgId* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      LoginReq_MsgId_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<LoginReq_MsgId>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LoginReq_MsgId LoginReq::None;
constexpr LoginReq_MsgId LoginReq::Id;
constexpr LoginReq_MsgId LoginReq::MsgId_MIN;
constexpr LoginReq_MsgId LoginReq::MsgId_MAX;
constexpr int LoginReq::MsgId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool LoginAck_MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 200002:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> LoginAck_MsgId_strings[2] = {};

static const char LoginAck_MsgId_names[] =
  "Id"
  "None";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry LoginAck_MsgId_entries[] = {
  { {LoginAck_MsgId_names + 0, 2}, 200002 },
  { {LoginAck_MsgId_names + 2, 4}, 0 },
};

static const int LoginAck_MsgId_entries_by_number[] = {
  1, // 0 -> None
  0, // 200002 -> Id
};

const std::string& LoginAck_MsgId_Name(
    LoginAck_MsgId value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          LoginAck_MsgId_entries,
          LoginAck_MsgId_entries_by_number,
          2, LoginAck_MsgId_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      LoginAck_MsgId_entries,
      LoginAck_MsgId_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     LoginAck_MsgId_strings[idx].get();
}
bool LoginAck_MsgId_Parse(
    const std::string& name, LoginAck_MsgId* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      LoginAck_MsgId_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<LoginAck_MsgId>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LoginAck_MsgId LoginAck::None;
constexpr LoginAck_MsgId LoginAck::Id;
constexpr LoginAck_MsgId LoginAck::MsgId_MIN;
constexpr LoginAck_MsgId LoginAck::MsgId_MAX;
constexpr int LoginAck::MsgId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool EnterGameReq_MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 200003:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> EnterGameReq_MsgId_strings[2] = {};

static const char EnterGameReq_MsgId_names[] =
  "Id"
  "None";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry EnterGameReq_MsgId_entries[] = {
  { {EnterGameReq_MsgId_names + 0, 2}, 200003 },
  { {EnterGameReq_MsgId_names + 2, 4}, 0 },
};

static const int EnterGameReq_MsgId_entries_by_number[] = {
  1, // 0 -> None
  0, // 200003 -> Id
};

const std::string& EnterGameReq_MsgId_Name(
    EnterGameReq_MsgId value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          EnterGameReq_MsgId_entries,
          EnterGameReq_MsgId_entries_by_number,
          2, EnterGameReq_MsgId_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      EnterGameReq_MsgId_entries,
      EnterGameReq_MsgId_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     EnterGameReq_MsgId_strings[idx].get();
}
bool EnterGameReq_MsgId_Parse(
    const std::string& name, EnterGameReq_MsgId* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      EnterGameReq_MsgId_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<EnterGameReq_MsgId>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr EnterGameReq_MsgId EnterGameReq::None;
constexpr EnterGameReq_MsgId EnterGameReq::Id;
constexpr EnterGameReq_MsgId EnterGameReq::MsgId_MIN;
constexpr EnterGameReq_MsgId EnterGameReq::MsgId_MAX;
constexpr int EnterGameReq::MsgId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool EnterGameAck_MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 200004:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> EnterGameAck_MsgId_strings[2] = {};

static const char EnterGameAck_MsgId_names[] =
  "Id"
  "None";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry EnterGameAck_MsgId_entries[] = {
  { {EnterGameAck_MsgId_names + 0, 2}, 200004 },
  { {EnterGameAck_MsgId_names + 2, 4}, 0 },
};

static const int EnterGameAck_MsgId_entries_by_number[] = {
  1, // 0 -> None
  0, // 200004 -> Id
};

const std::string& EnterGameAck_MsgId_Name(
    EnterGameAck_MsgId value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          EnterGameAck_MsgId_entries,
          EnterGameAck_MsgId_entries_by_number,
          2, EnterGameAck_MsgId_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      EnterGameAck_MsgId_entries,
      EnterGameAck_MsgId_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     EnterGameAck_MsgId_strings[idx].get();
}
bool EnterGameAck_MsgId_Parse(
    const std::string& name, EnterGameAck_MsgId* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      EnterGameAck_MsgId_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<EnterGameAck_MsgId>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr EnterGameAck_MsgId EnterGameAck::None;
constexpr EnterGameAck_MsgId EnterGameAck::Id;
constexpr EnterGameAck_MsgId EnterGameAck::MsgId_MIN;
constexpr EnterGameAck_MsgId EnterGameAck::MsgId_MAX;
constexpr int EnterGameAck::MsgId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool CreateRoleReq_MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 200005:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CreateRoleReq_MsgId_strings[2] = {};

static const char CreateRoleReq_MsgId_names[] =
  "Id"
  "None";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CreateRoleReq_MsgId_entries[] = {
  { {CreateRoleReq_MsgId_names + 0, 2}, 200005 },
  { {CreateRoleReq_MsgId_names + 2, 4}, 0 },
};

static const int CreateRoleReq_MsgId_entries_by_number[] = {
  1, // 0 -> None
  0, // 200005 -> Id
};

const std::string& CreateRoleReq_MsgId_Name(
    CreateRoleReq_MsgId value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CreateRoleReq_MsgId_entries,
          CreateRoleReq_MsgId_entries_by_number,
          2, CreateRoleReq_MsgId_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CreateRoleReq_MsgId_entries,
      CreateRoleReq_MsgId_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CreateRoleReq_MsgId_strings[idx].get();
}
bool CreateRoleReq_MsgId_Parse(
    const std::string& name, CreateRoleReq_MsgId* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CreateRoleReq_MsgId_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<CreateRoleReq_MsgId>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CreateRoleReq_MsgId CreateRoleReq::None;
constexpr CreateRoleReq_MsgId CreateRoleReq::Id;
constexpr CreateRoleReq_MsgId CreateRoleReq::MsgId_MIN;
constexpr CreateRoleReq_MsgId CreateRoleReq::MsgId_MAX;
constexpr int CreateRoleReq::MsgId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool CreateRoleAck_MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 200006:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CreateRoleAck_MsgId_strings[2] = {};

static const char CreateRoleAck_MsgId_names[] =
  "Id"
  "None";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CreateRoleAck_MsgId_entries[] = {
  { {CreateRoleAck_MsgId_names + 0, 2}, 200006 },
  { {CreateRoleAck_MsgId_names + 2, 4}, 0 },
};

static const int CreateRoleAck_MsgId_entries_by_number[] = {
  1, // 0 -> None
  0, // 200006 -> Id
};

const std::string& CreateRoleAck_MsgId_Name(
    CreateRoleAck_MsgId value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CreateRoleAck_MsgId_entries,
          CreateRoleAck_MsgId_entries_by_number,
          2, CreateRoleAck_MsgId_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CreateRoleAck_MsgId_entries,
      CreateRoleAck_MsgId_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CreateRoleAck_MsgId_strings[idx].get();
}
bool CreateRoleAck_MsgId_Parse(
    const std::string& name, CreateRoleAck_MsgId* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CreateRoleAck_MsgId_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<CreateRoleAck_MsgId>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CreateRoleAck_MsgId CreateRoleAck::None;
constexpr CreateRoleAck_MsgId CreateRoleAck::Id;
constexpr CreateRoleAck_MsgId CreateRoleAck::MsgId_MIN;
constexpr CreateRoleAck_MsgId CreateRoleAck::MsgId_MAX;
constexpr int CreateRoleAck::MsgId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool ModifyRoleDataReq_MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 200007:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ModifyRoleDataReq_MsgId_strings[2] = {};

static const char ModifyRoleDataReq_MsgId_names[] =
  "Id"
  "None";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ModifyRoleDataReq_MsgId_entries[] = {
  { {ModifyRoleDataReq_MsgId_names + 0, 2}, 200007 },
  { {ModifyRoleDataReq_MsgId_names + 2, 4}, 0 },
};

static const int ModifyRoleDataReq_MsgId_entries_by_number[] = {
  1, // 0 -> None
  0, // 200007 -> Id
};

const std::string& ModifyRoleDataReq_MsgId_Name(
    ModifyRoleDataReq_MsgId value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ModifyRoleDataReq_MsgId_entries,
          ModifyRoleDataReq_MsgId_entries_by_number,
          2, ModifyRoleDataReq_MsgId_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ModifyRoleDataReq_MsgId_entries,
      ModifyRoleDataReq_MsgId_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ModifyRoleDataReq_MsgId_strings[idx].get();
}
bool ModifyRoleDataReq_MsgId_Parse(
    const std::string& name, ModifyRoleDataReq_MsgId* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ModifyRoleDataReq_MsgId_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<ModifyRoleDataReq_MsgId>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ModifyRoleDataReq_MsgId ModifyRoleDataReq::None;
constexpr ModifyRoleDataReq_MsgId ModifyRoleDataReq::Id;
constexpr ModifyRoleDataReq_MsgId ModifyRoleDataReq::MsgId_MIN;
constexpr ModifyRoleDataReq_MsgId ModifyRoleDataReq::MsgId_MAX;
constexpr int ModifyRoleDataReq::MsgId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool ModifyRoleDataAck_MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 200008:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ModifyRoleDataAck_MsgId_strings[2] = {};

static const char ModifyRoleDataAck_MsgId_names[] =
  "Id"
  "None";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ModifyRoleDataAck_MsgId_entries[] = {
  { {ModifyRoleDataAck_MsgId_names + 0, 2}, 200008 },
  { {ModifyRoleDataAck_MsgId_names + 2, 4}, 0 },
};

static const int ModifyRoleDataAck_MsgId_entries_by_number[] = {
  1, // 0 -> None
  0, // 200008 -> Id
};

const std::string& ModifyRoleDataAck_MsgId_Name(
    ModifyRoleDataAck_MsgId value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ModifyRoleDataAck_MsgId_entries,
          ModifyRoleDataAck_MsgId_entries_by_number,
          2, ModifyRoleDataAck_MsgId_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ModifyRoleDataAck_MsgId_entries,
      ModifyRoleDataAck_MsgId_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ModifyRoleDataAck_MsgId_strings[idx].get();
}
bool ModifyRoleDataAck_MsgId_Parse(
    const std::string& name, ModifyRoleDataAck_MsgId* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ModifyRoleDataAck_MsgId_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<ModifyRoleDataAck_MsgId>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ModifyRoleDataAck_MsgId ModifyRoleDataAck::None;
constexpr ModifyRoleDataAck_MsgId ModifyRoleDataAck::Id;
constexpr ModifyRoleDataAck_MsgId ModifyRoleDataAck::MsgId_MIN;
constexpr ModifyRoleDataAck_MsgId ModifyRoleDataAck::MsgId_MAX;
constexpr int ModifyRoleDataAck::MsgId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool ExitGameNtf_MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 200010:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ExitGameNtf_MsgId_strings[2] = {};

static const char ExitGameNtf_MsgId_names[] =
  "Id"
  "None";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ExitGameNtf_MsgId_entries[] = {
  { {ExitGameNtf_MsgId_names + 0, 2}, 200010 },
  { {ExitGameNtf_MsgId_names + 2, 4}, 0 },
};

static const int ExitGameNtf_MsgId_entries_by_number[] = {
  1, // 0 -> None
  0, // 200010 -> Id
};

const std::string& ExitGameNtf_MsgId_Name(
    ExitGameNtf_MsgId value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ExitGameNtf_MsgId_entries,
          ExitGameNtf_MsgId_entries_by_number,
          2, ExitGameNtf_MsgId_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ExitGameNtf_MsgId_entries,
      ExitGameNtf_MsgId_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ExitGameNtf_MsgId_strings[idx].get();
}
bool ExitGameNtf_MsgId_Parse(
    const std::string& name, ExitGameNtf_MsgId* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ExitGameNtf_MsgId_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<ExitGameNtf_MsgId>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ExitGameNtf_MsgId ExitGameNtf::None;
constexpr ExitGameNtf_MsgId ExitGameNtf::Id;
constexpr ExitGameNtf_MsgId ExitGameNtf::MsgId_MIN;
constexpr ExitGameNtf_MsgId ExitGameNtf::MsgId_MAX;
constexpr int ExitGameNtf::MsgId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool StartPVEFightReq_MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 200011:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> StartPVEFightReq_MsgId_strings[2] = {};

static const char StartPVEFightReq_MsgId_names[] =
  "Id"
  "None";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry StartPVEFightReq_MsgId_entries[] = {
  { {StartPVEFightReq_MsgId_names + 0, 2}, 200011 },
  { {StartPVEFightReq_MsgId_names + 2, 4}, 0 },
};

static const int StartPVEFightReq_MsgId_entries_by_number[] = {
  1, // 0 -> None
  0, // 200011 -> Id
};

const std::string& StartPVEFightReq_MsgId_Name(
    StartPVEFightReq_MsgId value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          StartPVEFightReq_MsgId_entries,
          StartPVEFightReq_MsgId_entries_by_number,
          2, StartPVEFightReq_MsgId_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      StartPVEFightReq_MsgId_entries,
      StartPVEFightReq_MsgId_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     StartPVEFightReq_MsgId_strings[idx].get();
}
bool StartPVEFightReq_MsgId_Parse(
    const std::string& name, StartPVEFightReq_MsgId* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      StartPVEFightReq_MsgId_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<StartPVEFightReq_MsgId>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr StartPVEFightReq_MsgId StartPVEFightReq::None;
constexpr StartPVEFightReq_MsgId StartPVEFightReq::Id;
constexpr StartPVEFightReq_MsgId StartPVEFightReq::MsgId_MIN;
constexpr StartPVEFightReq_MsgId StartPVEFightReq::MsgId_MAX;
constexpr int StartPVEFightReq::MsgId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool StartPVEFightAck_MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 200012:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> StartPVEFightAck_MsgId_strings[2] = {};

static const char StartPVEFightAck_MsgId_names[] =
  "Id"
  "None";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry StartPVEFightAck_MsgId_entries[] = {
  { {StartPVEFightAck_MsgId_names + 0, 2}, 200012 },
  { {StartPVEFightAck_MsgId_names + 2, 4}, 0 },
};

static const int StartPVEFightAck_MsgId_entries_by_number[] = {
  1, // 0 -> None
  0, // 200012 -> Id
};

const std::string& StartPVEFightAck_MsgId_Name(
    StartPVEFightAck_MsgId value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          StartPVEFightAck_MsgId_entries,
          StartPVEFightAck_MsgId_entries_by_number,
          2, StartPVEFightAck_MsgId_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      StartPVEFightAck_MsgId_entries,
      StartPVEFightAck_MsgId_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     StartPVEFightAck_MsgId_strings[idx].get();
}
bool StartPVEFightAck_MsgId_Parse(
    const std::string& name, StartPVEFightAck_MsgId* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      StartPVEFightAck_MsgId_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<StartPVEFightAck_MsgId>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr StartPVEFightAck_MsgId StartPVEFightAck::None;
constexpr StartPVEFightAck_MsgId StartPVEFightAck::Id;
constexpr StartPVEFightAck_MsgId StartPVEFightAck::MsgId_MIN;
constexpr StartPVEFightAck_MsgId StartPVEFightAck::MsgId_MAX;
constexpr int StartPVEFightAck::MsgId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool StartPVPFightReq_MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 200013:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> StartPVPFightReq_MsgId_strings[2] = {};

static const char StartPVPFightReq_MsgId_names[] =
  "Id"
  "None";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry StartPVPFightReq_MsgId_entries[] = {
  { {StartPVPFightReq_MsgId_names + 0, 2}, 200013 },
  { {StartPVPFightReq_MsgId_names + 2, 4}, 0 },
};

static const int StartPVPFightReq_MsgId_entries_by_number[] = {
  1, // 0 -> None
  0, // 200013 -> Id
};

const std::string& StartPVPFightReq_MsgId_Name(
    StartPVPFightReq_MsgId value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          StartPVPFightReq_MsgId_entries,
          StartPVPFightReq_MsgId_entries_by_number,
          2, StartPVPFightReq_MsgId_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      StartPVPFightReq_MsgId_entries,
      StartPVPFightReq_MsgId_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     StartPVPFightReq_MsgId_strings[idx].get();
}
bool StartPVPFightReq_MsgId_Parse(
    const std::string& name, StartPVPFightReq_MsgId* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      StartPVPFightReq_MsgId_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<StartPVPFightReq_MsgId>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr StartPVPFightReq_MsgId StartPVPFightReq::None;
constexpr StartPVPFightReq_MsgId StartPVPFightReq::Id;
constexpr StartPVPFightReq_MsgId StartPVPFightReq::MsgId_MIN;
constexpr StartPVPFightReq_MsgId StartPVPFightReq::MsgId_MAX;
constexpr int StartPVPFightReq::MsgId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool StartPVPFightAck_MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 200014:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> StartPVPFightAck_MsgId_strings[2] = {};

static const char StartPVPFightAck_MsgId_names[] =
  "Id"
  "None";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry StartPVPFightAck_MsgId_entries[] = {
  { {StartPVPFightAck_MsgId_names + 0, 2}, 200014 },
  { {StartPVPFightAck_MsgId_names + 2, 4}, 0 },
};

static const int StartPVPFightAck_MsgId_entries_by_number[] = {
  1, // 0 -> None
  0, // 200014 -> Id
};

const std::string& StartPVPFightAck_MsgId_Name(
    StartPVPFightAck_MsgId value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          StartPVPFightAck_MsgId_entries,
          StartPVPFightAck_MsgId_entries_by_number,
          2, StartPVPFightAck_MsgId_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      StartPVPFightAck_MsgId_entries,
      StartPVPFightAck_MsgId_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     StartPVPFightAck_MsgId_strings[idx].get();
}
bool StartPVPFightAck_MsgId_Parse(
    const std::string& name, StartPVPFightAck_MsgId* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      StartPVPFightAck_MsgId_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<StartPVPFightAck_MsgId>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr StartPVPFightAck_MsgId StartPVPFightAck::None;
constexpr StartPVPFightAck_MsgId StartPVPFightAck::Id;
constexpr StartPVPFightAck_MsgId StartPVPFightAck::MsgId_MIN;
constexpr StartPVPFightAck_MsgId StartPVPFightAck::MsgId_MAX;
constexpr int StartPVPFightAck::MsgId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool StopPVPMatchReq_MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 200015:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> StopPVPMatchReq_MsgId_strings[2] = {};

static const char StopPVPMatchReq_MsgId_names[] =
  "Id"
  "None";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry StopPVPMatchReq_MsgId_entries[] = {
  { {StopPVPMatchReq_MsgId_names + 0, 2}, 200015 },
  { {StopPVPMatchReq_MsgId_names + 2, 4}, 0 },
};

static const int StopPVPMatchReq_MsgId_entries_by_number[] = {
  1, // 0 -> None
  0, // 200015 -> Id
};

const std::string& StopPVPMatchReq_MsgId_Name(
    StopPVPMatchReq_MsgId value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          StopPVPMatchReq_MsgId_entries,
          StopPVPMatchReq_MsgId_entries_by_number,
          2, StopPVPMatchReq_MsgId_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      StopPVPMatchReq_MsgId_entries,
      StopPVPMatchReq_MsgId_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     StopPVPMatchReq_MsgId_strings[idx].get();
}
bool StopPVPMatchReq_MsgId_Parse(
    const std::string& name, StopPVPMatchReq_MsgId* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      StopPVPMatchReq_MsgId_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<StopPVPMatchReq_MsgId>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr StopPVPMatchReq_MsgId StopPVPMatchReq::None;
constexpr StopPVPMatchReq_MsgId StopPVPMatchReq::Id;
constexpr StopPVPMatchReq_MsgId StopPVPMatchReq::MsgId_MIN;
constexpr StopPVPMatchReq_MsgId StopPVPMatchReq::MsgId_MAX;
constexpr int StopPVPMatchReq::MsgId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool StopPVPMatchAck_MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 200016:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> StopPVPMatchAck_MsgId_strings[2] = {};

static const char StopPVPMatchAck_MsgId_names[] =
  "Id"
  "None";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry StopPVPMatchAck_MsgId_entries[] = {
  { {StopPVPMatchAck_MsgId_names + 0, 2}, 200016 },
  { {StopPVPMatchAck_MsgId_names + 2, 4}, 0 },
};

static const int StopPVPMatchAck_MsgId_entries_by_number[] = {
  1, // 0 -> None
  0, // 200016 -> Id
};

const std::string& StopPVPMatchAck_MsgId_Name(
    StopPVPMatchAck_MsgId value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          StopPVPMatchAck_MsgId_entries,
          StopPVPMatchAck_MsgId_entries_by_number,
          2, StopPVPMatchAck_MsgId_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      StopPVPMatchAck_MsgId_entries,
      StopPVPMatchAck_MsgId_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     StopPVPMatchAck_MsgId_strings[idx].get();
}
bool StopPVPMatchAck_MsgId_Parse(
    const std::string& name, StopPVPMatchAck_MsgId* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      StopPVPMatchAck_MsgId_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<StopPVPMatchAck_MsgId>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr StopPVPMatchAck_MsgId StopPVPMatchAck::None;
constexpr StopPVPMatchAck_MsgId StopPVPMatchAck::Id;
constexpr StopPVPMatchAck_MsgId StopPVPMatchAck::MsgId_MIN;
constexpr StopPVPMatchAck_MsgId StopPVPMatchAck::MsgId_MAX;
constexpr int StopPVPMatchAck::MsgId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool StartFightNTF_MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 200018:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> StartFightNTF_MsgId_strings[2] = {};

static const char StartFightNTF_MsgId_names[] =
  "Id"
  "None";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry StartFightNTF_MsgId_entries[] = {
  { {StartFightNTF_MsgId_names + 0, 2}, 200018 },
  { {StartFightNTF_MsgId_names + 2, 4}, 0 },
};

static const int StartFightNTF_MsgId_entries_by_number[] = {
  1, // 0 -> None
  0, // 200018 -> Id
};

const std::string& StartFightNTF_MsgId_Name(
    StartFightNTF_MsgId value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          StartFightNTF_MsgId_entries,
          StartFightNTF_MsgId_entries_by_number,
          2, StartFightNTF_MsgId_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      StartFightNTF_MsgId_entries,
      StartFightNTF_MsgId_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     StartFightNTF_MsgId_strings[idx].get();
}
bool StartFightNTF_MsgId_Parse(
    const std::string& name, StartFightNTF_MsgId* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      StartFightNTF_MsgId_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<StartFightNTF_MsgId>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr StartFightNTF_MsgId StartFightNTF::None;
constexpr StartFightNTF_MsgId StartFightNTF::Id;
constexpr StartFightNTF_MsgId StartFightNTF::MsgId_MIN;
constexpr StartFightNTF_MsgId StartFightNTF::MsgId_MAX;
constexpr int StartFightNTF::MsgId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool PushRoleData_MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 200020:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PushRoleData_MsgId_strings[2] = {};

static const char PushRoleData_MsgId_names[] =
  "Id"
  "None";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PushRoleData_MsgId_entries[] = {
  { {PushRoleData_MsgId_names + 0, 2}, 200020 },
  { {PushRoleData_MsgId_names + 2, 4}, 0 },
};

static const int PushRoleData_MsgId_entries_by_number[] = {
  1, // 0 -> None
  0, // 200020 -> Id
};

const std::string& PushRoleData_MsgId_Name(
    PushRoleData_MsgId value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PushRoleData_MsgId_entries,
          PushRoleData_MsgId_entries_by_number,
          2, PushRoleData_MsgId_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PushRoleData_MsgId_entries,
      PushRoleData_MsgId_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PushRoleData_MsgId_strings[idx].get();
}
bool PushRoleData_MsgId_Parse(
    const std::string& name, PushRoleData_MsgId* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PushRoleData_MsgId_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<PushRoleData_MsgId>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PushRoleData_MsgId PushRoleData::None;
constexpr PushRoleData_MsgId PushRoleData::Id;
constexpr PushRoleData_MsgId PushRoleData::MsgId_MIN;
constexpr PushRoleData_MsgId PushRoleData::MsgId_MAX;
constexpr int PushRoleData::MsgId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void PlayerAccountInfo::InitAsDefaultInstance() {
}
class PlayerAccountInfo::_Internal {
 public:
};

PlayerAccountInfo::PlayerAccountInfo()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.PlayerAccountInfo)
}
PlayerAccountInfo::PlayerAccountInfo(const PlayerAccountInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      arrroleids_(from.arrroleids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  playerid_ = from.playerid_;
  // @@protoc_insertion_point(copy_constructor:msg.PlayerAccountInfo)
}

void PlayerAccountInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayerAccountInfo_C2Game_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playerid_ = PROTOBUF_LONGLONG(0);
}

PlayerAccountInfo::~PlayerAccountInfo() {
  // @@protoc_insertion_point(destructor:msg.PlayerAccountInfo)
  SharedDtor();
}

void PlayerAccountInfo::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PlayerAccountInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerAccountInfo& PlayerAccountInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerAccountInfo_C2Game_2eproto.base);
  return *internal_default_instance();
}


void PlayerAccountInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.PlayerAccountInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arrroleids_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playerid_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* PlayerAccountInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 playerID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 arrRoleIds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_arrroleids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_arrroleids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerAccountInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PlayerAccountInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 playerID = 1;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_playerid(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.PlayerAccountInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated int64 arrRoleIds = 3;
  {
    int byte_size = _arrroleids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_arrroleids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PlayerAccountInfo)
  return target;
}

size_t PlayerAccountInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.PlayerAccountInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 arrRoleIds = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->arrroleids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _arrroleids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int64 playerID = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_playerid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerAccountInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PlayerAccountInfo*>(
      &from));
}

void PlayerAccountInfo::MergeFrom(const PlayerAccountInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.PlayerAccountInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arrroleids_.MergeFrom(from.arrroleids_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
}

void PlayerAccountInfo::CopyFrom(const PlayerAccountInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.PlayerAccountInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerAccountInfo::IsInitialized() const {
  return true;
}

void PlayerAccountInfo::InternalSwap(PlayerAccountInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  arrroleids_.InternalSwap(&other->arrroleids_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(playerid_, other->playerid_);
}

std::string PlayerAccountInfo::GetTypeName() const {
  return "msg.PlayerAccountInfo";
}


// ===================================================================

void RoleDetailedInfo::InitAsDefaultInstance() {
}
class RoleDetailedInfo::_Internal {
 public:
};

RoleDetailedInfo::RoleDetailedInfo()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.RoleDetailedInfo)
}
RoleDetailedInfo::RoleDetailedInfo(const RoleDetailedInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  jsondata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_jsondata().empty()) {
    jsondata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.jsondata_);
  }
  ::memcpy(&roleid_, &from.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&occupation_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(occupation_));
  // @@protoc_insertion_point(copy_constructor:msg.RoleDetailedInfo)
}

void RoleDetailedInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoleDetailedInfo_C2Game_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  jsondata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&occupation_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(occupation_));
}

RoleDetailedInfo::~RoleDetailedInfo() {
  // @@protoc_insertion_point(destructor:msg.RoleDetailedInfo)
  SharedDtor();
}

void RoleDetailedInfo::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  jsondata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RoleDetailedInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoleDetailedInfo& RoleDetailedInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoleDetailedInfo_C2Game_2eproto.base);
  return *internal_default_instance();
}


void RoleDetailedInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.RoleDetailedInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  jsondata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&occupation_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(occupation_));
  _internal_metadata_.Clear();
}

const char* RoleDetailedInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 roleId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lv = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          lv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 occupation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          occupation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string jsonData = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_jsondata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoleDetailedInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.RoleDetailedInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 roleId = 1;
  if (this->roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_roleid(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.RoleDetailedInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 lv = 3;
  if (this->lv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_lv(), target);
  }

  // int32 occupation = 4;
  if (this->occupation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_occupation(), target);
  }

  // string jsonData = 5;
  if (this->jsondata().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_jsondata().data(), static_cast<int>(this->_internal_jsondata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.RoleDetailedInfo.jsonData");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_jsondata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.RoleDetailedInfo)
  return target;
}

size_t RoleDetailedInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.RoleDetailedInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string jsonData = 5;
  if (this->jsondata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_jsondata());
  }

  // int64 roleId = 1;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_roleid());
  }

  // int32 lv = 3;
  if (this->lv() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lv());
  }

  // int32 occupation = 4;
  if (this->occupation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_occupation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoleDetailedInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RoleDetailedInfo*>(
      &from));
}

void RoleDetailedInfo::MergeFrom(const RoleDetailedInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.RoleDetailedInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.jsondata().size() > 0) {

    jsondata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.jsondata_);
  }
  if (from.roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from.lv() != 0) {
    _internal_set_lv(from._internal_lv());
  }
  if (from.occupation() != 0) {
    _internal_set_occupation(from._internal_occupation());
  }
}

void RoleDetailedInfo::CopyFrom(const RoleDetailedInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.RoleDetailedInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleDetailedInfo::IsInitialized() const {
  return true;
}

void RoleDetailedInfo::InternalSwap(RoleDetailedInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  jsondata_.Swap(&other->jsondata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(roleid_, other->roleid_);
  swap(lv_, other->lv_);
  swap(occupation_, other->occupation_);
}

std::string RoleDetailedInfo::GetTypeName() const {
  return "msg.RoleDetailedInfo";
}


// ===================================================================

void RoleSimpleInfo::InitAsDefaultInstance() {
}
class RoleSimpleInfo::_Internal {
 public:
};

RoleSimpleInfo::RoleSimpleInfo()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.RoleSimpleInfo)
}
RoleSimpleInfo::RoleSimpleInfo(const RoleSimpleInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  jsondata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_jsondata().empty()) {
    jsondata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.jsondata_);
  }
  ::memcpy(&roleid_, &from.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&occupation_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(occupation_));
  // @@protoc_insertion_point(copy_constructor:msg.RoleSimpleInfo)
}

void RoleSimpleInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoleSimpleInfo_C2Game_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  jsondata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&occupation_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(occupation_));
}

RoleSimpleInfo::~RoleSimpleInfo() {
  // @@protoc_insertion_point(destructor:msg.RoleSimpleInfo)
  SharedDtor();
}

void RoleSimpleInfo::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  jsondata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RoleSimpleInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoleSimpleInfo& RoleSimpleInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoleSimpleInfo_C2Game_2eproto.base);
  return *internal_default_instance();
}


void RoleSimpleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.RoleSimpleInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  jsondata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&occupation_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(occupation_));
  _internal_metadata_.Clear();
}

const char* RoleSimpleInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 roleId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lv = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          lv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 occupation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          occupation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string jsonData = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_jsondata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoleSimpleInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.RoleSimpleInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 roleId = 1;
  if (this->roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_roleid(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.RoleSimpleInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 lv = 3;
  if (this->lv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_lv(), target);
  }

  // int32 occupation = 4;
  if (this->occupation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_occupation(), target);
  }

  // string jsonData = 5;
  if (this->jsondata().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_jsondata().data(), static_cast<int>(this->_internal_jsondata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.RoleSimpleInfo.jsonData");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_jsondata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.RoleSimpleInfo)
  return target;
}

size_t RoleSimpleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.RoleSimpleInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string jsonData = 5;
  if (this->jsondata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_jsondata());
  }

  // int64 roleId = 1;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_roleid());
  }

  // int32 lv = 3;
  if (this->lv() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lv());
  }

  // int32 occupation = 4;
  if (this->occupation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_occupation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoleSimpleInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RoleSimpleInfo*>(
      &from));
}

void RoleSimpleInfo::MergeFrom(const RoleSimpleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.RoleSimpleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.jsondata().size() > 0) {

    jsondata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.jsondata_);
  }
  if (from.roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from.lv() != 0) {
    _internal_set_lv(from._internal_lv());
  }
  if (from.occupation() != 0) {
    _internal_set_occupation(from._internal_occupation());
  }
}

void RoleSimpleInfo::CopyFrom(const RoleSimpleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.RoleSimpleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleSimpleInfo::IsInitialized() const {
  return true;
}

void RoleSimpleInfo::InternalSwap(RoleSimpleInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  jsondata_.Swap(&other->jsondata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(roleid_, other->roleid_);
  swap(lv_, other->lv_);
  swap(occupation_, other->occupation_);
}

std::string RoleSimpleInfo::GetTypeName() const {
  return "msg.RoleSimpleInfo";
}


// ===================================================================

void LoginReq::InitAsDefaultInstance() {
}
class LoginReq::_Internal {
 public:
};

LoginReq::LoginReq()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.LoginReq)
}
LoginReq::LoginReq(const LoginReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  playerid_ = from.playerid_;
  // @@protoc_insertion_point(copy_constructor:msg.LoginReq)
}

void LoginReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoginReq_C2Game_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playerid_ = PROTOBUF_LONGLONG(0);
}

LoginReq::~LoginReq() {
  // @@protoc_insertion_point(destructor:msg.LoginReq)
  SharedDtor();
}

void LoginReq::SharedDtor() {
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoginReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginReq& LoginReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginReq_C2Game_2eproto.base);
  return *internal_default_instance();
}


void LoginReq::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.LoginReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  playerid_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* LoginReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string account = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 playerID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.LoginReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.LoginReq.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // string account = 2;
  if (this->account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account().data(), static_cast<int>(this->_internal_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.LoginReq.account");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_account(), target);
  }

  // int64 playerID = 3;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_playerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.LoginReq)
  return target;
}

size_t LoginReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.LoginReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // string account = 2;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account());
  }

  // int64 playerID = 3;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_playerid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LoginReq*>(
      &from));
}

void LoginReq::MergeFrom(const LoginReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.LoginReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
}

void LoginReq::CopyFrom(const LoginReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.LoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginReq::IsInitialized() const {
  return true;
}

void LoginReq::InternalSwap(LoginReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  account_.Swap(&other->account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(playerid_, other->playerid_);
}

std::string LoginReq::GetTypeName() const {
  return "msg.LoginReq";
}


// ===================================================================

void LoginAck::InitAsDefaultInstance() {
}
class LoginAck::_Internal {
 public:
};

LoginAck::LoginAck()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.LoginAck)
}
LoginAck::LoginAck(const LoginAck& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      infos_(from.infos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:msg.LoginAck)
}

void LoginAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoginAck_C2Game_2eproto.base);
  code_ = 0;
}

LoginAck::~LoginAck() {
  // @@protoc_insertion_point(destructor:msg.LoginAck)
  SharedDtor();
}

void LoginAck::SharedDtor() {
}

void LoginAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginAck& LoginAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginAck_C2Game_2eproto.base);
  return *internal_default_instance();
}


void LoginAck::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.LoginAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infos_.Clear();
  code_ = 0;
  _internal_metadata_.Clear();
}

const char* LoginAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .msg.PlayerAccountInfo infos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.LoginAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // repeated .msg.PlayerAccountInfo infos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.LoginAck)
  return target;
}

size_t LoginAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.LoginAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.PlayerAccountInfo infos = 2;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginAck::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LoginAck*>(
      &from));
}

void LoginAck::MergeFrom(const LoginAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.LoginAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infos_.MergeFrom(from.infos_);
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void LoginAck::CopyFrom(const LoginAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.LoginAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginAck::IsInitialized() const {
  return true;
}

void LoginAck::InternalSwap(LoginAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  infos_.InternalSwap(&other->infos_);
  swap(code_, other->code_);
}

std::string LoginAck::GetTypeName() const {
  return "msg.LoginAck";
}


// ===================================================================

void EnterGameReq::InitAsDefaultInstance() {
}
class EnterGameReq::_Internal {
 public:
};

EnterGameReq::EnterGameReq()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.EnterGameReq)
}
EnterGameReq::EnterGameReq(const EnterGameReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&roleid_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(roleid_));
  // @@protoc_insertion_point(copy_constructor:msg.EnterGameReq)
}

void EnterGameReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnterGameReq_C2Game_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roleid_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(roleid_));
}

EnterGameReq::~EnterGameReq() {
  // @@protoc_insertion_point(destructor:msg.EnterGameReq)
  SharedDtor();
}

void EnterGameReq::SharedDtor() {
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EnterGameReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnterGameReq& EnterGameReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnterGameReq_C2Game_2eproto.base);
  return *internal_default_instance();
}


void EnterGameReq::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.EnterGameReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roleid_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(roleid_));
  _internal_metadata_.Clear();
}

const char* EnterGameReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 playerID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 roleID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnterGameReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.EnterGameReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.EnterGameReq.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // int64 playerID = 2;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_playerid(), target);
  }

  // int64 roleID = 3;
  if (this->roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_roleid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.EnterGameReq)
  return target;
}

size_t EnterGameReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.EnterGameReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // int64 playerID = 2;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_playerid());
  }

  // int64 roleID = 3;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_roleid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnterGameReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnterGameReq*>(
      &from));
}

void EnterGameReq::MergeFrom(const EnterGameReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.EnterGameReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
  if (from.roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
}

void EnterGameReq::CopyFrom(const EnterGameReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.EnterGameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterGameReq::IsInitialized() const {
  return true;
}

void EnterGameReq::InternalSwap(EnterGameReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(playerid_, other->playerid_);
  swap(roleid_, other->roleid_);
}

std::string EnterGameReq::GetTypeName() const {
  return "msg.EnterGameReq";
}


// ===================================================================

void EnterGameAck::InitAsDefaultInstance() {
  ::msg::_EnterGameAck_default_instance_._instance.get_mutable()->roleinfo_ = const_cast< ::msg::RoleDetailedInfo*>(
      ::msg::RoleDetailedInfo::internal_default_instance());
}
class EnterGameAck::_Internal {
 public:
  static const ::msg::RoleDetailedInfo& roleinfo(const EnterGameAck* msg);
};

const ::msg::RoleDetailedInfo&
EnterGameAck::_Internal::roleinfo(const EnterGameAck* msg) {
  return *msg->roleinfo_;
}
EnterGameAck::EnterGameAck()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.EnterGameAck)
}
EnterGameAck::EnterGameAck(const EnterGameAck& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_roleinfo()) {
    roleinfo_ = new ::msg::RoleDetailedInfo(*from.roleinfo_);
  } else {
    roleinfo_ = nullptr;
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:msg.EnterGameAck)
}

void EnterGameAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnterGameAck_C2Game_2eproto.base);
  ::memset(&roleinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&roleinfo_)) + sizeof(code_));
}

EnterGameAck::~EnterGameAck() {
  // @@protoc_insertion_point(destructor:msg.EnterGameAck)
  SharedDtor();
}

void EnterGameAck::SharedDtor() {
  if (this != internal_default_instance()) delete roleinfo_;
}

void EnterGameAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnterGameAck& EnterGameAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnterGameAck_C2Game_2eproto.base);
  return *internal_default_instance();
}


void EnterGameAck::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.EnterGameAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && roleinfo_ != nullptr) {
    delete roleinfo_;
  }
  roleinfo_ = nullptr;
  code_ = 0;
  _internal_metadata_.Clear();
}

const char* EnterGameAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .msg.RoleDetailedInfo roleinfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_roleinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnterGameAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.EnterGameAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // .msg.RoleDetailedInfo roleinfo = 2;
  if (this->has_roleinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::roleinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.EnterGameAck)
  return target;
}

size_t EnterGameAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.EnterGameAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.RoleDetailedInfo roleinfo = 2;
  if (this->has_roleinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *roleinfo_);
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnterGameAck::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EnterGameAck*>(
      &from));
}

void EnterGameAck::MergeFrom(const EnterGameAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.EnterGameAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_roleinfo()) {
    _internal_mutable_roleinfo()->::msg::RoleDetailedInfo::MergeFrom(from._internal_roleinfo());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void EnterGameAck::CopyFrom(const EnterGameAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.EnterGameAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterGameAck::IsInitialized() const {
  return true;
}

void EnterGameAck::InternalSwap(EnterGameAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(roleinfo_, other->roleinfo_);
  swap(code_, other->code_);
}

std::string EnterGameAck::GetTypeName() const {
  return "msg.EnterGameAck";
}


// ===================================================================

void CreateRoleReq::InitAsDefaultInstance() {
}
class CreateRoleReq::_Internal {
 public:
};

CreateRoleReq::CreateRoleReq()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.CreateRoleReq)
}
CreateRoleReq::CreateRoleReq(const CreateRoleReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  occupation_ = from.occupation_;
  // @@protoc_insertion_point(copy_constructor:msg.CreateRoleReq)
}

void CreateRoleReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateRoleReq_C2Game_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  occupation_ = 0;
}

CreateRoleReq::~CreateRoleReq() {
  // @@protoc_insertion_point(destructor:msg.CreateRoleReq)
  SharedDtor();
}

void CreateRoleReq::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateRoleReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateRoleReq& CreateRoleReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateRoleReq_C2Game_2eproto.base);
  return *internal_default_instance();
}


void CreateRoleReq::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CreateRoleReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  occupation_ = 0;
  _internal_metadata_.Clear();
}

const char* CreateRoleReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 occupation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          occupation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateRoleReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CreateRoleReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 occupation = 1;
  if (this->occupation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_occupation(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CreateRoleReq.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CreateRoleReq)
  return target;
}

size_t CreateRoleReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CreateRoleReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 occupation = 1;
  if (this->occupation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_occupation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateRoleReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CreateRoleReq*>(
      &from));
}

void CreateRoleReq::MergeFrom(const CreateRoleReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.CreateRoleReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.occupation() != 0) {
    _internal_set_occupation(from._internal_occupation());
  }
}

void CreateRoleReq::CopyFrom(const CreateRoleReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CreateRoleReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRoleReq::IsInitialized() const {
  return true;
}

void CreateRoleReq::InternalSwap(CreateRoleReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(occupation_, other->occupation_);
}

std::string CreateRoleReq::GetTypeName() const {
  return "msg.CreateRoleReq";
}


// ===================================================================

void CreateRoleAck::InitAsDefaultInstance() {
}
class CreateRoleAck::_Internal {
 public:
};

CreateRoleAck::CreateRoleAck()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.CreateRoleAck)
}
CreateRoleAck::CreateRoleAck(const CreateRoleAck& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&roleid_, &from.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:msg.CreateRoleAck)
}

void CreateRoleAck::SharedCtor() {
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(code_));
}

CreateRoleAck::~CreateRoleAck() {
  // @@protoc_insertion_point(destructor:msg.CreateRoleAck)
  SharedDtor();
}

void CreateRoleAck::SharedDtor() {
}

void CreateRoleAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateRoleAck& CreateRoleAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateRoleAck_C2Game_2eproto.base);
  return *internal_default_instance();
}


void CreateRoleAck::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CreateRoleAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(code_));
  _internal_metadata_.Clear();
}

const char* CreateRoleAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 roleID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateRoleAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CreateRoleAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // int64 roleID = 2;
  if (this->roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_roleid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CreateRoleAck)
  return target;
}

size_t CreateRoleAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CreateRoleAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 roleID = 2;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_roleid());
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateRoleAck::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CreateRoleAck*>(
      &from));
}

void CreateRoleAck::MergeFrom(const CreateRoleAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.CreateRoleAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void CreateRoleAck::CopyFrom(const CreateRoleAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CreateRoleAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRoleAck::IsInitialized() const {
  return true;
}

void CreateRoleAck::InternalSwap(CreateRoleAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(roleid_, other->roleid_);
  swap(code_, other->code_);
}

std::string CreateRoleAck::GetTypeName() const {
  return "msg.CreateRoleAck";
}


// ===================================================================

void ModifyRoleDataReq::InitAsDefaultInstance() {
}
class ModifyRoleDataReq::_Internal {
 public:
};

ModifyRoleDataReq::ModifyRoleDataReq()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.ModifyRoleDataReq)
}
ModifyRoleDataReq::ModifyRoleDataReq(const ModifyRoleDataReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  jsondata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_jsondata().empty()) {
    jsondata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.jsondata_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  roleid_ = from.roleid_;
  // @@protoc_insertion_point(copy_constructor:msg.ModifyRoleDataReq)
}

void ModifyRoleDataReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModifyRoleDataReq_C2Game_2eproto.base);
  jsondata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  roleid_ = PROTOBUF_LONGLONG(0);
}

ModifyRoleDataReq::~ModifyRoleDataReq() {
  // @@protoc_insertion_point(destructor:msg.ModifyRoleDataReq)
  SharedDtor();
}

void ModifyRoleDataReq::SharedDtor() {
  jsondata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModifyRoleDataReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModifyRoleDataReq& ModifyRoleDataReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModifyRoleDataReq_C2Game_2eproto.base);
  return *internal_default_instance();
}


void ModifyRoleDataReq::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.ModifyRoleDataReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  jsondata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  roleid_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* ModifyRoleDataReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 roleId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string jsonData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_jsondata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModifyRoleDataReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ModifyRoleDataReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 roleId = 1;
  if (this->roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_roleid(), target);
  }

  // string jsonData = 2;
  if (this->jsondata().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_jsondata().data(), static_cast<int>(this->_internal_jsondata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.ModifyRoleDataReq.jsonData");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_jsondata(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.ModifyRoleDataReq.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ModifyRoleDataReq)
  return target;
}

size_t ModifyRoleDataReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.ModifyRoleDataReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string jsonData = 2;
  if (this->jsondata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_jsondata());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int64 roleId = 1;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_roleid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModifyRoleDataReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ModifyRoleDataReq*>(
      &from));
}

void ModifyRoleDataReq::MergeFrom(const ModifyRoleDataReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.ModifyRoleDataReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.jsondata().size() > 0) {

    jsondata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.jsondata_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
}

void ModifyRoleDataReq::CopyFrom(const ModifyRoleDataReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.ModifyRoleDataReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyRoleDataReq::IsInitialized() const {
  return true;
}

void ModifyRoleDataReq::InternalSwap(ModifyRoleDataReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  jsondata_.Swap(&other->jsondata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(roleid_, other->roleid_);
}

std::string ModifyRoleDataReq::GetTypeName() const {
  return "msg.ModifyRoleDataReq";
}


// ===================================================================

void ModifyRoleDataAck::InitAsDefaultInstance() {
}
class ModifyRoleDataAck::_Internal {
 public:
};

ModifyRoleDataAck::ModifyRoleDataAck()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.ModifyRoleDataAck)
}
ModifyRoleDataAck::ModifyRoleDataAck(const ModifyRoleDataAck& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:msg.ModifyRoleDataAck)
}

void ModifyRoleDataAck::SharedCtor() {
  code_ = 0;
}

ModifyRoleDataAck::~ModifyRoleDataAck() {
  // @@protoc_insertion_point(destructor:msg.ModifyRoleDataAck)
  SharedDtor();
}

void ModifyRoleDataAck::SharedDtor() {
}

void ModifyRoleDataAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModifyRoleDataAck& ModifyRoleDataAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModifyRoleDataAck_C2Game_2eproto.base);
  return *internal_default_instance();
}


void ModifyRoleDataAck::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.ModifyRoleDataAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_ = 0;
  _internal_metadata_.Clear();
}

const char* ModifyRoleDataAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModifyRoleDataAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ModifyRoleDataAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ModifyRoleDataAck)
  return target;
}

size_t ModifyRoleDataAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.ModifyRoleDataAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModifyRoleDataAck::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ModifyRoleDataAck*>(
      &from));
}

void ModifyRoleDataAck::MergeFrom(const ModifyRoleDataAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.ModifyRoleDataAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void ModifyRoleDataAck::CopyFrom(const ModifyRoleDataAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.ModifyRoleDataAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyRoleDataAck::IsInitialized() const {
  return true;
}

void ModifyRoleDataAck::InternalSwap(ModifyRoleDataAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(code_, other->code_);
}

std::string ModifyRoleDataAck::GetTypeName() const {
  return "msg.ModifyRoleDataAck";
}


// ===================================================================

void ExitGameNtf::InitAsDefaultInstance() {
}
class ExitGameNtf::_Internal {
 public:
};

ExitGameNtf::ExitGameNtf()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.ExitGameNtf)
}
ExitGameNtf::ExitGameNtf(const ExitGameNtf& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:msg.ExitGameNtf)
}

void ExitGameNtf::SharedCtor() {
  code_ = 0;
}

ExitGameNtf::~ExitGameNtf() {
  // @@protoc_insertion_point(destructor:msg.ExitGameNtf)
  SharedDtor();
}

void ExitGameNtf::SharedDtor() {
}

void ExitGameNtf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExitGameNtf& ExitGameNtf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExitGameNtf_C2Game_2eproto.base);
  return *internal_default_instance();
}


void ExitGameNtf::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.ExitGameNtf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_ = 0;
  _internal_metadata_.Clear();
}

const char* ExitGameNtf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExitGameNtf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ExitGameNtf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ExitGameNtf)
  return target;
}

size_t ExitGameNtf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.ExitGameNtf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExitGameNtf::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ExitGameNtf*>(
      &from));
}

void ExitGameNtf::MergeFrom(const ExitGameNtf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.ExitGameNtf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void ExitGameNtf::CopyFrom(const ExitGameNtf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.ExitGameNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExitGameNtf::IsInitialized() const {
  return true;
}

void ExitGameNtf::InternalSwap(ExitGameNtf* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(code_, other->code_);
}

std::string ExitGameNtf::GetTypeName() const {
  return "msg.ExitGameNtf";
}


// ===================================================================

void PVEFightInfo::InitAsDefaultInstance() {
}
class PVEFightInfo::_Internal {
 public:
};

PVEFightInfo::PVEFightInfo()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.PVEFightInfo)
}
PVEFightInfo::PVEFightInfo(const PVEFightInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  roleid_ = from.roleid_;
  // @@protoc_insertion_point(copy_constructor:msg.PVEFightInfo)
}

void PVEFightInfo::SharedCtor() {
  roleid_ = PROTOBUF_LONGLONG(0);
}

PVEFightInfo::~PVEFightInfo() {
  // @@protoc_insertion_point(destructor:msg.PVEFightInfo)
  SharedDtor();
}

void PVEFightInfo::SharedDtor() {
}

void PVEFightInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PVEFightInfo& PVEFightInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PVEFightInfo_C2Game_2eproto.base);
  return *internal_default_instance();
}


void PVEFightInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.PVEFightInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roleid_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* PVEFightInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 roleId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PVEFightInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PVEFightInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 roleId = 1;
  if (this->roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_roleid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PVEFightInfo)
  return target;
}

size_t PVEFightInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.PVEFightInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 roleId = 1;
  if (this->roleid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_roleid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PVEFightInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PVEFightInfo*>(
      &from));
}

void PVEFightInfo::MergeFrom(const PVEFightInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.PVEFightInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
}

void PVEFightInfo::CopyFrom(const PVEFightInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.PVEFightInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVEFightInfo::IsInitialized() const {
  return true;
}

void PVEFightInfo::InternalSwap(PVEFightInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(roleid_, other->roleid_);
}

std::string PVEFightInfo::GetTypeName() const {
  return "msg.PVEFightInfo";
}


// ===================================================================

void StartPVEFightReq::InitAsDefaultInstance() {
}
class StartPVEFightReq::_Internal {
 public:
};

StartPVEFightReq::StartPVEFightReq()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.StartPVEFightReq)
}
StartPVEFightReq::StartPVEFightReq(const StartPVEFightReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      roles_(from.roles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&carbonid_, &from.carbonid_,
    static_cast<size_t>(reinterpret_cast<char*>(&isofflinemode_) -
    reinterpret_cast<char*>(&carbonid_)) + sizeof(isofflinemode_));
  // @@protoc_insertion_point(copy_constructor:msg.StartPVEFightReq)
}

void StartPVEFightReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StartPVEFightReq_C2Game_2eproto.base);
  ::memset(&carbonid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isofflinemode_) -
      reinterpret_cast<char*>(&carbonid_)) + sizeof(isofflinemode_));
}

StartPVEFightReq::~StartPVEFightReq() {
  // @@protoc_insertion_point(destructor:msg.StartPVEFightReq)
  SharedDtor();
}

void StartPVEFightReq::SharedDtor() {
}

void StartPVEFightReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartPVEFightReq& StartPVEFightReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartPVEFightReq_C2Game_2eproto.base);
  return *internal_default_instance();
}


void StartPVEFightReq::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.StartPVEFightReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roles_.Clear();
  ::memset(&carbonid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isofflinemode_) -
      reinterpret_cast<char*>(&carbonid_)) + sizeof(isofflinemode_));
  _internal_metadata_.Clear();
}

const char* StartPVEFightReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 carbonId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          carbonid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isOfflineMode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isofflinemode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .msg.PVEFightInfo roles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_roles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartPVEFightReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.StartPVEFightReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 carbonId = 1;
  if (this->carbonid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_carbonid(), target);
  }

  // bool isOfflineMode = 2;
  if (this->isofflinemode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isofflinemode(), target);
  }

  // repeated .msg.PVEFightInfo roles = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_roles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_roles(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.StartPVEFightReq)
  return target;
}

size_t StartPVEFightReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.StartPVEFightReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.PVEFightInfo roles = 3;
  total_size += 1UL * this->_internal_roles_size();
  for (const auto& msg : this->roles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 carbonId = 1;
  if (this->carbonid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_carbonid());
  }

  // bool isOfflineMode = 2;
  if (this->isofflinemode() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartPVEFightReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const StartPVEFightReq*>(
      &from));
}

void StartPVEFightReq::MergeFrom(const StartPVEFightReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.StartPVEFightReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  roles_.MergeFrom(from.roles_);
  if (from.carbonid() != 0) {
    _internal_set_carbonid(from._internal_carbonid());
  }
  if (from.isofflinemode() != 0) {
    _internal_set_isofflinemode(from._internal_isofflinemode());
  }
}

void StartPVEFightReq::CopyFrom(const StartPVEFightReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.StartPVEFightReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartPVEFightReq::IsInitialized() const {
  return true;
}

void StartPVEFightReq::InternalSwap(StartPVEFightReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  roles_.InternalSwap(&other->roles_);
  swap(carbonid_, other->carbonid_);
  swap(isofflinemode_, other->isofflinemode_);
}

std::string StartPVEFightReq::GetTypeName() const {
  return "msg.StartPVEFightReq";
}


// ===================================================================

void StartPVEFightAck::InitAsDefaultInstance() {
}
class StartPVEFightAck::_Internal {
 public:
};

StartPVEFightAck::StartPVEFightAck()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.StartPVEFightAck)
}
StartPVEFightAck::StartPVEFightAck(const StartPVEFightAck& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:msg.StartPVEFightAck)
}

void StartPVEFightAck::SharedCtor() {
  code_ = 0;
}

StartPVEFightAck::~StartPVEFightAck() {
  // @@protoc_insertion_point(destructor:msg.StartPVEFightAck)
  SharedDtor();
}

void StartPVEFightAck::SharedDtor() {
}

void StartPVEFightAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartPVEFightAck& StartPVEFightAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartPVEFightAck_C2Game_2eproto.base);
  return *internal_default_instance();
}


void StartPVEFightAck::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.StartPVEFightAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_ = 0;
  _internal_metadata_.Clear();
}

const char* StartPVEFightAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartPVEFightAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.StartPVEFightAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.StartPVEFightAck)
  return target;
}

size_t StartPVEFightAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.StartPVEFightAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartPVEFightAck::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const StartPVEFightAck*>(
      &from));
}

void StartPVEFightAck::MergeFrom(const StartPVEFightAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.StartPVEFightAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void StartPVEFightAck::CopyFrom(const StartPVEFightAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.StartPVEFightAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartPVEFightAck::IsInitialized() const {
  return true;
}

void StartPVEFightAck::InternalSwap(StartPVEFightAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(code_, other->code_);
}

std::string StartPVEFightAck::GetTypeName() const {
  return "msg.StartPVEFightAck";
}


// ===================================================================

void StartPVPFightReq::InitAsDefaultInstance() {
}
class StartPVPFightReq::_Internal {
 public:
};

StartPVPFightReq::StartPVPFightReq()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.StartPVPFightReq)
}
StartPVPFightReq::StartPVPFightReq(const StartPVPFightReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  foeid_ = from.foeid_;
  // @@protoc_insertion_point(copy_constructor:msg.StartPVPFightReq)
}

void StartPVPFightReq::SharedCtor() {
  foeid_ = PROTOBUF_LONGLONG(0);
}

StartPVPFightReq::~StartPVPFightReq() {
  // @@protoc_insertion_point(destructor:msg.StartPVPFightReq)
  SharedDtor();
}

void StartPVPFightReq::SharedDtor() {
}

void StartPVPFightReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartPVPFightReq& StartPVPFightReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartPVPFightReq_C2Game_2eproto.base);
  return *internal_default_instance();
}


void StartPVPFightReq::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.StartPVPFightReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  foeid_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* StartPVPFightReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 foeId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          foeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartPVPFightReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.StartPVPFightReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 foeId = 1;
  if (this->foeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_foeid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.StartPVPFightReq)
  return target;
}

size_t StartPVPFightReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.StartPVPFightReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 foeId = 1;
  if (this->foeid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_foeid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartPVPFightReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const StartPVPFightReq*>(
      &from));
}

void StartPVPFightReq::MergeFrom(const StartPVPFightReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.StartPVPFightReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.foeid() != 0) {
    _internal_set_foeid(from._internal_foeid());
  }
}

void StartPVPFightReq::CopyFrom(const StartPVPFightReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.StartPVPFightReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartPVPFightReq::IsInitialized() const {
  return true;
}

void StartPVPFightReq::InternalSwap(StartPVPFightReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(foeid_, other->foeid_);
}

std::string StartPVPFightReq::GetTypeName() const {
  return "msg.StartPVPFightReq";
}


// ===================================================================

void StartPVPFightAck::InitAsDefaultInstance() {
}
class StartPVPFightAck::_Internal {
 public:
};

StartPVPFightAck::StartPVPFightAck()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.StartPVPFightAck)
}
StartPVPFightAck::StartPVPFightAck(const StartPVPFightAck& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:msg.StartPVPFightAck)
}

void StartPVPFightAck::SharedCtor() {
  code_ = 0;
}

StartPVPFightAck::~StartPVPFightAck() {
  // @@protoc_insertion_point(destructor:msg.StartPVPFightAck)
  SharedDtor();
}

void StartPVPFightAck::SharedDtor() {
}

void StartPVPFightAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartPVPFightAck& StartPVPFightAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartPVPFightAck_C2Game_2eproto.base);
  return *internal_default_instance();
}


void StartPVPFightAck::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.StartPVPFightAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_ = 0;
  _internal_metadata_.Clear();
}

const char* StartPVPFightAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartPVPFightAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.StartPVPFightAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.StartPVPFightAck)
  return target;
}

size_t StartPVPFightAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.StartPVPFightAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartPVPFightAck::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const StartPVPFightAck*>(
      &from));
}

void StartPVPFightAck::MergeFrom(const StartPVPFightAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.StartPVPFightAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void StartPVPFightAck::CopyFrom(const StartPVPFightAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.StartPVPFightAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartPVPFightAck::IsInitialized() const {
  return true;
}

void StartPVPFightAck::InternalSwap(StartPVPFightAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(code_, other->code_);
}

std::string StartPVPFightAck::GetTypeName() const {
  return "msg.StartPVPFightAck";
}


// ===================================================================

void StopPVPMatchReq::InitAsDefaultInstance() {
}
class StopPVPMatchReq::_Internal {
 public:
};

StopPVPMatchReq::StopPVPMatchReq()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.StopPVPMatchReq)
}
StopPVPMatchReq::StopPVPMatchReq(const StopPVPMatchReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.StopPVPMatchReq)
}

void StopPVPMatchReq::SharedCtor() {
}

StopPVPMatchReq::~StopPVPMatchReq() {
  // @@protoc_insertion_point(destructor:msg.StopPVPMatchReq)
  SharedDtor();
}

void StopPVPMatchReq::SharedDtor() {
}

void StopPVPMatchReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopPVPMatchReq& StopPVPMatchReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopPVPMatchReq_C2Game_2eproto.base);
  return *internal_default_instance();
}


void StopPVPMatchReq::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.StopPVPMatchReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* StopPVPMatchReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopPVPMatchReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.StopPVPMatchReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.StopPVPMatchReq)
  return target;
}

size_t StopPVPMatchReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.StopPVPMatchReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopPVPMatchReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const StopPVPMatchReq*>(
      &from));
}

void StopPVPMatchReq::MergeFrom(const StopPVPMatchReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.StopPVPMatchReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StopPVPMatchReq::CopyFrom(const StopPVPMatchReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.StopPVPMatchReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopPVPMatchReq::IsInitialized() const {
  return true;
}

void StopPVPMatchReq::InternalSwap(StopPVPMatchReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

std::string StopPVPMatchReq::GetTypeName() const {
  return "msg.StopPVPMatchReq";
}


// ===================================================================

void StopPVPMatchAck::InitAsDefaultInstance() {
}
class StopPVPMatchAck::_Internal {
 public:
};

StopPVPMatchAck::StopPVPMatchAck()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.StopPVPMatchAck)
}
StopPVPMatchAck::StopPVPMatchAck(const StopPVPMatchAck& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:msg.StopPVPMatchAck)
}

void StopPVPMatchAck::SharedCtor() {
  code_ = 0;
}

StopPVPMatchAck::~StopPVPMatchAck() {
  // @@protoc_insertion_point(destructor:msg.StopPVPMatchAck)
  SharedDtor();
}

void StopPVPMatchAck::SharedDtor() {
}

void StopPVPMatchAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopPVPMatchAck& StopPVPMatchAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopPVPMatchAck_C2Game_2eproto.base);
  return *internal_default_instance();
}


void StopPVPMatchAck::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.StopPVPMatchAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_ = 0;
  _internal_metadata_.Clear();
}

const char* StopPVPMatchAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopPVPMatchAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.StopPVPMatchAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.StopPVPMatchAck)
  return target;
}

size_t StopPVPMatchAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.StopPVPMatchAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopPVPMatchAck::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const StopPVPMatchAck*>(
      &from));
}

void StopPVPMatchAck::MergeFrom(const StopPVPMatchAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.StopPVPMatchAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void StopPVPMatchAck::CopyFrom(const StopPVPMatchAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.StopPVPMatchAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopPVPMatchAck::IsInitialized() const {
  return true;
}

void StopPVPMatchAck::InternalSwap(StopPVPMatchAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(code_, other->code_);
}

std::string StopPVPMatchAck::GetTypeName() const {
  return "msg.StopPVPMatchAck";
}


// ===================================================================

void StartFightNTF::InitAsDefaultInstance() {
}
class StartFightNTF::_Internal {
 public:
};

StartFightNTF::StartFightNTF()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.StartFightNTF)
}
StartFightNTF::StartFightNTF(const StartFightNTF& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fightip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fightip().empty()) {
    fightip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fightip_);
  }
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&fightport_) -
    reinterpret_cast<char*>(&code_)) + sizeof(fightport_));
  // @@protoc_insertion_point(copy_constructor:msg.StartFightNTF)
}

void StartFightNTF::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StartFightNTF_C2Game_2eproto.base);
  fightip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fightport_) -
      reinterpret_cast<char*>(&code_)) + sizeof(fightport_));
}

StartFightNTF::~StartFightNTF() {
  // @@protoc_insertion_point(destructor:msg.StartFightNTF)
  SharedDtor();
}

void StartFightNTF::SharedDtor() {
  fightip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StartFightNTF::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartFightNTF& StartFightNTF::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartFightNTF_C2Game_2eproto.base);
  return *internal_default_instance();
}


void StartFightNTF::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.StartFightNTF)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fightip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fightport_) -
      reinterpret_cast<char*>(&code_)) + sizeof(fightport_));
  _internal_metadata_.Clear();
}

const char* StartFightNTF::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fightUUID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fightuuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fightIP = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_fightip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fightPort = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          fightport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartFightNTF::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.StartFightNTF)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // int32 fightUUID = 2;
  if (this->fightuuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_fightuuid(), target);
  }

  // string fightIP = 3;
  if (this->fightip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fightip().data(), static_cast<int>(this->_internal_fightip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.StartFightNTF.fightIP");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_fightip(), target);
  }

  // int32 fightPort = 4;
  if (this->fightport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_fightport(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.StartFightNTF)
  return target;
}

size_t StartFightNTF::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.StartFightNTF)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string fightIP = 3;
  if (this->fightip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fightip());
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  // int32 fightUUID = 2;
  if (this->fightuuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fightuuid());
  }

  // int32 fightPort = 4;
  if (this->fightport() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fightport());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartFightNTF::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const StartFightNTF*>(
      &from));
}

void StartFightNTF::MergeFrom(const StartFightNTF& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.StartFightNTF)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fightip().size() > 0) {

    fightip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fightip_);
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.fightuuid() != 0) {
    _internal_set_fightuuid(from._internal_fightuuid());
  }
  if (from.fightport() != 0) {
    _internal_set_fightport(from._internal_fightport());
  }
}

void StartFightNTF::CopyFrom(const StartFightNTF& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.StartFightNTF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartFightNTF::IsInitialized() const {
  return true;
}

void StartFightNTF::InternalSwap(StartFightNTF* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  fightip_.Swap(&other->fightip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_, other->code_);
  swap(fightuuid_, other->fightuuid_);
  swap(fightport_, other->fightport_);
}

std::string StartFightNTF::GetTypeName() const {
  return "msg.StartFightNTF";
}


// ===================================================================

void PushRoleData::InitAsDefaultInstance() {
  ::msg::_PushRoleData_default_instance_._instance.get_mutable()->info_ = const_cast< ::msg::RoleSimpleInfo*>(
      ::msg::RoleSimpleInfo::internal_default_instance());
}
class PushRoleData::_Internal {
 public:
  static const ::msg::RoleSimpleInfo& info(const PushRoleData* msg);
};

const ::msg::RoleSimpleInfo&
PushRoleData::_Internal::info(const PushRoleData* msg) {
  return *msg->info_;
}
PushRoleData::PushRoleData()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.PushRoleData)
}
PushRoleData::PushRoleData(const PushRoleData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::msg::RoleSimpleInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:msg.PushRoleData)
}

void PushRoleData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PushRoleData_C2Game_2eproto.base);
  info_ = nullptr;
}

PushRoleData::~PushRoleData() {
  // @@protoc_insertion_point(destructor:msg.PushRoleData)
  SharedDtor();
}

void PushRoleData::SharedDtor() {
  if (this != internal_default_instance()) delete info_;
}

void PushRoleData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PushRoleData& PushRoleData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PushRoleData_C2Game_2eproto.base);
  return *internal_default_instance();
}


void PushRoleData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.PushRoleData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PushRoleData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .msg.RoleSimpleInfo info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PushRoleData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PushRoleData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.RoleSimpleInfo info = 1;
  if (this->has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PushRoleData)
  return target;
}

size_t PushRoleData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.PushRoleData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.RoleSimpleInfo info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PushRoleData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PushRoleData*>(
      &from));
}

void PushRoleData::MergeFrom(const PushRoleData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.PushRoleData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    _internal_mutable_info()->::msg::RoleSimpleInfo::MergeFrom(from._internal_info());
  }
}

void PushRoleData::CopyFrom(const PushRoleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.PushRoleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushRoleData::IsInitialized() const {
  return true;
}

void PushRoleData::InternalSwap(PushRoleData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(info_, other->info_);
}

std::string PushRoleData::GetTypeName() const {
  return "msg.PushRoleData";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::msg::PlayerAccountInfo* Arena::CreateMaybeMessage< ::msg::PlayerAccountInfo >(Arena* arena) {
  return Arena::CreateInternal< ::msg::PlayerAccountInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::RoleDetailedInfo* Arena::CreateMaybeMessage< ::msg::RoleDetailedInfo >(Arena* arena) {
  return Arena::CreateInternal< ::msg::RoleDetailedInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::RoleSimpleInfo* Arena::CreateMaybeMessage< ::msg::RoleSimpleInfo >(Arena* arena) {
  return Arena::CreateInternal< ::msg::RoleSimpleInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::LoginReq* Arena::CreateMaybeMessage< ::msg::LoginReq >(Arena* arena) {
  return Arena::CreateInternal< ::msg::LoginReq >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::LoginAck* Arena::CreateMaybeMessage< ::msg::LoginAck >(Arena* arena) {
  return Arena::CreateInternal< ::msg::LoginAck >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::EnterGameReq* Arena::CreateMaybeMessage< ::msg::EnterGameReq >(Arena* arena) {
  return Arena::CreateInternal< ::msg::EnterGameReq >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::EnterGameAck* Arena::CreateMaybeMessage< ::msg::EnterGameAck >(Arena* arena) {
  return Arena::CreateInternal< ::msg::EnterGameAck >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CreateRoleReq* Arena::CreateMaybeMessage< ::msg::CreateRoleReq >(Arena* arena) {
  return Arena::CreateInternal< ::msg::CreateRoleReq >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CreateRoleAck* Arena::CreateMaybeMessage< ::msg::CreateRoleAck >(Arena* arena) {
  return Arena::CreateInternal< ::msg::CreateRoleAck >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::ModifyRoleDataReq* Arena::CreateMaybeMessage< ::msg::ModifyRoleDataReq >(Arena* arena) {
  return Arena::CreateInternal< ::msg::ModifyRoleDataReq >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::ModifyRoleDataAck* Arena::CreateMaybeMessage< ::msg::ModifyRoleDataAck >(Arena* arena) {
  return Arena::CreateInternal< ::msg::ModifyRoleDataAck >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::ExitGameNtf* Arena::CreateMaybeMessage< ::msg::ExitGameNtf >(Arena* arena) {
  return Arena::CreateInternal< ::msg::ExitGameNtf >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PVEFightInfo* Arena::CreateMaybeMessage< ::msg::PVEFightInfo >(Arena* arena) {
  return Arena::CreateInternal< ::msg::PVEFightInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::StartPVEFightReq* Arena::CreateMaybeMessage< ::msg::StartPVEFightReq >(Arena* arena) {
  return Arena::CreateInternal< ::msg::StartPVEFightReq >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::StartPVEFightAck* Arena::CreateMaybeMessage< ::msg::StartPVEFightAck >(Arena* arena) {
  return Arena::CreateInternal< ::msg::StartPVEFightAck >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::StartPVPFightReq* Arena::CreateMaybeMessage< ::msg::StartPVPFightReq >(Arena* arena) {
  return Arena::CreateInternal< ::msg::StartPVPFightReq >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::StartPVPFightAck* Arena::CreateMaybeMessage< ::msg::StartPVPFightAck >(Arena* arena) {
  return Arena::CreateInternal< ::msg::StartPVPFightAck >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::StopPVPMatchReq* Arena::CreateMaybeMessage< ::msg::StopPVPMatchReq >(Arena* arena) {
  return Arena::CreateInternal< ::msg::StopPVPMatchReq >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::StopPVPMatchAck* Arena::CreateMaybeMessage< ::msg::StopPVPMatchAck >(Arena* arena) {
  return Arena::CreateInternal< ::msg::StopPVPMatchAck >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::StartFightNTF* Arena::CreateMaybeMessage< ::msg::StartFightNTF >(Arena* arena) {
  return Arena::CreateInternal< ::msg::StartFightNTF >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PushRoleData* Arena::CreateMaybeMessage< ::msg::PushRoleData >(Arena* arena) {
  return Arena::CreateInternal< ::msg::PushRoleData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
