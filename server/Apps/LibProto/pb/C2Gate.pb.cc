// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: C2Gate.proto

#include "C2Gate.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace msg {
class LoginGateAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginGateAck> _instance;
} _LoginGateAck_default_instance_;
}  // namespace msg
static void InitDefaultsscc_info_LoginGateAck_C2Gate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_LoginGateAck_default_instance_;
    new (ptr) ::msg::LoginGateAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::LoginGateAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginGateAck_C2Gate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoginGateAck_C2Gate_2eproto}, {}};

namespace msg {
bool LoginGateAck_MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 100001:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> LoginGateAck_MsgId_strings[2] = {};

static const char LoginGateAck_MsgId_names[] =
  "Id"
  "None";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry LoginGateAck_MsgId_entries[] = {
  { {LoginGateAck_MsgId_names + 0, 2}, 100001 },
  { {LoginGateAck_MsgId_names + 2, 4}, 0 },
};

static const int LoginGateAck_MsgId_entries_by_number[] = {
  1, // 0 -> None
  0, // 100001 -> Id
};

const std::string& LoginGateAck_MsgId_Name(
    LoginGateAck_MsgId value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          LoginGateAck_MsgId_entries,
          LoginGateAck_MsgId_entries_by_number,
          2, LoginGateAck_MsgId_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      LoginGateAck_MsgId_entries,
      LoginGateAck_MsgId_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     LoginGateAck_MsgId_strings[idx].get();
}
bool LoginGateAck_MsgId_Parse(
    const std::string& name, LoginGateAck_MsgId* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      LoginGateAck_MsgId_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<LoginGateAck_MsgId>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LoginGateAck_MsgId LoginGateAck::None;
constexpr LoginGateAck_MsgId LoginGateAck::Id;
constexpr LoginGateAck_MsgId LoginGateAck::MsgId_MIN;
constexpr LoginGateAck_MsgId LoginGateAck::MsgId_MAX;
constexpr int LoginGateAck::MsgId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void LoginGateAck::InitAsDefaultInstance() {
}
class LoginGateAck::_Internal {
 public:
};

LoginGateAck::LoginGateAck()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.LoginGateAck)
}
LoginGateAck::LoginGateAck(const LoginGateAck& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:msg.LoginGateAck)
}

void LoginGateAck::SharedCtor() {
  code_ = 0;
}

LoginGateAck::~LoginGateAck() {
  // @@protoc_insertion_point(destructor:msg.LoginGateAck)
  SharedDtor();
}

void LoginGateAck::SharedDtor() {
}

void LoginGateAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginGateAck& LoginGateAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginGateAck_C2Gate_2eproto.base);
  return *internal_default_instance();
}


void LoginGateAck::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.LoginGateAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_ = 0;
  _internal_metadata_.Clear();
}

const char* LoginGateAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginGateAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.LoginGateAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.LoginGateAck)
  return target;
}

size_t LoginGateAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.LoginGateAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginGateAck::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LoginGateAck*>(
      &from));
}

void LoginGateAck::MergeFrom(const LoginGateAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.LoginGateAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void LoginGateAck::CopyFrom(const LoginGateAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.LoginGateAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginGateAck::IsInitialized() const {
  return true;
}

void LoginGateAck::InternalSwap(LoginGateAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(code_, other->code_);
}

std::string LoginGateAck::GetTypeName() const {
  return "msg.LoginGateAck";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::msg::LoginGateAck* Arena::CreateMaybeMessage< ::msg::LoginGateAck >(Arena* arena) {
  return Arena::CreateInternal< ::msg::LoginGateAck >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
