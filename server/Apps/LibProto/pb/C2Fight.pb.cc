// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: C2Fight.proto

#include "C2Fight.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_C2Fight_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FightWorldInfo_C2Fight_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_C2Fight_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FrameInputData_C2Fight_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_C2Fight_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PingInfo_C2Fight_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_C2Fight_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlayerFrameInput_C2Fight_2eproto;
namespace msg {
class JoinFightReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JoinFightReq> _instance;
} _JoinFightReq_default_instance_;
class FightWorldInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FightWorldInfo> _instance;
} _FightWorldInfo_default_instance_;
class JoinFightAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JoinFightAck> _instance;
} _JoinFightAck_default_instance_;
class PlayerLoadingReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerLoadingReq> _instance;
} _PlayerLoadingReq_default_instance_;
class PlayerLoadingAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerLoadingAck> _instance;
} _PlayerLoadingAck_default_instance_;
class PlayerReadyNotifyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerReadyNotify> _instance;
} _PlayerReadyNotify_default_instance_;
class PlayerExitFightNotifyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerExitFightNotify> _instance;
} _PlayerExitFightNotify_default_instance_;
class FrameInputDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FrameInputData> _instance;
} _FrameInputData_default_instance_;
class PlayerFrameInputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerFrameInput> _instance;
} _PlayerFrameInput_default_instance_;
class RunNextFrameReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RunNextFrameReq> _instance;
} _RunNextFrameReq_default_instance_;
class RunNextFrameAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RunNextFrameAck> _instance;
} _RunNextFrameAck_default_instance_;
class PushFrameInputBeginDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PushFrameInputBegin> _instance;
} _PushFrameInputBegin_default_instance_;
class PushFrameInputEndDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PushFrameInputEnd> _instance;
} _PushFrameInputEnd_default_instance_;
class PushFrameInputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PushFrameInput> _instance;
} _PushFrameInput_default_instance_;
class PlayerRecordsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerRecords> _instance;
} _PlayerRecords_default_instance_;
class ExitFightReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExitFightReq> _instance;
} _ExitFightReq_default_instance_;
class ExitFightAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExitFightAck> _instance;
} _ExitFightAck_default_instance_;
class PingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Ping> _instance;
} _Ping_default_instance_;
class PongDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pong> _instance;
} _Pong_default_instance_;
class PingInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PingInfo> _instance;
} _PingInfo_default_instance_;
class PushPingInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PushPingInfo> _instance;
} _PushPingInfo_default_instance_;
}  // namespace msg
static void InitDefaultsscc_info_ExitFightAck_C2Fight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_ExitFightAck_default_instance_;
    new (ptr) ::msg::ExitFightAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::ExitFightAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExitFightAck_C2Fight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ExitFightAck_C2Fight_2eproto}, {}};

static void InitDefaultsscc_info_ExitFightReq_C2Fight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_ExitFightReq_default_instance_;
    new (ptr) ::msg::ExitFightReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::ExitFightReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExitFightReq_C2Fight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ExitFightReq_C2Fight_2eproto}, {}};

static void InitDefaultsscc_info_FightWorldInfo_C2Fight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_FightWorldInfo_default_instance_;
    new (ptr) ::msg::FightWorldInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::FightWorldInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FightWorldInfo_C2Fight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FightWorldInfo_C2Fight_2eproto}, {}};

static void InitDefaultsscc_info_FrameInputData_C2Fight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_FrameInputData_default_instance_;
    new (ptr) ::msg::FrameInputData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::FrameInputData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FrameInputData_C2Fight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FrameInputData_C2Fight_2eproto}, {}};

static void InitDefaultsscc_info_JoinFightAck_C2Fight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_JoinFightAck_default_instance_;
    new (ptr) ::msg::JoinFightAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::JoinFightAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_JoinFightAck_C2Fight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_JoinFightAck_C2Fight_2eproto}, {
      &scc_info_FightWorldInfo_C2Fight_2eproto.base,}};

static void InitDefaultsscc_info_JoinFightReq_C2Fight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_JoinFightReq_default_instance_;
    new (ptr) ::msg::JoinFightReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::JoinFightReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JoinFightReq_C2Fight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_JoinFightReq_C2Fight_2eproto}, {}};

static void InitDefaultsscc_info_Ping_C2Fight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_Ping_default_instance_;
    new (ptr) ::msg::Ping();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::Ping::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ping_C2Fight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Ping_C2Fight_2eproto}, {}};

static void InitDefaultsscc_info_PingInfo_C2Fight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_PingInfo_default_instance_;
    new (ptr) ::msg::PingInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::PingInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PingInfo_C2Fight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PingInfo_C2Fight_2eproto}, {}};

static void InitDefaultsscc_info_PlayerExitFightNotify_C2Fight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_PlayerExitFightNotify_default_instance_;
    new (ptr) ::msg::PlayerExitFightNotify();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::PlayerExitFightNotify::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerExitFightNotify_C2Fight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlayerExitFightNotify_C2Fight_2eproto}, {}};

static void InitDefaultsscc_info_PlayerFrameInput_C2Fight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_PlayerFrameInput_default_instance_;
    new (ptr) ::msg::PlayerFrameInput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::PlayerFrameInput::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlayerFrameInput_C2Fight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PlayerFrameInput_C2Fight_2eproto}, {
      &scc_info_FrameInputData_C2Fight_2eproto.base,}};

static void InitDefaultsscc_info_PlayerLoadingAck_C2Fight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_PlayerLoadingAck_default_instance_;
    new (ptr) ::msg::PlayerLoadingAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::PlayerLoadingAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerLoadingAck_C2Fight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlayerLoadingAck_C2Fight_2eproto}, {}};

static void InitDefaultsscc_info_PlayerLoadingReq_C2Fight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_PlayerLoadingReq_default_instance_;
    new (ptr) ::msg::PlayerLoadingReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::PlayerLoadingReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerLoadingReq_C2Fight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlayerLoadingReq_C2Fight_2eproto}, {}};

static void InitDefaultsscc_info_PlayerReadyNotify_C2Fight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_PlayerReadyNotify_default_instance_;
    new (ptr) ::msg::PlayerReadyNotify();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::PlayerReadyNotify::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerReadyNotify_C2Fight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlayerReadyNotify_C2Fight_2eproto}, {}};

static void InitDefaultsscc_info_PlayerRecords_C2Fight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_PlayerRecords_default_instance_;
    new (ptr) ::msg::PlayerRecords();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::PlayerRecords::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlayerRecords_C2Fight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PlayerRecords_C2Fight_2eproto}, {
      &scc_info_PlayerFrameInput_C2Fight_2eproto.base,}};

static void InitDefaultsscc_info_Pong_C2Fight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_Pong_default_instance_;
    new (ptr) ::msg::Pong();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::Pong::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pong_C2Fight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Pong_C2Fight_2eproto}, {}};

static void InitDefaultsscc_info_PushFrameInput_C2Fight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_PushFrameInput_default_instance_;
    new (ptr) ::msg::PushFrameInput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::PushFrameInput::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PushFrameInput_C2Fight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PushFrameInput_C2Fight_2eproto}, {
      &scc_info_PlayerFrameInput_C2Fight_2eproto.base,}};

static void InitDefaultsscc_info_PushFrameInputBegin_C2Fight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_PushFrameInputBegin_default_instance_;
    new (ptr) ::msg::PushFrameInputBegin();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::PushFrameInputBegin::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PushFrameInputBegin_C2Fight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PushFrameInputBegin_C2Fight_2eproto}, {}};

static void InitDefaultsscc_info_PushFrameInputEnd_C2Fight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_PushFrameInputEnd_default_instance_;
    new (ptr) ::msg::PushFrameInputEnd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::PushFrameInputEnd::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PushFrameInputEnd_C2Fight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PushFrameInputEnd_C2Fight_2eproto}, {}};

static void InitDefaultsscc_info_PushPingInfo_C2Fight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_PushPingInfo_default_instance_;
    new (ptr) ::msg::PushPingInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::PushPingInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PushPingInfo_C2Fight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PushPingInfo_C2Fight_2eproto}, {
      &scc_info_PingInfo_C2Fight_2eproto.base,}};

static void InitDefaultsscc_info_RunNextFrameAck_C2Fight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_RunNextFrameAck_default_instance_;
    new (ptr) ::msg::RunNextFrameAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::RunNextFrameAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RunNextFrameAck_C2Fight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RunNextFrameAck_C2Fight_2eproto}, {
      &scc_info_PlayerFrameInput_C2Fight_2eproto.base,}};

static void InitDefaultsscc_info_RunNextFrameReq_C2Fight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_RunNextFrameReq_default_instance_;
    new (ptr) ::msg::RunNextFrameReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::RunNextFrameReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RunNextFrameReq_C2Fight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RunNextFrameReq_C2Fight_2eproto}, {
      &scc_info_FrameInputData_C2Fight_2eproto.base,}};

namespace msg {
bool JoinFightReq_MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 300001:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> JoinFightReq_MsgId_strings[2] = {};

static const char JoinFightReq_MsgId_names[] =
  "Id"
  "None";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry JoinFightReq_MsgId_entries[] = {
  { {JoinFightReq_MsgId_names + 0, 2}, 300001 },
  { {JoinFightReq_MsgId_names + 2, 4}, 0 },
};

static const int JoinFightReq_MsgId_entries_by_number[] = {
  1, // 0 -> None
  0, // 300001 -> Id
};

const std::string& JoinFightReq_MsgId_Name(
    JoinFightReq_MsgId value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          JoinFightReq_MsgId_entries,
          JoinFightReq_MsgId_entries_by_number,
          2, JoinFightReq_MsgId_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      JoinFightReq_MsgId_entries,
      JoinFightReq_MsgId_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     JoinFightReq_MsgId_strings[idx].get();
}
bool JoinFightReq_MsgId_Parse(
    const std::string& name, JoinFightReq_MsgId* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      JoinFightReq_MsgId_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<JoinFightReq_MsgId>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr JoinFightReq_MsgId JoinFightReq::None;
constexpr JoinFightReq_MsgId JoinFightReq::Id;
constexpr JoinFightReq_MsgId JoinFightReq::MsgId_MIN;
constexpr JoinFightReq_MsgId JoinFightReq::MsgId_MAX;
constexpr int JoinFightReq::MsgId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool JoinFightAck_MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 300002:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> JoinFightAck_MsgId_strings[2] = {};

static const char JoinFightAck_MsgId_names[] =
  "Id"
  "None";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry JoinFightAck_MsgId_entries[] = {
  { {JoinFightAck_MsgId_names + 0, 2}, 300002 },
  { {JoinFightAck_MsgId_names + 2, 4}, 0 },
};

static const int JoinFightAck_MsgId_entries_by_number[] = {
  1, // 0 -> None
  0, // 300002 -> Id
};

const std::string& JoinFightAck_MsgId_Name(
    JoinFightAck_MsgId value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          JoinFightAck_MsgId_entries,
          JoinFightAck_MsgId_entries_by_number,
          2, JoinFightAck_MsgId_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      JoinFightAck_MsgId_entries,
      JoinFightAck_MsgId_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     JoinFightAck_MsgId_strings[idx].get();
}
bool JoinFightAck_MsgId_Parse(
    const std::string& name, JoinFightAck_MsgId* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      JoinFightAck_MsgId_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<JoinFightAck_MsgId>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr JoinFightAck_MsgId JoinFightAck::None;
constexpr JoinFightAck_MsgId JoinFightAck::Id;
constexpr JoinFightAck_MsgId JoinFightAck::MsgId_MIN;
constexpr JoinFightAck_MsgId JoinFightAck::MsgId_MAX;
constexpr int JoinFightAck::MsgId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool PlayerLoadingReq_MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 300003:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PlayerLoadingReq_MsgId_strings[2] = {};

static const char PlayerLoadingReq_MsgId_names[] =
  "Id"
  "None";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PlayerLoadingReq_MsgId_entries[] = {
  { {PlayerLoadingReq_MsgId_names + 0, 2}, 300003 },
  { {PlayerLoadingReq_MsgId_names + 2, 4}, 0 },
};

static const int PlayerLoadingReq_MsgId_entries_by_number[] = {
  1, // 0 -> None
  0, // 300003 -> Id
};

const std::string& PlayerLoadingReq_MsgId_Name(
    PlayerLoadingReq_MsgId value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PlayerLoadingReq_MsgId_entries,
          PlayerLoadingReq_MsgId_entries_by_number,
          2, PlayerLoadingReq_MsgId_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PlayerLoadingReq_MsgId_entries,
      PlayerLoadingReq_MsgId_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PlayerLoadingReq_MsgId_strings[idx].get();
}
bool PlayerLoadingReq_MsgId_Parse(
    const std::string& name, PlayerLoadingReq_MsgId* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PlayerLoadingReq_MsgId_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<PlayerLoadingReq_MsgId>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PlayerLoadingReq_MsgId PlayerLoadingReq::None;
constexpr PlayerLoadingReq_MsgId PlayerLoadingReq::Id;
constexpr PlayerLoadingReq_MsgId PlayerLoadingReq::MsgId_MIN;
constexpr PlayerLoadingReq_MsgId PlayerLoadingReq::MsgId_MAX;
constexpr int PlayerLoadingReq::MsgId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool PlayerLoadingAck_MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 300004:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PlayerLoadingAck_MsgId_strings[2] = {};

static const char PlayerLoadingAck_MsgId_names[] =
  "Id"
  "None";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PlayerLoadingAck_MsgId_entries[] = {
  { {PlayerLoadingAck_MsgId_names + 0, 2}, 300004 },
  { {PlayerLoadingAck_MsgId_names + 2, 4}, 0 },
};

static const int PlayerLoadingAck_MsgId_entries_by_number[] = {
  1, // 0 -> None
  0, // 300004 -> Id
};

const std::string& PlayerLoadingAck_MsgId_Name(
    PlayerLoadingAck_MsgId value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PlayerLoadingAck_MsgId_entries,
          PlayerLoadingAck_MsgId_entries_by_number,
          2, PlayerLoadingAck_MsgId_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PlayerLoadingAck_MsgId_entries,
      PlayerLoadingAck_MsgId_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PlayerLoadingAck_MsgId_strings[idx].get();
}
bool PlayerLoadingAck_MsgId_Parse(
    const std::string& name, PlayerLoadingAck_MsgId* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PlayerLoadingAck_MsgId_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<PlayerLoadingAck_MsgId>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PlayerLoadingAck_MsgId PlayerLoadingAck::None;
constexpr PlayerLoadingAck_MsgId PlayerLoadingAck::Id;
constexpr PlayerLoadingAck_MsgId PlayerLoadingAck::MsgId_MIN;
constexpr PlayerLoadingAck_MsgId PlayerLoadingAck::MsgId_MAX;
constexpr int PlayerLoadingAck::MsgId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool PlayerReadyNotify_MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 300006:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PlayerReadyNotify_MsgId_strings[2] = {};

static const char PlayerReadyNotify_MsgId_names[] =
  "Id"
  "None";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PlayerReadyNotify_MsgId_entries[] = {
  { {PlayerReadyNotify_MsgId_names + 0, 2}, 300006 },
  { {PlayerReadyNotify_MsgId_names + 2, 4}, 0 },
};

static const int PlayerReadyNotify_MsgId_entries_by_number[] = {
  1, // 0 -> None
  0, // 300006 -> Id
};

const std::string& PlayerReadyNotify_MsgId_Name(
    PlayerReadyNotify_MsgId value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PlayerReadyNotify_MsgId_entries,
          PlayerReadyNotify_MsgId_entries_by_number,
          2, PlayerReadyNotify_MsgId_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PlayerReadyNotify_MsgId_entries,
      PlayerReadyNotify_MsgId_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PlayerReadyNotify_MsgId_strings[idx].get();
}
bool PlayerReadyNotify_MsgId_Parse(
    const std::string& name, PlayerReadyNotify_MsgId* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PlayerReadyNotify_MsgId_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<PlayerReadyNotify_MsgId>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PlayerReadyNotify_MsgId PlayerReadyNotify::None;
constexpr PlayerReadyNotify_MsgId PlayerReadyNotify::Id;
constexpr PlayerReadyNotify_MsgId PlayerReadyNotify::MsgId_MIN;
constexpr PlayerReadyNotify_MsgId PlayerReadyNotify::MsgId_MAX;
constexpr int PlayerReadyNotify::MsgId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool PlayerExitFightNotify_MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 300008:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PlayerExitFightNotify_MsgId_strings[2] = {};

static const char PlayerExitFightNotify_MsgId_names[] =
  "Id"
  "None";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PlayerExitFightNotify_MsgId_entries[] = {
  { {PlayerExitFightNotify_MsgId_names + 0, 2}, 300008 },
  { {PlayerExitFightNotify_MsgId_names + 2, 4}, 0 },
};

static const int PlayerExitFightNotify_MsgId_entries_by_number[] = {
  1, // 0 -> None
  0, // 300008 -> Id
};

const std::string& PlayerExitFightNotify_MsgId_Name(
    PlayerExitFightNotify_MsgId value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PlayerExitFightNotify_MsgId_entries,
          PlayerExitFightNotify_MsgId_entries_by_number,
          2, PlayerExitFightNotify_MsgId_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PlayerExitFightNotify_MsgId_entries,
      PlayerExitFightNotify_MsgId_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PlayerExitFightNotify_MsgId_strings[idx].get();
}
bool PlayerExitFightNotify_MsgId_Parse(
    const std::string& name, PlayerExitFightNotify_MsgId* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PlayerExitFightNotify_MsgId_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<PlayerExitFightNotify_MsgId>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PlayerExitFightNotify_MsgId PlayerExitFightNotify::None;
constexpr PlayerExitFightNotify_MsgId PlayerExitFightNotify::Id;
constexpr PlayerExitFightNotify_MsgId PlayerExitFightNotify::MsgId_MIN;
constexpr PlayerExitFightNotify_MsgId PlayerExitFightNotify::MsgId_MAX;
constexpr int PlayerExitFightNotify::MsgId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool RunNextFrameReq_MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 300009:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> RunNextFrameReq_MsgId_strings[2] = {};

static const char RunNextFrameReq_MsgId_names[] =
  "Id"
  "None";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry RunNextFrameReq_MsgId_entries[] = {
  { {RunNextFrameReq_MsgId_names + 0, 2}, 300009 },
  { {RunNextFrameReq_MsgId_names + 2, 4}, 0 },
};

static const int RunNextFrameReq_MsgId_entries_by_number[] = {
  1, // 0 -> None
  0, // 300009 -> Id
};

const std::string& RunNextFrameReq_MsgId_Name(
    RunNextFrameReq_MsgId value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          RunNextFrameReq_MsgId_entries,
          RunNextFrameReq_MsgId_entries_by_number,
          2, RunNextFrameReq_MsgId_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      RunNextFrameReq_MsgId_entries,
      RunNextFrameReq_MsgId_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     RunNextFrameReq_MsgId_strings[idx].get();
}
bool RunNextFrameReq_MsgId_Parse(
    const std::string& name, RunNextFrameReq_MsgId* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      RunNextFrameReq_MsgId_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<RunNextFrameReq_MsgId>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RunNextFrameReq_MsgId RunNextFrameReq::None;
constexpr RunNextFrameReq_MsgId RunNextFrameReq::Id;
constexpr RunNextFrameReq_MsgId RunNextFrameReq::MsgId_MIN;
constexpr RunNextFrameReq_MsgId RunNextFrameReq::MsgId_MAX;
constexpr int RunNextFrameReq::MsgId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool RunNextFrameAck_MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 300010:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> RunNextFrameAck_MsgId_strings[2] = {};

static const char RunNextFrameAck_MsgId_names[] =
  "Id"
  "None";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry RunNextFrameAck_MsgId_entries[] = {
  { {RunNextFrameAck_MsgId_names + 0, 2}, 300010 },
  { {RunNextFrameAck_MsgId_names + 2, 4}, 0 },
};

static const int RunNextFrameAck_MsgId_entries_by_number[] = {
  1, // 0 -> None
  0, // 300010 -> Id
};

const std::string& RunNextFrameAck_MsgId_Name(
    RunNextFrameAck_MsgId value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          RunNextFrameAck_MsgId_entries,
          RunNextFrameAck_MsgId_entries_by_number,
          2, RunNextFrameAck_MsgId_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      RunNextFrameAck_MsgId_entries,
      RunNextFrameAck_MsgId_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     RunNextFrameAck_MsgId_strings[idx].get();
}
bool RunNextFrameAck_MsgId_Parse(
    const std::string& name, RunNextFrameAck_MsgId* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      RunNextFrameAck_MsgId_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<RunNextFrameAck_MsgId>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RunNextFrameAck_MsgId RunNextFrameAck::None;
constexpr RunNextFrameAck_MsgId RunNextFrameAck::Id;
constexpr RunNextFrameAck_MsgId RunNextFrameAck::MsgId_MIN;
constexpr RunNextFrameAck_MsgId RunNextFrameAck::MsgId_MAX;
constexpr int RunNextFrameAck::MsgId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool PushFrameInputBegin_MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 300012:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PushFrameInputBegin_MsgId_strings[2] = {};

static const char PushFrameInputBegin_MsgId_names[] =
  "Id"
  "None";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PushFrameInputBegin_MsgId_entries[] = {
  { {PushFrameInputBegin_MsgId_names + 0, 2}, 300012 },
  { {PushFrameInputBegin_MsgId_names + 2, 4}, 0 },
};

static const int PushFrameInputBegin_MsgId_entries_by_number[] = {
  1, // 0 -> None
  0, // 300012 -> Id
};

const std::string& PushFrameInputBegin_MsgId_Name(
    PushFrameInputBegin_MsgId value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PushFrameInputBegin_MsgId_entries,
          PushFrameInputBegin_MsgId_entries_by_number,
          2, PushFrameInputBegin_MsgId_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PushFrameInputBegin_MsgId_entries,
      PushFrameInputBegin_MsgId_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PushFrameInputBegin_MsgId_strings[idx].get();
}
bool PushFrameInputBegin_MsgId_Parse(
    const std::string& name, PushFrameInputBegin_MsgId* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PushFrameInputBegin_MsgId_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<PushFrameInputBegin_MsgId>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PushFrameInputBegin_MsgId PushFrameInputBegin::None;
constexpr PushFrameInputBegin_MsgId PushFrameInputBegin::Id;
constexpr PushFrameInputBegin_MsgId PushFrameInputBegin::MsgId_MIN;
constexpr PushFrameInputBegin_MsgId PushFrameInputBegin::MsgId_MAX;
constexpr int PushFrameInputBegin::MsgId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool PushFrameInputEnd_MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 300014:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PushFrameInputEnd_MsgId_strings[2] = {};

static const char PushFrameInputEnd_MsgId_names[] =
  "Id"
  "None";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PushFrameInputEnd_MsgId_entries[] = {
  { {PushFrameInputEnd_MsgId_names + 0, 2}, 300014 },
  { {PushFrameInputEnd_MsgId_names + 2, 4}, 0 },
};

static const int PushFrameInputEnd_MsgId_entries_by_number[] = {
  1, // 0 -> None
  0, // 300014 -> Id
};

const std::string& PushFrameInputEnd_MsgId_Name(
    PushFrameInputEnd_MsgId value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PushFrameInputEnd_MsgId_entries,
          PushFrameInputEnd_MsgId_entries_by_number,
          2, PushFrameInputEnd_MsgId_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PushFrameInputEnd_MsgId_entries,
      PushFrameInputEnd_MsgId_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PushFrameInputEnd_MsgId_strings[idx].get();
}
bool PushFrameInputEnd_MsgId_Parse(
    const std::string& name, PushFrameInputEnd_MsgId* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PushFrameInputEnd_MsgId_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<PushFrameInputEnd_MsgId>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PushFrameInputEnd_MsgId PushFrameInputEnd::None;
constexpr PushFrameInputEnd_MsgId PushFrameInputEnd::Id;
constexpr PushFrameInputEnd_MsgId PushFrameInputEnd::MsgId_MIN;
constexpr PushFrameInputEnd_MsgId PushFrameInputEnd::MsgId_MAX;
constexpr int PushFrameInputEnd::MsgId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool PushFrameInput_MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 300016:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PushFrameInput_MsgId_strings[2] = {};

static const char PushFrameInput_MsgId_names[] =
  "Id"
  "None";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PushFrameInput_MsgId_entries[] = {
  { {PushFrameInput_MsgId_names + 0, 2}, 300016 },
  { {PushFrameInput_MsgId_names + 2, 4}, 0 },
};

static const int PushFrameInput_MsgId_entries_by_number[] = {
  1, // 0 -> None
  0, // 300016 -> Id
};

const std::string& PushFrameInput_MsgId_Name(
    PushFrameInput_MsgId value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PushFrameInput_MsgId_entries,
          PushFrameInput_MsgId_entries_by_number,
          2, PushFrameInput_MsgId_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PushFrameInput_MsgId_entries,
      PushFrameInput_MsgId_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PushFrameInput_MsgId_strings[idx].get();
}
bool PushFrameInput_MsgId_Parse(
    const std::string& name, PushFrameInput_MsgId* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PushFrameInput_MsgId_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<PushFrameInput_MsgId>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PushFrameInput_MsgId PushFrameInput::None;
constexpr PushFrameInput_MsgId PushFrameInput::Id;
constexpr PushFrameInput_MsgId PushFrameInput::MsgId_MIN;
constexpr PushFrameInput_MsgId PushFrameInput::MsgId_MAX;
constexpr int PushFrameInput::MsgId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool ExitFightReq_MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 300017:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ExitFightReq_MsgId_strings[2] = {};

static const char ExitFightReq_MsgId_names[] =
  "Id"
  "None";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ExitFightReq_MsgId_entries[] = {
  { {ExitFightReq_MsgId_names + 0, 2}, 300017 },
  { {ExitFightReq_MsgId_names + 2, 4}, 0 },
};

static const int ExitFightReq_MsgId_entries_by_number[] = {
  1, // 0 -> None
  0, // 300017 -> Id
};

const std::string& ExitFightReq_MsgId_Name(
    ExitFightReq_MsgId value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ExitFightReq_MsgId_entries,
          ExitFightReq_MsgId_entries_by_number,
          2, ExitFightReq_MsgId_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ExitFightReq_MsgId_entries,
      ExitFightReq_MsgId_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ExitFightReq_MsgId_strings[idx].get();
}
bool ExitFightReq_MsgId_Parse(
    const std::string& name, ExitFightReq_MsgId* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ExitFightReq_MsgId_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<ExitFightReq_MsgId>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ExitFightReq_MsgId ExitFightReq::None;
constexpr ExitFightReq_MsgId ExitFightReq::Id;
constexpr ExitFightReq_MsgId ExitFightReq::MsgId_MIN;
constexpr ExitFightReq_MsgId ExitFightReq::MsgId_MAX;
constexpr int ExitFightReq::MsgId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool ExitFightAck_MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 300018:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ExitFightAck_MsgId_strings[2] = {};

static const char ExitFightAck_MsgId_names[] =
  "Id"
  "None";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ExitFightAck_MsgId_entries[] = {
  { {ExitFightAck_MsgId_names + 0, 2}, 300018 },
  { {ExitFightAck_MsgId_names + 2, 4}, 0 },
};

static const int ExitFightAck_MsgId_entries_by_number[] = {
  1, // 0 -> None
  0, // 300018 -> Id
};

const std::string& ExitFightAck_MsgId_Name(
    ExitFightAck_MsgId value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ExitFightAck_MsgId_entries,
          ExitFightAck_MsgId_entries_by_number,
          2, ExitFightAck_MsgId_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ExitFightAck_MsgId_entries,
      ExitFightAck_MsgId_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ExitFightAck_MsgId_strings[idx].get();
}
bool ExitFightAck_MsgId_Parse(
    const std::string& name, ExitFightAck_MsgId* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ExitFightAck_MsgId_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<ExitFightAck_MsgId>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ExitFightAck_MsgId ExitFightAck::None;
constexpr ExitFightAck_MsgId ExitFightAck::Id;
constexpr ExitFightAck_MsgId ExitFightAck::MsgId_MIN;
constexpr ExitFightAck_MsgId ExitFightAck::MsgId_MAX;
constexpr int ExitFightAck::MsgId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool Ping_MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 300019:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Ping_MsgId_strings[2] = {};

static const char Ping_MsgId_names[] =
  "Id"
  "None";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Ping_MsgId_entries[] = {
  { {Ping_MsgId_names + 0, 2}, 300019 },
  { {Ping_MsgId_names + 2, 4}, 0 },
};

static const int Ping_MsgId_entries_by_number[] = {
  1, // 0 -> None
  0, // 300019 -> Id
};

const std::string& Ping_MsgId_Name(
    Ping_MsgId value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Ping_MsgId_entries,
          Ping_MsgId_entries_by_number,
          2, Ping_MsgId_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Ping_MsgId_entries,
      Ping_MsgId_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Ping_MsgId_strings[idx].get();
}
bool Ping_MsgId_Parse(
    const std::string& name, Ping_MsgId* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Ping_MsgId_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<Ping_MsgId>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Ping_MsgId Ping::None;
constexpr Ping_MsgId Ping::Id;
constexpr Ping_MsgId Ping::MsgId_MIN;
constexpr Ping_MsgId Ping::MsgId_MAX;
constexpr int Ping::MsgId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool Pong_MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 300020:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Pong_MsgId_strings[2] = {};

static const char Pong_MsgId_names[] =
  "Id"
  "None";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Pong_MsgId_entries[] = {
  { {Pong_MsgId_names + 0, 2}, 300020 },
  { {Pong_MsgId_names + 2, 4}, 0 },
};

static const int Pong_MsgId_entries_by_number[] = {
  1, // 0 -> None
  0, // 300020 -> Id
};

const std::string& Pong_MsgId_Name(
    Pong_MsgId value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Pong_MsgId_entries,
          Pong_MsgId_entries_by_number,
          2, Pong_MsgId_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Pong_MsgId_entries,
      Pong_MsgId_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Pong_MsgId_strings[idx].get();
}
bool Pong_MsgId_Parse(
    const std::string& name, Pong_MsgId* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Pong_MsgId_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<Pong_MsgId>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Pong_MsgId Pong::None;
constexpr Pong_MsgId Pong::Id;
constexpr Pong_MsgId Pong::MsgId_MIN;
constexpr Pong_MsgId Pong::MsgId_MAX;
constexpr int Pong::MsgId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool PushPingInfo_MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 300022:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PushPingInfo_MsgId_strings[2] = {};

static const char PushPingInfo_MsgId_names[] =
  "Id"
  "None";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PushPingInfo_MsgId_entries[] = {
  { {PushPingInfo_MsgId_names + 0, 2}, 300022 },
  { {PushPingInfo_MsgId_names + 2, 4}, 0 },
};

static const int PushPingInfo_MsgId_entries_by_number[] = {
  1, // 0 -> None
  0, // 300022 -> Id
};

const std::string& PushPingInfo_MsgId_Name(
    PushPingInfo_MsgId value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PushPingInfo_MsgId_entries,
          PushPingInfo_MsgId_entries_by_number,
          2, PushPingInfo_MsgId_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PushPingInfo_MsgId_entries,
      PushPingInfo_MsgId_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PushPingInfo_MsgId_strings[idx].get();
}
bool PushPingInfo_MsgId_Parse(
    const std::string& name, PushPingInfo_MsgId* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PushPingInfo_MsgId_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<PushPingInfo_MsgId>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PushPingInfo_MsgId PushPingInfo::None;
constexpr PushPingInfo_MsgId PushPingInfo::Id;
constexpr PushPingInfo_MsgId PushPingInfo::MsgId_MIN;
constexpr PushPingInfo_MsgId PushPingInfo::MsgId_MAX;
constexpr int PushPingInfo::MsgId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void JoinFightReq::InitAsDefaultInstance() {
}
class JoinFightReq::_Internal {
 public:
};

JoinFightReq::JoinFightReq()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.JoinFightReq)
}
JoinFightReq::JoinFightReq(const JoinFightReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&frame_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(frame_));
  // @@protoc_insertion_point(copy_constructor:msg.JoinFightReq)
}

void JoinFightReq::SharedCtor() {
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(frame_));
}

JoinFightReq::~JoinFightReq() {
  // @@protoc_insertion_point(destructor:msg.JoinFightReq)
  SharedDtor();
}

void JoinFightReq::SharedDtor() {
}

void JoinFightReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JoinFightReq& JoinFightReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JoinFightReq_C2Fight_2eproto.base);
  return *internal_default_instance();
}


void JoinFightReq::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.JoinFightReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(frame_));
  _internal_metadata_.Clear();
}

const char* JoinFightReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 fightUUID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          fightuuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 playerID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 frame = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JoinFightReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.JoinFightReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fightUUID = 1;
  if (this->fightuuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_fightuuid(), target);
  }

  // int64 playerID = 2;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_playerid(), target);
  }

  // int32 frame = 3;
  if (this->frame() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_frame(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.JoinFightReq)
  return target;
}

size_t JoinFightReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.JoinFightReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 playerID = 2;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_playerid());
  }

  // int32 fightUUID = 1;
  if (this->fightuuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fightuuid());
  }

  // int32 frame = 3;
  if (this->frame() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_frame());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JoinFightReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const JoinFightReq*>(
      &from));
}

void JoinFightReq::MergeFrom(const JoinFightReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.JoinFightReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
  if (from.fightuuid() != 0) {
    _internal_set_fightuuid(from._internal_fightuuid());
  }
  if (from.frame() != 0) {
    _internal_set_frame(from._internal_frame());
  }
}

void JoinFightReq::CopyFrom(const JoinFightReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.JoinFightReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinFightReq::IsInitialized() const {
  return true;
}

void JoinFightReq::InternalSwap(JoinFightReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(playerid_, other->playerid_);
  swap(fightuuid_, other->fightuuid_);
  swap(frame_, other->frame_);
}

std::string JoinFightReq::GetTypeName() const {
  return "msg.JoinFightReq";
}


// ===================================================================

void FightWorldInfo::InitAsDefaultInstance() {
}
class FightWorldInfo::_Internal {
 public:
};

FightWorldInfo::FightWorldInfo()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.FightWorldInfo)
}
FightWorldInfo::FightWorldInfo(const FightWorldInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      roles_(from.roles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&frame_, &from.frame_,
    static_cast<size_t>(reinterpret_cast<char*>(&isofflinemode_) -
    reinterpret_cast<char*>(&frame_)) + sizeof(isofflinemode_));
  // @@protoc_insertion_point(copy_constructor:msg.FightWorldInfo)
}

void FightWorldInfo::SharedCtor() {
  ::memset(&frame_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isofflinemode_) -
      reinterpret_cast<char*>(&frame_)) + sizeof(isofflinemode_));
}

FightWorldInfo::~FightWorldInfo() {
  // @@protoc_insertion_point(destructor:msg.FightWorldInfo)
  SharedDtor();
}

void FightWorldInfo::SharedDtor() {
}

void FightWorldInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FightWorldInfo& FightWorldInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FightWorldInfo_C2Fight_2eproto.base);
  return *internal_default_instance();
}


void FightWorldInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.FightWorldInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roles_.Clear();
  ::memset(&frame_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isofflinemode_) -
      reinterpret_cast<char*>(&frame_)) + sizeof(isofflinemode_));
  _internal_metadata_.Clear();
}

const char* FightWorldInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 frame = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 svr_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          svr_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mapId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 randomSeed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          randomseed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uuidSeed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          uuidseed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isOfflineMode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          isofflinemode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 roles = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_roles(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_roles(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FightWorldInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.FightWorldInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 frame = 1;
  if (this->frame() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_frame(), target);
  }

  // int32 svr_status = 2;
  if (this->svr_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_svr_status(), target);
  }

  // int32 mapId = 3;
  if (this->mapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_mapid(), target);
  }

  // uint32 randomSeed = 4;
  if (this->randomseed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_randomseed(), target);
  }

  // uint32 uuidSeed = 5;
  if (this->uuidseed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_uuidseed(), target);
  }

  // bool isOfflineMode = 6;
  if (this->isofflinemode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_isofflinemode(), target);
  }

  // repeated int64 roles = 7;
  {
    int byte_size = _roles_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          7, _internal_roles(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.FightWorldInfo)
  return target;
}

size_t FightWorldInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.FightWorldInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 roles = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->roles_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _roles_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 frame = 1;
  if (this->frame() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_frame());
  }

  // int32 svr_status = 2;
  if (this->svr_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_svr_status());
  }

  // int32 mapId = 3;
  if (this->mapid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mapid());
  }

  // uint32 randomSeed = 4;
  if (this->randomseed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_randomseed());
  }

  // uint32 uuidSeed = 5;
  if (this->uuidseed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uuidseed());
  }

  // bool isOfflineMode = 6;
  if (this->isofflinemode() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FightWorldInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FightWorldInfo*>(
      &from));
}

void FightWorldInfo::MergeFrom(const FightWorldInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.FightWorldInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  roles_.MergeFrom(from.roles_);
  if (from.frame() != 0) {
    _internal_set_frame(from._internal_frame());
  }
  if (from.svr_status() != 0) {
    _internal_set_svr_status(from._internal_svr_status());
  }
  if (from.mapid() != 0) {
    _internal_set_mapid(from._internal_mapid());
  }
  if (from.randomseed() != 0) {
    _internal_set_randomseed(from._internal_randomseed());
  }
  if (from.uuidseed() != 0) {
    _internal_set_uuidseed(from._internal_uuidseed());
  }
  if (from.isofflinemode() != 0) {
    _internal_set_isofflinemode(from._internal_isofflinemode());
  }
}

void FightWorldInfo::CopyFrom(const FightWorldInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.FightWorldInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightWorldInfo::IsInitialized() const {
  return true;
}

void FightWorldInfo::InternalSwap(FightWorldInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  roles_.InternalSwap(&other->roles_);
  swap(frame_, other->frame_);
  swap(svr_status_, other->svr_status_);
  swap(mapid_, other->mapid_);
  swap(randomseed_, other->randomseed_);
  swap(uuidseed_, other->uuidseed_);
  swap(isofflinemode_, other->isofflinemode_);
}

std::string FightWorldInfo::GetTypeName() const {
  return "msg.FightWorldInfo";
}


// ===================================================================

void JoinFightAck::InitAsDefaultInstance() {
  ::msg::_JoinFightAck_default_instance_._instance.get_mutable()->worldinfo_ = const_cast< ::msg::FightWorldInfo*>(
      ::msg::FightWorldInfo::internal_default_instance());
}
class JoinFightAck::_Internal {
 public:
  static const ::msg::FightWorldInfo& worldinfo(const JoinFightAck* msg);
};

const ::msg::FightWorldInfo&
JoinFightAck::_Internal::worldinfo(const JoinFightAck* msg) {
  return *msg->worldinfo_;
}
JoinFightAck::JoinFightAck()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.JoinFightAck)
}
JoinFightAck::JoinFightAck(const JoinFightAck& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_worldinfo()) {
    worldinfo_ = new ::msg::FightWorldInfo(*from.worldinfo_);
  } else {
    worldinfo_ = nullptr;
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:msg.JoinFightAck)
}

void JoinFightAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JoinFightAck_C2Fight_2eproto.base);
  ::memset(&worldinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&worldinfo_)) + sizeof(code_));
}

JoinFightAck::~JoinFightAck() {
  // @@protoc_insertion_point(destructor:msg.JoinFightAck)
  SharedDtor();
}

void JoinFightAck::SharedDtor() {
  if (this != internal_default_instance()) delete worldinfo_;
}

void JoinFightAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JoinFightAck& JoinFightAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JoinFightAck_C2Fight_2eproto.base);
  return *internal_default_instance();
}


void JoinFightAck::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.JoinFightAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && worldinfo_ != nullptr) {
    delete worldinfo_;
  }
  worldinfo_ = nullptr;
  code_ = 0;
  _internal_metadata_.Clear();
}

const char* JoinFightAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .msg.FightWorldInfo worldInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_worldinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JoinFightAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.JoinFightAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // .msg.FightWorldInfo worldInfo = 2;
  if (this->has_worldinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::worldinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.JoinFightAck)
  return target;
}

size_t JoinFightAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.JoinFightAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.FightWorldInfo worldInfo = 2;
  if (this->has_worldinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *worldinfo_);
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JoinFightAck::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const JoinFightAck*>(
      &from));
}

void JoinFightAck::MergeFrom(const JoinFightAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.JoinFightAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_worldinfo()) {
    _internal_mutable_worldinfo()->::msg::FightWorldInfo::MergeFrom(from._internal_worldinfo());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void JoinFightAck::CopyFrom(const JoinFightAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.JoinFightAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinFightAck::IsInitialized() const {
  return true;
}

void JoinFightAck::InternalSwap(JoinFightAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(worldinfo_, other->worldinfo_);
  swap(code_, other->code_);
}

std::string JoinFightAck::GetTypeName() const {
  return "msg.JoinFightAck";
}


// ===================================================================

void PlayerLoadingReq::InitAsDefaultInstance() {
}
class PlayerLoadingReq::_Internal {
 public:
};

PlayerLoadingReq::PlayerLoadingReq()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.PlayerLoadingReq)
}
PlayerLoadingReq::PlayerLoadingReq(const PlayerLoadingReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&percent_, &from.percent_,
    static_cast<size_t>(reinterpret_cast<char*>(&finish_) -
    reinterpret_cast<char*>(&percent_)) + sizeof(finish_));
  // @@protoc_insertion_point(copy_constructor:msg.PlayerLoadingReq)
}

void PlayerLoadingReq::SharedCtor() {
  ::memset(&percent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&finish_) -
      reinterpret_cast<char*>(&percent_)) + sizeof(finish_));
}

PlayerLoadingReq::~PlayerLoadingReq() {
  // @@protoc_insertion_point(destructor:msg.PlayerLoadingReq)
  SharedDtor();
}

void PlayerLoadingReq::SharedDtor() {
}

void PlayerLoadingReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerLoadingReq& PlayerLoadingReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerLoadingReq_C2Fight_2eproto.base);
  return *internal_default_instance();
}


void PlayerLoadingReq::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.PlayerLoadingReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&percent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&finish_) -
      reinterpret_cast<char*>(&percent_)) + sizeof(finish_));
  _internal_metadata_.Clear();
}

const char* PlayerLoadingReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float percent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool finish = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          finish_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerLoadingReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PlayerLoadingReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float percent = 1;
  if (!(this->percent() <= 0 && this->percent() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_percent(), target);
  }

  // bool finish = 2;
  if (this->finish() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_finish(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PlayerLoadingReq)
  return target;
}

size_t PlayerLoadingReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.PlayerLoadingReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float percent = 1;
  if (!(this->percent() <= 0 && this->percent() >= 0)) {
    total_size += 1 + 4;
  }

  // bool finish = 2;
  if (this->finish() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerLoadingReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PlayerLoadingReq*>(
      &from));
}

void PlayerLoadingReq::MergeFrom(const PlayerLoadingReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.PlayerLoadingReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.percent() <= 0 && from.percent() >= 0)) {
    _internal_set_percent(from._internal_percent());
  }
  if (from.finish() != 0) {
    _internal_set_finish(from._internal_finish());
  }
}

void PlayerLoadingReq::CopyFrom(const PlayerLoadingReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.PlayerLoadingReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerLoadingReq::IsInitialized() const {
  return true;
}

void PlayerLoadingReq::InternalSwap(PlayerLoadingReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(percent_, other->percent_);
  swap(finish_, other->finish_);
}

std::string PlayerLoadingReq::GetTypeName() const {
  return "msg.PlayerLoadingReq";
}


// ===================================================================

void PlayerLoadingAck::InitAsDefaultInstance() {
}
class PlayerLoadingAck::_Internal {
 public:
};

PlayerLoadingAck::PlayerLoadingAck()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.PlayerLoadingAck)
}
PlayerLoadingAck::PlayerLoadingAck(const PlayerLoadingAck& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      pid_(from.pid_),
      percent_(from.percent_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  finish_ = from.finish_;
  // @@protoc_insertion_point(copy_constructor:msg.PlayerLoadingAck)
}

void PlayerLoadingAck::SharedCtor() {
  finish_ = false;
}

PlayerLoadingAck::~PlayerLoadingAck() {
  // @@protoc_insertion_point(destructor:msg.PlayerLoadingAck)
  SharedDtor();
}

void PlayerLoadingAck::SharedDtor() {
}

void PlayerLoadingAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerLoadingAck& PlayerLoadingAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerLoadingAck_C2Fight_2eproto.base);
  return *internal_default_instance();
}


void PlayerLoadingAck::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.PlayerLoadingAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pid_.Clear();
  percent_.Clear();
  finish_ = false;
  _internal_metadata_.Clear();
}

const char* PlayerLoadingAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int64 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_pid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_pid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float percent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_percent(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_percent(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool finish = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          finish_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerLoadingAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PlayerLoadingAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 pid = 1;
  {
    int byte_size = _pid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_pid(), byte_size, target);
    }
  }

  // repeated float percent = 2;
  if (this->_internal_percent_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_percent(), target);
  }

  // bool finish = 3;
  if (this->finish() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_finish(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PlayerLoadingAck)
  return target;
}

size_t PlayerLoadingAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.PlayerLoadingAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 pid = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->pid_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _pid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float percent = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_percent_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _percent_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bool finish = 3;
  if (this->finish() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerLoadingAck::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PlayerLoadingAck*>(
      &from));
}

void PlayerLoadingAck::MergeFrom(const PlayerLoadingAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.PlayerLoadingAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pid_.MergeFrom(from.pid_);
  percent_.MergeFrom(from.percent_);
  if (from.finish() != 0) {
    _internal_set_finish(from._internal_finish());
  }
}

void PlayerLoadingAck::CopyFrom(const PlayerLoadingAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.PlayerLoadingAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerLoadingAck::IsInitialized() const {
  return true;
}

void PlayerLoadingAck::InternalSwap(PlayerLoadingAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pid_.InternalSwap(&other->pid_);
  percent_.InternalSwap(&other->percent_);
  swap(finish_, other->finish_);
}

std::string PlayerLoadingAck::GetTypeName() const {
  return "msg.PlayerLoadingAck";
}


// ===================================================================

void PlayerReadyNotify::InitAsDefaultInstance() {
}
class PlayerReadyNotify::_Internal {
 public:
};

PlayerReadyNotify::PlayerReadyNotify()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.PlayerReadyNotify)
}
PlayerReadyNotify::PlayerReadyNotify(const PlayerReadyNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pid_ = from.pid_;
  // @@protoc_insertion_point(copy_constructor:msg.PlayerReadyNotify)
}

void PlayerReadyNotify::SharedCtor() {
  pid_ = PROTOBUF_LONGLONG(0);
}

PlayerReadyNotify::~PlayerReadyNotify() {
  // @@protoc_insertion_point(destructor:msg.PlayerReadyNotify)
  SharedDtor();
}

void PlayerReadyNotify::SharedDtor() {
}

void PlayerReadyNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerReadyNotify& PlayerReadyNotify::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerReadyNotify_C2Fight_2eproto.base);
  return *internal_default_instance();
}


void PlayerReadyNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.PlayerReadyNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pid_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* PlayerReadyNotify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerReadyNotify::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PlayerReadyNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 pid = 1;
  if (this->pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PlayerReadyNotify)
  return target;
}

size_t PlayerReadyNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.PlayerReadyNotify)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 pid = 1;
  if (this->pid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_pid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerReadyNotify::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PlayerReadyNotify*>(
      &from));
}

void PlayerReadyNotify::MergeFrom(const PlayerReadyNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.PlayerReadyNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
}

void PlayerReadyNotify::CopyFrom(const PlayerReadyNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.PlayerReadyNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerReadyNotify::IsInitialized() const {
  return true;
}

void PlayerReadyNotify::InternalSwap(PlayerReadyNotify* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pid_, other->pid_);
}

std::string PlayerReadyNotify::GetTypeName() const {
  return "msg.PlayerReadyNotify";
}


// ===================================================================

void PlayerExitFightNotify::InitAsDefaultInstance() {
}
class PlayerExitFightNotify::_Internal {
 public:
};

PlayerExitFightNotify::PlayerExitFightNotify()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.PlayerExitFightNotify)
}
PlayerExitFightNotify::PlayerExitFightNotify(const PlayerExitFightNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pid_ = from.pid_;
  // @@protoc_insertion_point(copy_constructor:msg.PlayerExitFightNotify)
}

void PlayerExitFightNotify::SharedCtor() {
  pid_ = PROTOBUF_LONGLONG(0);
}

PlayerExitFightNotify::~PlayerExitFightNotify() {
  // @@protoc_insertion_point(destructor:msg.PlayerExitFightNotify)
  SharedDtor();
}

void PlayerExitFightNotify::SharedDtor() {
}

void PlayerExitFightNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerExitFightNotify& PlayerExitFightNotify::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerExitFightNotify_C2Fight_2eproto.base);
  return *internal_default_instance();
}


void PlayerExitFightNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.PlayerExitFightNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pid_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* PlayerExitFightNotify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerExitFightNotify::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PlayerExitFightNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 pid = 1;
  if (this->pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PlayerExitFightNotify)
  return target;
}

size_t PlayerExitFightNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.PlayerExitFightNotify)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 pid = 1;
  if (this->pid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_pid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerExitFightNotify::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PlayerExitFightNotify*>(
      &from));
}

void PlayerExitFightNotify::MergeFrom(const PlayerExitFightNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.PlayerExitFightNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
}

void PlayerExitFightNotify::CopyFrom(const PlayerExitFightNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.PlayerExitFightNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerExitFightNotify::IsInitialized() const {
  return true;
}

void PlayerExitFightNotify::InternalSwap(PlayerExitFightNotify* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pid_, other->pid_);
}

std::string PlayerExitFightNotify::GetTypeName() const {
  return "msg.PlayerExitFightNotify";
}


// ===================================================================

void FrameInputData::InitAsDefaultInstance() {
}
class FrameInputData::_Internal {
 public:
};

FrameInputData::FrameInputData()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.FrameInputData)
}
FrameInputData::FrameInputData(const FrameInputData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_down_ = from.key_down_;
  // @@protoc_insertion_point(copy_constructor:msg.FrameInputData)
}

void FrameInputData::SharedCtor() {
  key_down_ = 0u;
}

FrameInputData::~FrameInputData() {
  // @@protoc_insertion_point(destructor:msg.FrameInputData)
  SharedDtor();
}

void FrameInputData::SharedDtor() {
}

void FrameInputData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FrameInputData& FrameInputData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FrameInputData_C2Fight_2eproto.base);
  return *internal_default_instance();
}


void FrameInputData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.FrameInputData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_down_ = 0u;
  _internal_metadata_.Clear();
}

const char* FrameInputData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 key_down = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          key_down_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FrameInputData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.FrameInputData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 key_down = 1;
  if (this->key_down() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_key_down(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.FrameInputData)
  return target;
}

size_t FrameInputData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.FrameInputData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 key_down = 1;
  if (this->key_down() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_key_down());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameInputData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FrameInputData*>(
      &from));
}

void FrameInputData::MergeFrom(const FrameInputData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.FrameInputData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key_down() != 0) {
    _internal_set_key_down(from._internal_key_down());
  }
}

void FrameInputData::CopyFrom(const FrameInputData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.FrameInputData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameInputData::IsInitialized() const {
  return true;
}

void FrameInputData::InternalSwap(FrameInputData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(key_down_, other->key_down_);
}

std::string FrameInputData::GetTypeName() const {
  return "msg.FrameInputData";
}


// ===================================================================

void PlayerFrameInput::InitAsDefaultInstance() {
  ::msg::_PlayerFrameInput_default_instance_._instance.get_mutable()->input_ = const_cast< ::msg::FrameInputData*>(
      ::msg::FrameInputData::internal_default_instance());
}
class PlayerFrameInput::_Internal {
 public:
  static const ::msg::FrameInputData& input(const PlayerFrameInput* msg);
};

const ::msg::FrameInputData&
PlayerFrameInput::_Internal::input(const PlayerFrameInput* msg) {
  return *msg->input_;
}
PlayerFrameInput::PlayerFrameInput()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.PlayerFrameInput)
}
PlayerFrameInput::PlayerFrameInput(const PlayerFrameInput& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_input()) {
    input_ = new ::msg::FrameInputData(*from.input_);
  } else {
    input_ = nullptr;
  }
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&frame_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(frame_));
  // @@protoc_insertion_point(copy_constructor:msg.PlayerFrameInput)
}

void PlayerFrameInput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayerFrameInput_C2Fight_2eproto.base);
  ::memset(&input_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_) -
      reinterpret_cast<char*>(&input_)) + sizeof(frame_));
}

PlayerFrameInput::~PlayerFrameInput() {
  // @@protoc_insertion_point(destructor:msg.PlayerFrameInput)
  SharedDtor();
}

void PlayerFrameInput::SharedDtor() {
  if (this != internal_default_instance()) delete input_;
}

void PlayerFrameInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerFrameInput& PlayerFrameInput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerFrameInput_C2Fight_2eproto.base);
  return *internal_default_instance();
}


void PlayerFrameInput::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.PlayerFrameInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(frame_));
  _internal_metadata_.Clear();
}

const char* PlayerFrameInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 frame = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .msg.FrameInputData input = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerFrameInput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PlayerFrameInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 pid = 1;
  if (this->pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_pid(), target);
  }

  // uint32 frame = 2;
  if (this->frame() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_frame(), target);
  }

  // .msg.FrameInputData input = 3;
  if (this->has_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::input(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PlayerFrameInput)
  return target;
}

size_t PlayerFrameInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.PlayerFrameInput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.FrameInputData input = 3;
  if (this->has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  // int64 pid = 1;
  if (this->pid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_pid());
  }

  // uint32 frame = 2;
  if (this->frame() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_frame());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerFrameInput::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PlayerFrameInput*>(
      &from));
}

void PlayerFrameInput::MergeFrom(const PlayerFrameInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.PlayerFrameInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_input()) {
    _internal_mutable_input()->::msg::FrameInputData::MergeFrom(from._internal_input());
  }
  if (from.pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  if (from.frame() != 0) {
    _internal_set_frame(from._internal_frame());
  }
}

void PlayerFrameInput::CopyFrom(const PlayerFrameInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.PlayerFrameInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerFrameInput::IsInitialized() const {
  return true;
}

void PlayerFrameInput::InternalSwap(PlayerFrameInput* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(input_, other->input_);
  swap(pid_, other->pid_);
  swap(frame_, other->frame_);
}

std::string PlayerFrameInput::GetTypeName() const {
  return "msg.PlayerFrameInput";
}


// ===================================================================

void RunNextFrameReq::InitAsDefaultInstance() {
  ::msg::_RunNextFrameReq_default_instance_._instance.get_mutable()->input_ = const_cast< ::msg::FrameInputData*>(
      ::msg::FrameInputData::internal_default_instance());
}
class RunNextFrameReq::_Internal {
 public:
  static const ::msg::FrameInputData& input(const RunNextFrameReq* msg);
};

const ::msg::FrameInputData&
RunNextFrameReq::_Internal::input(const RunNextFrameReq* msg) {
  return *msg->input_;
}
RunNextFrameReq::RunNextFrameReq()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.RunNextFrameReq)
}
RunNextFrameReq::RunNextFrameReq(const RunNextFrameReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_input()) {
    input_ = new ::msg::FrameInputData(*from.input_);
  } else {
    input_ = nullptr;
  }
  frame_ = from.frame_;
  // @@protoc_insertion_point(copy_constructor:msg.RunNextFrameReq)
}

void RunNextFrameReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RunNextFrameReq_C2Fight_2eproto.base);
  ::memset(&input_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_) -
      reinterpret_cast<char*>(&input_)) + sizeof(frame_));
}

RunNextFrameReq::~RunNextFrameReq() {
  // @@protoc_insertion_point(destructor:msg.RunNextFrameReq)
  SharedDtor();
}

void RunNextFrameReq::SharedDtor() {
  if (this != internal_default_instance()) delete input_;
}

void RunNextFrameReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RunNextFrameReq& RunNextFrameReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RunNextFrameReq_C2Fight_2eproto.base);
  return *internal_default_instance();
}


void RunNextFrameReq::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.RunNextFrameReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  frame_ = 0u;
  _internal_metadata_.Clear();
}

const char* RunNextFrameReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 frame = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .msg.FrameInputData input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RunNextFrameReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.RunNextFrameReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 frame = 1;
  if (this->frame() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_frame(), target);
  }

  // .msg.FrameInputData input = 2;
  if (this->has_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::input(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.RunNextFrameReq)
  return target;
}

size_t RunNextFrameReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.RunNextFrameReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.FrameInputData input = 2;
  if (this->has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  // uint32 frame = 1;
  if (this->frame() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_frame());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RunNextFrameReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RunNextFrameReq*>(
      &from));
}

void RunNextFrameReq::MergeFrom(const RunNextFrameReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.RunNextFrameReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_input()) {
    _internal_mutable_input()->::msg::FrameInputData::MergeFrom(from._internal_input());
  }
  if (from.frame() != 0) {
    _internal_set_frame(from._internal_frame());
  }
}

void RunNextFrameReq::CopyFrom(const RunNextFrameReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.RunNextFrameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunNextFrameReq::IsInitialized() const {
  return true;
}

void RunNextFrameReq::InternalSwap(RunNextFrameReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(input_, other->input_);
  swap(frame_, other->frame_);
}

std::string RunNextFrameReq::GetTypeName() const {
  return "msg.RunNextFrameReq";
}


// ===================================================================

void RunNextFrameAck::InitAsDefaultInstance() {
}
class RunNextFrameAck::_Internal {
 public:
};

RunNextFrameAck::RunNextFrameAck()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.RunNextFrameAck)
}
RunNextFrameAck::RunNextFrameAck(const RunNextFrameAck& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      frames_(from.frames_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nextframe_ = from.nextframe_;
  // @@protoc_insertion_point(copy_constructor:msg.RunNextFrameAck)
}

void RunNextFrameAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RunNextFrameAck_C2Fight_2eproto.base);
  nextframe_ = 0u;
}

RunNextFrameAck::~RunNextFrameAck() {
  // @@protoc_insertion_point(destructor:msg.RunNextFrameAck)
  SharedDtor();
}

void RunNextFrameAck::SharedDtor() {
}

void RunNextFrameAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RunNextFrameAck& RunNextFrameAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RunNextFrameAck_C2Fight_2eproto.base);
  return *internal_default_instance();
}


void RunNextFrameAck::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.RunNextFrameAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frames_.Clear();
  nextframe_ = 0u;
  _internal_metadata_.Clear();
}

const char* RunNextFrameAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 nextFrame = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          nextframe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .msg.PlayerFrameInput frames = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_frames(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RunNextFrameAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.RunNextFrameAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 nextFrame = 1;
  if (this->nextframe() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_nextframe(), target);
  }

  // repeated .msg.PlayerFrameInput frames = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_frames_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_frames(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.RunNextFrameAck)
  return target;
}

size_t RunNextFrameAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.RunNextFrameAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.PlayerFrameInput frames = 2;
  total_size += 1UL * this->_internal_frames_size();
  for (const auto& msg : this->frames_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 nextFrame = 1;
  if (this->nextframe() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nextframe());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RunNextFrameAck::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RunNextFrameAck*>(
      &from));
}

void RunNextFrameAck::MergeFrom(const RunNextFrameAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.RunNextFrameAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  frames_.MergeFrom(from.frames_);
  if (from.nextframe() != 0) {
    _internal_set_nextframe(from._internal_nextframe());
  }
}

void RunNextFrameAck::CopyFrom(const RunNextFrameAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.RunNextFrameAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunNextFrameAck::IsInitialized() const {
  return true;
}

void RunNextFrameAck::InternalSwap(RunNextFrameAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  frames_.InternalSwap(&other->frames_);
  swap(nextframe_, other->nextframe_);
}

std::string RunNextFrameAck::GetTypeName() const {
  return "msg.RunNextFrameAck";
}


// ===================================================================

void PushFrameInputBegin::InitAsDefaultInstance() {
}
class PushFrameInputBegin::_Internal {
 public:
};

PushFrameInputBegin::PushFrameInputBegin()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.PushFrameInputBegin)
}
PushFrameInputBegin::PushFrameInputBegin(const PushFrameInputBegin& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.PushFrameInputBegin)
}

void PushFrameInputBegin::SharedCtor() {
}

PushFrameInputBegin::~PushFrameInputBegin() {
  // @@protoc_insertion_point(destructor:msg.PushFrameInputBegin)
  SharedDtor();
}

void PushFrameInputBegin::SharedDtor() {
}

void PushFrameInputBegin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PushFrameInputBegin& PushFrameInputBegin::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PushFrameInputBegin_C2Fight_2eproto.base);
  return *internal_default_instance();
}


void PushFrameInputBegin::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.PushFrameInputBegin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* PushFrameInputBegin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PushFrameInputBegin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PushFrameInputBegin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PushFrameInputBegin)
  return target;
}

size_t PushFrameInputBegin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.PushFrameInputBegin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PushFrameInputBegin::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PushFrameInputBegin*>(
      &from));
}

void PushFrameInputBegin::MergeFrom(const PushFrameInputBegin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.PushFrameInputBegin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PushFrameInputBegin::CopyFrom(const PushFrameInputBegin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.PushFrameInputBegin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushFrameInputBegin::IsInitialized() const {
  return true;
}

void PushFrameInputBegin::InternalSwap(PushFrameInputBegin* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

std::string PushFrameInputBegin::GetTypeName() const {
  return "msg.PushFrameInputBegin";
}


// ===================================================================

void PushFrameInputEnd::InitAsDefaultInstance() {
}
class PushFrameInputEnd::_Internal {
 public:
};

PushFrameInputEnd::PushFrameInputEnd()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.PushFrameInputEnd)
}
PushFrameInputEnd::PushFrameInputEnd(const PushFrameInputEnd& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.PushFrameInputEnd)
}

void PushFrameInputEnd::SharedCtor() {
}

PushFrameInputEnd::~PushFrameInputEnd() {
  // @@protoc_insertion_point(destructor:msg.PushFrameInputEnd)
  SharedDtor();
}

void PushFrameInputEnd::SharedDtor() {
}

void PushFrameInputEnd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PushFrameInputEnd& PushFrameInputEnd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PushFrameInputEnd_C2Fight_2eproto.base);
  return *internal_default_instance();
}


void PushFrameInputEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.PushFrameInputEnd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* PushFrameInputEnd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PushFrameInputEnd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PushFrameInputEnd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PushFrameInputEnd)
  return target;
}

size_t PushFrameInputEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.PushFrameInputEnd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PushFrameInputEnd::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PushFrameInputEnd*>(
      &from));
}

void PushFrameInputEnd::MergeFrom(const PushFrameInputEnd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.PushFrameInputEnd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PushFrameInputEnd::CopyFrom(const PushFrameInputEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.PushFrameInputEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushFrameInputEnd::IsInitialized() const {
  return true;
}

void PushFrameInputEnd::InternalSwap(PushFrameInputEnd* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

std::string PushFrameInputEnd::GetTypeName() const {
  return "msg.PushFrameInputEnd";
}


// ===================================================================

void PushFrameInput::InitAsDefaultInstance() {
}
class PushFrameInput::_Internal {
 public:
};

PushFrameInput::PushFrameInput()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.PushFrameInput)
}
PushFrameInput::PushFrameInput(const PushFrameInput& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      frames_(from.frames_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lastframe_ = from.lastframe_;
  // @@protoc_insertion_point(copy_constructor:msg.PushFrameInput)
}

void PushFrameInput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PushFrameInput_C2Fight_2eproto.base);
  lastframe_ = 0u;
}

PushFrameInput::~PushFrameInput() {
  // @@protoc_insertion_point(destructor:msg.PushFrameInput)
  SharedDtor();
}

void PushFrameInput::SharedDtor() {
}

void PushFrameInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PushFrameInput& PushFrameInput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PushFrameInput_C2Fight_2eproto.base);
  return *internal_default_instance();
}


void PushFrameInput::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.PushFrameInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frames_.Clear();
  lastframe_ = 0u;
  _internal_metadata_.Clear();
}

const char* PushFrameInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 lastFrame = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          lastframe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .msg.PlayerFrameInput frames = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_frames(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PushFrameInput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PushFrameInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 lastFrame = 1;
  if (this->lastframe() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_lastframe(), target);
  }

  // repeated .msg.PlayerFrameInput frames = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_frames_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_frames(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PushFrameInput)
  return target;
}

size_t PushFrameInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.PushFrameInput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.PlayerFrameInput frames = 2;
  total_size += 1UL * this->_internal_frames_size();
  for (const auto& msg : this->frames_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 lastFrame = 1;
  if (this->lastframe() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lastframe());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PushFrameInput::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PushFrameInput*>(
      &from));
}

void PushFrameInput::MergeFrom(const PushFrameInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.PushFrameInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  frames_.MergeFrom(from.frames_);
  if (from.lastframe() != 0) {
    _internal_set_lastframe(from._internal_lastframe());
  }
}

void PushFrameInput::CopyFrom(const PushFrameInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.PushFrameInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushFrameInput::IsInitialized() const {
  return true;
}

void PushFrameInput::InternalSwap(PushFrameInput* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  frames_.InternalSwap(&other->frames_);
  swap(lastframe_, other->lastframe_);
}

std::string PushFrameInput::GetTypeName() const {
  return "msg.PushFrameInput";
}


// ===================================================================

void PlayerRecords::InitAsDefaultInstance() {
}
class PlayerRecords::_Internal {
 public:
};

PlayerRecords::PlayerRecords()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.PlayerRecords)
}
PlayerRecords::PlayerRecords(const PlayerRecords& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      frames_(from.frames_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.PlayerRecords)
}

void PlayerRecords::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayerRecords_C2Fight_2eproto.base);
}

PlayerRecords::~PlayerRecords() {
  // @@protoc_insertion_point(destructor:msg.PlayerRecords)
  SharedDtor();
}

void PlayerRecords::SharedDtor() {
}

void PlayerRecords::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerRecords& PlayerRecords::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerRecords_C2Fight_2eproto.base);
  return *internal_default_instance();
}


void PlayerRecords::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.PlayerRecords)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frames_.Clear();
  _internal_metadata_.Clear();
}

const char* PlayerRecords::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .msg.PlayerFrameInput frames = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_frames(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerRecords::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PlayerRecords)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .msg.PlayerFrameInput frames = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_frames_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_frames(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PlayerRecords)
  return target;
}

size_t PlayerRecords::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.PlayerRecords)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.PlayerFrameInput frames = 1;
  total_size += 1UL * this->_internal_frames_size();
  for (const auto& msg : this->frames_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerRecords::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PlayerRecords*>(
      &from));
}

void PlayerRecords::MergeFrom(const PlayerRecords& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.PlayerRecords)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  frames_.MergeFrom(from.frames_);
}

void PlayerRecords::CopyFrom(const PlayerRecords& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.PlayerRecords)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerRecords::IsInitialized() const {
  return true;
}

void PlayerRecords::InternalSwap(PlayerRecords* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  frames_.InternalSwap(&other->frames_);
}

std::string PlayerRecords::GetTypeName() const {
  return "msg.PlayerRecords";
}


// ===================================================================

void ExitFightReq::InitAsDefaultInstance() {
}
class ExitFightReq::_Internal {
 public:
};

ExitFightReq::ExitFightReq()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.ExitFightReq)
}
ExitFightReq::ExitFightReq(const ExitFightReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fightuuid_ = from.fightuuid_;
  // @@protoc_insertion_point(copy_constructor:msg.ExitFightReq)
}

void ExitFightReq::SharedCtor() {
  fightuuid_ = 0;
}

ExitFightReq::~ExitFightReq() {
  // @@protoc_insertion_point(destructor:msg.ExitFightReq)
  SharedDtor();
}

void ExitFightReq::SharedDtor() {
}

void ExitFightReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExitFightReq& ExitFightReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExitFightReq_C2Fight_2eproto.base);
  return *internal_default_instance();
}


void ExitFightReq::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.ExitFightReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fightuuid_ = 0;
  _internal_metadata_.Clear();
}

const char* ExitFightReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 fightUUID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          fightuuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExitFightReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ExitFightReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fightUUID = 1;
  if (this->fightuuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_fightuuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ExitFightReq)
  return target;
}

size_t ExitFightReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.ExitFightReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 fightUUID = 1;
  if (this->fightuuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fightuuid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExitFightReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ExitFightReq*>(
      &from));
}

void ExitFightReq::MergeFrom(const ExitFightReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.ExitFightReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fightuuid() != 0) {
    _internal_set_fightuuid(from._internal_fightuuid());
  }
}

void ExitFightReq::CopyFrom(const ExitFightReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.ExitFightReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExitFightReq::IsInitialized() const {
  return true;
}

void ExitFightReq::InternalSwap(ExitFightReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(fightuuid_, other->fightuuid_);
}

std::string ExitFightReq::GetTypeName() const {
  return "msg.ExitFightReq";
}


// ===================================================================

void ExitFightAck::InitAsDefaultInstance() {
}
class ExitFightAck::_Internal {
 public:
};

ExitFightAck::ExitFightAck()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.ExitFightAck)
}
ExitFightAck::ExitFightAck(const ExitFightAck& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:msg.ExitFightAck)
}

void ExitFightAck::SharedCtor() {
  code_ = 0;
}

ExitFightAck::~ExitFightAck() {
  // @@protoc_insertion_point(destructor:msg.ExitFightAck)
  SharedDtor();
}

void ExitFightAck::SharedDtor() {
}

void ExitFightAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExitFightAck& ExitFightAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExitFightAck_C2Fight_2eproto.base);
  return *internal_default_instance();
}


void ExitFightAck::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.ExitFightAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_ = 0;
  _internal_metadata_.Clear();
}

const char* ExitFightAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExitFightAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ExitFightAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ExitFightAck)
  return target;
}

size_t ExitFightAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.ExitFightAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExitFightAck::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ExitFightAck*>(
      &from));
}

void ExitFightAck::MergeFrom(const ExitFightAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.ExitFightAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void ExitFightAck::CopyFrom(const ExitFightAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.ExitFightAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExitFightAck::IsInitialized() const {
  return true;
}

void ExitFightAck::InternalSwap(ExitFightAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(code_, other->code_);
}

std::string ExitFightAck::GetTypeName() const {
  return "msg.ExitFightAck";
}


// ===================================================================

void Ping::InitAsDefaultInstance() {
}
class Ping::_Internal {
 public:
};

Ping::Ping()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Ping)
}
Ping::Ping(const Ping& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&ping_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(ping_));
  // @@protoc_insertion_point(copy_constructor:msg.Ping)
}

void Ping::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ping_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(ping_));
}

Ping::~Ping() {
  // @@protoc_insertion_point(destructor:msg.Ping)
  SharedDtor();
}

void Ping::SharedDtor() {
}

void Ping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Ping& Ping::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Ping_C2Fight_2eproto.base);
  return *internal_default_instance();
}


void Ping::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.Ping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ping_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(ping_));
  _internal_metadata_.Clear();
}

const char* Ping::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ping = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ping::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Ping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_timestamp(), target);
  }

  // int32 ping = 2;
  if (this->ping() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ping(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Ping)
  return target;
}

size_t Ping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.Ping)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_timestamp());
  }

  // int32 ping = 2;
  if (this->ping() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ping());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ping::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Ping*>(
      &from));
}

void Ping::MergeFrom(const Ping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.Ping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.ping() != 0) {
    _internal_set_ping(from._internal_ping());
  }
}

void Ping::CopyFrom(const Ping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ping::IsInitialized() const {
  return true;
}

void Ping::InternalSwap(Ping* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(timestamp_, other->timestamp_);
  swap(ping_, other->ping_);
}

std::string Ping::GetTypeName() const {
  return "msg.Ping";
}


// ===================================================================

void Pong::InitAsDefaultInstance() {
}
class Pong::_Internal {
 public:
};

Pong::Pong()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.Pong)
}
Pong::Pong(const Pong& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:msg.Pong)
}

void Pong::SharedCtor() {
  timestamp_ = 0u;
}

Pong::~Pong() {
  // @@protoc_insertion_point(destructor:msg.Pong)
  SharedDtor();
}

void Pong::SharedDtor() {
}

void Pong::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pong& Pong::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pong_C2Fight_2eproto.base);
  return *internal_default_instance();
}


void Pong::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.Pong)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_ = 0u;
  _internal_metadata_.Clear();
}

const char* Pong::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pong::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Pong)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Pong)
  return target;
}

size_t Pong::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.Pong)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pong::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Pong*>(
      &from));
}

void Pong::MergeFrom(const Pong& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.Pong)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void Pong::CopyFrom(const Pong& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.Pong)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pong::IsInitialized() const {
  return true;
}

void Pong::InternalSwap(Pong* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(timestamp_, other->timestamp_);
}

std::string Pong::GetTypeName() const {
  return "msg.Pong";
}


// ===================================================================

void PingInfo::InitAsDefaultInstance() {
}
class PingInfo::_Internal {
 public:
};

PingInfo::PingInfo()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.PingInfo)
}
PingInfo::PingInfo(const PingInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&ping_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(ping_));
  // @@protoc_insertion_point(copy_constructor:msg.PingInfo)
}

void PingInfo::SharedCtor() {
  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ping_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(ping_));
}

PingInfo::~PingInfo() {
  // @@protoc_insertion_point(destructor:msg.PingInfo)
  SharedDtor();
}

void PingInfo::SharedDtor() {
}

void PingInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PingInfo& PingInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PingInfo_C2Fight_2eproto.base);
  return *internal_default_instance();
}


void PingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.PingInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ping_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(ping_));
  _internal_metadata_.Clear();
}

const char* PingInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ping = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PingInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PingInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 pid = 1;
  if (this->pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_pid(), target);
  }

  // int32 ping = 2;
  if (this->ping() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ping(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PingInfo)
  return target;
}

size_t PingInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.PingInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 pid = 1;
  if (this->pid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_pid());
  }

  // int32 ping = 2;
  if (this->ping() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ping());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PingInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PingInfo*>(
      &from));
}

void PingInfo::MergeFrom(const PingInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.PingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  if (from.ping() != 0) {
    _internal_set_ping(from._internal_ping());
  }
}

void PingInfo::CopyFrom(const PingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.PingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingInfo::IsInitialized() const {
  return true;
}

void PingInfo::InternalSwap(PingInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pid_, other->pid_);
  swap(ping_, other->ping_);
}

std::string PingInfo::GetTypeName() const {
  return "msg.PingInfo";
}


// ===================================================================

void PushPingInfo::InitAsDefaultInstance() {
}
class PushPingInfo::_Internal {
 public:
};

PushPingInfo::PushPingInfo()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.PushPingInfo)
}
PushPingInfo::PushPingInfo(const PushPingInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      infos_(from.infos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.PushPingInfo)
}

void PushPingInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PushPingInfo_C2Fight_2eproto.base);
}

PushPingInfo::~PushPingInfo() {
  // @@protoc_insertion_point(destructor:msg.PushPingInfo)
  SharedDtor();
}

void PushPingInfo::SharedDtor() {
}

void PushPingInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PushPingInfo& PushPingInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PushPingInfo_C2Fight_2eproto.base);
  return *internal_default_instance();
}


void PushPingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.PushPingInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infos_.Clear();
  _internal_metadata_.Clear();
}

const char* PushPingInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .msg.PingInfo infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PushPingInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PushPingInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .msg.PingInfo infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PushPingInfo)
  return target;
}

size_t PushPingInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.PushPingInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.PingInfo infos = 1;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PushPingInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PushPingInfo*>(
      &from));
}

void PushPingInfo::MergeFrom(const PushPingInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.PushPingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infos_.MergeFrom(from.infos_);
}

void PushPingInfo::CopyFrom(const PushPingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.PushPingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushPingInfo::IsInitialized() const {
  return true;
}

void PushPingInfo::InternalSwap(PushPingInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  infos_.InternalSwap(&other->infos_);
}

std::string PushPingInfo::GetTypeName() const {
  return "msg.PushPingInfo";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::msg::JoinFightReq* Arena::CreateMaybeMessage< ::msg::JoinFightReq >(Arena* arena) {
  return Arena::CreateInternal< ::msg::JoinFightReq >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::FightWorldInfo* Arena::CreateMaybeMessage< ::msg::FightWorldInfo >(Arena* arena) {
  return Arena::CreateInternal< ::msg::FightWorldInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::JoinFightAck* Arena::CreateMaybeMessage< ::msg::JoinFightAck >(Arena* arena) {
  return Arena::CreateInternal< ::msg::JoinFightAck >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PlayerLoadingReq* Arena::CreateMaybeMessage< ::msg::PlayerLoadingReq >(Arena* arena) {
  return Arena::CreateInternal< ::msg::PlayerLoadingReq >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PlayerLoadingAck* Arena::CreateMaybeMessage< ::msg::PlayerLoadingAck >(Arena* arena) {
  return Arena::CreateInternal< ::msg::PlayerLoadingAck >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PlayerReadyNotify* Arena::CreateMaybeMessage< ::msg::PlayerReadyNotify >(Arena* arena) {
  return Arena::CreateInternal< ::msg::PlayerReadyNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PlayerExitFightNotify* Arena::CreateMaybeMessage< ::msg::PlayerExitFightNotify >(Arena* arena) {
  return Arena::CreateInternal< ::msg::PlayerExitFightNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::FrameInputData* Arena::CreateMaybeMessage< ::msg::FrameInputData >(Arena* arena) {
  return Arena::CreateInternal< ::msg::FrameInputData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PlayerFrameInput* Arena::CreateMaybeMessage< ::msg::PlayerFrameInput >(Arena* arena) {
  return Arena::CreateInternal< ::msg::PlayerFrameInput >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::RunNextFrameReq* Arena::CreateMaybeMessage< ::msg::RunNextFrameReq >(Arena* arena) {
  return Arena::CreateInternal< ::msg::RunNextFrameReq >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::RunNextFrameAck* Arena::CreateMaybeMessage< ::msg::RunNextFrameAck >(Arena* arena) {
  return Arena::CreateInternal< ::msg::RunNextFrameAck >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PushFrameInputBegin* Arena::CreateMaybeMessage< ::msg::PushFrameInputBegin >(Arena* arena) {
  return Arena::CreateInternal< ::msg::PushFrameInputBegin >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PushFrameInputEnd* Arena::CreateMaybeMessage< ::msg::PushFrameInputEnd >(Arena* arena) {
  return Arena::CreateInternal< ::msg::PushFrameInputEnd >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PushFrameInput* Arena::CreateMaybeMessage< ::msg::PushFrameInput >(Arena* arena) {
  return Arena::CreateInternal< ::msg::PushFrameInput >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PlayerRecords* Arena::CreateMaybeMessage< ::msg::PlayerRecords >(Arena* arena) {
  return Arena::CreateInternal< ::msg::PlayerRecords >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::ExitFightReq* Arena::CreateMaybeMessage< ::msg::ExitFightReq >(Arena* arena) {
  return Arena::CreateInternal< ::msg::ExitFightReq >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::ExitFightAck* Arena::CreateMaybeMessage< ::msg::ExitFightAck >(Arena* arena) {
  return Arena::CreateInternal< ::msg::ExitFightAck >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::Ping* Arena::CreateMaybeMessage< ::msg::Ping >(Arena* arena) {
  return Arena::CreateInternal< ::msg::Ping >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::Pong* Arena::CreateMaybeMessage< ::msg::Pong >(Arena* arena) {
  return Arena::CreateInternal< ::msg::Pong >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PingInfo* Arena::CreateMaybeMessage< ::msg::PingInfo >(Arena* arena) {
  return Arena::CreateInternal< ::msg::PingInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PushPingInfo* Arena::CreateMaybeMessage< ::msg::PushPingInfo >(Arena* arena) {
  return Arena::CreateInternal< ::msg::PushPingInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
