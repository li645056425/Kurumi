// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: guild.proto

#ifndef PROTOBUF_guild_2eproto__INCLUDED
#define PROTOBUF_guild_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf {
namespace guild {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_guild_2eproto();
void protobuf_AssignDesc_guild_2eproto();
void protobuf_ShutdownFile_guild_2eproto();

class GuildEnterInfo;
class GuildPlayer;
class GuildRecordInfo;
class GuildRecord;
class GuildBossDamage;
class PlayerDamage;
class GuildApplyInfo;
class GuildBaseInfo;
class GuildPlayers;
class GuildListInfo;
class GuildDyInfo;
class BossDamage;
class GuildBossInfo;
class MillRobbery;
class MillMyInfo;
class MillOtherInfo;
class MillLvlInfo;
class DonationHistory;
class MillExpHistory;
class ModGuildInfo;
class DynIcon;
class DynIconList;
class EnterHall;
class LineupShow;
class EnemyInfoRequest;
class EnemyInfoReply;
class EnemyInfo;
class EnemyLineupShow;
class RankInfo;
class RecordReply;
class Record;
class ChatRecord;
class SetLineup;
class RecordDetailReply;
class RecordDetail;
class HeroShow;
class FinalRecord;
class FinalGuildShow;
class EnterFinal;
class Bet;
class Box;

enum RecordType {
  CREAT = 0,
  MODIFY_ICON = 1,
  MODIFY_NAME = 2,
  MAIL = 3,
  JOIN = 4,
  SIGN = 5,
  EXIT = 6,
  LIFTING = 7,
  APPOINT = 8,
  TRANSFER = 9,
  KICK_OUT = 10
};
bool RecordType_IsValid(int value);
const RecordType RecordType_MIN = CREAT;
const RecordType RecordType_MAX = KICK_OUT;
const int RecordType_ARRAYSIZE = RecordType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RecordType_descriptor();
inline const ::std::string& RecordType_Name(RecordType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RecordType_descriptor(), value);
}
inline bool RecordType_Parse(
    const ::std::string& name, RecordType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RecordType>(
    RecordType_descriptor(), name, value);
}
// ===================================================================

class GuildEnterInfo : public ::google::protobuf::Message {
 public:
  GuildEnterInfo();
  virtual ~GuildEnterInfo();
  
  GuildEnterInfo(const GuildEnterInfo& from);
  
  inline GuildEnterInfo& operator=(const GuildEnterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildEnterInfo& default_instance();
  
  void Swap(GuildEnterInfo* other);
  
  // implements Message ----------------------------------------------
  
  GuildEnterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildEnterInfo& from);
  void MergeFrom(const GuildEnterInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .protobuf.guild.GuildBaseInfo info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::protobuf::guild::GuildBaseInfo& info() const;
  inline ::protobuf::guild::GuildBaseInfo* mutable_info();
  inline ::protobuf::guild::GuildBaseInfo* release_info();
  
  // repeated .protobuf.guild.MillOtherInfo otherslist = 2;
  inline int otherslist_size() const;
  inline void clear_otherslist();
  static const int kOtherslistFieldNumber = 2;
  inline const ::protobuf::guild::MillOtherInfo& otherslist(int index) const;
  inline ::protobuf::guild::MillOtherInfo* mutable_otherslist(int index);
  inline ::protobuf::guild::MillOtherInfo* add_otherslist();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::guild::MillOtherInfo >&
      otherslist() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::guild::MillOtherInfo >*
      mutable_otherslist();
  
  // required int32 robberyothercnt = 3;
  inline bool has_robberyothercnt() const;
  inline void clear_robberyothercnt();
  static const int kRobberyothercntFieldNumber = 3;
  inline ::google::protobuf::int32 robberyothercnt() const;
  inline void set_robberyothercnt(::google::protobuf::int32 value);
  
  // required int64 lastrefreshtime = 4;
  inline bool has_lastrefreshtime() const;
  inline void clear_lastrefreshtime();
  static const int kLastrefreshtimeFieldNumber = 4;
  inline ::google::protobuf::int64 lastrefreshtime() const;
  inline void set_lastrefreshtime(::google::protobuf::int64 value);
  
  // optional int32 refreshattackcnt = 5;
  inline bool has_refreshattackcnt() const;
  inline void clear_refreshattackcnt();
  static const int kRefreshattackcntFieldNumber = 5;
  inline ::google::protobuf::int32 refreshattackcnt() const;
  inline void set_refreshattackcnt(::google::protobuf::int32 value);
  
  // optional int64 refreshfreecnttime = 6;
  inline bool has_refreshfreecnttime() const;
  inline void clear_refreshfreecnttime();
  static const int kRefreshfreecnttimeFieldNumber = 6;
  inline ::google::protobuf::int64 refreshfreecnttime() const;
  inline void set_refreshfreecnttime(::google::protobuf::int64 value);
  
  // optional int32 bossid = 7;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossidFieldNumber = 7;
  inline ::google::protobuf::int32 bossid() const;
  inline void set_bossid(::google::protobuf::int32 value);
  
  // optional int32 blood = 8;
  inline bool has_blood() const;
  inline void clear_blood();
  static const int kBloodFieldNumber = 8;
  inline ::google::protobuf::int32 blood() const;
  inline void set_blood(::google::protobuf::int32 value);
  
  // optional int32 identity = 9;
  inline bool has_identity() const;
  inline void clear_identity();
  static const int kIdentityFieldNumber = 9;
  inline ::google::protobuf::int32 identity() const;
  inline void set_identity(::google::protobuf::int32 value);
  
  // optional int32 milllvl = 10;
  inline bool has_milllvl() const;
  inline void clear_milllvl();
  static const int kMilllvlFieldNumber = 10;
  inline ::google::protobuf::int32 milllvl() const;
  inline void set_milllvl(::google::protobuf::int32 value);
  
  // optional int32 millexp = 11;
  inline bool has_millexp() const;
  inline void clear_millexp();
  static const int kMillexpFieldNumber = 11;
  inline ::google::protobuf::int32 millexp() const;
  inline void set_millexp(::google::protobuf::int32 value);
  
  // optional bool isSet = 12;
  inline bool has_isset() const;
  inline void clear_isset();
  static const int kIsSetFieldNumber = 12;
  inline bool isset() const;
  inline void set_isset(bool value);
  
  // optional bool isJoin = 13;
  inline bool has_isjoin() const;
  inline void clear_isjoin();
  static const int kIsJoinFieldNumber = 13;
  inline bool isjoin() const;
  inline void set_isjoin(bool value);
  
  // optional int32 state = 14;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 14;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);
  
  // optional int32 battleTime = 15;
  inline bool has_battletime() const;
  inline void clear_battletime();
  static const int kBattleTimeFieldNumber = 15;
  inline ::google::protobuf::int32 battletime() const;
  inline void set_battletime(::google::protobuf::int32 value);
  
  // optional int32 battleBox = 16;
  inline bool has_battlebox() const;
  inline void clear_battlebox();
  static const int kBattleBoxFieldNumber = 16;
  inline ::google::protobuf::int32 battlebox() const;
  inline void set_battlebox(::google::protobuf::int32 value);
  
  // optional .protobuf.common.LineupTemplate lineup = 17;
  inline bool has_lineup() const;
  inline void clear_lineup();
  static const int kLineupFieldNumber = 17;
  inline const ::protobuf::common::LineupTemplate& lineup() const;
  inline ::protobuf::common::LineupTemplate* mutable_lineup();
  inline ::protobuf::common::LineupTemplate* release_lineup();
  
  // optional bool isEntryFinal = 18;
  inline bool has_isentryfinal() const;
  inline void clear_isentryfinal();
  static const int kIsEntryFinalFieldNumber = 18;
  inline bool isentryfinal() const;
  inline void set_isentryfinal(bool value);
  
  // @@protoc_insertion_point(class_scope:protobuf.guild.GuildEnterInfo)
 private:
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_robberyothercnt();
  inline void clear_has_robberyothercnt();
  inline void set_has_lastrefreshtime();
  inline void clear_has_lastrefreshtime();
  inline void set_has_refreshattackcnt();
  inline void clear_has_refreshattackcnt();
  inline void set_has_refreshfreecnttime();
  inline void clear_has_refreshfreecnttime();
  inline void set_has_bossid();
  inline void clear_has_bossid();
  inline void set_has_blood();
  inline void clear_has_blood();
  inline void set_has_identity();
  inline void clear_has_identity();
  inline void set_has_milllvl();
  inline void clear_has_milllvl();
  inline void set_has_millexp();
  inline void clear_has_millexp();
  inline void set_has_isset();
  inline void clear_has_isset();
  inline void set_has_isjoin();
  inline void clear_has_isjoin();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_battletime();
  inline void clear_has_battletime();
  inline void set_has_battlebox();
  inline void clear_has_battlebox();
  inline void set_has_lineup();
  inline void clear_has_lineup();
  inline void set_has_isentryfinal();
  inline void clear_has_isentryfinal();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::protobuf::guild::GuildBaseInfo* info_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::guild::MillOtherInfo > otherslist_;
  ::google::protobuf::int64 lastrefreshtime_;
  ::google::protobuf::int32 robberyothercnt_;
  ::google::protobuf::int32 refreshattackcnt_;
  ::google::protobuf::int64 refreshfreecnttime_;
  ::google::protobuf::int32 bossid_;
  ::google::protobuf::int32 blood_;
  ::google::protobuf::int32 identity_;
  ::google::protobuf::int32 milllvl_;
  ::google::protobuf::int32 millexp_;
  ::google::protobuf::int32 state_;
  bool isset_;
  bool isjoin_;
  bool isentryfinal_;
  ::google::protobuf::int32 battletime_;
  ::protobuf::common::LineupTemplate* lineup_;
  ::google::protobuf::int32 battlebox_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];
  
  friend void  protobuf_AddDesc_guild_2eproto();
  friend void protobuf_AssignDesc_guild_2eproto();
  friend void protobuf_ShutdownFile_guild_2eproto();
  
  void InitAsDefaultInstance();
  static GuildEnterInfo* default_instance_;
};
// -------------------------------------------------------------------

class GuildPlayer : public ::google::protobuf::Message {
 public:
  GuildPlayer();
  virtual ~GuildPlayer();
  
  GuildPlayer(const GuildPlayer& from);
  
  inline GuildPlayer& operator=(const GuildPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildPlayer& default_instance();
  
  void Swap(GuildPlayer* other);
  
  // implements Message ----------------------------------------------
  
  GuildPlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildPlayer& from);
  void MergeFrom(const GuildPlayer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline const ::std::string& playerid() const;
  inline void set_playerid(const ::std::string& value);
  inline void set_playerid(const char* value);
  inline void set_playerid(const char* value, size_t size);
  inline ::std::string* mutable_playerid();
  inline ::std::string* release_playerid();
  
  // required string playericon = 2;
  inline bool has_playericon() const;
  inline void clear_playericon();
  static const int kPlayericonFieldNumber = 2;
  inline const ::std::string& playericon() const;
  inline void set_playericon(const ::std::string& value);
  inline void set_playericon(const char* value);
  inline void set_playericon(const char* value, size_t size);
  inline ::std::string* mutable_playericon();
  inline ::std::string* release_playericon();
  
  // required string playername = 3;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayernameFieldNumber = 3;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  inline ::std::string* release_playername();
  
  // optional int32 power = 4;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 4;
  inline ::google::protobuf::int32 power() const;
  inline void set_power(::google::protobuf::int32 value);
  
  // optional int32 identity = 5;
  inline bool has_identity() const;
  inline void clear_identity();
  static const int kIdentityFieldNumber = 5;
  inline ::google::protobuf::int32 identity() const;
  inline void set_identity(::google::protobuf::int32 value);
  
  // optional int64 entertime = 6;
  inline bool has_entertime() const;
  inline void clear_entertime();
  static const int kEntertimeFieldNumber = 6;
  inline ::google::protobuf::int64 entertime() const;
  inline void set_entertime(::google::protobuf::int64 value);
  
  // optional int64 lastlogintime = 7;
  inline bool has_lastlogintime() const;
  inline void clear_lastlogintime();
  static const int kLastlogintimeFieldNumber = 7;
  inline ::google::protobuf::int64 lastlogintime() const;
  inline void set_lastlogintime(::google::protobuf::int64 value);
  
  // optional int32 playerlvl = 8;
  inline bool has_playerlvl() const;
  inline void clear_playerlvl();
  static const int kPlayerlvlFieldNumber = 8;
  inline ::google::protobuf::int32 playerlvl() const;
  inline void set_playerlvl(::google::protobuf::int32 value);
  
  // optional int32 headFrame = 9;
  inline bool has_headframe() const;
  inline void clear_headframe();
  static const int kHeadFrameFieldNumber = 9;
  inline ::google::protobuf::int32 headframe() const;
  inline void set_headframe(::google::protobuf::int32 value);
  
  // optional int32 exp = 10;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 10;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);
  
  // optional int32 serverId = 11;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 11;
  inline ::google::protobuf::int32 serverid() const;
  inline void set_serverid(::google::protobuf::int32 value);
  
  // optional int32 sex = 12;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 12;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protobuf.guild.GuildPlayer)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_playericon();
  inline void clear_has_playericon();
  inline void set_has_playername();
  inline void clear_has_playername();
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_identity();
  inline void clear_has_identity();
  inline void set_has_entertime();
  inline void clear_has_entertime();
  inline void set_has_lastlogintime();
  inline void clear_has_lastlogintime();
  inline void set_has_playerlvl();
  inline void clear_has_playerlvl();
  inline void set_has_headframe();
  inline void clear_has_headframe();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_sex();
  inline void clear_has_sex();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* playerid_;
  ::std::string* playericon_;
  ::std::string* playername_;
  ::google::protobuf::int32 power_;
  ::google::protobuf::int32 identity_;
  ::google::protobuf::int64 entertime_;
  ::google::protobuf::int64 lastlogintime_;
  ::google::protobuf::int32 playerlvl_;
  ::google::protobuf::int32 headframe_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 serverid_;
  ::google::protobuf::int32 sex_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  friend void  protobuf_AddDesc_guild_2eproto();
  friend void protobuf_AssignDesc_guild_2eproto();
  friend void protobuf_ShutdownFile_guild_2eproto();
  
  void InitAsDefaultInstance();
  static GuildPlayer* default_instance_;
};
// -------------------------------------------------------------------

class GuildRecordInfo : public ::google::protobuf::Message {
 public:
  GuildRecordInfo();
  virtual ~GuildRecordInfo();
  
  GuildRecordInfo(const GuildRecordInfo& from);
  
  inline GuildRecordInfo& operator=(const GuildRecordInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRecordInfo& default_instance();
  
  void Swap(GuildRecordInfo* other);
  
  // implements Message ----------------------------------------------
  
  GuildRecordInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRecordInfo& from);
  void MergeFrom(const GuildRecordInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protobuf.guild.GuildRecord recordInfo = 1;
  inline int recordinfo_size() const;
  inline void clear_recordinfo();
  static const int kRecordInfoFieldNumber = 1;
  inline const ::protobuf::guild::GuildRecord& recordinfo(int index) const;
  inline ::protobuf::guild::GuildRecord* mutable_recordinfo(int index);
  inline ::protobuf::guild::GuildRecord* add_recordinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::guild::GuildRecord >&
      recordinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::guild::GuildRecord >*
      mutable_recordinfo();
  
  // @@protoc_insertion_point(class_scope:protobuf.guild.GuildRecordInfo)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protobuf::guild::GuildRecord > recordinfo_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_guild_2eproto();
  friend void protobuf_AssignDesc_guild_2eproto();
  friend void protobuf_ShutdownFile_guild_2eproto();
  
  void InitAsDefaultInstance();
  static GuildRecordInfo* default_instance_;
};
// -------------------------------------------------------------------

class GuildRecord : public ::google::protobuf::Message {
 public:
  GuildRecord();
  virtual ~GuildRecord();
  
  GuildRecord(const GuildRecord& from);
  
  inline GuildRecord& operator=(const GuildRecord& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRecord& default_instance();
  
  void Swap(GuildRecord* other);
  
  // implements Message ----------------------------------------------
  
  GuildRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRecord& from);
  void MergeFrom(const GuildRecord& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);
  
  // optional .protobuf.guild.RecordType recordType = 2;
  inline bool has_recordtype() const;
  inline void clear_recordtype();
  static const int kRecordTypeFieldNumber = 2;
  inline protobuf::guild::RecordType recordtype() const;
  inline void set_recordtype(protobuf::guild::RecordType value);
  
  // optional string runName = 3;
  inline bool has_runname() const;
  inline void clear_runname();
  static const int kRunNameFieldNumber = 3;
  inline const ::std::string& runname() const;
  inline void set_runname(const ::std::string& value);
  inline void set_runname(const char* value);
  inline void set_runname(const char* value, size_t size);
  inline ::std::string* mutable_runname();
  inline ::std::string* release_runname();
  
  // optional string byName = 4;
  inline bool has_byname() const;
  inline void clear_byname();
  static const int kByNameFieldNumber = 4;
  inline const ::std::string& byname() const;
  inline void set_byname(const ::std::string& value);
  inline void set_byname(const char* value);
  inline void set_byname(const char* value, size_t size);
  inline ::std::string* mutable_byname();
  inline ::std::string* release_byname();
  
  // @@protoc_insertion_point(class_scope:protobuf.guild.GuildRecord)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_recordtype();
  inline void clear_has_recordtype();
  inline void set_has_runname();
  inline void clear_has_runname();
  inline void set_has_byname();
  inline void clear_has_byname();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 time_;
  ::std::string* runname_;
  ::std::string* byname_;
  int recordtype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_guild_2eproto();
  friend void protobuf_AssignDesc_guild_2eproto();
  friend void protobuf_ShutdownFile_guild_2eproto();
  
  void InitAsDefaultInstance();
  static GuildRecord* default_instance_;
};
// -------------------------------------------------------------------

class GuildBossDamage : public ::google::protobuf::Message {
 public:
  GuildBossDamage();
  virtual ~GuildBossDamage();
  
  GuildBossDamage(const GuildBossDamage& from);
  
  inline GuildBossDamage& operator=(const GuildBossDamage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildBossDamage& default_instance();
  
  void Swap(GuildBossDamage* other);
  
  // implements Message ----------------------------------------------
  
  GuildBossDamage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildBossDamage& from);
  void MergeFrom(const GuildBossDamage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 bossId = 1;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossIdFieldNumber = 1;
  inline ::google::protobuf::int32 bossid() const;
  inline void set_bossid(::google::protobuf::int32 value);
  
  // repeated .protobuf.guild.PlayerDamage bossDamage = 2;
  inline int bossdamage_size() const;
  inline void clear_bossdamage();
  static const int kBossDamageFieldNumber = 2;
  inline const ::protobuf::guild::PlayerDamage& bossdamage(int index) const;
  inline ::protobuf::guild::PlayerDamage* mutable_bossdamage(int index);
  inline ::protobuf::guild::PlayerDamage* add_bossdamage();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::guild::PlayerDamage >&
      bossdamage() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::guild::PlayerDamage >*
      mutable_bossdamage();
  
  // @@protoc_insertion_point(class_scope:protobuf.guild.GuildBossDamage)
 private:
  inline void set_has_bossid();
  inline void clear_has_bossid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protobuf::guild::PlayerDamage > bossdamage_;
  ::google::protobuf::int32 bossid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_guild_2eproto();
  friend void protobuf_AssignDesc_guild_2eproto();
  friend void protobuf_ShutdownFile_guild_2eproto();
  
  void InitAsDefaultInstance();
  static GuildBossDamage* default_instance_;
};
// -------------------------------------------------------------------

class PlayerDamage : public ::google::protobuf::Message {
 public:
  PlayerDamage();
  virtual ~PlayerDamage();
  
  PlayerDamage(const PlayerDamage& from);
  
  inline PlayerDamage& operator=(const PlayerDamage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerDamage& default_instance();
  
  void Swap(PlayerDamage* other);
  
  // implements Message ----------------------------------------------
  
  PlayerDamage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerDamage& from);
  void MergeFrom(const PlayerDamage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional string icon = 2;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 2;
  inline const ::std::string& icon() const;
  inline void set_icon(const ::std::string& value);
  inline void set_icon(const char* value);
  inline void set_icon(const char* value, size_t size);
  inline ::std::string* mutable_icon();
  inline ::std::string* release_icon();
  
  // optional string playerId = 3;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 3;
  inline const ::std::string& playerid() const;
  inline void set_playerid(const ::std::string& value);
  inline void set_playerid(const char* value);
  inline void set_playerid(const char* value, size_t size);
  inline ::std::string* mutable_playerid();
  inline ::std::string* release_playerid();
  
  // optional int32 lv = 4;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 4;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);
  
  // optional int32 attackCnt = 5;
  inline bool has_attackcnt() const;
  inline void clear_attackcnt();
  static const int kAttackCntFieldNumber = 5;
  inline ::google::protobuf::int32 attackcnt() const;
  inline void set_attackcnt(::google::protobuf::int32 value);
  
  // optional int64 totalDamage = 6;
  inline bool has_totaldamage() const;
  inline void clear_totaldamage();
  static const int kTotalDamageFieldNumber = 6;
  inline ::google::protobuf::int64 totaldamage() const;
  inline void set_totaldamage(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:protobuf.guild.PlayerDamage)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_attackcnt();
  inline void clear_has_attackcnt();
  inline void set_has_totaldamage();
  inline void clear_has_totaldamage();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::std::string* icon_;
  ::std::string* playerid_;
  ::google::protobuf::int32 lv_;
  ::google::protobuf::int32 attackcnt_;
  ::google::protobuf::int64 totaldamage_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_guild_2eproto();
  friend void protobuf_AssignDesc_guild_2eproto();
  friend void protobuf_ShutdownFile_guild_2eproto();
  
  void InitAsDefaultInstance();
  static PlayerDamage* default_instance_;
};
// -------------------------------------------------------------------

class GuildApplyInfo : public ::google::protobuf::Message {
 public:
  GuildApplyInfo();
  virtual ~GuildApplyInfo();
  
  GuildApplyInfo(const GuildApplyInfo& from);
  
  inline GuildApplyInfo& operator=(const GuildApplyInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildApplyInfo& default_instance();
  
  void Swap(GuildApplyInfo* other);
  
  // implements Message ----------------------------------------------
  
  GuildApplyInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildApplyInfo& from);
  void MergeFrom(const GuildApplyInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protobuf.guild.GuildPlayer playerInfo = 1;
  inline int playerinfo_size() const;
  inline void clear_playerinfo();
  static const int kPlayerInfoFieldNumber = 1;
  inline const ::protobuf::guild::GuildPlayer& playerinfo(int index) const;
  inline ::protobuf::guild::GuildPlayer* mutable_playerinfo(int index);
  inline ::protobuf::guild::GuildPlayer* add_playerinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::guild::GuildPlayer >&
      playerinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::guild::GuildPlayer >*
      mutable_playerinfo();
  
  // @@protoc_insertion_point(class_scope:protobuf.guild.GuildApplyInfo)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protobuf::guild::GuildPlayer > playerinfo_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_guild_2eproto();
  friend void protobuf_AssignDesc_guild_2eproto();
  friend void protobuf_ShutdownFile_guild_2eproto();
  
  void InitAsDefaultInstance();
  static GuildApplyInfo* default_instance_;
};
// -------------------------------------------------------------------

class GuildBaseInfo : public ::google::protobuf::Message {
 public:
  GuildBaseInfo();
  virtual ~GuildBaseInfo();
  
  GuildBaseInfo(const GuildBaseInfo& from);
  
  inline GuildBaseInfo& operator=(const GuildBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildBaseInfo& default_instance();
  
  void Swap(GuildBaseInfo* other);
  
  // implements Message ----------------------------------------------
  
  GuildBaseInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildBaseInfo& from);
  void MergeFrom(const GuildBaseInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 guildid = 1;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildidFieldNumber = 1;
  inline ::google::protobuf::int32 guildid() const;
  inline void set_guildid(::google::protobuf::int32 value);
  
  // optional string guildname = 2;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildnameFieldNumber = 2;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  
  // optional string guildicon = 3;
  inline bool has_guildicon() const;
  inline void clear_guildicon();
  static const int kGuildiconFieldNumber = 3;
  inline const ::std::string& guildicon() const;
  inline void set_guildicon(const ::std::string& value);
  inline void set_guildicon(const char* value);
  inline void set_guildicon(const char* value, size_t size);
  inline ::std::string* mutable_guildicon();
  inline ::std::string* release_guildicon();
  
  // optional string notice = 4;
  inline bool has_notice() const;
  inline void clear_notice();
  static const int kNoticeFieldNumber = 4;
  inline const ::std::string& notice() const;
  inline void set_notice(const ::std::string& value);
  inline void set_notice(const char* value);
  inline void set_notice(const char* value, size_t size);
  inline ::std::string* mutable_notice();
  inline ::std::string* release_notice();
  
  // optional int32 limitGrade = 5;
  inline bool has_limitgrade() const;
  inline void clear_limitgrade();
  static const int kLimitGradeFieldNumber = 5;
  inline ::google::protobuf::int32 limitgrade() const;
  inline void set_limitgrade(::google::protobuf::int32 value);
  
  // optional bool needapproval = 6;
  inline bool has_needapproval() const;
  inline void clear_needapproval();
  static const int kNeedapprovalFieldNumber = 6;
  inline bool needapproval() const;
  inline void set_needapproval(bool value);
  
  // optional int32 lvl = 7;
  inline bool has_lvl() const;
  inline void clear_lvl();
  static const int kLvlFieldNumber = 7;
  inline ::google::protobuf::int32 lvl() const;
  inline void set_lvl(::google::protobuf::int32 value);
  
  // optional int32 exp = 8;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 8;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);
  
  // optional int32 playercnt = 9;
  inline bool has_playercnt() const;
  inline void clear_playercnt();
  static const int kPlayercntFieldNumber = 9;
  inline ::google::protobuf::int32 playercnt() const;
  inline void set_playercnt(::google::protobuf::int32 value);
  
  // optional int32 rank = 10;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 10;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);
  
  // optional int32 finalRank = 11;
  inline bool has_finalrank() const;
  inline void clear_finalrank();
  static const int kFinalRankFieldNumber = 11;
  inline ::google::protobuf::int32 finalrank() const;
  inline void set_finalrank(::google::protobuf::int32 value);
  
  // optional int32 index = 12;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 12;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // optional string serverName = 13;
  inline bool has_servername() const;
  inline void clear_servername();
  static const int kServerNameFieldNumber = 13;
  inline const ::std::string& servername() const;
  inline void set_servername(const ::std::string& value);
  inline void set_servername(const char* value);
  inline void set_servername(const char* value, size_t size);
  inline ::std::string* mutable_servername();
  inline ::std::string* release_servername();
  
  // optional string id = 14;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 14;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  
  // optional int32 yesterdayExp = 15;
  inline bool has_yesterdayexp() const;
  inline void clear_yesterdayexp();
  static const int kYesterdayExpFieldNumber = 15;
  inline ::google::protobuf::int32 yesterdayexp() const;
  inline void set_yesterdayexp(::google::protobuf::int32 value);
  
  // optional string language = 16;
  inline bool has_language() const;
  inline void clear_language();
  static const int kLanguageFieldNumber = 16;
  inline const ::std::string& language() const;
  inline void set_language(const ::std::string& value);
  inline void set_language(const char* value);
  inline void set_language(const char* value, size_t size);
  inline ::std::string* mutable_language();
  inline ::std::string* release_language();
  
  // optional string joinNotice = 17;
  inline bool has_joinnotice() const;
  inline void clear_joinnotice();
  static const int kJoinNoticeFieldNumber = 17;
  inline const ::std::string& joinnotice() const;
  inline void set_joinnotice(const ::std::string& value);
  inline void set_joinnotice(const char* value);
  inline void set_joinnotice(const char* value, size_t size);
  inline ::std::string* mutable_joinnotice();
  inline ::std::string* release_joinnotice();
  
  // optional int32 residueExp = 18;
  inline bool has_residueexp() const;
  inline void clear_residueexp();
  static const int kResidueExpFieldNumber = 18;
  inline ::google::protobuf::int32 residueexp() const;
  inline void set_residueexp(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protobuf.guild.GuildBaseInfo)
 private:
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_guildname();
  inline void clear_has_guildname();
  inline void set_has_guildicon();
  inline void clear_has_guildicon();
  inline void set_has_notice();
  inline void clear_has_notice();
  inline void set_has_limitgrade();
  inline void clear_has_limitgrade();
  inline void set_has_needapproval();
  inline void clear_has_needapproval();
  inline void set_has_lvl();
  inline void clear_has_lvl();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_playercnt();
  inline void clear_has_playercnt();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_finalrank();
  inline void clear_has_finalrank();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_servername();
  inline void clear_has_servername();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_yesterdayexp();
  inline void clear_has_yesterdayexp();
  inline void set_has_language();
  inline void clear_has_language();
  inline void set_has_joinnotice();
  inline void clear_has_joinnotice();
  inline void set_has_residueexp();
  inline void clear_has_residueexp();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* guildname_;
  ::std::string* guildicon_;
  ::google::protobuf::int32 guildid_;
  ::google::protobuf::int32 limitgrade_;
  ::std::string* notice_;
  bool needapproval_;
  ::google::protobuf::int32 lvl_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 playercnt_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 finalrank_;
  ::std::string* servername_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 yesterdayexp_;
  ::std::string* id_;
  ::std::string* language_;
  ::std::string* joinnotice_;
  ::google::protobuf::int32 residueexp_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];
  
  friend void  protobuf_AddDesc_guild_2eproto();
  friend void protobuf_AssignDesc_guild_2eproto();
  friend void protobuf_ShutdownFile_guild_2eproto();
  
  void InitAsDefaultInstance();
  static GuildBaseInfo* default_instance_;
};
// -------------------------------------------------------------------

class GuildPlayers : public ::google::protobuf::Message {
 public:
  GuildPlayers();
  virtual ~GuildPlayers();
  
  GuildPlayers(const GuildPlayers& from);
  
  inline GuildPlayers& operator=(const GuildPlayers& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildPlayers& default_instance();
  
  void Swap(GuildPlayers* other);
  
  // implements Message ----------------------------------------------
  
  GuildPlayers* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildPlayers& from);
  void MergeFrom(const GuildPlayers& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .protobuf.guild.GuildBaseInfo baseinfo = 1;
  inline bool has_baseinfo() const;
  inline void clear_baseinfo();
  static const int kBaseinfoFieldNumber = 1;
  inline const ::protobuf::guild::GuildBaseInfo& baseinfo() const;
  inline ::protobuf::guild::GuildBaseInfo* mutable_baseinfo();
  inline ::protobuf::guild::GuildBaseInfo* release_baseinfo();
  
  // repeated .protobuf.guild.GuildPlayer players = 5;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 5;
  inline const ::protobuf::guild::GuildPlayer& players(int index) const;
  inline ::protobuf::guild::GuildPlayer* mutable_players(int index);
  inline ::protobuf::guild::GuildPlayer* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::guild::GuildPlayer >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::guild::GuildPlayer >*
      mutable_players();
  
  // @@protoc_insertion_point(class_scope:protobuf.guild.GuildPlayers)
 private:
  inline void set_has_baseinfo();
  inline void clear_has_baseinfo();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::protobuf::guild::GuildBaseInfo* baseinfo_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::guild::GuildPlayer > players_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_guild_2eproto();
  friend void protobuf_AssignDesc_guild_2eproto();
  friend void protobuf_ShutdownFile_guild_2eproto();
  
  void InitAsDefaultInstance();
  static GuildPlayers* default_instance_;
};
// -------------------------------------------------------------------

class GuildListInfo : public ::google::protobuf::Message {
 public:
  GuildListInfo();
  virtual ~GuildListInfo();
  
  GuildListInfo(const GuildListInfo& from);
  
  inline GuildListInfo& operator=(const GuildListInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildListInfo& default_instance();
  
  void Swap(GuildListInfo* other);
  
  // implements Message ----------------------------------------------
  
  GuildListInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildListInfo& from);
  void MergeFrom(const GuildListInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 myrank = 2;
  inline bool has_myrank() const;
  inline void clear_myrank();
  static const int kMyrankFieldNumber = 2;
  inline ::google::protobuf::int32 myrank() const;
  inline void set_myrank(::google::protobuf::int32 value);
  
  // repeated .protobuf.guild.GuildBaseInfo infos = 1;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 1;
  inline const ::protobuf::guild::GuildBaseInfo& infos(int index) const;
  inline ::protobuf::guild::GuildBaseInfo* mutable_infos(int index);
  inline ::protobuf::guild::GuildBaseInfo* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::guild::GuildBaseInfo >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::guild::GuildBaseInfo >*
      mutable_infos();
  
  // @@protoc_insertion_point(class_scope:protobuf.guild.GuildListInfo)
 private:
  inline void set_has_myrank();
  inline void clear_has_myrank();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protobuf::guild::GuildBaseInfo > infos_;
  ::google::protobuf::int32 myrank_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_guild_2eproto();
  friend void protobuf_AssignDesc_guild_2eproto();
  friend void protobuf_ShutdownFile_guild_2eproto();
  
  void InitAsDefaultInstance();
  static GuildListInfo* default_instance_;
};
// -------------------------------------------------------------------

class GuildDyInfo : public ::google::protobuf::Message {
 public:
  GuildDyInfo();
  virtual ~GuildDyInfo();
  
  GuildDyInfo(const GuildDyInfo& from);
  
  inline GuildDyInfo& operator=(const GuildDyInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildDyInfo& default_instance();
  
  void Swap(GuildDyInfo* other);
  
  // implements Message ----------------------------------------------
  
  GuildDyInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildDyInfo& from);
  void MergeFrom(const GuildDyInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 curexp = 1;
  inline bool has_curexp() const;
  inline void clear_curexp();
  static const int kCurexpFieldNumber = 1;
  inline ::google::protobuf::int32 curexp() const;
  inline void set_curexp(::google::protobuf::int32 value);
  
  // required int32 curlvl = 2;
  inline bool has_curlvl() const;
  inline void clear_curlvl();
  static const int kCurlvlFieldNumber = 2;
  inline ::google::protobuf::int32 curlvl() const;
  inline void set_curlvl(::google::protobuf::int32 value);
  
  // repeated .protobuf.common.KVint3232 items = 3;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 3;
  inline const ::protobuf::common::KVint3232& items(int index) const;
  inline ::protobuf::common::KVint3232* mutable_items(int index);
  inline ::protobuf::common::KVint3232* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >*
      mutable_items();
  
  // @@protoc_insertion_point(class_scope:protobuf.guild.GuildDyInfo)
 private:
  inline void set_has_curexp();
  inline void clear_has_curexp();
  inline void set_has_curlvl();
  inline void clear_has_curlvl();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 curexp_;
  ::google::protobuf::int32 curlvl_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 > items_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_guild_2eproto();
  friend void protobuf_AssignDesc_guild_2eproto();
  friend void protobuf_ShutdownFile_guild_2eproto();
  
  void InitAsDefaultInstance();
  static GuildDyInfo* default_instance_;
};
// -------------------------------------------------------------------

class BossDamage : public ::google::protobuf::Message {
 public:
  BossDamage();
  virtual ~BossDamage();
  
  BossDamage(const BossDamage& from);
  
  inline BossDamage& operator=(const BossDamage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BossDamage& default_instance();
  
  void Swap(BossDamage* other);
  
  // implements Message ----------------------------------------------
  
  BossDamage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BossDamage& from);
  void MergeFrom(const BossDamage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline const ::std::string& playerid() const;
  inline void set_playerid(const ::std::string& value);
  inline void set_playerid(const char* value);
  inline void set_playerid(const char* value, size_t size);
  inline ::std::string* mutable_playerid();
  inline ::std::string* release_playerid();
  
  // optional int32 attackcnt = 2;
  inline bool has_attackcnt() const;
  inline void clear_attackcnt();
  static const int kAttackcntFieldNumber = 2;
  inline ::google::protobuf::int32 attackcnt() const;
  inline void set_attackcnt(::google::protobuf::int32 value);
  
  // required int64 totaldamage = 3;
  inline bool has_totaldamage() const;
  inline void clear_totaldamage();
  static const int kTotaldamageFieldNumber = 3;
  inline ::google::protobuf::int64 totaldamage() const;
  inline void set_totaldamage(::google::protobuf::int64 value);
  
  // optional bool received = 4;
  inline bool has_received() const;
  inline void clear_received();
  static const int kReceivedFieldNumber = 4;
  inline bool received() const;
  inline void set_received(bool value);
  
  // required string playername = 5;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayernameFieldNumber = 5;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  inline ::std::string* release_playername();
  
  // required string playerhead = 6;
  inline bool has_playerhead() const;
  inline void clear_playerhead();
  static const int kPlayerheadFieldNumber = 6;
  inline const ::std::string& playerhead() const;
  inline void set_playerhead(const ::std::string& value);
  inline void set_playerhead(const char* value);
  inline void set_playerhead(const char* value, size_t size);
  inline ::std::string* mutable_playerhead();
  inline ::std::string* release_playerhead();
  
  // required int32 power = 7;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 7;
  inline ::google::protobuf::int32 power() const;
  inline void set_power(::google::protobuf::int32 value);
  
  // required int32 playerlvl = 8;
  inline bool has_playerlvl() const;
  inline void clear_playerlvl();
  static const int kPlayerlvlFieldNumber = 8;
  inline ::google::protobuf::int32 playerlvl() const;
  inline void set_playerlvl(::google::protobuf::int32 value);
  
  // optional int32 identity = 9;
  inline bool has_identity() const;
  inline void clear_identity();
  static const int kIdentityFieldNumber = 9;
  inline ::google::protobuf::int32 identity() const;
  inline void set_identity(::google::protobuf::int32 value);
  
  // optional int32 headFrame = 10;
  inline bool has_headframe() const;
  inline void clear_headframe();
  static const int kHeadFrameFieldNumber = 10;
  inline ::google::protobuf::int32 headframe() const;
  inline void set_headframe(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protobuf.guild.BossDamage)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_attackcnt();
  inline void clear_has_attackcnt();
  inline void set_has_totaldamage();
  inline void clear_has_totaldamage();
  inline void set_has_received();
  inline void clear_has_received();
  inline void set_has_playername();
  inline void clear_has_playername();
  inline void set_has_playerhead();
  inline void clear_has_playerhead();
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_playerlvl();
  inline void clear_has_playerlvl();
  inline void set_has_identity();
  inline void clear_has_identity();
  inline void set_has_headframe();
  inline void clear_has_headframe();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* playerid_;
  ::google::protobuf::int64 totaldamage_;
  ::google::protobuf::int32 attackcnt_;
  bool received_;
  ::std::string* playername_;
  ::std::string* playerhead_;
  ::google::protobuf::int32 power_;
  ::google::protobuf::int32 playerlvl_;
  ::google::protobuf::int32 identity_;
  ::google::protobuf::int32 headframe_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_guild_2eproto();
  friend void protobuf_AssignDesc_guild_2eproto();
  friend void protobuf_ShutdownFile_guild_2eproto();
  
  void InitAsDefaultInstance();
  static BossDamage* default_instance_;
};
// -------------------------------------------------------------------

class GuildBossInfo : public ::google::protobuf::Message {
 public:
  GuildBossInfo();
  virtual ~GuildBossInfo();
  
  GuildBossInfo(const GuildBossInfo& from);
  
  inline GuildBossInfo& operator=(const GuildBossInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildBossInfo& default_instance();
  
  void Swap(GuildBossInfo* other);
  
  // implements Message ----------------------------------------------
  
  GuildBossInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildBossInfo& from);
  void MergeFrom(const GuildBossInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 refreshattackcnt = 1;
  inline bool has_refreshattackcnt() const;
  inline void clear_refreshattackcnt();
  static const int kRefreshattackcntFieldNumber = 1;
  inline ::google::protobuf::int32 refreshattackcnt() const;
  inline void set_refreshattackcnt(::google::protobuf::int32 value);
  
  // optional int64 refreshfreecnttime = 2;
  inline bool has_refreshfreecnttime() const;
  inline void clear_refreshfreecnttime();
  static const int kRefreshfreecnttimeFieldNumber = 2;
  inline ::google::protobuf::int64 refreshfreecnttime() const;
  inline void set_refreshfreecnttime(::google::protobuf::int64 value);
  
  // optional int32 bossid = 3;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossidFieldNumber = 3;
  inline ::google::protobuf::int32 bossid() const;
  inline void set_bossid(::google::protobuf::int32 value);
  
  // optional int32 blood = 4;
  inline bool has_blood() const;
  inline void clear_blood();
  static const int kBloodFieldNumber = 4;
  inline ::google::protobuf::int32 blood() const;
  inline void set_blood(::google::protobuf::int32 value);
  
  // optional bool isOpen = 5;
  inline bool has_isopen() const;
  inline void clear_isopen();
  static const int kIsOpenFieldNumber = 5;
  inline bool isopen() const;
  inline void set_isopen(bool value);
  
  // repeated .protobuf.guild.BossDamage playerdamages = 6;
  inline int playerdamages_size() const;
  inline void clear_playerdamages();
  static const int kPlayerdamagesFieldNumber = 6;
  inline const ::protobuf::guild::BossDamage& playerdamages(int index) const;
  inline ::protobuf::guild::BossDamage* mutable_playerdamages(int index);
  inline ::protobuf::guild::BossDamage* add_playerdamages();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::guild::BossDamage >&
      playerdamages() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::guild::BossDamage >*
      mutable_playerdamages();
  
  // optional int32 freeExp = 7;
  inline bool has_freeexp() const;
  inline void clear_freeexp();
  static const int kFreeExpFieldNumber = 7;
  inline ::google::protobuf::int32 freeexp() const;
  inline void set_freeexp(::google::protobuf::int32 value);
  
  // optional int32 exp = 8;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 8;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protobuf.guild.GuildBossInfo)
 private:
  inline void set_has_refreshattackcnt();
  inline void clear_has_refreshattackcnt();
  inline void set_has_refreshfreecnttime();
  inline void clear_has_refreshfreecnttime();
  inline void set_has_bossid();
  inline void clear_has_bossid();
  inline void set_has_blood();
  inline void clear_has_blood();
  inline void set_has_isopen();
  inline void clear_has_isopen();
  inline void set_has_freeexp();
  inline void clear_has_freeexp();
  inline void set_has_exp();
  inline void clear_has_exp();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 refreshfreecnttime_;
  ::google::protobuf::int32 refreshattackcnt_;
  ::google::protobuf::int32 bossid_;
  ::google::protobuf::int32 blood_;
  bool isopen_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::guild::BossDamage > playerdamages_;
  ::google::protobuf::int32 freeexp_;
  ::google::protobuf::int32 exp_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_guild_2eproto();
  friend void protobuf_AssignDesc_guild_2eproto();
  friend void protobuf_ShutdownFile_guild_2eproto();
  
  void InitAsDefaultInstance();
  static GuildBossInfo* default_instance_;
};
// -------------------------------------------------------------------

class MillRobbery : public ::google::protobuf::Message {
 public:
  MillRobbery();
  virtual ~MillRobbery();
  
  MillRobbery(const MillRobbery& from);
  
  inline MillRobbery& operator=(const MillRobbery& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MillRobbery& default_instance();
  
  void Swap(MillRobbery* other);
  
  // implements Message ----------------------------------------------
  
  MillRobbery* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MillRobbery& from);
  void MergeFrom(const MillRobbery& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline const ::std::string& playerid() const;
  inline void set_playerid(const ::std::string& value);
  inline void set_playerid(const char* value);
  inline void set_playerid(const char* value, size_t size);
  inline ::std::string* mutable_playerid();
  inline ::std::string* release_playerid();
  
  // required int64 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);
  
  // required int32 guildid = 3;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildidFieldNumber = 3;
  inline ::google::protobuf::int32 guildid() const;
  inline void set_guildid(::google::protobuf::int32 value);
  
  // required string guildname = 4;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildnameFieldNumber = 4;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  
  // required string playername = 5;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayernameFieldNumber = 5;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  inline ::std::string* release_playername();
  
  // required int32 playerlvl = 6;
  inline bool has_playerlvl() const;
  inline void clear_playerlvl();
  static const int kPlayerlvlFieldNumber = 6;
  inline ::google::protobuf::int32 playerlvl() const;
  inline void set_playerlvl(::google::protobuf::int32 value);
  
  // required string playerhead = 7;
  inline bool has_playerhead() const;
  inline void clear_playerhead();
  static const int kPlayerheadFieldNumber = 7;
  inline const ::std::string& playerhead() const;
  inline void set_playerhead(const ::std::string& value);
  inline void set_playerhead(const char* value);
  inline void set_playerhead(const char* value, size_t size);
  inline ::std::string* mutable_playerhead();
  inline ::std::string* release_playerhead();
  
  // required int32 millid = 8;
  inline bool has_millid() const;
  inline void clear_millid();
  static const int kMillidFieldNumber = 8;
  inline ::google::protobuf::int32 millid() const;
  inline void set_millid(::google::protobuf::int32 value);
  
  // required int32 milllvl = 9;
  inline bool has_milllvl() const;
  inline void clear_milllvl();
  static const int kMilllvlFieldNumber = 9;
  inline ::google::protobuf::int32 milllvl() const;
  inline void set_milllvl(::google::protobuf::int32 value);
  
  // required int32 state = 10;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 10;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);
  
  // required int64 robberyId = 11;
  inline bool has_robberyid() const;
  inline void clear_robberyid();
  static const int kRobberyIdFieldNumber = 11;
  inline ::google::protobuf::int64 robberyid() const;
  inline void set_robberyid(::google::protobuf::int64 value);
  
  // optional int32 headFrame = 12;
  inline bool has_headframe() const;
  inline void clear_headframe();
  static const int kHeadFrameFieldNumber = 12;
  inline ::google::protobuf::int32 headframe() const;
  inline void set_headframe(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protobuf.guild.MillRobbery)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_guildname();
  inline void clear_has_guildname();
  inline void set_has_playername();
  inline void clear_has_playername();
  inline void set_has_playerlvl();
  inline void clear_has_playerlvl();
  inline void set_has_playerhead();
  inline void clear_has_playerhead();
  inline void set_has_millid();
  inline void clear_has_millid();
  inline void set_has_milllvl();
  inline void clear_has_milllvl();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_robberyid();
  inline void clear_has_robberyid();
  inline void set_has_headframe();
  inline void clear_has_headframe();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* playerid_;
  ::google::protobuf::int64 time_;
  ::std::string* guildname_;
  ::google::protobuf::int32 guildid_;
  ::google::protobuf::int32 playerlvl_;
  ::std::string* playername_;
  ::std::string* playerhead_;
  ::google::protobuf::int32 millid_;
  ::google::protobuf::int32 milllvl_;
  ::google::protobuf::int64 robberyid_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 headframe_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  friend void  protobuf_AddDesc_guild_2eproto();
  friend void protobuf_AssignDesc_guild_2eproto();
  friend void protobuf_ShutdownFile_guild_2eproto();
  
  void InitAsDefaultInstance();
  static MillRobbery* default_instance_;
};
// -------------------------------------------------------------------

class MillMyInfo : public ::google::protobuf::Message {
 public:
  MillMyInfo();
  virtual ~MillMyInfo();
  
  MillMyInfo(const MillMyInfo& from);
  
  inline MillMyInfo& operator=(const MillMyInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MillMyInfo& default_instance();
  
  void Swap(MillMyInfo* other);
  
  // implements Message ----------------------------------------------
  
  MillMyInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MillMyInfo& from);
  void MergeFrom(const MillMyInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 millid = 1;
  inline bool has_millid() const;
  inline void clear_millid();
  static const int kMillidFieldNumber = 1;
  inline ::google::protobuf::int32 millid() const;
  inline void set_millid(::google::protobuf::int32 value);
  
  // required int32 milllvl = 5;
  inline bool has_milllvl() const;
  inline void clear_milllvl();
  static const int kMilllvlFieldNumber = 5;
  inline ::google::protobuf::int32 milllvl() const;
  inline void set_milllvl(::google::protobuf::int32 value);
  
  // optional int64 millFinishTime = 2;
  inline bool has_millfinishtime() const;
  inline void clear_millfinishtime();
  static const int kMillFinishTimeFieldNumber = 2;
  inline ::google::protobuf::int64 millfinishtime() const;
  inline void set_millfinishtime(::google::protobuf::int64 value);
  
  // repeated .protobuf.common.KVint3232 received = 3;
  inline int received_size() const;
  inline void clear_received();
  static const int kReceivedFieldNumber = 3;
  inline const ::protobuf::common::KVint3232& received(int index) const;
  inline ::protobuf::common::KVint3232* mutable_received(int index);
  inline ::protobuf::common::KVint3232* add_received();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >&
      received() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >*
      mutable_received();
  
  // repeated .protobuf.guild.MillRobbery robberylist = 4;
  inline int robberylist_size() const;
  inline void clear_robberylist();
  static const int kRobberylistFieldNumber = 4;
  inline const ::protobuf::guild::MillRobbery& robberylist(int index) const;
  inline ::protobuf::guild::MillRobbery* mutable_robberylist(int index);
  inline ::protobuf::guild::MillRobbery* add_robberylist();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::guild::MillRobbery >&
      robberylist() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::guild::MillRobbery >*
      mutable_robberylist();
  
  // @@protoc_insertion_point(class_scope:protobuf.guild.MillMyInfo)
 private:
  inline void set_has_millid();
  inline void clear_has_millid();
  inline void set_has_milllvl();
  inline void clear_has_milllvl();
  inline void set_has_millfinishtime();
  inline void clear_has_millfinishtime();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 millid_;
  ::google::protobuf::int32 milllvl_;
  ::google::protobuf::int64 millfinishtime_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 > received_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::guild::MillRobbery > robberylist_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_guild_2eproto();
  friend void protobuf_AssignDesc_guild_2eproto();
  friend void protobuf_ShutdownFile_guild_2eproto();
  
  void InitAsDefaultInstance();
  static MillMyInfo* default_instance_;
};
// -------------------------------------------------------------------

class MillOtherInfo : public ::google::protobuf::Message {
 public:
  MillOtherInfo();
  virtual ~MillOtherInfo();
  
  MillOtherInfo(const MillOtherInfo& from);
  
  inline MillOtherInfo& operator=(const MillOtherInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MillOtherInfo& default_instance();
  
  void Swap(MillOtherInfo* other);
  
  // implements Message ----------------------------------------------
  
  MillOtherInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MillOtherInfo& from);
  void MergeFrom(const MillOtherInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline const ::std::string& playerid() const;
  inline void set_playerid(const ::std::string& value);
  inline void set_playerid(const char* value);
  inline void set_playerid(const char* value, size_t size);
  inline ::std::string* mutable_playerid();
  inline ::std::string* release_playerid();
  
  // optional string playername = 2;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayernameFieldNumber = 2;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  inline ::std::string* release_playername();
  
  // required .protobuf.guild.GuildBaseInfo guildinfo = 3;
  inline bool has_guildinfo() const;
  inline void clear_guildinfo();
  static const int kGuildinfoFieldNumber = 3;
  inline const ::protobuf::guild::GuildBaseInfo& guildinfo() const;
  inline ::protobuf::guild::GuildBaseInfo* mutable_guildinfo();
  inline ::protobuf::guild::GuildBaseInfo* release_guildinfo();
  
  // optional int32 power = 4;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 4;
  inline ::google::protobuf::int32 power() const;
  inline void set_power(::google::protobuf::int32 value);
  
  // optional int32 millid = 5;
  inline bool has_millid() const;
  inline void clear_millid();
  static const int kMillidFieldNumber = 5;
  inline ::google::protobuf::int32 millid() const;
  inline void set_millid(::google::protobuf::int32 value);
  
  // optional int32 milllvl = 6;
  inline bool has_milllvl() const;
  inline void clear_milllvl();
  static const int kMilllvlFieldNumber = 6;
  inline ::google::protobuf::int32 milllvl() const;
  inline void set_milllvl(::google::protobuf::int32 value);
  
  // optional bool robberyed = 7;
  inline bool has_robberyed() const;
  inline void clear_robberyed();
  static const int kRobberyedFieldNumber = 7;
  inline bool robberyed() const;
  inline void set_robberyed(bool value);
  
  // @@protoc_insertion_point(class_scope:protobuf.guild.MillOtherInfo)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_playername();
  inline void clear_has_playername();
  inline void set_has_guildinfo();
  inline void clear_has_guildinfo();
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_millid();
  inline void clear_has_millid();
  inline void set_has_milllvl();
  inline void clear_has_milllvl();
  inline void set_has_robberyed();
  inline void clear_has_robberyed();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* playerid_;
  ::std::string* playername_;
  ::protobuf::guild::GuildBaseInfo* guildinfo_;
  ::google::protobuf::int32 power_;
  ::google::protobuf::int32 millid_;
  ::google::protobuf::int32 milllvl_;
  bool robberyed_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_guild_2eproto();
  friend void protobuf_AssignDesc_guild_2eproto();
  friend void protobuf_ShutdownFile_guild_2eproto();
  
  void InitAsDefaultInstance();
  static MillOtherInfo* default_instance_;
};
// -------------------------------------------------------------------

class MillLvlInfo : public ::google::protobuf::Message {
 public:
  MillLvlInfo();
  virtual ~MillLvlInfo();
  
  MillLvlInfo(const MillLvlInfo& from);
  
  inline MillLvlInfo& operator=(const MillLvlInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MillLvlInfo& default_instance();
  
  void Swap(MillLvlInfo* other);
  
  // implements Message ----------------------------------------------
  
  MillLvlInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MillLvlInfo& from);
  void MergeFrom(const MillLvlInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 milllvl = 1;
  inline bool has_milllvl() const;
  inline void clear_milllvl();
  static const int kMilllvlFieldNumber = 1;
  inline ::google::protobuf::int32 milllvl() const;
  inline void set_milllvl(::google::protobuf::int32 value);
  
  // required int32 millexp = 2;
  inline bool has_millexp() const;
  inline void clear_millexp();
  static const int kMillexpFieldNumber = 2;
  inline ::google::protobuf::int32 millexp() const;
  inline void set_millexp(::google::protobuf::int32 value);
  
  // required int64 guildgold = 4;
  inline bool has_guildgold() const;
  inline void clear_guildgold();
  static const int kGuildgoldFieldNumber = 4;
  inline ::google::protobuf::int64 guildgold() const;
  inline void set_guildgold(::google::protobuf::int64 value);
  
  // repeated .protobuf.guild.MillExpHistory history = 3;
  inline int history_size() const;
  inline void clear_history();
  static const int kHistoryFieldNumber = 3;
  inline const ::protobuf::guild::MillExpHistory& history(int index) const;
  inline ::protobuf::guild::MillExpHistory* mutable_history(int index);
  inline ::protobuf::guild::MillExpHistory* add_history();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::guild::MillExpHistory >&
      history() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::guild::MillExpHistory >*
      mutable_history();
  
  // @@protoc_insertion_point(class_scope:protobuf.guild.MillLvlInfo)
 private:
  inline void set_has_milllvl();
  inline void clear_has_milllvl();
  inline void set_has_millexp();
  inline void clear_has_millexp();
  inline void set_has_guildgold();
  inline void clear_has_guildgold();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 milllvl_;
  ::google::protobuf::int32 millexp_;
  ::google::protobuf::int64 guildgold_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::guild::MillExpHistory > history_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_guild_2eproto();
  friend void protobuf_AssignDesc_guild_2eproto();
  friend void protobuf_ShutdownFile_guild_2eproto();
  
  void InitAsDefaultInstance();
  static MillLvlInfo* default_instance_;
};
// -------------------------------------------------------------------

class DonationHistory : public ::google::protobuf::Message {
 public:
  DonationHistory();
  virtual ~DonationHistory();
  
  DonationHistory(const DonationHistory& from);
  
  inline DonationHistory& operator=(const DonationHistory& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DonationHistory& default_instance();
  
  void Swap(DonationHistory* other);
  
  // implements Message ----------------------------------------------
  
  DonationHistory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DonationHistory& from);
  void MergeFrom(const DonationHistory& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protobuf.guild.MillExpHistory history = 1;
  inline int history_size() const;
  inline void clear_history();
  static const int kHistoryFieldNumber = 1;
  inline const ::protobuf::guild::MillExpHistory& history(int index) const;
  inline ::protobuf::guild::MillExpHistory* mutable_history(int index);
  inline ::protobuf::guild::MillExpHistory* add_history();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::guild::MillExpHistory >&
      history() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::guild::MillExpHistory >*
      mutable_history();
  
  // @@protoc_insertion_point(class_scope:protobuf.guild.DonationHistory)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protobuf::guild::MillExpHistory > history_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_guild_2eproto();
  friend void protobuf_AssignDesc_guild_2eproto();
  friend void protobuf_ShutdownFile_guild_2eproto();
  
  void InitAsDefaultInstance();
  static DonationHistory* default_instance_;
};
// -------------------------------------------------------------------

class MillExpHistory : public ::google::protobuf::Message {
 public:
  MillExpHistory();
  virtual ~MillExpHistory();
  
  MillExpHistory(const MillExpHistory& from);
  
  inline MillExpHistory& operator=(const MillExpHistory& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MillExpHistory& default_instance();
  
  void Swap(MillExpHistory* other);
  
  // implements Message ----------------------------------------------
  
  MillExpHistory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MillExpHistory& from);
  void MergeFrom(const MillExpHistory& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline const ::std::string& playerid() const;
  inline void set_playerid(const ::std::string& value);
  inline void set_playerid(const char* value);
  inline void set_playerid(const char* value, size_t size);
  inline ::std::string* mutable_playerid();
  inline ::std::string* release_playerid();
  
  // required string playername = 2;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayernameFieldNumber = 2;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  inline ::std::string* release_playername();
  
  // required int64 gold = 3;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 3;
  inline ::google::protobuf::int64 gold() const;
  inline void set_gold(::google::protobuf::int64 value);
  
  // required int64 time = 4;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 4;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);
  
  // required int32 playerlvl = 5;
  inline bool has_playerlvl() const;
  inline void clear_playerlvl();
  static const int kPlayerlvlFieldNumber = 5;
  inline ::google::protobuf::int32 playerlvl() const;
  inline void set_playerlvl(::google::protobuf::int32 value);
  
  // required int32 identity = 6;
  inline bool has_identity() const;
  inline void clear_identity();
  static const int kIdentityFieldNumber = 6;
  inline ::google::protobuf::int32 identity() const;
  inline void set_identity(::google::protobuf::int32 value);
  
  // required string head = 7;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 7;
  inline const ::std::string& head() const;
  inline void set_head(const ::std::string& value);
  inline void set_head(const char* value);
  inline void set_head(const char* value, size_t size);
  inline ::std::string* mutable_head();
  inline ::std::string* release_head();
  
  // optional int32 headFrame = 8;
  inline bool has_headframe() const;
  inline void clear_headframe();
  static const int kHeadFrameFieldNumber = 8;
  inline ::google::protobuf::int32 headframe() const;
  inline void set_headframe(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protobuf.guild.MillExpHistory)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_playername();
  inline void clear_has_playername();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_playerlvl();
  inline void clear_has_playerlvl();
  inline void set_has_identity();
  inline void clear_has_identity();
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_headframe();
  inline void clear_has_headframe();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* playerid_;
  ::std::string* playername_;
  ::google::protobuf::int64 gold_;
  ::google::protobuf::int64 time_;
  ::google::protobuf::int32 playerlvl_;
  ::google::protobuf::int32 identity_;
  ::std::string* head_;
  ::google::protobuf::int32 headframe_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_guild_2eproto();
  friend void protobuf_AssignDesc_guild_2eproto();
  friend void protobuf_ShutdownFile_guild_2eproto();
  
  void InitAsDefaultInstance();
  static MillExpHistory* default_instance_;
};
// -------------------------------------------------------------------

class ModGuildInfo : public ::google::protobuf::Message {
 public:
  ModGuildInfo();
  virtual ~ModGuildInfo();
  
  ModGuildInfo(const ModGuildInfo& from);
  
  inline ModGuildInfo& operator=(const ModGuildInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ModGuildInfo& default_instance();
  
  void Swap(ModGuildInfo* other);
  
  // implements Message ----------------------------------------------
  
  ModGuildInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModGuildInfo& from);
  void MergeFrom(const ModGuildInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // required .protobuf.guild.GuildBaseInfo info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::protobuf::guild::GuildBaseInfo& info() const;
  inline ::protobuf::guild::GuildBaseInfo* mutable_info();
  inline ::protobuf::guild::GuildBaseInfo* release_info();
  
  // @@protoc_insertion_point(class_scope:protobuf.guild.ModGuildInfo)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_info();
  inline void clear_has_info();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::protobuf::guild::GuildBaseInfo* info_;
  ::google::protobuf::int32 type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_guild_2eproto();
  friend void protobuf_AssignDesc_guild_2eproto();
  friend void protobuf_ShutdownFile_guild_2eproto();
  
  void InitAsDefaultInstance();
  static ModGuildInfo* default_instance_;
};
// -------------------------------------------------------------------

class DynIcon : public ::google::protobuf::Message {
 public:
  DynIcon();
  virtual ~DynIcon();
  
  DynIcon(const DynIcon& from);
  
  inline DynIcon& operator=(const DynIcon& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DynIcon& default_instance();
  
  void Swap(DynIcon* other);
  
  // implements Message ----------------------------------------------
  
  DynIcon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DynIcon& from);
  void MergeFrom(const DynIcon& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string icon = 1;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 1;
  inline const ::std::string& icon() const;
  inline void set_icon(const ::std::string& value);
  inline void set_icon(const char* value);
  inline void set_icon(const char* value, size_t size);
  inline ::std::string* mutable_icon();
  inline ::std::string* release_icon();
  
  // required int64 outtime = 2;
  inline bool has_outtime() const;
  inline void clear_outtime();
  static const int kOuttimeFieldNumber = 2;
  inline ::google::protobuf::int64 outtime() const;
  inline void set_outtime(::google::protobuf::int64 value);
  
  // required int64 usetime = 3;
  inline bool has_usetime() const;
  inline void clear_usetime();
  static const int kUsetimeFieldNumber = 3;
  inline ::google::protobuf::int64 usetime() const;
  inline void set_usetime(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:protobuf.guild.DynIcon)
 private:
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_outtime();
  inline void clear_has_outtime();
  inline void set_has_usetime();
  inline void clear_has_usetime();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* icon_;
  ::google::protobuf::int64 outtime_;
  ::google::protobuf::int64 usetime_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_guild_2eproto();
  friend void protobuf_AssignDesc_guild_2eproto();
  friend void protobuf_ShutdownFile_guild_2eproto();
  
  void InitAsDefaultInstance();
  static DynIcon* default_instance_;
};
// -------------------------------------------------------------------

class DynIconList : public ::google::protobuf::Message {
 public:
  DynIconList();
  virtual ~DynIconList();
  
  DynIconList(const DynIconList& from);
  
  inline DynIconList& operator=(const DynIconList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DynIconList& default_instance();
  
  void Swap(DynIconList* other);
  
  // implements Message ----------------------------------------------
  
  DynIconList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DynIconList& from);
  void MergeFrom(const DynIconList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protobuf.guild.DynIcon icons = 1;
  inline int icons_size() const;
  inline void clear_icons();
  static const int kIconsFieldNumber = 1;
  inline const ::protobuf::guild::DynIcon& icons(int index) const;
  inline ::protobuf::guild::DynIcon* mutable_icons(int index);
  inline ::protobuf::guild::DynIcon* add_icons();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::guild::DynIcon >&
      icons() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::guild::DynIcon >*
      mutable_icons();
  
  // @@protoc_insertion_point(class_scope:protobuf.guild.DynIconList)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protobuf::guild::DynIcon > icons_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_guild_2eproto();
  friend void protobuf_AssignDesc_guild_2eproto();
  friend void protobuf_ShutdownFile_guild_2eproto();
  
  void InitAsDefaultInstance();
  static DynIconList* default_instance_;
};
// -------------------------------------------------------------------

class EnterHall : public ::google::protobuf::Message {
 public:
  EnterHall();
  virtual ~EnterHall();
  
  EnterHall(const EnterHall& from);
  
  inline EnterHall& operator=(const EnterHall& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EnterHall& default_instance();
  
  void Swap(EnterHall* other);
  
  // implements Message ----------------------------------------------
  
  EnterHall* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnterHall& from);
  void MergeFrom(const EnterHall& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 state = 1;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 1;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);
  
  // required int64 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);
  
  // required bool isJoin = 3;
  inline bool has_isjoin() const;
  inline void clear_isjoin();
  static const int kIsJoinFieldNumber = 3;
  inline bool isjoin() const;
  inline void set_isjoin(bool value);
  
  // optional int32 rank = 4;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 4;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);
  
  // optional int32 score = 5;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 5;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);
  
  // optional int32 energy = 6;
  inline bool has_energy() const;
  inline void clear_energy();
  static const int kEnergyFieldNumber = 6;
  inline ::google::protobuf::int32 energy() const;
  inline void set_energy(::google::protobuf::int32 value);
  
  // optional int64 energyTime = 7;
  inline bool has_energytime() const;
  inline void clear_energytime();
  static const int kEnergyTimeFieldNumber = 7;
  inline ::google::protobuf::int64 energytime() const;
  inline void set_energytime(::google::protobuf::int64 value);
  
  // repeated .protobuf.guild.LineupShow lineup = 8;
  inline int lineup_size() const;
  inline void clear_lineup();
  static const int kLineupFieldNumber = 8;
  inline const ::protobuf::guild::LineupShow& lineup(int index) const;
  inline ::protobuf::guild::LineupShow* mutable_lineup(int index);
  inline ::protobuf::guild::LineupShow* add_lineup();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::guild::LineupShow >&
      lineup() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::guild::LineupShow >*
      mutable_lineup();
  
  // repeated .protobuf.guild.RankInfo contribution = 9;
  inline int contribution_size() const;
  inline void clear_contribution();
  static const int kContributionFieldNumber = 9;
  inline const ::protobuf::guild::RankInfo& contribution(int index) const;
  inline ::protobuf::guild::RankInfo* mutable_contribution(int index);
  inline ::protobuf::guild::RankInfo* add_contribution();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::guild::RankInfo >&
      contribution() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::guild::RankInfo >*
      mutable_contribution();
  
  // optional bool isSetOther = 10;
  inline bool has_issetother() const;
  inline void clear_issetother();
  static const int kIsSetOtherFieldNumber = 10;
  inline bool issetother() const;
  inline void set_issetother(bool value);
  
  // @@protoc_insertion_point(class_scope:protobuf.guild.EnterHall)
 private:
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_isjoin();
  inline void clear_has_isjoin();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_energy();
  inline void clear_has_energy();
  inline void set_has_energytime();
  inline void clear_has_energytime();
  inline void set_has_issetother();
  inline void clear_has_issetother();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 time_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 score_;
  ::google::protobuf::int32 energy_;
  ::google::protobuf::int64 energytime_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::guild::LineupShow > lineup_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::guild::RankInfo > contribution_;
  bool isjoin_;
  bool issetother_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_guild_2eproto();
  friend void protobuf_AssignDesc_guild_2eproto();
  friend void protobuf_ShutdownFile_guild_2eproto();
  
  void InitAsDefaultInstance();
  static EnterHall* default_instance_;
};
// -------------------------------------------------------------------

class LineupShow : public ::google::protobuf::Message {
 public:
  LineupShow();
  virtual ~LineupShow();
  
  LineupShow(const LineupShow& from);
  
  inline LineupShow& operator=(const LineupShow& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LineupShow& default_instance();
  
  void Swap(LineupShow* other);
  
  // implements Message ----------------------------------------------
  
  LineupShow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LineupShow& from);
  void MergeFrom(const LineupShow& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  
  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required bool isJoin = 3;
  inline bool has_isjoin() const;
  inline void clear_isjoin();
  static const int kIsJoinFieldNumber = 3;
  inline bool isjoin() const;
  inline void set_isjoin(bool value);
  
  // required bool isHide = 4;
  inline bool has_ishide() const;
  inline void clear_ishide();
  static const int kIsHideFieldNumber = 4;
  inline bool ishide() const;
  inline void set_ishide(bool value);
  
  // required int32 power = 5;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 5;
  inline ::google::protobuf::int32 power() const;
  inline void set_power(::google::protobuf::int32 value);
  
  // repeated .protobuf.common.KVint3232 heros = 6;
  inline int heros_size() const;
  inline void clear_heros();
  static const int kHerosFieldNumber = 6;
  inline const ::protobuf::common::KVint3232& heros(int index) const;
  inline ::protobuf::common::KVint3232* mutable_heros(int index);
  inline ::protobuf::common::KVint3232* add_heros();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >&
      heros() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >*
      mutable_heros();
  
  // @@protoc_insertion_point(class_scope:protobuf.guild.LineupShow)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_isjoin();
  inline void clear_has_isjoin();
  inline void set_has_ishide();
  inline void clear_has_ishide();
  inline void set_has_power();
  inline void clear_has_power();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* id_;
  ::std::string* name_;
  bool isjoin_;
  bool ishide_;
  ::google::protobuf::int32 power_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 > heros_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_guild_2eproto();
  friend void protobuf_AssignDesc_guild_2eproto();
  friend void protobuf_ShutdownFile_guild_2eproto();
  
  void InitAsDefaultInstance();
  static LineupShow* default_instance_;
};
// -------------------------------------------------------------------

class EnemyInfoRequest : public ::google::protobuf::Message {
 public:
  EnemyInfoRequest();
  virtual ~EnemyInfoRequest();
  
  EnemyInfoRequest(const EnemyInfoRequest& from);
  
  inline EnemyInfoRequest& operator=(const EnemyInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EnemyInfoRequest& default_instance();
  
  void Swap(EnemyInfoRequest* other);
  
  // implements Message ----------------------------------------------
  
  EnemyInfoRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnemyInfoRequest& from);
  void MergeFrom(const EnemyInfoRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  
  // required bool refresh = 2;
  inline bool has_refresh() const;
  inline void clear_refresh();
  static const int kRefreshFieldNumber = 2;
  inline bool refresh() const;
  inline void set_refresh(bool value);
  
  // @@protoc_insertion_point(class_scope:protobuf.guild.EnemyInfoRequest)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_refresh();
  inline void clear_has_refresh();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* id_;
  bool refresh_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_guild_2eproto();
  friend void protobuf_AssignDesc_guild_2eproto();
  friend void protobuf_ShutdownFile_guild_2eproto();
  
  void InitAsDefaultInstance();
  static EnemyInfoRequest* default_instance_;
};
// -------------------------------------------------------------------

class EnemyInfoReply : public ::google::protobuf::Message {
 public:
  EnemyInfoReply();
  virtual ~EnemyInfoReply();
  
  EnemyInfoReply(const EnemyInfoReply& from);
  
  inline EnemyInfoReply& operator=(const EnemyInfoReply& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EnemyInfoReply& default_instance();
  
  void Swap(EnemyInfoReply* other);
  
  // implements Message ----------------------------------------------
  
  EnemyInfoReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnemyInfoReply& from);
  void MergeFrom(const EnemyInfoReply& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .protobuf.guild.EnemyInfo info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::protobuf::guild::EnemyInfo& info() const;
  inline ::protobuf::guild::EnemyInfo* mutable_info();
  inline ::protobuf::guild::EnemyInfo* release_info();
  
  // optional int32 energy = 6;
  inline bool has_energy() const;
  inline void clear_energy();
  static const int kEnergyFieldNumber = 6;
  inline ::google::protobuf::int32 energy() const;
  inline void set_energy(::google::protobuf::int32 value);
  
  // optional int64 energyTime = 7;
  inline bool has_energytime() const;
  inline void clear_energytime();
  static const int kEnergyTimeFieldNumber = 7;
  inline ::google::protobuf::int64 energytime() const;
  inline void set_energytime(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:protobuf.guild.EnemyInfoReply)
 private:
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_energy();
  inline void clear_has_energy();
  inline void set_has_energytime();
  inline void clear_has_energytime();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::protobuf::guild::EnemyInfo* info_;
  ::google::protobuf::int64 energytime_;
  ::google::protobuf::int32 energy_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_guild_2eproto();
  friend void protobuf_AssignDesc_guild_2eproto();
  friend void protobuf_ShutdownFile_guild_2eproto();
  
  void InitAsDefaultInstance();
  static EnemyInfoReply* default_instance_;
};
// -------------------------------------------------------------------

class EnemyInfo : public ::google::protobuf::Message {
 public:
  EnemyInfo();
  virtual ~EnemyInfo();
  
  EnemyInfo(const EnemyInfo& from);
  
  inline EnemyInfo& operator=(const EnemyInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EnemyInfo& default_instance();
  
  void Swap(EnemyInfo* other);
  
  // implements Message ----------------------------------------------
  
  EnemyInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnemyInfo& from);
  void MergeFrom(const EnemyInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);
  
  // required int32 score = 2;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 2;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);
  
  // required string guildname = 3;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildnameFieldNumber = 3;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  
  // required string guildicon = 4;
  inline bool has_guildicon() const;
  inline void clear_guildicon();
  static const int kGuildiconFieldNumber = 4;
  inline const ::std::string& guildicon() const;
  inline void set_guildicon(const ::std::string& value);
  inline void set_guildicon(const char* value);
  inline void set_guildicon(const char* value, size_t size);
  inline ::std::string* mutable_guildicon();
  inline ::std::string* release_guildicon();
  
  // required string serverName = 5;
  inline bool has_servername() const;
  inline void clear_servername();
  static const int kServerNameFieldNumber = 5;
  inline const ::std::string& servername() const;
  inline void set_servername(const ::std::string& value);
  inline void set_servername(const char* value);
  inline void set_servername(const char* value, size_t size);
  inline ::std::string* mutable_servername();
  inline ::std::string* release_servername();
  
  // repeated .protobuf.guild.EnemyLineupShow lineup = 6;
  inline int lineup_size() const;
  inline void clear_lineup();
  static const int kLineupFieldNumber = 6;
  inline const ::protobuf::guild::EnemyLineupShow& lineup(int index) const;
  inline ::protobuf::guild::EnemyLineupShow* mutable_lineup(int index);
  inline ::protobuf::guild::EnemyLineupShow* add_lineup();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::guild::EnemyLineupShow >&
      lineup() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::guild::EnemyLineupShow >*
      mutable_lineup();
  
  // optional int32 finalRank = 7;
  inline bool has_finalrank() const;
  inline void clear_finalrank();
  static const int kFinalRankFieldNumber = 7;
  inline ::google::protobuf::int32 finalrank() const;
  inline void set_finalrank(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protobuf.guild.EnemyInfo)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_guildname();
  inline void clear_has_guildname();
  inline void set_has_guildicon();
  inline void clear_has_guildicon();
  inline void set_has_servername();
  inline void clear_has_servername();
  inline void set_has_finalrank();
  inline void clear_has_finalrank();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 score_;
  ::std::string* guildname_;
  ::std::string* guildicon_;
  ::std::string* servername_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::guild::EnemyLineupShow > lineup_;
  ::google::protobuf::int32 finalrank_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_guild_2eproto();
  friend void protobuf_AssignDesc_guild_2eproto();
  friend void protobuf_ShutdownFile_guild_2eproto();
  
  void InitAsDefaultInstance();
  static EnemyInfo* default_instance_;
};
// -------------------------------------------------------------------

class EnemyLineupShow : public ::google::protobuf::Message {
 public:
  EnemyLineupShow();
  virtual ~EnemyLineupShow();
  
  EnemyLineupShow(const EnemyLineupShow& from);
  
  inline EnemyLineupShow& operator=(const EnemyLineupShow& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EnemyLineupShow& default_instance();
  
  void Swap(EnemyLineupShow* other);
  
  // implements Message ----------------------------------------------
  
  EnemyLineupShow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnemyLineupShow& from);
  void MergeFrom(const EnemyLineupShow& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required bool isHide = 2;
  inline bool has_ishide() const;
  inline void clear_ishide();
  static const int kIsHideFieldNumber = 2;
  inline bool ishide() const;
  inline void set_ishide(bool value);
  
  // repeated .protobuf.common.KVint3232 heros = 3;
  inline int heros_size() const;
  inline void clear_heros();
  static const int kHerosFieldNumber = 3;
  inline const ::protobuf::common::KVint3232& heros(int index) const;
  inline ::protobuf::common::KVint3232* mutable_heros(int index);
  inline ::protobuf::common::KVint3232* add_heros();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >&
      heros() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >*
      mutable_heros();
  
  // @@protoc_insertion_point(class_scope:protobuf.guild.EnemyLineupShow)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_ishide();
  inline void clear_has_ishide();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 > heros_;
  bool ishide_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_guild_2eproto();
  friend void protobuf_AssignDesc_guild_2eproto();
  friend void protobuf_ShutdownFile_guild_2eproto();
  
  void InitAsDefaultInstance();
  static EnemyLineupShow* default_instance_;
};
// -------------------------------------------------------------------

class RankInfo : public ::google::protobuf::Message {
 public:
  RankInfo();
  virtual ~RankInfo();
  
  RankInfo(const RankInfo& from);
  
  inline RankInfo& operator=(const RankInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RankInfo& default_instance();
  
  void Swap(RankInfo* other);
  
  // implements Message ----------------------------------------------
  
  RankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RankInfo& from);
  void MergeFrom(const RankInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  
  // required int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // required string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required string head = 4;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 4;
  inline const ::std::string& head() const;
  inline void set_head(const ::std::string& value);
  inline void set_head(const char* value);
  inline void set_head(const char* value, size_t size);
  inline ::std::string* mutable_head();
  inline ::std::string* release_head();
  
  // required int32 headFrame = 5;
  inline bool has_headframe() const;
  inline void clear_headframe();
  static const int kHeadFrameFieldNumber = 5;
  inline ::google::protobuf::int32 headframe() const;
  inline void set_headframe(::google::protobuf::int32 value);
  
  // required int32 winTime = 6;
  inline bool has_wintime() const;
  inline void clear_wintime();
  static const int kWinTimeFieldNumber = 6;
  inline ::google::protobuf::int32 wintime() const;
  inline void set_wintime(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protobuf.guild.RankInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_headframe();
  inline void clear_has_headframe();
  inline void set_has_wintime();
  inline void clear_has_wintime();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* id_;
  ::std::string* name_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 headframe_;
  ::std::string* head_;
  ::google::protobuf::int32 wintime_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_guild_2eproto();
  friend void protobuf_AssignDesc_guild_2eproto();
  friend void protobuf_ShutdownFile_guild_2eproto();
  
  void InitAsDefaultInstance();
  static RankInfo* default_instance_;
};
// -------------------------------------------------------------------

class RecordReply : public ::google::protobuf::Message {
 public:
  RecordReply();
  virtual ~RecordReply();
  
  RecordReply(const RecordReply& from);
  
  inline RecordReply& operator=(const RecordReply& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecordReply& default_instance();
  
  void Swap(RecordReply* other);
  
  // implements Message ----------------------------------------------
  
  RecordReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecordReply& from);
  void MergeFrom(const RecordReply& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protobuf.guild.Record records = 1;
  inline int records_size() const;
  inline void clear_records();
  static const int kRecordsFieldNumber = 1;
  inline const ::protobuf::guild::Record& records(int index) const;
  inline ::protobuf::guild::Record* mutable_records(int index);
  inline ::protobuf::guild::Record* add_records();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::guild::Record >&
      records() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::guild::Record >*
      mutable_records();
  
  // @@protoc_insertion_point(class_scope:protobuf.guild.RecordReply)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protobuf::guild::Record > records_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_guild_2eproto();
  friend void protobuf_AssignDesc_guild_2eproto();
  friend void protobuf_ShutdownFile_guild_2eproto();
  
  void InitAsDefaultInstance();
  static RecordReply* default_instance_;
};
// -------------------------------------------------------------------

class Record : public ::google::protobuf::Message {
 public:
  Record();
  virtual ~Record();
  
  Record(const Record& from);
  
  inline Record& operator=(const Record& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Record& default_instance();
  
  void Swap(Record* other);
  
  // implements Message ----------------------------------------------
  
  Record* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Record& from);
  void MergeFrom(const Record& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  
  // required string serverName = 2;
  inline bool has_servername() const;
  inline void clear_servername();
  static const int kServerNameFieldNumber = 2;
  inline const ::std::string& servername() const;
  inline void set_servername(const ::std::string& value);
  inline void set_servername(const char* value);
  inline void set_servername(const char* value, size_t size);
  inline ::std::string* mutable_servername();
  inline ::std::string* release_servername();
  
  // required string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required string icon = 4;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 4;
  inline const ::std::string& icon() const;
  inline void set_icon(const ::std::string& value);
  inline void set_icon(const char* value);
  inline void set_icon(const char* value, size_t size);
  inline ::std::string* mutable_icon();
  inline ::std::string* release_icon();
  
  // required int32 score = 5;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 5;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);
  
  // required int64 time = 6;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 6;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);
  
  // required bool isWin = 7;
  inline bool has_iswin() const;
  inline void clear_iswin();
  static const int kIsWinFieldNumber = 7;
  inline bool iswin() const;
  inline void set_iswin(bool value);
  
  // @@protoc_insertion_point(class_scope:protobuf.guild.Record)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_servername();
  inline void clear_has_servername();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_iswin();
  inline void clear_has_iswin();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* id_;
  ::std::string* servername_;
  ::std::string* name_;
  ::std::string* icon_;
  ::google::protobuf::int64 time_;
  ::google::protobuf::int32 score_;
  bool iswin_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_guild_2eproto();
  friend void protobuf_AssignDesc_guild_2eproto();
  friend void protobuf_ShutdownFile_guild_2eproto();
  
  void InitAsDefaultInstance();
  static Record* default_instance_;
};
// -------------------------------------------------------------------

class ChatRecord : public ::google::protobuf::Message {
 public:
  ChatRecord();
  virtual ~ChatRecord();
  
  ChatRecord(const ChatRecord& from);
  
  inline ChatRecord& operator=(const ChatRecord& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatRecord& default_instance();
  
  void Swap(ChatRecord* other);
  
  // implements Message ----------------------------------------------
  
  ChatRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatRecord& from);
  void MergeFrom(const ChatRecord& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  
  // required string atServerName = 2;
  inline bool has_atservername() const;
  inline void clear_atservername();
  static const int kAtServerNameFieldNumber = 2;
  inline const ::std::string& atservername() const;
  inline void set_atservername(const ::std::string& value);
  inline void set_atservername(const char* value);
  inline void set_atservername(const char* value, size_t size);
  inline ::std::string* mutable_atservername();
  inline ::std::string* release_atservername();
  
  // required string atName = 3;
  inline bool has_atname() const;
  inline void clear_atname();
  static const int kAtNameFieldNumber = 3;
  inline const ::std::string& atname() const;
  inline void set_atname(const ::std::string& value);
  inline void set_atname(const char* value);
  inline void set_atname(const char* value, size_t size);
  inline ::std::string* mutable_atname();
  inline ::std::string* release_atname();
  
  // required string atIcon = 4;
  inline bool has_aticon() const;
  inline void clear_aticon();
  static const int kAtIconFieldNumber = 4;
  inline const ::std::string& aticon() const;
  inline void set_aticon(const ::std::string& value);
  inline void set_aticon(const char* value);
  inline void set_aticon(const char* value, size_t size);
  inline ::std::string* mutable_aticon();
  inline ::std::string* release_aticon();
  
  // required string deServerName = 5;
  inline bool has_deservername() const;
  inline void clear_deservername();
  static const int kDeServerNameFieldNumber = 5;
  inline const ::std::string& deservername() const;
  inline void set_deservername(const ::std::string& value);
  inline void set_deservername(const char* value);
  inline void set_deservername(const char* value, size_t size);
  inline ::std::string* mutable_deservername();
  inline ::std::string* release_deservername();
  
  // required string deName = 6;
  inline bool has_dename() const;
  inline void clear_dename();
  static const int kDeNameFieldNumber = 6;
  inline const ::std::string& dename() const;
  inline void set_dename(const ::std::string& value);
  inline void set_dename(const char* value);
  inline void set_dename(const char* value, size_t size);
  inline ::std::string* mutable_dename();
  inline ::std::string* release_dename();
  
  // required string deIcon = 7;
  inline bool has_deicon() const;
  inline void clear_deicon();
  static const int kDeIconFieldNumber = 7;
  inline const ::std::string& deicon() const;
  inline void set_deicon(const ::std::string& value);
  inline void set_deicon(const char* value);
  inline void set_deicon(const char* value, size_t size);
  inline ::std::string* mutable_deicon();
  inline ::std::string* release_deicon();
  
  // required int32 score = 8;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 8;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);
  
  // required int64 time = 9;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 9;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);
  
  // required bool isWin = 10;
  inline bool has_iswin() const;
  inline void clear_iswin();
  static const int kIsWinFieldNumber = 10;
  inline bool iswin() const;
  inline void set_iswin(bool value);
  
  // required int32 winTime = 11;
  inline bool has_wintime() const;
  inline void clear_wintime();
  static const int kWinTimeFieldNumber = 11;
  inline ::google::protobuf::int32 wintime() const;
  inline void set_wintime(::google::protobuf::int32 value);
  
  // required int32 failTime = 12;
  inline bool has_failtime() const;
  inline void clear_failtime();
  static const int kFailTimeFieldNumber = 12;
  inline ::google::protobuf::int32 failtime() const;
  inline void set_failtime(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protobuf.guild.ChatRecord)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_atservername();
  inline void clear_has_atservername();
  inline void set_has_atname();
  inline void clear_has_atname();
  inline void set_has_aticon();
  inline void clear_has_aticon();
  inline void set_has_deservername();
  inline void clear_has_deservername();
  inline void set_has_dename();
  inline void clear_has_dename();
  inline void set_has_deicon();
  inline void clear_has_deicon();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_iswin();
  inline void clear_has_iswin();
  inline void set_has_wintime();
  inline void clear_has_wintime();
  inline void set_has_failtime();
  inline void clear_has_failtime();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* id_;
  ::std::string* atservername_;
  ::std::string* atname_;
  ::std::string* aticon_;
  ::std::string* deservername_;
  ::std::string* dename_;
  ::std::string* deicon_;
  ::google::protobuf::int64 time_;
  ::google::protobuf::int32 score_;
  bool iswin_;
  ::google::protobuf::int32 wintime_;
  ::google::protobuf::int32 failtime_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  friend void  protobuf_AddDesc_guild_2eproto();
  friend void protobuf_AssignDesc_guild_2eproto();
  friend void protobuf_ShutdownFile_guild_2eproto();
  
  void InitAsDefaultInstance();
  static ChatRecord* default_instance_;
};
// -------------------------------------------------------------------

class SetLineup : public ::google::protobuf::Message {
 public:
  SetLineup();
  virtual ~SetLineup();
  
  SetLineup(const SetLineup& from);
  
  inline SetLineup& operator=(const SetLineup& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetLineup& default_instance();
  
  void Swap(SetLineup* other);
  
  // implements Message ----------------------------------------------
  
  SetLineup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetLineup& from);
  void MergeFrom(const SetLineup& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string ids = 1;
  inline int ids_size() const;
  inline void clear_ids();
  static const int kIdsFieldNumber = 1;
  inline const ::std::string& ids(int index) const;
  inline ::std::string* mutable_ids(int index);
  inline void set_ids(int index, const ::std::string& value);
  inline void set_ids(int index, const char* value);
  inline void set_ids(int index, const char* value, size_t size);
  inline ::std::string* add_ids();
  inline void add_ids(const ::std::string& value);
  inline void add_ids(const char* value);
  inline void add_ids(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_ids();
  
  // repeated string hides = 2;
  inline int hides_size() const;
  inline void clear_hides();
  static const int kHidesFieldNumber = 2;
  inline const ::std::string& hides(int index) const;
  inline ::std::string* mutable_hides(int index);
  inline void set_hides(int index, const ::std::string& value);
  inline void set_hides(int index, const char* value);
  inline void set_hides(int index, const char* value, size_t size);
  inline ::std::string* add_hides();
  inline void add_hides(const ::std::string& value);
  inline void add_hides(const char* value);
  inline void add_hides(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& hides() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_hides();
  
  // @@protoc_insertion_point(class_scope:protobuf.guild.SetLineup)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> ids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> hides_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_guild_2eproto();
  friend void protobuf_AssignDesc_guild_2eproto();
  friend void protobuf_ShutdownFile_guild_2eproto();
  
  void InitAsDefaultInstance();
  static SetLineup* default_instance_;
};
// -------------------------------------------------------------------

class RecordDetailReply : public ::google::protobuf::Message {
 public:
  RecordDetailReply();
  virtual ~RecordDetailReply();
  
  RecordDetailReply(const RecordDetailReply& from);
  
  inline RecordDetailReply& operator=(const RecordDetailReply& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecordDetailReply& default_instance();
  
  void Swap(RecordDetailReply* other);
  
  // implements Message ----------------------------------------------
  
  RecordDetailReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecordDetailReply& from);
  void MergeFrom(const RecordDetailReply& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protobuf.guild.RecordDetail records = 1;
  inline int records_size() const;
  inline void clear_records();
  static const int kRecordsFieldNumber = 1;
  inline const ::protobuf::guild::RecordDetail& records(int index) const;
  inline ::protobuf::guild::RecordDetail* mutable_records(int index);
  inline ::protobuf::guild::RecordDetail* add_records();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::guild::RecordDetail >&
      records() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::guild::RecordDetail >*
      mutable_records();
  
  // @@protoc_insertion_point(class_scope:protobuf.guild.RecordDetailReply)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protobuf::guild::RecordDetail > records_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_guild_2eproto();
  friend void protobuf_AssignDesc_guild_2eproto();
  friend void protobuf_ShutdownFile_guild_2eproto();
  
  void InitAsDefaultInstance();
  static RecordDetailReply* default_instance_;
};
// -------------------------------------------------------------------

class RecordDetail : public ::google::protobuf::Message {
 public:
  RecordDetail();
  virtual ~RecordDetail();
  
  RecordDetail(const RecordDetail& from);
  
  inline RecordDetail& operator=(const RecordDetail& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecordDetail& default_instance();
  
  void Swap(RecordDetail* other);
  
  // implements Message ----------------------------------------------
  
  RecordDetail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecordDetail& from);
  void MergeFrom(const RecordDetail& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  
  // required int32 atLv = 2;
  inline bool has_atlv() const;
  inline void clear_atlv();
  static const int kAtLvFieldNumber = 2;
  inline ::google::protobuf::int32 atlv() const;
  inline void set_atlv(::google::protobuf::int32 value);
  
  // required string atName = 3;
  inline bool has_atname() const;
  inline void clear_atname();
  static const int kAtNameFieldNumber = 3;
  inline const ::std::string& atname() const;
  inline void set_atname(const ::std::string& value);
  inline void set_atname(const char* value);
  inline void set_atname(const char* value, size_t size);
  inline ::std::string* mutable_atname();
  inline ::std::string* release_atname();
  
  // required string atHead = 4;
  inline bool has_athead() const;
  inline void clear_athead();
  static const int kAtHeadFieldNumber = 4;
  inline const ::std::string& athead() const;
  inline void set_athead(const ::std::string& value);
  inline void set_athead(const char* value);
  inline void set_athead(const char* value, size_t size);
  inline ::std::string* mutable_athead();
  inline ::std::string* release_athead();
  
  // required int32 atHeadFrame = 5;
  inline bool has_atheadframe() const;
  inline void clear_atheadframe();
  static const int kAtHeadFrameFieldNumber = 5;
  inline ::google::protobuf::int32 atheadframe() const;
  inline void set_atheadframe(::google::protobuf::int32 value);
  
  // required int32 deLv = 6;
  inline bool has_delv() const;
  inline void clear_delv();
  static const int kDeLvFieldNumber = 6;
  inline ::google::protobuf::int32 delv() const;
  inline void set_delv(::google::protobuf::int32 value);
  
  // required string deName = 7;
  inline bool has_dename() const;
  inline void clear_dename();
  static const int kDeNameFieldNumber = 7;
  inline const ::std::string& dename() const;
  inline void set_dename(const ::std::string& value);
  inline void set_dename(const char* value);
  inline void set_dename(const char* value, size_t size);
  inline ::std::string* mutable_dename();
  inline ::std::string* release_dename();
  
  // required string deHead = 8;
  inline bool has_dehead() const;
  inline void clear_dehead();
  static const int kDeHeadFieldNumber = 8;
  inline const ::std::string& dehead() const;
  inline void set_dehead(const ::std::string& value);
  inline void set_dehead(const char* value);
  inline void set_dehead(const char* value, size_t size);
  inline ::std::string* mutable_dehead();
  inline ::std::string* release_dehead();
  
  // required int32 deHeadFrame = 9;
  inline bool has_deheadframe() const;
  inline void clear_deheadframe();
  static const int kDeHeadFrameFieldNumber = 9;
  inline ::google::protobuf::int32 deheadframe() const;
  inline void set_deheadframe(::google::protobuf::int32 value);
  
  // required bool atIsWin = 10;
  inline bool has_atiswin() const;
  inline void clear_atiswin();
  static const int kAtIsWinFieldNumber = 10;
  inline bool atiswin() const;
  inline void set_atiswin(bool value);
  
  // repeated .protobuf.guild.HeroShow atHeros = 11;
  inline int atheros_size() const;
  inline void clear_atheros();
  static const int kAtHerosFieldNumber = 11;
  inline const ::protobuf::guild::HeroShow& atheros(int index) const;
  inline ::protobuf::guild::HeroShow* mutable_atheros(int index);
  inline ::protobuf::guild::HeroShow* add_atheros();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::guild::HeroShow >&
      atheros() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::guild::HeroShow >*
      mutable_atheros();
  
  // repeated .protobuf.guild.HeroShow deHeros = 12;
  inline int deheros_size() const;
  inline void clear_deheros();
  static const int kDeHerosFieldNumber = 12;
  inline const ::protobuf::guild::HeroShow& deheros(int index) const;
  inline ::protobuf::guild::HeroShow* mutable_deheros(int index);
  inline ::protobuf::guild::HeroShow* add_deheros();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::guild::HeroShow >&
      deheros() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::guild::HeroShow >*
      mutable_deheros();
  
  // @@protoc_insertion_point(class_scope:protobuf.guild.RecordDetail)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_atlv();
  inline void clear_has_atlv();
  inline void set_has_atname();
  inline void clear_has_atname();
  inline void set_has_athead();
  inline void clear_has_athead();
  inline void set_has_atheadframe();
  inline void clear_has_atheadframe();
  inline void set_has_delv();
  inline void clear_has_delv();
  inline void set_has_dename();
  inline void clear_has_dename();
  inline void set_has_dehead();
  inline void clear_has_dehead();
  inline void set_has_deheadframe();
  inline void clear_has_deheadframe();
  inline void set_has_atiswin();
  inline void clear_has_atiswin();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* id_;
  ::std::string* atname_;
  ::google::protobuf::int32 atlv_;
  ::google::protobuf::int32 atheadframe_;
  ::std::string* athead_;
  ::std::string* dename_;
  ::google::protobuf::int32 delv_;
  ::google::protobuf::int32 deheadframe_;
  ::std::string* dehead_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::guild::HeroShow > atheros_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::guild::HeroShow > deheros_;
  bool atiswin_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  friend void  protobuf_AddDesc_guild_2eproto();
  friend void protobuf_AssignDesc_guild_2eproto();
  friend void protobuf_ShutdownFile_guild_2eproto();
  
  void InitAsDefaultInstance();
  static RecordDetail* default_instance_;
};
// -------------------------------------------------------------------

class HeroShow : public ::google::protobuf::Message {
 public:
  HeroShow();
  virtual ~HeroShow();
  
  HeroShow(const HeroShow& from);
  
  inline HeroShow& operator=(const HeroShow& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const HeroShow& default_instance();
  
  void Swap(HeroShow* other);
  
  // implements Message ----------------------------------------------
  
  HeroShow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeroShow& from);
  void MergeFrom(const HeroShow& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // required int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // required int32 lv = 3;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 3;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);
  
  // required bool isDie = 4;
  inline bool has_isdie() const;
  inline void clear_isdie();
  static const int kIsDieFieldNumber = 4;
  inline bool isdie() const;
  inline void set_isdie(bool value);
  
  // @@protoc_insertion_point(class_scope:protobuf.guild.HeroShow)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_isdie();
  inline void clear_has_isdie();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 lv_;
  bool isdie_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_guild_2eproto();
  friend void protobuf_AssignDesc_guild_2eproto();
  friend void protobuf_ShutdownFile_guild_2eproto();
  
  void InitAsDefaultInstance();
  static HeroShow* default_instance_;
};
// -------------------------------------------------------------------

class FinalRecord : public ::google::protobuf::Message {
 public:
  FinalRecord();
  virtual ~FinalRecord();
  
  FinalRecord(const FinalRecord& from);
  
  inline FinalRecord& operator=(const FinalRecord& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FinalRecord& default_instance();
  
  void Swap(FinalRecord* other);
  
  // implements Message ----------------------------------------------
  
  FinalRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FinalRecord& from);
  void MergeFrom(const FinalRecord& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string atServerName = 1;
  inline bool has_atservername() const;
  inline void clear_atservername();
  static const int kAtServerNameFieldNumber = 1;
  inline const ::std::string& atservername() const;
  inline void set_atservername(const ::std::string& value);
  inline void set_atservername(const char* value);
  inline void set_atservername(const char* value, size_t size);
  inline ::std::string* mutable_atservername();
  inline ::std::string* release_atservername();
  
  // required string atName = 2;
  inline bool has_atname() const;
  inline void clear_atname();
  static const int kAtNameFieldNumber = 2;
  inline const ::std::string& atname() const;
  inline void set_atname(const ::std::string& value);
  inline void set_atname(const char* value);
  inline void set_atname(const char* value, size_t size);
  inline ::std::string* mutable_atname();
  inline ::std::string* release_atname();
  
  // required string atIcon = 3;
  inline bool has_aticon() const;
  inline void clear_aticon();
  static const int kAtIconFieldNumber = 3;
  inline const ::std::string& aticon() const;
  inline void set_aticon(const ::std::string& value);
  inline void set_aticon(const char* value);
  inline void set_aticon(const char* value, size_t size);
  inline ::std::string* mutable_aticon();
  inline ::std::string* release_aticon();
  
  // required string deServerName = 4;
  inline bool has_deservername() const;
  inline void clear_deservername();
  static const int kDeServerNameFieldNumber = 4;
  inline const ::std::string& deservername() const;
  inline void set_deservername(const ::std::string& value);
  inline void set_deservername(const char* value);
  inline void set_deservername(const char* value, size_t size);
  inline ::std::string* mutable_deservername();
  inline ::std::string* release_deservername();
  
  // required string deName = 5;
  inline bool has_dename() const;
  inline void clear_dename();
  static const int kDeNameFieldNumber = 5;
  inline const ::std::string& dename() const;
  inline void set_dename(const ::std::string& value);
  inline void set_dename(const char* value);
  inline void set_dename(const char* value, size_t size);
  inline ::std::string* mutable_dename();
  inline ::std::string* release_dename();
  
  // required string deIcon = 6;
  inline bool has_deicon() const;
  inline void clear_deicon();
  static const int kDeIconFieldNumber = 6;
  inline const ::std::string& deicon() const;
  inline void set_deicon(const ::std::string& value);
  inline void set_deicon(const char* value);
  inline void set_deicon(const char* value, size_t size);
  inline ::std::string* mutable_deicon();
  inline ::std::string* release_deicon();
  
  // required bool isWin = 7;
  inline bool has_iswin() const;
  inline void clear_iswin();
  static const int kIsWinFieldNumber = 7;
  inline bool iswin() const;
  inline void set_iswin(bool value);
  
  // repeated .protobuf.guild.RecordDetail records = 8;
  inline int records_size() const;
  inline void clear_records();
  static const int kRecordsFieldNumber = 8;
  inline const ::protobuf::guild::RecordDetail& records(int index) const;
  inline ::protobuf::guild::RecordDetail* mutable_records(int index);
  inline ::protobuf::guild::RecordDetail* add_records();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::guild::RecordDetail >&
      records() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::guild::RecordDetail >*
      mutable_records();
  
  // @@protoc_insertion_point(class_scope:protobuf.guild.FinalRecord)
 private:
  inline void set_has_atservername();
  inline void clear_has_atservername();
  inline void set_has_atname();
  inline void clear_has_atname();
  inline void set_has_aticon();
  inline void clear_has_aticon();
  inline void set_has_deservername();
  inline void clear_has_deservername();
  inline void set_has_dename();
  inline void clear_has_dename();
  inline void set_has_deicon();
  inline void clear_has_deicon();
  inline void set_has_iswin();
  inline void clear_has_iswin();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* atservername_;
  ::std::string* atname_;
  ::std::string* aticon_;
  ::std::string* deservername_;
  ::std::string* dename_;
  ::std::string* deicon_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::guild::RecordDetail > records_;
  bool iswin_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_guild_2eproto();
  friend void protobuf_AssignDesc_guild_2eproto();
  friend void protobuf_ShutdownFile_guild_2eproto();
  
  void InitAsDefaultInstance();
  static FinalRecord* default_instance_;
};
// -------------------------------------------------------------------

class FinalGuildShow : public ::google::protobuf::Message {
 public:
  FinalGuildShow();
  virtual ~FinalGuildShow();
  
  FinalGuildShow(const FinalGuildShow& from);
  
  inline FinalGuildShow& operator=(const FinalGuildShow& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FinalGuildShow& default_instance();
  
  void Swap(FinalGuildShow* other);
  
  // implements Message ----------------------------------------------
  
  FinalGuildShow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FinalGuildShow& from);
  void MergeFrom(const FinalGuildShow& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  
  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required string icon = 3;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 3;
  inline const ::std::string& icon() const;
  inline void set_icon(const ::std::string& value);
  inline void set_icon(const char* value);
  inline void set_icon(const char* value, size_t size);
  inline ::std::string* mutable_icon();
  inline ::std::string* release_icon();
  
  // required string serverName = 4;
  inline bool has_servername() const;
  inline void clear_servername();
  static const int kServerNameFieldNumber = 4;
  inline const ::std::string& servername() const;
  inline void set_servername(const ::std::string& value);
  inline void set_servername(const char* value);
  inline void set_servername(const char* value, size_t size);
  inline ::std::string* mutable_servername();
  inline ::std::string* release_servername();
  
  // required int32 rank = 5;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 5;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);
  
  // optional int32 lastRank = 6;
  inline bool has_lastrank() const;
  inline void clear_lastrank();
  static const int kLastRankFieldNumber = 6;
  inline ::google::protobuf::int32 lastrank() const;
  inline void set_lastrank(::google::protobuf::int32 value);
  
  // optional int32 finalRank = 7;
  inline bool has_finalrank() const;
  inline void clear_finalrank();
  static const int kFinalRankFieldNumber = 7;
  inline ::google::protobuf::int32 finalrank() const;
  inline void set_finalrank(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protobuf.guild.FinalGuildShow)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_servername();
  inline void clear_has_servername();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_lastrank();
  inline void clear_has_lastrank();
  inline void set_has_finalrank();
  inline void clear_has_finalrank();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* id_;
  ::std::string* name_;
  ::std::string* icon_;
  ::std::string* servername_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 lastrank_;
  ::google::protobuf::int32 finalrank_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_guild_2eproto();
  friend void protobuf_AssignDesc_guild_2eproto();
  friend void protobuf_ShutdownFile_guild_2eproto();
  
  void InitAsDefaultInstance();
  static FinalGuildShow* default_instance_;
};
// -------------------------------------------------------------------

class EnterFinal : public ::google::protobuf::Message {
 public:
  EnterFinal();
  virtual ~EnterFinal();
  
  EnterFinal(const EnterFinal& from);
  
  inline EnterFinal& operator=(const EnterFinal& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EnterFinal& default_instance();
  
  void Swap(EnterFinal* other);
  
  // implements Message ----------------------------------------------
  
  EnterFinal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnterFinal& from);
  void MergeFrom(const EnterFinal& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 state = 1;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 1;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);
  
  // optional int64 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);
  
  // optional bool isRank = 3;
  inline bool has_isrank() const;
  inline void clear_isrank();
  static const int kIsRankFieldNumber = 3;
  inline bool isrank() const;
  inline void set_isrank(bool value);
  
  // optional .protobuf.guild.Bet bet = 4;
  inline bool has_bet() const;
  inline void clear_bet();
  static const int kBetFieldNumber = 4;
  inline const ::protobuf::guild::Bet& bet() const;
  inline ::protobuf::guild::Bet* mutable_bet();
  inline ::protobuf::guild::Bet* release_bet();
  
  // repeated .protobuf.guild.FinalGuildShow lineup = 5;
  inline int lineup_size() const;
  inline void clear_lineup();
  static const int kLineupFieldNumber = 5;
  inline const ::protobuf::guild::FinalGuildShow& lineup(int index) const;
  inline ::protobuf::guild::FinalGuildShow* mutable_lineup(int index);
  inline ::protobuf::guild::FinalGuildShow* add_lineup();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::guild::FinalGuildShow >&
      lineup() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::guild::FinalGuildShow >*
      mutable_lineup();
  
  // @@protoc_insertion_point(class_scope:protobuf.guild.EnterFinal)
 private:
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_isrank();
  inline void clear_has_isrank();
  inline void set_has_bet();
  inline void clear_has_bet();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 time_;
  ::google::protobuf::int32 state_;
  bool isrank_;
  ::protobuf::guild::Bet* bet_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::guild::FinalGuildShow > lineup_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_guild_2eproto();
  friend void protobuf_AssignDesc_guild_2eproto();
  friend void protobuf_ShutdownFile_guild_2eproto();
  
  void InitAsDefaultInstance();
  static EnterFinal* default_instance_;
};
// -------------------------------------------------------------------

class Bet : public ::google::protobuf::Message {
 public:
  Bet();
  virtual ~Bet();
  
  Bet(const Bet& from);
  
  inline Bet& operator=(const Bet& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Bet& default_instance();
  
  void Swap(Bet* other);
  
  // implements Message ----------------------------------------------
  
  Bet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Bet& from);
  void MergeFrom(const Bet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  
  // required int32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);
  
  // required int32 rank = 3;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 3;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protobuf.guild.Bet)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_rank();
  inline void clear_has_rank();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* id_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 rank_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_guild_2eproto();
  friend void protobuf_AssignDesc_guild_2eproto();
  friend void protobuf_ShutdownFile_guild_2eproto();
  
  void InitAsDefaultInstance();
  static Bet* default_instance_;
};
// -------------------------------------------------------------------

class Box : public ::google::protobuf::Message {
 public:
  Box();
  virtual ~Box();
  
  Box(const Box& from);
  
  inline Box& operator=(const Box& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Box& default_instance();
  
  void Swap(Box* other);
  
  // implements Message ----------------------------------------------
  
  Box* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Box& from);
  void MergeFrom(const Box& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protobuf.common.KVint3264 items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::protobuf::common::KVint3264& items(int index) const;
  inline ::protobuf::common::KVint3264* mutable_items(int index);
  inline ::protobuf::common::KVint3264* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 >*
      mutable_items();
  
  // required int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // required int32 rank = 3;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 3;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);
  
  // required int32 nextType = 4;
  inline bool has_nexttype() const;
  inline void clear_nexttype();
  static const int kNextTypeFieldNumber = 4;
  inline ::google::protobuf::int32 nexttype() const;
  inline void set_nexttype(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protobuf.guild.Box)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_nexttype();
  inline void clear_has_nexttype();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 > items_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 nexttype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_guild_2eproto();
  friend void protobuf_AssignDesc_guild_2eproto();
  friend void protobuf_ShutdownFile_guild_2eproto();
  
  void InitAsDefaultInstance();
  static Box* default_instance_;
};
// ===================================================================


// ===================================================================

// GuildEnterInfo

// optional .protobuf.guild.GuildBaseInfo info = 1;
inline bool GuildEnterInfo::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildEnterInfo::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildEnterInfo::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildEnterInfo::clear_info() {
  if (info_ != NULL) info_->::protobuf::guild::GuildBaseInfo::Clear();
  clear_has_info();
}
inline const ::protobuf::guild::GuildBaseInfo& GuildEnterInfo::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::protobuf::guild::GuildBaseInfo* GuildEnterInfo::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::protobuf::guild::GuildBaseInfo;
  return info_;
}
inline ::protobuf::guild::GuildBaseInfo* GuildEnterInfo::release_info() {
  clear_has_info();
  ::protobuf::guild::GuildBaseInfo* temp = info_;
  info_ = NULL;
  return temp;
}

// repeated .protobuf.guild.MillOtherInfo otherslist = 2;
inline int GuildEnterInfo::otherslist_size() const {
  return otherslist_.size();
}
inline void GuildEnterInfo::clear_otherslist() {
  otherslist_.Clear();
}
inline const ::protobuf::guild::MillOtherInfo& GuildEnterInfo::otherslist(int index) const {
  return otherslist_.Get(index);
}
inline ::protobuf::guild::MillOtherInfo* GuildEnterInfo::mutable_otherslist(int index) {
  return otherslist_.Mutable(index);
}
inline ::protobuf::guild::MillOtherInfo* GuildEnterInfo::add_otherslist() {
  return otherslist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::guild::MillOtherInfo >&
GuildEnterInfo::otherslist() const {
  return otherslist_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::guild::MillOtherInfo >*
GuildEnterInfo::mutable_otherslist() {
  return &otherslist_;
}

// required int32 robberyothercnt = 3;
inline bool GuildEnterInfo::has_robberyothercnt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildEnterInfo::set_has_robberyothercnt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildEnterInfo::clear_has_robberyothercnt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildEnterInfo::clear_robberyothercnt() {
  robberyothercnt_ = 0;
  clear_has_robberyothercnt();
}
inline ::google::protobuf::int32 GuildEnterInfo::robberyothercnt() const {
  return robberyothercnt_;
}
inline void GuildEnterInfo::set_robberyothercnt(::google::protobuf::int32 value) {
  set_has_robberyothercnt();
  robberyothercnt_ = value;
}

// required int64 lastrefreshtime = 4;
inline bool GuildEnterInfo::has_lastrefreshtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildEnterInfo::set_has_lastrefreshtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildEnterInfo::clear_has_lastrefreshtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildEnterInfo::clear_lastrefreshtime() {
  lastrefreshtime_ = GOOGLE_LONGLONG(0);
  clear_has_lastrefreshtime();
}
inline ::google::protobuf::int64 GuildEnterInfo::lastrefreshtime() const {
  return lastrefreshtime_;
}
inline void GuildEnterInfo::set_lastrefreshtime(::google::protobuf::int64 value) {
  set_has_lastrefreshtime();
  lastrefreshtime_ = value;
}

// optional int32 refreshattackcnt = 5;
inline bool GuildEnterInfo::has_refreshattackcnt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GuildEnterInfo::set_has_refreshattackcnt() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GuildEnterInfo::clear_has_refreshattackcnt() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GuildEnterInfo::clear_refreshattackcnt() {
  refreshattackcnt_ = 0;
  clear_has_refreshattackcnt();
}
inline ::google::protobuf::int32 GuildEnterInfo::refreshattackcnt() const {
  return refreshattackcnt_;
}
inline void GuildEnterInfo::set_refreshattackcnt(::google::protobuf::int32 value) {
  set_has_refreshattackcnt();
  refreshattackcnt_ = value;
}

// optional int64 refreshfreecnttime = 6;
inline bool GuildEnterInfo::has_refreshfreecnttime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GuildEnterInfo::set_has_refreshfreecnttime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GuildEnterInfo::clear_has_refreshfreecnttime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GuildEnterInfo::clear_refreshfreecnttime() {
  refreshfreecnttime_ = GOOGLE_LONGLONG(0);
  clear_has_refreshfreecnttime();
}
inline ::google::protobuf::int64 GuildEnterInfo::refreshfreecnttime() const {
  return refreshfreecnttime_;
}
inline void GuildEnterInfo::set_refreshfreecnttime(::google::protobuf::int64 value) {
  set_has_refreshfreecnttime();
  refreshfreecnttime_ = value;
}

// optional int32 bossid = 7;
inline bool GuildEnterInfo::has_bossid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GuildEnterInfo::set_has_bossid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GuildEnterInfo::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GuildEnterInfo::clear_bossid() {
  bossid_ = 0;
  clear_has_bossid();
}
inline ::google::protobuf::int32 GuildEnterInfo::bossid() const {
  return bossid_;
}
inline void GuildEnterInfo::set_bossid(::google::protobuf::int32 value) {
  set_has_bossid();
  bossid_ = value;
}

// optional int32 blood = 8;
inline bool GuildEnterInfo::has_blood() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GuildEnterInfo::set_has_blood() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GuildEnterInfo::clear_has_blood() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GuildEnterInfo::clear_blood() {
  blood_ = 0;
  clear_has_blood();
}
inline ::google::protobuf::int32 GuildEnterInfo::blood() const {
  return blood_;
}
inline void GuildEnterInfo::set_blood(::google::protobuf::int32 value) {
  set_has_blood();
  blood_ = value;
}

// optional int32 identity = 9;
inline bool GuildEnterInfo::has_identity() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GuildEnterInfo::set_has_identity() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GuildEnterInfo::clear_has_identity() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GuildEnterInfo::clear_identity() {
  identity_ = 0;
  clear_has_identity();
}
inline ::google::protobuf::int32 GuildEnterInfo::identity() const {
  return identity_;
}
inline void GuildEnterInfo::set_identity(::google::protobuf::int32 value) {
  set_has_identity();
  identity_ = value;
}

// optional int32 milllvl = 10;
inline bool GuildEnterInfo::has_milllvl() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GuildEnterInfo::set_has_milllvl() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GuildEnterInfo::clear_has_milllvl() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GuildEnterInfo::clear_milllvl() {
  milllvl_ = 0;
  clear_has_milllvl();
}
inline ::google::protobuf::int32 GuildEnterInfo::milllvl() const {
  return milllvl_;
}
inline void GuildEnterInfo::set_milllvl(::google::protobuf::int32 value) {
  set_has_milllvl();
  milllvl_ = value;
}

// optional int32 millexp = 11;
inline bool GuildEnterInfo::has_millexp() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GuildEnterInfo::set_has_millexp() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GuildEnterInfo::clear_has_millexp() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GuildEnterInfo::clear_millexp() {
  millexp_ = 0;
  clear_has_millexp();
}
inline ::google::protobuf::int32 GuildEnterInfo::millexp() const {
  return millexp_;
}
inline void GuildEnterInfo::set_millexp(::google::protobuf::int32 value) {
  set_has_millexp();
  millexp_ = value;
}

// optional bool isSet = 12;
inline bool GuildEnterInfo::has_isset() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GuildEnterInfo::set_has_isset() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GuildEnterInfo::clear_has_isset() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GuildEnterInfo::clear_isset() {
  isset_ = false;
  clear_has_isset();
}
inline bool GuildEnterInfo::isset() const {
  return isset_;
}
inline void GuildEnterInfo::set_isset(bool value) {
  set_has_isset();
  isset_ = value;
}

// optional bool isJoin = 13;
inline bool GuildEnterInfo::has_isjoin() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GuildEnterInfo::set_has_isjoin() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GuildEnterInfo::clear_has_isjoin() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GuildEnterInfo::clear_isjoin() {
  isjoin_ = false;
  clear_has_isjoin();
}
inline bool GuildEnterInfo::isjoin() const {
  return isjoin_;
}
inline void GuildEnterInfo::set_isjoin(bool value) {
  set_has_isjoin();
  isjoin_ = value;
}

// optional int32 state = 14;
inline bool GuildEnterInfo::has_state() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void GuildEnterInfo::set_has_state() {
  _has_bits_[0] |= 0x00002000u;
}
inline void GuildEnterInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void GuildEnterInfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 GuildEnterInfo::state() const {
  return state_;
}
inline void GuildEnterInfo::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional int32 battleTime = 15;
inline bool GuildEnterInfo::has_battletime() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void GuildEnterInfo::set_has_battletime() {
  _has_bits_[0] |= 0x00004000u;
}
inline void GuildEnterInfo::clear_has_battletime() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void GuildEnterInfo::clear_battletime() {
  battletime_ = 0;
  clear_has_battletime();
}
inline ::google::protobuf::int32 GuildEnterInfo::battletime() const {
  return battletime_;
}
inline void GuildEnterInfo::set_battletime(::google::protobuf::int32 value) {
  set_has_battletime();
  battletime_ = value;
}

// optional int32 battleBox = 16;
inline bool GuildEnterInfo::has_battlebox() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void GuildEnterInfo::set_has_battlebox() {
  _has_bits_[0] |= 0x00008000u;
}
inline void GuildEnterInfo::clear_has_battlebox() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void GuildEnterInfo::clear_battlebox() {
  battlebox_ = 0;
  clear_has_battlebox();
}
inline ::google::protobuf::int32 GuildEnterInfo::battlebox() const {
  return battlebox_;
}
inline void GuildEnterInfo::set_battlebox(::google::protobuf::int32 value) {
  set_has_battlebox();
  battlebox_ = value;
}

// optional .protobuf.common.LineupTemplate lineup = 17;
inline bool GuildEnterInfo::has_lineup() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void GuildEnterInfo::set_has_lineup() {
  _has_bits_[0] |= 0x00010000u;
}
inline void GuildEnterInfo::clear_has_lineup() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void GuildEnterInfo::clear_lineup() {
  if (lineup_ != NULL) lineup_->::protobuf::common::LineupTemplate::Clear();
  clear_has_lineup();
}
inline const ::protobuf::common::LineupTemplate& GuildEnterInfo::lineup() const {
  return lineup_ != NULL ? *lineup_ : *default_instance_->lineup_;
}
inline ::protobuf::common::LineupTemplate* GuildEnterInfo::mutable_lineup() {
  set_has_lineup();
  if (lineup_ == NULL) lineup_ = new ::protobuf::common::LineupTemplate;
  return lineup_;
}
inline ::protobuf::common::LineupTemplate* GuildEnterInfo::release_lineup() {
  clear_has_lineup();
  ::protobuf::common::LineupTemplate* temp = lineup_;
  lineup_ = NULL;
  return temp;
}

// optional bool isEntryFinal = 18;
inline bool GuildEnterInfo::has_isentryfinal() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void GuildEnterInfo::set_has_isentryfinal() {
  _has_bits_[0] |= 0x00020000u;
}
inline void GuildEnterInfo::clear_has_isentryfinal() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void GuildEnterInfo::clear_isentryfinal() {
  isentryfinal_ = false;
  clear_has_isentryfinal();
}
inline bool GuildEnterInfo::isentryfinal() const {
  return isentryfinal_;
}
inline void GuildEnterInfo::set_isentryfinal(bool value) {
  set_has_isentryfinal();
  isentryfinal_ = value;
}

// -------------------------------------------------------------------

// GuildPlayer

// required string playerid = 1;
inline bool GuildPlayer::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildPlayer::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildPlayer::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildPlayer::clear_playerid() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    playerid_->clear();
  }
  clear_has_playerid();
}
inline const ::std::string& GuildPlayer::playerid() const {
  return *playerid_;
}
inline void GuildPlayer::set_playerid(const ::std::string& value) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(value);
}
inline void GuildPlayer::set_playerid(const char* value) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(value);
}
inline void GuildPlayer::set_playerid(const char* value, size_t size) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildPlayer::mutable_playerid() {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  return playerid_;
}
inline ::std::string* GuildPlayer::release_playerid() {
  clear_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playerid_;
    playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string playericon = 2;
inline bool GuildPlayer::has_playericon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildPlayer::set_has_playericon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildPlayer::clear_has_playericon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildPlayer::clear_playericon() {
  if (playericon_ != &::google::protobuf::internal::kEmptyString) {
    playericon_->clear();
  }
  clear_has_playericon();
}
inline const ::std::string& GuildPlayer::playericon() const {
  return *playericon_;
}
inline void GuildPlayer::set_playericon(const ::std::string& value) {
  set_has_playericon();
  if (playericon_ == &::google::protobuf::internal::kEmptyString) {
    playericon_ = new ::std::string;
  }
  playericon_->assign(value);
}
inline void GuildPlayer::set_playericon(const char* value) {
  set_has_playericon();
  if (playericon_ == &::google::protobuf::internal::kEmptyString) {
    playericon_ = new ::std::string;
  }
  playericon_->assign(value);
}
inline void GuildPlayer::set_playericon(const char* value, size_t size) {
  set_has_playericon();
  if (playericon_ == &::google::protobuf::internal::kEmptyString) {
    playericon_ = new ::std::string;
  }
  playericon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildPlayer::mutable_playericon() {
  set_has_playericon();
  if (playericon_ == &::google::protobuf::internal::kEmptyString) {
    playericon_ = new ::std::string;
  }
  return playericon_;
}
inline ::std::string* GuildPlayer::release_playericon() {
  clear_has_playericon();
  if (playericon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playericon_;
    playericon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string playername = 3;
inline bool GuildPlayer::has_playername() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildPlayer::set_has_playername() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildPlayer::clear_has_playername() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildPlayer::clear_playername() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    playername_->clear();
  }
  clear_has_playername();
}
inline const ::std::string& GuildPlayer::playername() const {
  return *playername_;
}
inline void GuildPlayer::set_playername(const ::std::string& value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void GuildPlayer::set_playername(const char* value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void GuildPlayer::set_playername(const char* value, size_t size) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildPlayer::mutable_playername() {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  return playername_;
}
inline ::std::string* GuildPlayer::release_playername() {
  clear_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playername_;
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 power = 4;
inline bool GuildPlayer::has_power() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildPlayer::set_has_power() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildPlayer::clear_has_power() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildPlayer::clear_power() {
  power_ = 0;
  clear_has_power();
}
inline ::google::protobuf::int32 GuildPlayer::power() const {
  return power_;
}
inline void GuildPlayer::set_power(::google::protobuf::int32 value) {
  set_has_power();
  power_ = value;
}

// optional int32 identity = 5;
inline bool GuildPlayer::has_identity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GuildPlayer::set_has_identity() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GuildPlayer::clear_has_identity() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GuildPlayer::clear_identity() {
  identity_ = 0;
  clear_has_identity();
}
inline ::google::protobuf::int32 GuildPlayer::identity() const {
  return identity_;
}
inline void GuildPlayer::set_identity(::google::protobuf::int32 value) {
  set_has_identity();
  identity_ = value;
}

// optional int64 entertime = 6;
inline bool GuildPlayer::has_entertime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GuildPlayer::set_has_entertime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GuildPlayer::clear_has_entertime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GuildPlayer::clear_entertime() {
  entertime_ = GOOGLE_LONGLONG(0);
  clear_has_entertime();
}
inline ::google::protobuf::int64 GuildPlayer::entertime() const {
  return entertime_;
}
inline void GuildPlayer::set_entertime(::google::protobuf::int64 value) {
  set_has_entertime();
  entertime_ = value;
}

// optional int64 lastlogintime = 7;
inline bool GuildPlayer::has_lastlogintime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GuildPlayer::set_has_lastlogintime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GuildPlayer::clear_has_lastlogintime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GuildPlayer::clear_lastlogintime() {
  lastlogintime_ = GOOGLE_LONGLONG(0);
  clear_has_lastlogintime();
}
inline ::google::protobuf::int64 GuildPlayer::lastlogintime() const {
  return lastlogintime_;
}
inline void GuildPlayer::set_lastlogintime(::google::protobuf::int64 value) {
  set_has_lastlogintime();
  lastlogintime_ = value;
}

// optional int32 playerlvl = 8;
inline bool GuildPlayer::has_playerlvl() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GuildPlayer::set_has_playerlvl() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GuildPlayer::clear_has_playerlvl() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GuildPlayer::clear_playerlvl() {
  playerlvl_ = 0;
  clear_has_playerlvl();
}
inline ::google::protobuf::int32 GuildPlayer::playerlvl() const {
  return playerlvl_;
}
inline void GuildPlayer::set_playerlvl(::google::protobuf::int32 value) {
  set_has_playerlvl();
  playerlvl_ = value;
}

// optional int32 headFrame = 9;
inline bool GuildPlayer::has_headframe() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GuildPlayer::set_has_headframe() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GuildPlayer::clear_has_headframe() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GuildPlayer::clear_headframe() {
  headframe_ = 0;
  clear_has_headframe();
}
inline ::google::protobuf::int32 GuildPlayer::headframe() const {
  return headframe_;
}
inline void GuildPlayer::set_headframe(::google::protobuf::int32 value) {
  set_has_headframe();
  headframe_ = value;
}

// optional int32 exp = 10;
inline bool GuildPlayer::has_exp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GuildPlayer::set_has_exp() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GuildPlayer::clear_has_exp() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GuildPlayer::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 GuildPlayer::exp() const {
  return exp_;
}
inline void GuildPlayer::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// optional int32 serverId = 11;
inline bool GuildPlayer::has_serverid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GuildPlayer::set_has_serverid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GuildPlayer::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GuildPlayer::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
inline ::google::protobuf::int32 GuildPlayer::serverid() const {
  return serverid_;
}
inline void GuildPlayer::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
}

// optional int32 sex = 12;
inline bool GuildPlayer::has_sex() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GuildPlayer::set_has_sex() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GuildPlayer::clear_has_sex() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GuildPlayer::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 GuildPlayer::sex() const {
  return sex_;
}
inline void GuildPlayer::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// -------------------------------------------------------------------

// GuildRecordInfo

// repeated .protobuf.guild.GuildRecord recordInfo = 1;
inline int GuildRecordInfo::recordinfo_size() const {
  return recordinfo_.size();
}
inline void GuildRecordInfo::clear_recordinfo() {
  recordinfo_.Clear();
}
inline const ::protobuf::guild::GuildRecord& GuildRecordInfo::recordinfo(int index) const {
  return recordinfo_.Get(index);
}
inline ::protobuf::guild::GuildRecord* GuildRecordInfo::mutable_recordinfo(int index) {
  return recordinfo_.Mutable(index);
}
inline ::protobuf::guild::GuildRecord* GuildRecordInfo::add_recordinfo() {
  return recordinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::guild::GuildRecord >&
GuildRecordInfo::recordinfo() const {
  return recordinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::guild::GuildRecord >*
GuildRecordInfo::mutable_recordinfo() {
  return &recordinfo_;
}

// -------------------------------------------------------------------

// GuildRecord

// required int64 time = 1;
inline bool GuildRecord::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildRecord::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildRecord::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildRecord::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 GuildRecord::time() const {
  return time_;
}
inline void GuildRecord::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// optional .protobuf.guild.RecordType recordType = 2;
inline bool GuildRecord::has_recordtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildRecord::set_has_recordtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildRecord::clear_has_recordtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildRecord::clear_recordtype() {
  recordtype_ = 0;
  clear_has_recordtype();
}
inline protobuf::guild::RecordType GuildRecord::recordtype() const {
  return static_cast< protobuf::guild::RecordType >(recordtype_);
}
inline void GuildRecord::set_recordtype(protobuf::guild::RecordType value) {
  GOOGLE_DCHECK(protobuf::guild::RecordType_IsValid(value));
  set_has_recordtype();
  recordtype_ = value;
}

// optional string runName = 3;
inline bool GuildRecord::has_runname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildRecord::set_has_runname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildRecord::clear_has_runname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildRecord::clear_runname() {
  if (runname_ != &::google::protobuf::internal::kEmptyString) {
    runname_->clear();
  }
  clear_has_runname();
}
inline const ::std::string& GuildRecord::runname() const {
  return *runname_;
}
inline void GuildRecord::set_runname(const ::std::string& value) {
  set_has_runname();
  if (runname_ == &::google::protobuf::internal::kEmptyString) {
    runname_ = new ::std::string;
  }
  runname_->assign(value);
}
inline void GuildRecord::set_runname(const char* value) {
  set_has_runname();
  if (runname_ == &::google::protobuf::internal::kEmptyString) {
    runname_ = new ::std::string;
  }
  runname_->assign(value);
}
inline void GuildRecord::set_runname(const char* value, size_t size) {
  set_has_runname();
  if (runname_ == &::google::protobuf::internal::kEmptyString) {
    runname_ = new ::std::string;
  }
  runname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildRecord::mutable_runname() {
  set_has_runname();
  if (runname_ == &::google::protobuf::internal::kEmptyString) {
    runname_ = new ::std::string;
  }
  return runname_;
}
inline ::std::string* GuildRecord::release_runname() {
  clear_has_runname();
  if (runname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = runname_;
    runname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string byName = 4;
inline bool GuildRecord::has_byname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildRecord::set_has_byname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildRecord::clear_has_byname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildRecord::clear_byname() {
  if (byname_ != &::google::protobuf::internal::kEmptyString) {
    byname_->clear();
  }
  clear_has_byname();
}
inline const ::std::string& GuildRecord::byname() const {
  return *byname_;
}
inline void GuildRecord::set_byname(const ::std::string& value) {
  set_has_byname();
  if (byname_ == &::google::protobuf::internal::kEmptyString) {
    byname_ = new ::std::string;
  }
  byname_->assign(value);
}
inline void GuildRecord::set_byname(const char* value) {
  set_has_byname();
  if (byname_ == &::google::protobuf::internal::kEmptyString) {
    byname_ = new ::std::string;
  }
  byname_->assign(value);
}
inline void GuildRecord::set_byname(const char* value, size_t size) {
  set_has_byname();
  if (byname_ == &::google::protobuf::internal::kEmptyString) {
    byname_ = new ::std::string;
  }
  byname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildRecord::mutable_byname() {
  set_has_byname();
  if (byname_ == &::google::protobuf::internal::kEmptyString) {
    byname_ = new ::std::string;
  }
  return byname_;
}
inline ::std::string* GuildRecord::release_byname() {
  clear_has_byname();
  if (byname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = byname_;
    byname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// GuildBossDamage

// optional int32 bossId = 1;
inline bool GuildBossDamage::has_bossid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildBossDamage::set_has_bossid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildBossDamage::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildBossDamage::clear_bossid() {
  bossid_ = 0;
  clear_has_bossid();
}
inline ::google::protobuf::int32 GuildBossDamage::bossid() const {
  return bossid_;
}
inline void GuildBossDamage::set_bossid(::google::protobuf::int32 value) {
  set_has_bossid();
  bossid_ = value;
}

// repeated .protobuf.guild.PlayerDamage bossDamage = 2;
inline int GuildBossDamage::bossdamage_size() const {
  return bossdamage_.size();
}
inline void GuildBossDamage::clear_bossdamage() {
  bossdamage_.Clear();
}
inline const ::protobuf::guild::PlayerDamage& GuildBossDamage::bossdamage(int index) const {
  return bossdamage_.Get(index);
}
inline ::protobuf::guild::PlayerDamage* GuildBossDamage::mutable_bossdamage(int index) {
  return bossdamage_.Mutable(index);
}
inline ::protobuf::guild::PlayerDamage* GuildBossDamage::add_bossdamage() {
  return bossdamage_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::guild::PlayerDamage >&
GuildBossDamage::bossdamage() const {
  return bossdamage_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::guild::PlayerDamage >*
GuildBossDamage::mutable_bossdamage() {
  return &bossdamage_;
}

// -------------------------------------------------------------------

// PlayerDamage

// optional string name = 1;
inline bool PlayerDamage::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerDamage::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerDamage::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerDamage::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PlayerDamage::name() const {
  return *name_;
}
inline void PlayerDamage::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PlayerDamage::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PlayerDamage::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerDamage::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PlayerDamage::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string icon = 2;
inline bool PlayerDamage::has_icon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerDamage::set_has_icon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerDamage::clear_has_icon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerDamage::clear_icon() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    icon_->clear();
  }
  clear_has_icon();
}
inline const ::std::string& PlayerDamage::icon() const {
  return *icon_;
}
inline void PlayerDamage::set_icon(const ::std::string& value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void PlayerDamage::set_icon(const char* value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void PlayerDamage::set_icon(const char* value, size_t size) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerDamage::mutable_icon() {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  return icon_;
}
inline ::std::string* PlayerDamage::release_icon() {
  clear_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = icon_;
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string playerId = 3;
inline bool PlayerDamage::has_playerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerDamage::set_has_playerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerDamage::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerDamage::clear_playerid() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    playerid_->clear();
  }
  clear_has_playerid();
}
inline const ::std::string& PlayerDamage::playerid() const {
  return *playerid_;
}
inline void PlayerDamage::set_playerid(const ::std::string& value) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(value);
}
inline void PlayerDamage::set_playerid(const char* value) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(value);
}
inline void PlayerDamage::set_playerid(const char* value, size_t size) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerDamage::mutable_playerid() {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  return playerid_;
}
inline ::std::string* PlayerDamage::release_playerid() {
  clear_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playerid_;
    playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 lv = 4;
inline bool PlayerDamage::has_lv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerDamage::set_has_lv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerDamage::clear_has_lv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerDamage::clear_lv() {
  lv_ = 0;
  clear_has_lv();
}
inline ::google::protobuf::int32 PlayerDamage::lv() const {
  return lv_;
}
inline void PlayerDamage::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
}

// optional int32 attackCnt = 5;
inline bool PlayerDamage::has_attackcnt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerDamage::set_has_attackcnt() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerDamage::clear_has_attackcnt() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerDamage::clear_attackcnt() {
  attackcnt_ = 0;
  clear_has_attackcnt();
}
inline ::google::protobuf::int32 PlayerDamage::attackcnt() const {
  return attackcnt_;
}
inline void PlayerDamage::set_attackcnt(::google::protobuf::int32 value) {
  set_has_attackcnt();
  attackcnt_ = value;
}

// optional int64 totalDamage = 6;
inline bool PlayerDamage::has_totaldamage() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayerDamage::set_has_totaldamage() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlayerDamage::clear_has_totaldamage() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlayerDamage::clear_totaldamage() {
  totaldamage_ = GOOGLE_LONGLONG(0);
  clear_has_totaldamage();
}
inline ::google::protobuf::int64 PlayerDamage::totaldamage() const {
  return totaldamage_;
}
inline void PlayerDamage::set_totaldamage(::google::protobuf::int64 value) {
  set_has_totaldamage();
  totaldamage_ = value;
}

// -------------------------------------------------------------------

// GuildApplyInfo

// repeated .protobuf.guild.GuildPlayer playerInfo = 1;
inline int GuildApplyInfo::playerinfo_size() const {
  return playerinfo_.size();
}
inline void GuildApplyInfo::clear_playerinfo() {
  playerinfo_.Clear();
}
inline const ::protobuf::guild::GuildPlayer& GuildApplyInfo::playerinfo(int index) const {
  return playerinfo_.Get(index);
}
inline ::protobuf::guild::GuildPlayer* GuildApplyInfo::mutable_playerinfo(int index) {
  return playerinfo_.Mutable(index);
}
inline ::protobuf::guild::GuildPlayer* GuildApplyInfo::add_playerinfo() {
  return playerinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::guild::GuildPlayer >&
GuildApplyInfo::playerinfo() const {
  return playerinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::guild::GuildPlayer >*
GuildApplyInfo::mutable_playerinfo() {
  return &playerinfo_;
}

// -------------------------------------------------------------------

// GuildBaseInfo

// optional int32 guildid = 1;
inline bool GuildBaseInfo::has_guildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildBaseInfo::set_has_guildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildBaseInfo::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildBaseInfo::clear_guildid() {
  guildid_ = 0;
  clear_has_guildid();
}
inline ::google::protobuf::int32 GuildBaseInfo::guildid() const {
  return guildid_;
}
inline void GuildBaseInfo::set_guildid(::google::protobuf::int32 value) {
  set_has_guildid();
  guildid_ = value;
}

// optional string guildname = 2;
inline bool GuildBaseInfo::has_guildname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildBaseInfo::set_has_guildname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildBaseInfo::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildBaseInfo::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    guildname_->clear();
  }
  clear_has_guildname();
}
inline const ::std::string& GuildBaseInfo::guildname() const {
  return *guildname_;
}
inline void GuildBaseInfo::set_guildname(const ::std::string& value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void GuildBaseInfo::set_guildname(const char* value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void GuildBaseInfo::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildBaseInfo::mutable_guildname() {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  return guildname_;
}
inline ::std::string* GuildBaseInfo::release_guildname() {
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string guildicon = 3;
inline bool GuildBaseInfo::has_guildicon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildBaseInfo::set_has_guildicon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildBaseInfo::clear_has_guildicon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildBaseInfo::clear_guildicon() {
  if (guildicon_ != &::google::protobuf::internal::kEmptyString) {
    guildicon_->clear();
  }
  clear_has_guildicon();
}
inline const ::std::string& GuildBaseInfo::guildicon() const {
  return *guildicon_;
}
inline void GuildBaseInfo::set_guildicon(const ::std::string& value) {
  set_has_guildicon();
  if (guildicon_ == &::google::protobuf::internal::kEmptyString) {
    guildicon_ = new ::std::string;
  }
  guildicon_->assign(value);
}
inline void GuildBaseInfo::set_guildicon(const char* value) {
  set_has_guildicon();
  if (guildicon_ == &::google::protobuf::internal::kEmptyString) {
    guildicon_ = new ::std::string;
  }
  guildicon_->assign(value);
}
inline void GuildBaseInfo::set_guildicon(const char* value, size_t size) {
  set_has_guildicon();
  if (guildicon_ == &::google::protobuf::internal::kEmptyString) {
    guildicon_ = new ::std::string;
  }
  guildicon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildBaseInfo::mutable_guildicon() {
  set_has_guildicon();
  if (guildicon_ == &::google::protobuf::internal::kEmptyString) {
    guildicon_ = new ::std::string;
  }
  return guildicon_;
}
inline ::std::string* GuildBaseInfo::release_guildicon() {
  clear_has_guildicon();
  if (guildicon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildicon_;
    guildicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string notice = 4;
inline bool GuildBaseInfo::has_notice() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildBaseInfo::set_has_notice() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildBaseInfo::clear_has_notice() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildBaseInfo::clear_notice() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    notice_->clear();
  }
  clear_has_notice();
}
inline const ::std::string& GuildBaseInfo::notice() const {
  return *notice_;
}
inline void GuildBaseInfo::set_notice(const ::std::string& value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void GuildBaseInfo::set_notice(const char* value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void GuildBaseInfo::set_notice(const char* value, size_t size) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildBaseInfo::mutable_notice() {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  return notice_;
}
inline ::std::string* GuildBaseInfo::release_notice() {
  clear_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = notice_;
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 limitGrade = 5;
inline bool GuildBaseInfo::has_limitgrade() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GuildBaseInfo::set_has_limitgrade() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GuildBaseInfo::clear_has_limitgrade() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GuildBaseInfo::clear_limitgrade() {
  limitgrade_ = 0;
  clear_has_limitgrade();
}
inline ::google::protobuf::int32 GuildBaseInfo::limitgrade() const {
  return limitgrade_;
}
inline void GuildBaseInfo::set_limitgrade(::google::protobuf::int32 value) {
  set_has_limitgrade();
  limitgrade_ = value;
}

// optional bool needapproval = 6;
inline bool GuildBaseInfo::has_needapproval() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GuildBaseInfo::set_has_needapproval() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GuildBaseInfo::clear_has_needapproval() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GuildBaseInfo::clear_needapproval() {
  needapproval_ = false;
  clear_has_needapproval();
}
inline bool GuildBaseInfo::needapproval() const {
  return needapproval_;
}
inline void GuildBaseInfo::set_needapproval(bool value) {
  set_has_needapproval();
  needapproval_ = value;
}

// optional int32 lvl = 7;
inline bool GuildBaseInfo::has_lvl() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GuildBaseInfo::set_has_lvl() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GuildBaseInfo::clear_has_lvl() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GuildBaseInfo::clear_lvl() {
  lvl_ = 0;
  clear_has_lvl();
}
inline ::google::protobuf::int32 GuildBaseInfo::lvl() const {
  return lvl_;
}
inline void GuildBaseInfo::set_lvl(::google::protobuf::int32 value) {
  set_has_lvl();
  lvl_ = value;
}

// optional int32 exp = 8;
inline bool GuildBaseInfo::has_exp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GuildBaseInfo::set_has_exp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GuildBaseInfo::clear_has_exp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GuildBaseInfo::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 GuildBaseInfo::exp() const {
  return exp_;
}
inline void GuildBaseInfo::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// optional int32 playercnt = 9;
inline bool GuildBaseInfo::has_playercnt() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GuildBaseInfo::set_has_playercnt() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GuildBaseInfo::clear_has_playercnt() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GuildBaseInfo::clear_playercnt() {
  playercnt_ = 0;
  clear_has_playercnt();
}
inline ::google::protobuf::int32 GuildBaseInfo::playercnt() const {
  return playercnt_;
}
inline void GuildBaseInfo::set_playercnt(::google::protobuf::int32 value) {
  set_has_playercnt();
  playercnt_ = value;
}

// optional int32 rank = 10;
inline bool GuildBaseInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GuildBaseInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GuildBaseInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GuildBaseInfo::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 GuildBaseInfo::rank() const {
  return rank_;
}
inline void GuildBaseInfo::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional int32 finalRank = 11;
inline bool GuildBaseInfo::has_finalrank() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GuildBaseInfo::set_has_finalrank() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GuildBaseInfo::clear_has_finalrank() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GuildBaseInfo::clear_finalrank() {
  finalrank_ = 0;
  clear_has_finalrank();
}
inline ::google::protobuf::int32 GuildBaseInfo::finalrank() const {
  return finalrank_;
}
inline void GuildBaseInfo::set_finalrank(::google::protobuf::int32 value) {
  set_has_finalrank();
  finalrank_ = value;
}

// optional int32 index = 12;
inline bool GuildBaseInfo::has_index() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GuildBaseInfo::set_has_index() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GuildBaseInfo::clear_has_index() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GuildBaseInfo::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 GuildBaseInfo::index() const {
  return index_;
}
inline void GuildBaseInfo::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional string serverName = 13;
inline bool GuildBaseInfo::has_servername() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GuildBaseInfo::set_has_servername() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GuildBaseInfo::clear_has_servername() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GuildBaseInfo::clear_servername() {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    servername_->clear();
  }
  clear_has_servername();
}
inline const ::std::string& GuildBaseInfo::servername() const {
  return *servername_;
}
inline void GuildBaseInfo::set_servername(const ::std::string& value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
}
inline void GuildBaseInfo::set_servername(const char* value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
}
inline void GuildBaseInfo::set_servername(const char* value, size_t size) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildBaseInfo::mutable_servername() {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  return servername_;
}
inline ::std::string* GuildBaseInfo::release_servername() {
  clear_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = servername_;
    servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string id = 14;
inline bool GuildBaseInfo::has_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void GuildBaseInfo::set_has_id() {
  _has_bits_[0] |= 0x00002000u;
}
inline void GuildBaseInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void GuildBaseInfo::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& GuildBaseInfo::id() const {
  return *id_;
}
inline void GuildBaseInfo::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void GuildBaseInfo::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void GuildBaseInfo::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildBaseInfo::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* GuildBaseInfo::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 yesterdayExp = 15;
inline bool GuildBaseInfo::has_yesterdayexp() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void GuildBaseInfo::set_has_yesterdayexp() {
  _has_bits_[0] |= 0x00004000u;
}
inline void GuildBaseInfo::clear_has_yesterdayexp() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void GuildBaseInfo::clear_yesterdayexp() {
  yesterdayexp_ = 0;
  clear_has_yesterdayexp();
}
inline ::google::protobuf::int32 GuildBaseInfo::yesterdayexp() const {
  return yesterdayexp_;
}
inline void GuildBaseInfo::set_yesterdayexp(::google::protobuf::int32 value) {
  set_has_yesterdayexp();
  yesterdayexp_ = value;
}

// optional string language = 16;
inline bool GuildBaseInfo::has_language() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void GuildBaseInfo::set_has_language() {
  _has_bits_[0] |= 0x00008000u;
}
inline void GuildBaseInfo::clear_has_language() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void GuildBaseInfo::clear_language() {
  if (language_ != &::google::protobuf::internal::kEmptyString) {
    language_->clear();
  }
  clear_has_language();
}
inline const ::std::string& GuildBaseInfo::language() const {
  return *language_;
}
inline void GuildBaseInfo::set_language(const ::std::string& value) {
  set_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    language_ = new ::std::string;
  }
  language_->assign(value);
}
inline void GuildBaseInfo::set_language(const char* value) {
  set_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    language_ = new ::std::string;
  }
  language_->assign(value);
}
inline void GuildBaseInfo::set_language(const char* value, size_t size) {
  set_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    language_ = new ::std::string;
  }
  language_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildBaseInfo::mutable_language() {
  set_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    language_ = new ::std::string;
  }
  return language_;
}
inline ::std::string* GuildBaseInfo::release_language() {
  clear_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = language_;
    language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string joinNotice = 17;
inline bool GuildBaseInfo::has_joinnotice() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void GuildBaseInfo::set_has_joinnotice() {
  _has_bits_[0] |= 0x00010000u;
}
inline void GuildBaseInfo::clear_has_joinnotice() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void GuildBaseInfo::clear_joinnotice() {
  if (joinnotice_ != &::google::protobuf::internal::kEmptyString) {
    joinnotice_->clear();
  }
  clear_has_joinnotice();
}
inline const ::std::string& GuildBaseInfo::joinnotice() const {
  return *joinnotice_;
}
inline void GuildBaseInfo::set_joinnotice(const ::std::string& value) {
  set_has_joinnotice();
  if (joinnotice_ == &::google::protobuf::internal::kEmptyString) {
    joinnotice_ = new ::std::string;
  }
  joinnotice_->assign(value);
}
inline void GuildBaseInfo::set_joinnotice(const char* value) {
  set_has_joinnotice();
  if (joinnotice_ == &::google::protobuf::internal::kEmptyString) {
    joinnotice_ = new ::std::string;
  }
  joinnotice_->assign(value);
}
inline void GuildBaseInfo::set_joinnotice(const char* value, size_t size) {
  set_has_joinnotice();
  if (joinnotice_ == &::google::protobuf::internal::kEmptyString) {
    joinnotice_ = new ::std::string;
  }
  joinnotice_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildBaseInfo::mutable_joinnotice() {
  set_has_joinnotice();
  if (joinnotice_ == &::google::protobuf::internal::kEmptyString) {
    joinnotice_ = new ::std::string;
  }
  return joinnotice_;
}
inline ::std::string* GuildBaseInfo::release_joinnotice() {
  clear_has_joinnotice();
  if (joinnotice_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = joinnotice_;
    joinnotice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 residueExp = 18;
inline bool GuildBaseInfo::has_residueexp() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void GuildBaseInfo::set_has_residueexp() {
  _has_bits_[0] |= 0x00020000u;
}
inline void GuildBaseInfo::clear_has_residueexp() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void GuildBaseInfo::clear_residueexp() {
  residueexp_ = 0;
  clear_has_residueexp();
}
inline ::google::protobuf::int32 GuildBaseInfo::residueexp() const {
  return residueexp_;
}
inline void GuildBaseInfo::set_residueexp(::google::protobuf::int32 value) {
  set_has_residueexp();
  residueexp_ = value;
}

// -------------------------------------------------------------------

// GuildPlayers

// optional .protobuf.guild.GuildBaseInfo baseinfo = 1;
inline bool GuildPlayers::has_baseinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildPlayers::set_has_baseinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildPlayers::clear_has_baseinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildPlayers::clear_baseinfo() {
  if (baseinfo_ != NULL) baseinfo_->::protobuf::guild::GuildBaseInfo::Clear();
  clear_has_baseinfo();
}
inline const ::protobuf::guild::GuildBaseInfo& GuildPlayers::baseinfo() const {
  return baseinfo_ != NULL ? *baseinfo_ : *default_instance_->baseinfo_;
}
inline ::protobuf::guild::GuildBaseInfo* GuildPlayers::mutable_baseinfo() {
  set_has_baseinfo();
  if (baseinfo_ == NULL) baseinfo_ = new ::protobuf::guild::GuildBaseInfo;
  return baseinfo_;
}
inline ::protobuf::guild::GuildBaseInfo* GuildPlayers::release_baseinfo() {
  clear_has_baseinfo();
  ::protobuf::guild::GuildBaseInfo* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}

// repeated .protobuf.guild.GuildPlayer players = 5;
inline int GuildPlayers::players_size() const {
  return players_.size();
}
inline void GuildPlayers::clear_players() {
  players_.Clear();
}
inline const ::protobuf::guild::GuildPlayer& GuildPlayers::players(int index) const {
  return players_.Get(index);
}
inline ::protobuf::guild::GuildPlayer* GuildPlayers::mutable_players(int index) {
  return players_.Mutable(index);
}
inline ::protobuf::guild::GuildPlayer* GuildPlayers::add_players() {
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::guild::GuildPlayer >&
GuildPlayers::players() const {
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::guild::GuildPlayer >*
GuildPlayers::mutable_players() {
  return &players_;
}

// -------------------------------------------------------------------

// GuildListInfo

// optional int32 myrank = 2;
inline bool GuildListInfo::has_myrank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildListInfo::set_has_myrank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildListInfo::clear_has_myrank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildListInfo::clear_myrank() {
  myrank_ = 0;
  clear_has_myrank();
}
inline ::google::protobuf::int32 GuildListInfo::myrank() const {
  return myrank_;
}
inline void GuildListInfo::set_myrank(::google::protobuf::int32 value) {
  set_has_myrank();
  myrank_ = value;
}

// repeated .protobuf.guild.GuildBaseInfo infos = 1;
inline int GuildListInfo::infos_size() const {
  return infos_.size();
}
inline void GuildListInfo::clear_infos() {
  infos_.Clear();
}
inline const ::protobuf::guild::GuildBaseInfo& GuildListInfo::infos(int index) const {
  return infos_.Get(index);
}
inline ::protobuf::guild::GuildBaseInfo* GuildListInfo::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::protobuf::guild::GuildBaseInfo* GuildListInfo::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::guild::GuildBaseInfo >&
GuildListInfo::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::guild::GuildBaseInfo >*
GuildListInfo::mutable_infos() {
  return &infos_;
}

// -------------------------------------------------------------------

// GuildDyInfo

// required int32 curexp = 1;
inline bool GuildDyInfo::has_curexp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildDyInfo::set_has_curexp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildDyInfo::clear_has_curexp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildDyInfo::clear_curexp() {
  curexp_ = 0;
  clear_has_curexp();
}
inline ::google::protobuf::int32 GuildDyInfo::curexp() const {
  return curexp_;
}
inline void GuildDyInfo::set_curexp(::google::protobuf::int32 value) {
  set_has_curexp();
  curexp_ = value;
}

// required int32 curlvl = 2;
inline bool GuildDyInfo::has_curlvl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildDyInfo::set_has_curlvl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildDyInfo::clear_has_curlvl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildDyInfo::clear_curlvl() {
  curlvl_ = 0;
  clear_has_curlvl();
}
inline ::google::protobuf::int32 GuildDyInfo::curlvl() const {
  return curlvl_;
}
inline void GuildDyInfo::set_curlvl(::google::protobuf::int32 value) {
  set_has_curlvl();
  curlvl_ = value;
}

// repeated .protobuf.common.KVint3232 items = 3;
inline int GuildDyInfo::items_size() const {
  return items_.size();
}
inline void GuildDyInfo::clear_items() {
  items_.Clear();
}
inline const ::protobuf::common::KVint3232& GuildDyInfo::items(int index) const {
  return items_.Get(index);
}
inline ::protobuf::common::KVint3232* GuildDyInfo::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::protobuf::common::KVint3232* GuildDyInfo::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >&
GuildDyInfo::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >*
GuildDyInfo::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// BossDamage

// required string playerid = 1;
inline bool BossDamage::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BossDamage::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BossDamage::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BossDamage::clear_playerid() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    playerid_->clear();
  }
  clear_has_playerid();
}
inline const ::std::string& BossDamage::playerid() const {
  return *playerid_;
}
inline void BossDamage::set_playerid(const ::std::string& value) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(value);
}
inline void BossDamage::set_playerid(const char* value) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(value);
}
inline void BossDamage::set_playerid(const char* value, size_t size) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BossDamage::mutable_playerid() {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  return playerid_;
}
inline ::std::string* BossDamage::release_playerid() {
  clear_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playerid_;
    playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 attackcnt = 2;
inline bool BossDamage::has_attackcnt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BossDamage::set_has_attackcnt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BossDamage::clear_has_attackcnt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BossDamage::clear_attackcnt() {
  attackcnt_ = 0;
  clear_has_attackcnt();
}
inline ::google::protobuf::int32 BossDamage::attackcnt() const {
  return attackcnt_;
}
inline void BossDamage::set_attackcnt(::google::protobuf::int32 value) {
  set_has_attackcnt();
  attackcnt_ = value;
}

// required int64 totaldamage = 3;
inline bool BossDamage::has_totaldamage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BossDamage::set_has_totaldamage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BossDamage::clear_has_totaldamage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BossDamage::clear_totaldamage() {
  totaldamage_ = GOOGLE_LONGLONG(0);
  clear_has_totaldamage();
}
inline ::google::protobuf::int64 BossDamage::totaldamage() const {
  return totaldamage_;
}
inline void BossDamage::set_totaldamage(::google::protobuf::int64 value) {
  set_has_totaldamage();
  totaldamage_ = value;
}

// optional bool received = 4;
inline bool BossDamage::has_received() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BossDamage::set_has_received() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BossDamage::clear_has_received() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BossDamage::clear_received() {
  received_ = false;
  clear_has_received();
}
inline bool BossDamage::received() const {
  return received_;
}
inline void BossDamage::set_received(bool value) {
  set_has_received();
  received_ = value;
}

// required string playername = 5;
inline bool BossDamage::has_playername() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BossDamage::set_has_playername() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BossDamage::clear_has_playername() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BossDamage::clear_playername() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    playername_->clear();
  }
  clear_has_playername();
}
inline const ::std::string& BossDamage::playername() const {
  return *playername_;
}
inline void BossDamage::set_playername(const ::std::string& value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void BossDamage::set_playername(const char* value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void BossDamage::set_playername(const char* value, size_t size) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BossDamage::mutable_playername() {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  return playername_;
}
inline ::std::string* BossDamage::release_playername() {
  clear_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playername_;
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string playerhead = 6;
inline bool BossDamage::has_playerhead() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BossDamage::set_has_playerhead() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BossDamage::clear_has_playerhead() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BossDamage::clear_playerhead() {
  if (playerhead_ != &::google::protobuf::internal::kEmptyString) {
    playerhead_->clear();
  }
  clear_has_playerhead();
}
inline const ::std::string& BossDamage::playerhead() const {
  return *playerhead_;
}
inline void BossDamage::set_playerhead(const ::std::string& value) {
  set_has_playerhead();
  if (playerhead_ == &::google::protobuf::internal::kEmptyString) {
    playerhead_ = new ::std::string;
  }
  playerhead_->assign(value);
}
inline void BossDamage::set_playerhead(const char* value) {
  set_has_playerhead();
  if (playerhead_ == &::google::protobuf::internal::kEmptyString) {
    playerhead_ = new ::std::string;
  }
  playerhead_->assign(value);
}
inline void BossDamage::set_playerhead(const char* value, size_t size) {
  set_has_playerhead();
  if (playerhead_ == &::google::protobuf::internal::kEmptyString) {
    playerhead_ = new ::std::string;
  }
  playerhead_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BossDamage::mutable_playerhead() {
  set_has_playerhead();
  if (playerhead_ == &::google::protobuf::internal::kEmptyString) {
    playerhead_ = new ::std::string;
  }
  return playerhead_;
}
inline ::std::string* BossDamage::release_playerhead() {
  clear_has_playerhead();
  if (playerhead_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playerhead_;
    playerhead_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 power = 7;
inline bool BossDamage::has_power() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BossDamage::set_has_power() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BossDamage::clear_has_power() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BossDamage::clear_power() {
  power_ = 0;
  clear_has_power();
}
inline ::google::protobuf::int32 BossDamage::power() const {
  return power_;
}
inline void BossDamage::set_power(::google::protobuf::int32 value) {
  set_has_power();
  power_ = value;
}

// required int32 playerlvl = 8;
inline bool BossDamage::has_playerlvl() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BossDamage::set_has_playerlvl() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BossDamage::clear_has_playerlvl() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BossDamage::clear_playerlvl() {
  playerlvl_ = 0;
  clear_has_playerlvl();
}
inline ::google::protobuf::int32 BossDamage::playerlvl() const {
  return playerlvl_;
}
inline void BossDamage::set_playerlvl(::google::protobuf::int32 value) {
  set_has_playerlvl();
  playerlvl_ = value;
}

// optional int32 identity = 9;
inline bool BossDamage::has_identity() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BossDamage::set_has_identity() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BossDamage::clear_has_identity() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BossDamage::clear_identity() {
  identity_ = 0;
  clear_has_identity();
}
inline ::google::protobuf::int32 BossDamage::identity() const {
  return identity_;
}
inline void BossDamage::set_identity(::google::protobuf::int32 value) {
  set_has_identity();
  identity_ = value;
}

// optional int32 headFrame = 10;
inline bool BossDamage::has_headframe() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BossDamage::set_has_headframe() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BossDamage::clear_has_headframe() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BossDamage::clear_headframe() {
  headframe_ = 0;
  clear_has_headframe();
}
inline ::google::protobuf::int32 BossDamage::headframe() const {
  return headframe_;
}
inline void BossDamage::set_headframe(::google::protobuf::int32 value) {
  set_has_headframe();
  headframe_ = value;
}

// -------------------------------------------------------------------

// GuildBossInfo

// optional int32 refreshattackcnt = 1;
inline bool GuildBossInfo::has_refreshattackcnt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildBossInfo::set_has_refreshattackcnt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildBossInfo::clear_has_refreshattackcnt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildBossInfo::clear_refreshattackcnt() {
  refreshattackcnt_ = 0;
  clear_has_refreshattackcnt();
}
inline ::google::protobuf::int32 GuildBossInfo::refreshattackcnt() const {
  return refreshattackcnt_;
}
inline void GuildBossInfo::set_refreshattackcnt(::google::protobuf::int32 value) {
  set_has_refreshattackcnt();
  refreshattackcnt_ = value;
}

// optional int64 refreshfreecnttime = 2;
inline bool GuildBossInfo::has_refreshfreecnttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildBossInfo::set_has_refreshfreecnttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildBossInfo::clear_has_refreshfreecnttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildBossInfo::clear_refreshfreecnttime() {
  refreshfreecnttime_ = GOOGLE_LONGLONG(0);
  clear_has_refreshfreecnttime();
}
inline ::google::protobuf::int64 GuildBossInfo::refreshfreecnttime() const {
  return refreshfreecnttime_;
}
inline void GuildBossInfo::set_refreshfreecnttime(::google::protobuf::int64 value) {
  set_has_refreshfreecnttime();
  refreshfreecnttime_ = value;
}

// optional int32 bossid = 3;
inline bool GuildBossInfo::has_bossid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildBossInfo::set_has_bossid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildBossInfo::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildBossInfo::clear_bossid() {
  bossid_ = 0;
  clear_has_bossid();
}
inline ::google::protobuf::int32 GuildBossInfo::bossid() const {
  return bossid_;
}
inline void GuildBossInfo::set_bossid(::google::protobuf::int32 value) {
  set_has_bossid();
  bossid_ = value;
}

// optional int32 blood = 4;
inline bool GuildBossInfo::has_blood() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildBossInfo::set_has_blood() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildBossInfo::clear_has_blood() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildBossInfo::clear_blood() {
  blood_ = 0;
  clear_has_blood();
}
inline ::google::protobuf::int32 GuildBossInfo::blood() const {
  return blood_;
}
inline void GuildBossInfo::set_blood(::google::protobuf::int32 value) {
  set_has_blood();
  blood_ = value;
}

// optional bool isOpen = 5;
inline bool GuildBossInfo::has_isopen() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GuildBossInfo::set_has_isopen() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GuildBossInfo::clear_has_isopen() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GuildBossInfo::clear_isopen() {
  isopen_ = false;
  clear_has_isopen();
}
inline bool GuildBossInfo::isopen() const {
  return isopen_;
}
inline void GuildBossInfo::set_isopen(bool value) {
  set_has_isopen();
  isopen_ = value;
}

// repeated .protobuf.guild.BossDamage playerdamages = 6;
inline int GuildBossInfo::playerdamages_size() const {
  return playerdamages_.size();
}
inline void GuildBossInfo::clear_playerdamages() {
  playerdamages_.Clear();
}
inline const ::protobuf::guild::BossDamage& GuildBossInfo::playerdamages(int index) const {
  return playerdamages_.Get(index);
}
inline ::protobuf::guild::BossDamage* GuildBossInfo::mutable_playerdamages(int index) {
  return playerdamages_.Mutable(index);
}
inline ::protobuf::guild::BossDamage* GuildBossInfo::add_playerdamages() {
  return playerdamages_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::guild::BossDamage >&
GuildBossInfo::playerdamages() const {
  return playerdamages_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::guild::BossDamage >*
GuildBossInfo::mutable_playerdamages() {
  return &playerdamages_;
}

// optional int32 freeExp = 7;
inline bool GuildBossInfo::has_freeexp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GuildBossInfo::set_has_freeexp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GuildBossInfo::clear_has_freeexp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GuildBossInfo::clear_freeexp() {
  freeexp_ = 0;
  clear_has_freeexp();
}
inline ::google::protobuf::int32 GuildBossInfo::freeexp() const {
  return freeexp_;
}
inline void GuildBossInfo::set_freeexp(::google::protobuf::int32 value) {
  set_has_freeexp();
  freeexp_ = value;
}

// optional int32 exp = 8;
inline bool GuildBossInfo::has_exp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GuildBossInfo::set_has_exp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GuildBossInfo::clear_has_exp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GuildBossInfo::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 GuildBossInfo::exp() const {
  return exp_;
}
inline void GuildBossInfo::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// -------------------------------------------------------------------

// MillRobbery

// required string playerid = 1;
inline bool MillRobbery::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MillRobbery::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MillRobbery::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MillRobbery::clear_playerid() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    playerid_->clear();
  }
  clear_has_playerid();
}
inline const ::std::string& MillRobbery::playerid() const {
  return *playerid_;
}
inline void MillRobbery::set_playerid(const ::std::string& value) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(value);
}
inline void MillRobbery::set_playerid(const char* value) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(value);
}
inline void MillRobbery::set_playerid(const char* value, size_t size) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MillRobbery::mutable_playerid() {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  return playerid_;
}
inline ::std::string* MillRobbery::release_playerid() {
  clear_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playerid_;
    playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int64 time = 2;
inline bool MillRobbery::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MillRobbery::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MillRobbery::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MillRobbery::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 MillRobbery::time() const {
  return time_;
}
inline void MillRobbery::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// required int32 guildid = 3;
inline bool MillRobbery::has_guildid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MillRobbery::set_has_guildid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MillRobbery::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MillRobbery::clear_guildid() {
  guildid_ = 0;
  clear_has_guildid();
}
inline ::google::protobuf::int32 MillRobbery::guildid() const {
  return guildid_;
}
inline void MillRobbery::set_guildid(::google::protobuf::int32 value) {
  set_has_guildid();
  guildid_ = value;
}

// required string guildname = 4;
inline bool MillRobbery::has_guildname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MillRobbery::set_has_guildname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MillRobbery::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MillRobbery::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    guildname_->clear();
  }
  clear_has_guildname();
}
inline const ::std::string& MillRobbery::guildname() const {
  return *guildname_;
}
inline void MillRobbery::set_guildname(const ::std::string& value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void MillRobbery::set_guildname(const char* value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void MillRobbery::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MillRobbery::mutable_guildname() {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  return guildname_;
}
inline ::std::string* MillRobbery::release_guildname() {
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string playername = 5;
inline bool MillRobbery::has_playername() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MillRobbery::set_has_playername() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MillRobbery::clear_has_playername() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MillRobbery::clear_playername() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    playername_->clear();
  }
  clear_has_playername();
}
inline const ::std::string& MillRobbery::playername() const {
  return *playername_;
}
inline void MillRobbery::set_playername(const ::std::string& value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void MillRobbery::set_playername(const char* value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void MillRobbery::set_playername(const char* value, size_t size) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MillRobbery::mutable_playername() {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  return playername_;
}
inline ::std::string* MillRobbery::release_playername() {
  clear_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playername_;
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 playerlvl = 6;
inline bool MillRobbery::has_playerlvl() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MillRobbery::set_has_playerlvl() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MillRobbery::clear_has_playerlvl() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MillRobbery::clear_playerlvl() {
  playerlvl_ = 0;
  clear_has_playerlvl();
}
inline ::google::protobuf::int32 MillRobbery::playerlvl() const {
  return playerlvl_;
}
inline void MillRobbery::set_playerlvl(::google::protobuf::int32 value) {
  set_has_playerlvl();
  playerlvl_ = value;
}

// required string playerhead = 7;
inline bool MillRobbery::has_playerhead() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MillRobbery::set_has_playerhead() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MillRobbery::clear_has_playerhead() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MillRobbery::clear_playerhead() {
  if (playerhead_ != &::google::protobuf::internal::kEmptyString) {
    playerhead_->clear();
  }
  clear_has_playerhead();
}
inline const ::std::string& MillRobbery::playerhead() const {
  return *playerhead_;
}
inline void MillRobbery::set_playerhead(const ::std::string& value) {
  set_has_playerhead();
  if (playerhead_ == &::google::protobuf::internal::kEmptyString) {
    playerhead_ = new ::std::string;
  }
  playerhead_->assign(value);
}
inline void MillRobbery::set_playerhead(const char* value) {
  set_has_playerhead();
  if (playerhead_ == &::google::protobuf::internal::kEmptyString) {
    playerhead_ = new ::std::string;
  }
  playerhead_->assign(value);
}
inline void MillRobbery::set_playerhead(const char* value, size_t size) {
  set_has_playerhead();
  if (playerhead_ == &::google::protobuf::internal::kEmptyString) {
    playerhead_ = new ::std::string;
  }
  playerhead_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MillRobbery::mutable_playerhead() {
  set_has_playerhead();
  if (playerhead_ == &::google::protobuf::internal::kEmptyString) {
    playerhead_ = new ::std::string;
  }
  return playerhead_;
}
inline ::std::string* MillRobbery::release_playerhead() {
  clear_has_playerhead();
  if (playerhead_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playerhead_;
    playerhead_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 millid = 8;
inline bool MillRobbery::has_millid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MillRobbery::set_has_millid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MillRobbery::clear_has_millid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MillRobbery::clear_millid() {
  millid_ = 0;
  clear_has_millid();
}
inline ::google::protobuf::int32 MillRobbery::millid() const {
  return millid_;
}
inline void MillRobbery::set_millid(::google::protobuf::int32 value) {
  set_has_millid();
  millid_ = value;
}

// required int32 milllvl = 9;
inline bool MillRobbery::has_milllvl() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MillRobbery::set_has_milllvl() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MillRobbery::clear_has_milllvl() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MillRobbery::clear_milllvl() {
  milllvl_ = 0;
  clear_has_milllvl();
}
inline ::google::protobuf::int32 MillRobbery::milllvl() const {
  return milllvl_;
}
inline void MillRobbery::set_milllvl(::google::protobuf::int32 value) {
  set_has_milllvl();
  milllvl_ = value;
}

// required int32 state = 10;
inline bool MillRobbery::has_state() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MillRobbery::set_has_state() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MillRobbery::clear_has_state() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MillRobbery::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 MillRobbery::state() const {
  return state_;
}
inline void MillRobbery::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// required int64 robberyId = 11;
inline bool MillRobbery::has_robberyid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MillRobbery::set_has_robberyid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MillRobbery::clear_has_robberyid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MillRobbery::clear_robberyid() {
  robberyid_ = GOOGLE_LONGLONG(0);
  clear_has_robberyid();
}
inline ::google::protobuf::int64 MillRobbery::robberyid() const {
  return robberyid_;
}
inline void MillRobbery::set_robberyid(::google::protobuf::int64 value) {
  set_has_robberyid();
  robberyid_ = value;
}

// optional int32 headFrame = 12;
inline bool MillRobbery::has_headframe() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MillRobbery::set_has_headframe() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MillRobbery::clear_has_headframe() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MillRobbery::clear_headframe() {
  headframe_ = 0;
  clear_has_headframe();
}
inline ::google::protobuf::int32 MillRobbery::headframe() const {
  return headframe_;
}
inline void MillRobbery::set_headframe(::google::protobuf::int32 value) {
  set_has_headframe();
  headframe_ = value;
}

// -------------------------------------------------------------------

// MillMyInfo

// required int32 millid = 1;
inline bool MillMyInfo::has_millid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MillMyInfo::set_has_millid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MillMyInfo::clear_has_millid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MillMyInfo::clear_millid() {
  millid_ = 0;
  clear_has_millid();
}
inline ::google::protobuf::int32 MillMyInfo::millid() const {
  return millid_;
}
inline void MillMyInfo::set_millid(::google::protobuf::int32 value) {
  set_has_millid();
  millid_ = value;
}

// required int32 milllvl = 5;
inline bool MillMyInfo::has_milllvl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MillMyInfo::set_has_milllvl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MillMyInfo::clear_has_milllvl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MillMyInfo::clear_milllvl() {
  milllvl_ = 0;
  clear_has_milllvl();
}
inline ::google::protobuf::int32 MillMyInfo::milllvl() const {
  return milllvl_;
}
inline void MillMyInfo::set_milllvl(::google::protobuf::int32 value) {
  set_has_milllvl();
  milllvl_ = value;
}

// optional int64 millFinishTime = 2;
inline bool MillMyInfo::has_millfinishtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MillMyInfo::set_has_millfinishtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MillMyInfo::clear_has_millfinishtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MillMyInfo::clear_millfinishtime() {
  millfinishtime_ = GOOGLE_LONGLONG(0);
  clear_has_millfinishtime();
}
inline ::google::protobuf::int64 MillMyInfo::millfinishtime() const {
  return millfinishtime_;
}
inline void MillMyInfo::set_millfinishtime(::google::protobuf::int64 value) {
  set_has_millfinishtime();
  millfinishtime_ = value;
}

// repeated .protobuf.common.KVint3232 received = 3;
inline int MillMyInfo::received_size() const {
  return received_.size();
}
inline void MillMyInfo::clear_received() {
  received_.Clear();
}
inline const ::protobuf::common::KVint3232& MillMyInfo::received(int index) const {
  return received_.Get(index);
}
inline ::protobuf::common::KVint3232* MillMyInfo::mutable_received(int index) {
  return received_.Mutable(index);
}
inline ::protobuf::common::KVint3232* MillMyInfo::add_received() {
  return received_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >&
MillMyInfo::received() const {
  return received_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >*
MillMyInfo::mutable_received() {
  return &received_;
}

// repeated .protobuf.guild.MillRobbery robberylist = 4;
inline int MillMyInfo::robberylist_size() const {
  return robberylist_.size();
}
inline void MillMyInfo::clear_robberylist() {
  robberylist_.Clear();
}
inline const ::protobuf::guild::MillRobbery& MillMyInfo::robberylist(int index) const {
  return robberylist_.Get(index);
}
inline ::protobuf::guild::MillRobbery* MillMyInfo::mutable_robberylist(int index) {
  return robberylist_.Mutable(index);
}
inline ::protobuf::guild::MillRobbery* MillMyInfo::add_robberylist() {
  return robberylist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::guild::MillRobbery >&
MillMyInfo::robberylist() const {
  return robberylist_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::guild::MillRobbery >*
MillMyInfo::mutable_robberylist() {
  return &robberylist_;
}

// -------------------------------------------------------------------

// MillOtherInfo

// optional string playerid = 1;
inline bool MillOtherInfo::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MillOtherInfo::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MillOtherInfo::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MillOtherInfo::clear_playerid() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    playerid_->clear();
  }
  clear_has_playerid();
}
inline const ::std::string& MillOtherInfo::playerid() const {
  return *playerid_;
}
inline void MillOtherInfo::set_playerid(const ::std::string& value) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(value);
}
inline void MillOtherInfo::set_playerid(const char* value) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(value);
}
inline void MillOtherInfo::set_playerid(const char* value, size_t size) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MillOtherInfo::mutable_playerid() {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  return playerid_;
}
inline ::std::string* MillOtherInfo::release_playerid() {
  clear_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playerid_;
    playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string playername = 2;
inline bool MillOtherInfo::has_playername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MillOtherInfo::set_has_playername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MillOtherInfo::clear_has_playername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MillOtherInfo::clear_playername() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    playername_->clear();
  }
  clear_has_playername();
}
inline const ::std::string& MillOtherInfo::playername() const {
  return *playername_;
}
inline void MillOtherInfo::set_playername(const ::std::string& value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void MillOtherInfo::set_playername(const char* value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void MillOtherInfo::set_playername(const char* value, size_t size) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MillOtherInfo::mutable_playername() {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  return playername_;
}
inline ::std::string* MillOtherInfo::release_playername() {
  clear_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playername_;
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .protobuf.guild.GuildBaseInfo guildinfo = 3;
inline bool MillOtherInfo::has_guildinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MillOtherInfo::set_has_guildinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MillOtherInfo::clear_has_guildinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MillOtherInfo::clear_guildinfo() {
  if (guildinfo_ != NULL) guildinfo_->::protobuf::guild::GuildBaseInfo::Clear();
  clear_has_guildinfo();
}
inline const ::protobuf::guild::GuildBaseInfo& MillOtherInfo::guildinfo() const {
  return guildinfo_ != NULL ? *guildinfo_ : *default_instance_->guildinfo_;
}
inline ::protobuf::guild::GuildBaseInfo* MillOtherInfo::mutable_guildinfo() {
  set_has_guildinfo();
  if (guildinfo_ == NULL) guildinfo_ = new ::protobuf::guild::GuildBaseInfo;
  return guildinfo_;
}
inline ::protobuf::guild::GuildBaseInfo* MillOtherInfo::release_guildinfo() {
  clear_has_guildinfo();
  ::protobuf::guild::GuildBaseInfo* temp = guildinfo_;
  guildinfo_ = NULL;
  return temp;
}

// optional int32 power = 4;
inline bool MillOtherInfo::has_power() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MillOtherInfo::set_has_power() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MillOtherInfo::clear_has_power() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MillOtherInfo::clear_power() {
  power_ = 0;
  clear_has_power();
}
inline ::google::protobuf::int32 MillOtherInfo::power() const {
  return power_;
}
inline void MillOtherInfo::set_power(::google::protobuf::int32 value) {
  set_has_power();
  power_ = value;
}

// optional int32 millid = 5;
inline bool MillOtherInfo::has_millid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MillOtherInfo::set_has_millid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MillOtherInfo::clear_has_millid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MillOtherInfo::clear_millid() {
  millid_ = 0;
  clear_has_millid();
}
inline ::google::protobuf::int32 MillOtherInfo::millid() const {
  return millid_;
}
inline void MillOtherInfo::set_millid(::google::protobuf::int32 value) {
  set_has_millid();
  millid_ = value;
}

// optional int32 milllvl = 6;
inline bool MillOtherInfo::has_milllvl() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MillOtherInfo::set_has_milllvl() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MillOtherInfo::clear_has_milllvl() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MillOtherInfo::clear_milllvl() {
  milllvl_ = 0;
  clear_has_milllvl();
}
inline ::google::protobuf::int32 MillOtherInfo::milllvl() const {
  return milllvl_;
}
inline void MillOtherInfo::set_milllvl(::google::protobuf::int32 value) {
  set_has_milllvl();
  milllvl_ = value;
}

// optional bool robberyed = 7;
inline bool MillOtherInfo::has_robberyed() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MillOtherInfo::set_has_robberyed() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MillOtherInfo::clear_has_robberyed() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MillOtherInfo::clear_robberyed() {
  robberyed_ = false;
  clear_has_robberyed();
}
inline bool MillOtherInfo::robberyed() const {
  return robberyed_;
}
inline void MillOtherInfo::set_robberyed(bool value) {
  set_has_robberyed();
  robberyed_ = value;
}

// -------------------------------------------------------------------

// MillLvlInfo

// required int32 milllvl = 1;
inline bool MillLvlInfo::has_milllvl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MillLvlInfo::set_has_milllvl() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MillLvlInfo::clear_has_milllvl() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MillLvlInfo::clear_milllvl() {
  milllvl_ = 0;
  clear_has_milllvl();
}
inline ::google::protobuf::int32 MillLvlInfo::milllvl() const {
  return milllvl_;
}
inline void MillLvlInfo::set_milllvl(::google::protobuf::int32 value) {
  set_has_milllvl();
  milllvl_ = value;
}

// required int32 millexp = 2;
inline bool MillLvlInfo::has_millexp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MillLvlInfo::set_has_millexp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MillLvlInfo::clear_has_millexp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MillLvlInfo::clear_millexp() {
  millexp_ = 0;
  clear_has_millexp();
}
inline ::google::protobuf::int32 MillLvlInfo::millexp() const {
  return millexp_;
}
inline void MillLvlInfo::set_millexp(::google::protobuf::int32 value) {
  set_has_millexp();
  millexp_ = value;
}

// required int64 guildgold = 4;
inline bool MillLvlInfo::has_guildgold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MillLvlInfo::set_has_guildgold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MillLvlInfo::clear_has_guildgold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MillLvlInfo::clear_guildgold() {
  guildgold_ = GOOGLE_LONGLONG(0);
  clear_has_guildgold();
}
inline ::google::protobuf::int64 MillLvlInfo::guildgold() const {
  return guildgold_;
}
inline void MillLvlInfo::set_guildgold(::google::protobuf::int64 value) {
  set_has_guildgold();
  guildgold_ = value;
}

// repeated .protobuf.guild.MillExpHistory history = 3;
inline int MillLvlInfo::history_size() const {
  return history_.size();
}
inline void MillLvlInfo::clear_history() {
  history_.Clear();
}
inline const ::protobuf::guild::MillExpHistory& MillLvlInfo::history(int index) const {
  return history_.Get(index);
}
inline ::protobuf::guild::MillExpHistory* MillLvlInfo::mutable_history(int index) {
  return history_.Mutable(index);
}
inline ::protobuf::guild::MillExpHistory* MillLvlInfo::add_history() {
  return history_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::guild::MillExpHistory >&
MillLvlInfo::history() const {
  return history_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::guild::MillExpHistory >*
MillLvlInfo::mutable_history() {
  return &history_;
}

// -------------------------------------------------------------------

// DonationHistory

// repeated .protobuf.guild.MillExpHistory history = 1;
inline int DonationHistory::history_size() const {
  return history_.size();
}
inline void DonationHistory::clear_history() {
  history_.Clear();
}
inline const ::protobuf::guild::MillExpHistory& DonationHistory::history(int index) const {
  return history_.Get(index);
}
inline ::protobuf::guild::MillExpHistory* DonationHistory::mutable_history(int index) {
  return history_.Mutable(index);
}
inline ::protobuf::guild::MillExpHistory* DonationHistory::add_history() {
  return history_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::guild::MillExpHistory >&
DonationHistory::history() const {
  return history_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::guild::MillExpHistory >*
DonationHistory::mutable_history() {
  return &history_;
}

// -------------------------------------------------------------------

// MillExpHistory

// required string playerid = 1;
inline bool MillExpHistory::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MillExpHistory::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MillExpHistory::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MillExpHistory::clear_playerid() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    playerid_->clear();
  }
  clear_has_playerid();
}
inline const ::std::string& MillExpHistory::playerid() const {
  return *playerid_;
}
inline void MillExpHistory::set_playerid(const ::std::string& value) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(value);
}
inline void MillExpHistory::set_playerid(const char* value) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(value);
}
inline void MillExpHistory::set_playerid(const char* value, size_t size) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MillExpHistory::mutable_playerid() {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  return playerid_;
}
inline ::std::string* MillExpHistory::release_playerid() {
  clear_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playerid_;
    playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string playername = 2;
inline bool MillExpHistory::has_playername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MillExpHistory::set_has_playername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MillExpHistory::clear_has_playername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MillExpHistory::clear_playername() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    playername_->clear();
  }
  clear_has_playername();
}
inline const ::std::string& MillExpHistory::playername() const {
  return *playername_;
}
inline void MillExpHistory::set_playername(const ::std::string& value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void MillExpHistory::set_playername(const char* value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void MillExpHistory::set_playername(const char* value, size_t size) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MillExpHistory::mutable_playername() {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  return playername_;
}
inline ::std::string* MillExpHistory::release_playername() {
  clear_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playername_;
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int64 gold = 3;
inline bool MillExpHistory::has_gold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MillExpHistory::set_has_gold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MillExpHistory::clear_has_gold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MillExpHistory::clear_gold() {
  gold_ = GOOGLE_LONGLONG(0);
  clear_has_gold();
}
inline ::google::protobuf::int64 MillExpHistory::gold() const {
  return gold_;
}
inline void MillExpHistory::set_gold(::google::protobuf::int64 value) {
  set_has_gold();
  gold_ = value;
}

// required int64 time = 4;
inline bool MillExpHistory::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MillExpHistory::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MillExpHistory::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MillExpHistory::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 MillExpHistory::time() const {
  return time_;
}
inline void MillExpHistory::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// required int32 playerlvl = 5;
inline bool MillExpHistory::has_playerlvl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MillExpHistory::set_has_playerlvl() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MillExpHistory::clear_has_playerlvl() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MillExpHistory::clear_playerlvl() {
  playerlvl_ = 0;
  clear_has_playerlvl();
}
inline ::google::protobuf::int32 MillExpHistory::playerlvl() const {
  return playerlvl_;
}
inline void MillExpHistory::set_playerlvl(::google::protobuf::int32 value) {
  set_has_playerlvl();
  playerlvl_ = value;
}

// required int32 identity = 6;
inline bool MillExpHistory::has_identity() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MillExpHistory::set_has_identity() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MillExpHistory::clear_has_identity() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MillExpHistory::clear_identity() {
  identity_ = 0;
  clear_has_identity();
}
inline ::google::protobuf::int32 MillExpHistory::identity() const {
  return identity_;
}
inline void MillExpHistory::set_identity(::google::protobuf::int32 value) {
  set_has_identity();
  identity_ = value;
}

// required string head = 7;
inline bool MillExpHistory::has_head() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MillExpHistory::set_has_head() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MillExpHistory::clear_has_head() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MillExpHistory::clear_head() {
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    head_->clear();
  }
  clear_has_head();
}
inline const ::std::string& MillExpHistory::head() const {
  return *head_;
}
inline void MillExpHistory::set_head(const ::std::string& value) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(value);
}
inline void MillExpHistory::set_head(const char* value) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(value);
}
inline void MillExpHistory::set_head(const char* value, size_t size) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MillExpHistory::mutable_head() {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  return head_;
}
inline ::std::string* MillExpHistory::release_head() {
  clear_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = head_;
    head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 headFrame = 8;
inline bool MillExpHistory::has_headframe() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MillExpHistory::set_has_headframe() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MillExpHistory::clear_has_headframe() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MillExpHistory::clear_headframe() {
  headframe_ = 0;
  clear_has_headframe();
}
inline ::google::protobuf::int32 MillExpHistory::headframe() const {
  return headframe_;
}
inline void MillExpHistory::set_headframe(::google::protobuf::int32 value) {
  set_has_headframe();
  headframe_ = value;
}

// -------------------------------------------------------------------

// ModGuildInfo

// required int32 type = 1;
inline bool ModGuildInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModGuildInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModGuildInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModGuildInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ModGuildInfo::type() const {
  return type_;
}
inline void ModGuildInfo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required .protobuf.guild.GuildBaseInfo info = 2;
inline bool ModGuildInfo::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ModGuildInfo::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ModGuildInfo::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ModGuildInfo::clear_info() {
  if (info_ != NULL) info_->::protobuf::guild::GuildBaseInfo::Clear();
  clear_has_info();
}
inline const ::protobuf::guild::GuildBaseInfo& ModGuildInfo::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::protobuf::guild::GuildBaseInfo* ModGuildInfo::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::protobuf::guild::GuildBaseInfo;
  return info_;
}
inline ::protobuf::guild::GuildBaseInfo* ModGuildInfo::release_info() {
  clear_has_info();
  ::protobuf::guild::GuildBaseInfo* temp = info_;
  info_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// DynIcon

// required string icon = 1;
inline bool DynIcon::has_icon() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DynIcon::set_has_icon() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DynIcon::clear_has_icon() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DynIcon::clear_icon() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    icon_->clear();
  }
  clear_has_icon();
}
inline const ::std::string& DynIcon::icon() const {
  return *icon_;
}
inline void DynIcon::set_icon(const ::std::string& value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void DynIcon::set_icon(const char* value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void DynIcon::set_icon(const char* value, size_t size) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DynIcon::mutable_icon() {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  return icon_;
}
inline ::std::string* DynIcon::release_icon() {
  clear_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = icon_;
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int64 outtime = 2;
inline bool DynIcon::has_outtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DynIcon::set_has_outtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DynIcon::clear_has_outtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DynIcon::clear_outtime() {
  outtime_ = GOOGLE_LONGLONG(0);
  clear_has_outtime();
}
inline ::google::protobuf::int64 DynIcon::outtime() const {
  return outtime_;
}
inline void DynIcon::set_outtime(::google::protobuf::int64 value) {
  set_has_outtime();
  outtime_ = value;
}

// required int64 usetime = 3;
inline bool DynIcon::has_usetime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DynIcon::set_has_usetime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DynIcon::clear_has_usetime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DynIcon::clear_usetime() {
  usetime_ = GOOGLE_LONGLONG(0);
  clear_has_usetime();
}
inline ::google::protobuf::int64 DynIcon::usetime() const {
  return usetime_;
}
inline void DynIcon::set_usetime(::google::protobuf::int64 value) {
  set_has_usetime();
  usetime_ = value;
}

// -------------------------------------------------------------------

// DynIconList

// repeated .protobuf.guild.DynIcon icons = 1;
inline int DynIconList::icons_size() const {
  return icons_.size();
}
inline void DynIconList::clear_icons() {
  icons_.Clear();
}
inline const ::protobuf::guild::DynIcon& DynIconList::icons(int index) const {
  return icons_.Get(index);
}
inline ::protobuf::guild::DynIcon* DynIconList::mutable_icons(int index) {
  return icons_.Mutable(index);
}
inline ::protobuf::guild::DynIcon* DynIconList::add_icons() {
  return icons_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::guild::DynIcon >&
DynIconList::icons() const {
  return icons_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::guild::DynIcon >*
DynIconList::mutable_icons() {
  return &icons_;
}

// -------------------------------------------------------------------

// EnterHall

// required int32 state = 1;
inline bool EnterHall::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EnterHall::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EnterHall::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EnterHall::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 EnterHall::state() const {
  return state_;
}
inline void EnterHall::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// required int64 time = 2;
inline bool EnterHall::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EnterHall::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EnterHall::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EnterHall::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 EnterHall::time() const {
  return time_;
}
inline void EnterHall::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// required bool isJoin = 3;
inline bool EnterHall::has_isjoin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EnterHall::set_has_isjoin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EnterHall::clear_has_isjoin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EnterHall::clear_isjoin() {
  isjoin_ = false;
  clear_has_isjoin();
}
inline bool EnterHall::isjoin() const {
  return isjoin_;
}
inline void EnterHall::set_isjoin(bool value) {
  set_has_isjoin();
  isjoin_ = value;
}

// optional int32 rank = 4;
inline bool EnterHall::has_rank() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EnterHall::set_has_rank() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EnterHall::clear_has_rank() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EnterHall::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 EnterHall::rank() const {
  return rank_;
}
inline void EnterHall::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional int32 score = 5;
inline bool EnterHall::has_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EnterHall::set_has_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EnterHall::clear_has_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EnterHall::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 EnterHall::score() const {
  return score_;
}
inline void EnterHall::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// optional int32 energy = 6;
inline bool EnterHall::has_energy() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EnterHall::set_has_energy() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EnterHall::clear_has_energy() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EnterHall::clear_energy() {
  energy_ = 0;
  clear_has_energy();
}
inline ::google::protobuf::int32 EnterHall::energy() const {
  return energy_;
}
inline void EnterHall::set_energy(::google::protobuf::int32 value) {
  set_has_energy();
  energy_ = value;
}

// optional int64 energyTime = 7;
inline bool EnterHall::has_energytime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EnterHall::set_has_energytime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EnterHall::clear_has_energytime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EnterHall::clear_energytime() {
  energytime_ = GOOGLE_LONGLONG(0);
  clear_has_energytime();
}
inline ::google::protobuf::int64 EnterHall::energytime() const {
  return energytime_;
}
inline void EnterHall::set_energytime(::google::protobuf::int64 value) {
  set_has_energytime();
  energytime_ = value;
}

// repeated .protobuf.guild.LineupShow lineup = 8;
inline int EnterHall::lineup_size() const {
  return lineup_.size();
}
inline void EnterHall::clear_lineup() {
  lineup_.Clear();
}
inline const ::protobuf::guild::LineupShow& EnterHall::lineup(int index) const {
  return lineup_.Get(index);
}
inline ::protobuf::guild::LineupShow* EnterHall::mutable_lineup(int index) {
  return lineup_.Mutable(index);
}
inline ::protobuf::guild::LineupShow* EnterHall::add_lineup() {
  return lineup_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::guild::LineupShow >&
EnterHall::lineup() const {
  return lineup_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::guild::LineupShow >*
EnterHall::mutable_lineup() {
  return &lineup_;
}

// repeated .protobuf.guild.RankInfo contribution = 9;
inline int EnterHall::contribution_size() const {
  return contribution_.size();
}
inline void EnterHall::clear_contribution() {
  contribution_.Clear();
}
inline const ::protobuf::guild::RankInfo& EnterHall::contribution(int index) const {
  return contribution_.Get(index);
}
inline ::protobuf::guild::RankInfo* EnterHall::mutable_contribution(int index) {
  return contribution_.Mutable(index);
}
inline ::protobuf::guild::RankInfo* EnterHall::add_contribution() {
  return contribution_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::guild::RankInfo >&
EnterHall::contribution() const {
  return contribution_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::guild::RankInfo >*
EnterHall::mutable_contribution() {
  return &contribution_;
}

// optional bool isSetOther = 10;
inline bool EnterHall::has_issetother() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void EnterHall::set_has_issetother() {
  _has_bits_[0] |= 0x00000200u;
}
inline void EnterHall::clear_has_issetother() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void EnterHall::clear_issetother() {
  issetother_ = false;
  clear_has_issetother();
}
inline bool EnterHall::issetother() const {
  return issetother_;
}
inline void EnterHall::set_issetother(bool value) {
  set_has_issetother();
  issetother_ = value;
}

// -------------------------------------------------------------------

// LineupShow

// required string id = 1;
inline bool LineupShow::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LineupShow::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LineupShow::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LineupShow::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& LineupShow::id() const {
  return *id_;
}
inline void LineupShow::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void LineupShow::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void LineupShow::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LineupShow::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* LineupShow::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string name = 2;
inline bool LineupShow::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LineupShow::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LineupShow::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LineupShow::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& LineupShow::name() const {
  return *name_;
}
inline void LineupShow::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void LineupShow::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void LineupShow::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LineupShow::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* LineupShow::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bool isJoin = 3;
inline bool LineupShow::has_isjoin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LineupShow::set_has_isjoin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LineupShow::clear_has_isjoin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LineupShow::clear_isjoin() {
  isjoin_ = false;
  clear_has_isjoin();
}
inline bool LineupShow::isjoin() const {
  return isjoin_;
}
inline void LineupShow::set_isjoin(bool value) {
  set_has_isjoin();
  isjoin_ = value;
}

// required bool isHide = 4;
inline bool LineupShow::has_ishide() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LineupShow::set_has_ishide() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LineupShow::clear_has_ishide() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LineupShow::clear_ishide() {
  ishide_ = false;
  clear_has_ishide();
}
inline bool LineupShow::ishide() const {
  return ishide_;
}
inline void LineupShow::set_ishide(bool value) {
  set_has_ishide();
  ishide_ = value;
}

// required int32 power = 5;
inline bool LineupShow::has_power() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LineupShow::set_has_power() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LineupShow::clear_has_power() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LineupShow::clear_power() {
  power_ = 0;
  clear_has_power();
}
inline ::google::protobuf::int32 LineupShow::power() const {
  return power_;
}
inline void LineupShow::set_power(::google::protobuf::int32 value) {
  set_has_power();
  power_ = value;
}

// repeated .protobuf.common.KVint3232 heros = 6;
inline int LineupShow::heros_size() const {
  return heros_.size();
}
inline void LineupShow::clear_heros() {
  heros_.Clear();
}
inline const ::protobuf::common::KVint3232& LineupShow::heros(int index) const {
  return heros_.Get(index);
}
inline ::protobuf::common::KVint3232* LineupShow::mutable_heros(int index) {
  return heros_.Mutable(index);
}
inline ::protobuf::common::KVint3232* LineupShow::add_heros() {
  return heros_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >&
LineupShow::heros() const {
  return heros_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >*
LineupShow::mutable_heros() {
  return &heros_;
}

// -------------------------------------------------------------------

// EnemyInfoRequest

// required string id = 1;
inline bool EnemyInfoRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EnemyInfoRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EnemyInfoRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EnemyInfoRequest::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& EnemyInfoRequest::id() const {
  return *id_;
}
inline void EnemyInfoRequest::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void EnemyInfoRequest::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void EnemyInfoRequest::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EnemyInfoRequest::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* EnemyInfoRequest::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bool refresh = 2;
inline bool EnemyInfoRequest::has_refresh() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EnemyInfoRequest::set_has_refresh() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EnemyInfoRequest::clear_has_refresh() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EnemyInfoRequest::clear_refresh() {
  refresh_ = false;
  clear_has_refresh();
}
inline bool EnemyInfoRequest::refresh() const {
  return refresh_;
}
inline void EnemyInfoRequest::set_refresh(bool value) {
  set_has_refresh();
  refresh_ = value;
}

// -------------------------------------------------------------------

// EnemyInfoReply

// optional .protobuf.guild.EnemyInfo info = 1;
inline bool EnemyInfoReply::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EnemyInfoReply::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EnemyInfoReply::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EnemyInfoReply::clear_info() {
  if (info_ != NULL) info_->::protobuf::guild::EnemyInfo::Clear();
  clear_has_info();
}
inline const ::protobuf::guild::EnemyInfo& EnemyInfoReply::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::protobuf::guild::EnemyInfo* EnemyInfoReply::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::protobuf::guild::EnemyInfo;
  return info_;
}
inline ::protobuf::guild::EnemyInfo* EnemyInfoReply::release_info() {
  clear_has_info();
  ::protobuf::guild::EnemyInfo* temp = info_;
  info_ = NULL;
  return temp;
}

// optional int32 energy = 6;
inline bool EnemyInfoReply::has_energy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EnemyInfoReply::set_has_energy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EnemyInfoReply::clear_has_energy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EnemyInfoReply::clear_energy() {
  energy_ = 0;
  clear_has_energy();
}
inline ::google::protobuf::int32 EnemyInfoReply::energy() const {
  return energy_;
}
inline void EnemyInfoReply::set_energy(::google::protobuf::int32 value) {
  set_has_energy();
  energy_ = value;
}

// optional int64 energyTime = 7;
inline bool EnemyInfoReply::has_energytime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EnemyInfoReply::set_has_energytime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EnemyInfoReply::clear_has_energytime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EnemyInfoReply::clear_energytime() {
  energytime_ = GOOGLE_LONGLONG(0);
  clear_has_energytime();
}
inline ::google::protobuf::int64 EnemyInfoReply::energytime() const {
  return energytime_;
}
inline void EnemyInfoReply::set_energytime(::google::protobuf::int64 value) {
  set_has_energytime();
  energytime_ = value;
}

// -------------------------------------------------------------------

// EnemyInfo

// required int32 rank = 1;
inline bool EnemyInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EnemyInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EnemyInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EnemyInfo::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 EnemyInfo::rank() const {
  return rank_;
}
inline void EnemyInfo::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// required int32 score = 2;
inline bool EnemyInfo::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EnemyInfo::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EnemyInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EnemyInfo::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 EnemyInfo::score() const {
  return score_;
}
inline void EnemyInfo::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// required string guildname = 3;
inline bool EnemyInfo::has_guildname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EnemyInfo::set_has_guildname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EnemyInfo::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EnemyInfo::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    guildname_->clear();
  }
  clear_has_guildname();
}
inline const ::std::string& EnemyInfo::guildname() const {
  return *guildname_;
}
inline void EnemyInfo::set_guildname(const ::std::string& value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void EnemyInfo::set_guildname(const char* value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void EnemyInfo::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EnemyInfo::mutable_guildname() {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  return guildname_;
}
inline ::std::string* EnemyInfo::release_guildname() {
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string guildicon = 4;
inline bool EnemyInfo::has_guildicon() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EnemyInfo::set_has_guildicon() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EnemyInfo::clear_has_guildicon() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EnemyInfo::clear_guildicon() {
  if (guildicon_ != &::google::protobuf::internal::kEmptyString) {
    guildicon_->clear();
  }
  clear_has_guildicon();
}
inline const ::std::string& EnemyInfo::guildicon() const {
  return *guildicon_;
}
inline void EnemyInfo::set_guildicon(const ::std::string& value) {
  set_has_guildicon();
  if (guildicon_ == &::google::protobuf::internal::kEmptyString) {
    guildicon_ = new ::std::string;
  }
  guildicon_->assign(value);
}
inline void EnemyInfo::set_guildicon(const char* value) {
  set_has_guildicon();
  if (guildicon_ == &::google::protobuf::internal::kEmptyString) {
    guildicon_ = new ::std::string;
  }
  guildicon_->assign(value);
}
inline void EnemyInfo::set_guildicon(const char* value, size_t size) {
  set_has_guildicon();
  if (guildicon_ == &::google::protobuf::internal::kEmptyString) {
    guildicon_ = new ::std::string;
  }
  guildicon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EnemyInfo::mutable_guildicon() {
  set_has_guildicon();
  if (guildicon_ == &::google::protobuf::internal::kEmptyString) {
    guildicon_ = new ::std::string;
  }
  return guildicon_;
}
inline ::std::string* EnemyInfo::release_guildicon() {
  clear_has_guildicon();
  if (guildicon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildicon_;
    guildicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string serverName = 5;
inline bool EnemyInfo::has_servername() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EnemyInfo::set_has_servername() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EnemyInfo::clear_has_servername() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EnemyInfo::clear_servername() {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    servername_->clear();
  }
  clear_has_servername();
}
inline const ::std::string& EnemyInfo::servername() const {
  return *servername_;
}
inline void EnemyInfo::set_servername(const ::std::string& value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
}
inline void EnemyInfo::set_servername(const char* value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
}
inline void EnemyInfo::set_servername(const char* value, size_t size) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EnemyInfo::mutable_servername() {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  return servername_;
}
inline ::std::string* EnemyInfo::release_servername() {
  clear_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = servername_;
    servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .protobuf.guild.EnemyLineupShow lineup = 6;
inline int EnemyInfo::lineup_size() const {
  return lineup_.size();
}
inline void EnemyInfo::clear_lineup() {
  lineup_.Clear();
}
inline const ::protobuf::guild::EnemyLineupShow& EnemyInfo::lineup(int index) const {
  return lineup_.Get(index);
}
inline ::protobuf::guild::EnemyLineupShow* EnemyInfo::mutable_lineup(int index) {
  return lineup_.Mutable(index);
}
inline ::protobuf::guild::EnemyLineupShow* EnemyInfo::add_lineup() {
  return lineup_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::guild::EnemyLineupShow >&
EnemyInfo::lineup() const {
  return lineup_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::guild::EnemyLineupShow >*
EnemyInfo::mutable_lineup() {
  return &lineup_;
}

// optional int32 finalRank = 7;
inline bool EnemyInfo::has_finalrank() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EnemyInfo::set_has_finalrank() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EnemyInfo::clear_has_finalrank() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EnemyInfo::clear_finalrank() {
  finalrank_ = 0;
  clear_has_finalrank();
}
inline ::google::protobuf::int32 EnemyInfo::finalrank() const {
  return finalrank_;
}
inline void EnemyInfo::set_finalrank(::google::protobuf::int32 value) {
  set_has_finalrank();
  finalrank_ = value;
}

// -------------------------------------------------------------------

// EnemyLineupShow

// required string name = 1;
inline bool EnemyLineupShow::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EnemyLineupShow::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EnemyLineupShow::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EnemyLineupShow::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& EnemyLineupShow::name() const {
  return *name_;
}
inline void EnemyLineupShow::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void EnemyLineupShow::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void EnemyLineupShow::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EnemyLineupShow::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* EnemyLineupShow::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bool isHide = 2;
inline bool EnemyLineupShow::has_ishide() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EnemyLineupShow::set_has_ishide() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EnemyLineupShow::clear_has_ishide() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EnemyLineupShow::clear_ishide() {
  ishide_ = false;
  clear_has_ishide();
}
inline bool EnemyLineupShow::ishide() const {
  return ishide_;
}
inline void EnemyLineupShow::set_ishide(bool value) {
  set_has_ishide();
  ishide_ = value;
}

// repeated .protobuf.common.KVint3232 heros = 3;
inline int EnemyLineupShow::heros_size() const {
  return heros_.size();
}
inline void EnemyLineupShow::clear_heros() {
  heros_.Clear();
}
inline const ::protobuf::common::KVint3232& EnemyLineupShow::heros(int index) const {
  return heros_.Get(index);
}
inline ::protobuf::common::KVint3232* EnemyLineupShow::mutable_heros(int index) {
  return heros_.Mutable(index);
}
inline ::protobuf::common::KVint3232* EnemyLineupShow::add_heros() {
  return heros_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >&
EnemyLineupShow::heros() const {
  return heros_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >*
EnemyLineupShow::mutable_heros() {
  return &heros_;
}

// -------------------------------------------------------------------

// RankInfo

// required string id = 1;
inline bool RankInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RankInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RankInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RankInfo::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& RankInfo::id() const {
  return *id_;
}
inline void RankInfo::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void RankInfo::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void RankInfo::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RankInfo::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* RankInfo::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 level = 2;
inline bool RankInfo::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RankInfo::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RankInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RankInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 RankInfo::level() const {
  return level_;
}
inline void RankInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// required string name = 3;
inline bool RankInfo::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RankInfo::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RankInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RankInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RankInfo::name() const {
  return *name_;
}
inline void RankInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RankInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RankInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RankInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* RankInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string head = 4;
inline bool RankInfo::has_head() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RankInfo::set_has_head() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RankInfo::clear_has_head() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RankInfo::clear_head() {
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    head_->clear();
  }
  clear_has_head();
}
inline const ::std::string& RankInfo::head() const {
  return *head_;
}
inline void RankInfo::set_head(const ::std::string& value) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(value);
}
inline void RankInfo::set_head(const char* value) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(value);
}
inline void RankInfo::set_head(const char* value, size_t size) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RankInfo::mutable_head() {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  return head_;
}
inline ::std::string* RankInfo::release_head() {
  clear_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = head_;
    head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 headFrame = 5;
inline bool RankInfo::has_headframe() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RankInfo::set_has_headframe() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RankInfo::clear_has_headframe() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RankInfo::clear_headframe() {
  headframe_ = 0;
  clear_has_headframe();
}
inline ::google::protobuf::int32 RankInfo::headframe() const {
  return headframe_;
}
inline void RankInfo::set_headframe(::google::protobuf::int32 value) {
  set_has_headframe();
  headframe_ = value;
}

// required int32 winTime = 6;
inline bool RankInfo::has_wintime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RankInfo::set_has_wintime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RankInfo::clear_has_wintime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RankInfo::clear_wintime() {
  wintime_ = 0;
  clear_has_wintime();
}
inline ::google::protobuf::int32 RankInfo::wintime() const {
  return wintime_;
}
inline void RankInfo::set_wintime(::google::protobuf::int32 value) {
  set_has_wintime();
  wintime_ = value;
}

// -------------------------------------------------------------------

// RecordReply

// repeated .protobuf.guild.Record records = 1;
inline int RecordReply::records_size() const {
  return records_.size();
}
inline void RecordReply::clear_records() {
  records_.Clear();
}
inline const ::protobuf::guild::Record& RecordReply::records(int index) const {
  return records_.Get(index);
}
inline ::protobuf::guild::Record* RecordReply::mutable_records(int index) {
  return records_.Mutable(index);
}
inline ::protobuf::guild::Record* RecordReply::add_records() {
  return records_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::guild::Record >&
RecordReply::records() const {
  return records_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::guild::Record >*
RecordReply::mutable_records() {
  return &records_;
}

// -------------------------------------------------------------------

// Record

// required string id = 1;
inline bool Record::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Record::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Record::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Record::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& Record::id() const {
  return *id_;
}
inline void Record::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Record::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Record::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Record::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* Record::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string serverName = 2;
inline bool Record::has_servername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Record::set_has_servername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Record::clear_has_servername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Record::clear_servername() {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    servername_->clear();
  }
  clear_has_servername();
}
inline const ::std::string& Record::servername() const {
  return *servername_;
}
inline void Record::set_servername(const ::std::string& value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
}
inline void Record::set_servername(const char* value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
}
inline void Record::set_servername(const char* value, size_t size) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Record::mutable_servername() {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  return servername_;
}
inline ::std::string* Record::release_servername() {
  clear_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = servername_;
    servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string name = 3;
inline bool Record::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Record::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Record::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Record::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Record::name() const {
  return *name_;
}
inline void Record::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Record::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Record::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Record::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Record::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string icon = 4;
inline bool Record::has_icon() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Record::set_has_icon() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Record::clear_has_icon() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Record::clear_icon() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    icon_->clear();
  }
  clear_has_icon();
}
inline const ::std::string& Record::icon() const {
  return *icon_;
}
inline void Record::set_icon(const ::std::string& value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void Record::set_icon(const char* value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void Record::set_icon(const char* value, size_t size) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Record::mutable_icon() {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  return icon_;
}
inline ::std::string* Record::release_icon() {
  clear_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = icon_;
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 score = 5;
inline bool Record::has_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Record::set_has_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Record::clear_has_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Record::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 Record::score() const {
  return score_;
}
inline void Record::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// required int64 time = 6;
inline bool Record::has_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Record::set_has_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Record::clear_has_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Record::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 Record::time() const {
  return time_;
}
inline void Record::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// required bool isWin = 7;
inline bool Record::has_iswin() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Record::set_has_iswin() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Record::clear_has_iswin() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Record::clear_iswin() {
  iswin_ = false;
  clear_has_iswin();
}
inline bool Record::iswin() const {
  return iswin_;
}
inline void Record::set_iswin(bool value) {
  set_has_iswin();
  iswin_ = value;
}

// -------------------------------------------------------------------

// ChatRecord

// required string id = 1;
inline bool ChatRecord::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatRecord::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatRecord::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatRecord::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& ChatRecord::id() const {
  return *id_;
}
inline void ChatRecord::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void ChatRecord::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void ChatRecord::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChatRecord::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* ChatRecord::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string atServerName = 2;
inline bool ChatRecord::has_atservername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatRecord::set_has_atservername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatRecord::clear_has_atservername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatRecord::clear_atservername() {
  if (atservername_ != &::google::protobuf::internal::kEmptyString) {
    atservername_->clear();
  }
  clear_has_atservername();
}
inline const ::std::string& ChatRecord::atservername() const {
  return *atservername_;
}
inline void ChatRecord::set_atservername(const ::std::string& value) {
  set_has_atservername();
  if (atservername_ == &::google::protobuf::internal::kEmptyString) {
    atservername_ = new ::std::string;
  }
  atservername_->assign(value);
}
inline void ChatRecord::set_atservername(const char* value) {
  set_has_atservername();
  if (atservername_ == &::google::protobuf::internal::kEmptyString) {
    atservername_ = new ::std::string;
  }
  atservername_->assign(value);
}
inline void ChatRecord::set_atservername(const char* value, size_t size) {
  set_has_atservername();
  if (atservername_ == &::google::protobuf::internal::kEmptyString) {
    atservername_ = new ::std::string;
  }
  atservername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChatRecord::mutable_atservername() {
  set_has_atservername();
  if (atservername_ == &::google::protobuf::internal::kEmptyString) {
    atservername_ = new ::std::string;
  }
  return atservername_;
}
inline ::std::string* ChatRecord::release_atservername() {
  clear_has_atservername();
  if (atservername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = atservername_;
    atservername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string atName = 3;
inline bool ChatRecord::has_atname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatRecord::set_has_atname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatRecord::clear_has_atname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatRecord::clear_atname() {
  if (atname_ != &::google::protobuf::internal::kEmptyString) {
    atname_->clear();
  }
  clear_has_atname();
}
inline const ::std::string& ChatRecord::atname() const {
  return *atname_;
}
inline void ChatRecord::set_atname(const ::std::string& value) {
  set_has_atname();
  if (atname_ == &::google::protobuf::internal::kEmptyString) {
    atname_ = new ::std::string;
  }
  atname_->assign(value);
}
inline void ChatRecord::set_atname(const char* value) {
  set_has_atname();
  if (atname_ == &::google::protobuf::internal::kEmptyString) {
    atname_ = new ::std::string;
  }
  atname_->assign(value);
}
inline void ChatRecord::set_atname(const char* value, size_t size) {
  set_has_atname();
  if (atname_ == &::google::protobuf::internal::kEmptyString) {
    atname_ = new ::std::string;
  }
  atname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChatRecord::mutable_atname() {
  set_has_atname();
  if (atname_ == &::google::protobuf::internal::kEmptyString) {
    atname_ = new ::std::string;
  }
  return atname_;
}
inline ::std::string* ChatRecord::release_atname() {
  clear_has_atname();
  if (atname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = atname_;
    atname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string atIcon = 4;
inline bool ChatRecord::has_aticon() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChatRecord::set_has_aticon() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChatRecord::clear_has_aticon() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChatRecord::clear_aticon() {
  if (aticon_ != &::google::protobuf::internal::kEmptyString) {
    aticon_->clear();
  }
  clear_has_aticon();
}
inline const ::std::string& ChatRecord::aticon() const {
  return *aticon_;
}
inline void ChatRecord::set_aticon(const ::std::string& value) {
  set_has_aticon();
  if (aticon_ == &::google::protobuf::internal::kEmptyString) {
    aticon_ = new ::std::string;
  }
  aticon_->assign(value);
}
inline void ChatRecord::set_aticon(const char* value) {
  set_has_aticon();
  if (aticon_ == &::google::protobuf::internal::kEmptyString) {
    aticon_ = new ::std::string;
  }
  aticon_->assign(value);
}
inline void ChatRecord::set_aticon(const char* value, size_t size) {
  set_has_aticon();
  if (aticon_ == &::google::protobuf::internal::kEmptyString) {
    aticon_ = new ::std::string;
  }
  aticon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChatRecord::mutable_aticon() {
  set_has_aticon();
  if (aticon_ == &::google::protobuf::internal::kEmptyString) {
    aticon_ = new ::std::string;
  }
  return aticon_;
}
inline ::std::string* ChatRecord::release_aticon() {
  clear_has_aticon();
  if (aticon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = aticon_;
    aticon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string deServerName = 5;
inline bool ChatRecord::has_deservername() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChatRecord::set_has_deservername() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChatRecord::clear_has_deservername() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChatRecord::clear_deservername() {
  if (deservername_ != &::google::protobuf::internal::kEmptyString) {
    deservername_->clear();
  }
  clear_has_deservername();
}
inline const ::std::string& ChatRecord::deservername() const {
  return *deservername_;
}
inline void ChatRecord::set_deservername(const ::std::string& value) {
  set_has_deservername();
  if (deservername_ == &::google::protobuf::internal::kEmptyString) {
    deservername_ = new ::std::string;
  }
  deservername_->assign(value);
}
inline void ChatRecord::set_deservername(const char* value) {
  set_has_deservername();
  if (deservername_ == &::google::protobuf::internal::kEmptyString) {
    deservername_ = new ::std::string;
  }
  deservername_->assign(value);
}
inline void ChatRecord::set_deservername(const char* value, size_t size) {
  set_has_deservername();
  if (deservername_ == &::google::protobuf::internal::kEmptyString) {
    deservername_ = new ::std::string;
  }
  deservername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChatRecord::mutable_deservername() {
  set_has_deservername();
  if (deservername_ == &::google::protobuf::internal::kEmptyString) {
    deservername_ = new ::std::string;
  }
  return deservername_;
}
inline ::std::string* ChatRecord::release_deservername() {
  clear_has_deservername();
  if (deservername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = deservername_;
    deservername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string deName = 6;
inline bool ChatRecord::has_dename() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChatRecord::set_has_dename() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChatRecord::clear_has_dename() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChatRecord::clear_dename() {
  if (dename_ != &::google::protobuf::internal::kEmptyString) {
    dename_->clear();
  }
  clear_has_dename();
}
inline const ::std::string& ChatRecord::dename() const {
  return *dename_;
}
inline void ChatRecord::set_dename(const ::std::string& value) {
  set_has_dename();
  if (dename_ == &::google::protobuf::internal::kEmptyString) {
    dename_ = new ::std::string;
  }
  dename_->assign(value);
}
inline void ChatRecord::set_dename(const char* value) {
  set_has_dename();
  if (dename_ == &::google::protobuf::internal::kEmptyString) {
    dename_ = new ::std::string;
  }
  dename_->assign(value);
}
inline void ChatRecord::set_dename(const char* value, size_t size) {
  set_has_dename();
  if (dename_ == &::google::protobuf::internal::kEmptyString) {
    dename_ = new ::std::string;
  }
  dename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChatRecord::mutable_dename() {
  set_has_dename();
  if (dename_ == &::google::protobuf::internal::kEmptyString) {
    dename_ = new ::std::string;
  }
  return dename_;
}
inline ::std::string* ChatRecord::release_dename() {
  clear_has_dename();
  if (dename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dename_;
    dename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string deIcon = 7;
inline bool ChatRecord::has_deicon() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChatRecord::set_has_deicon() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ChatRecord::clear_has_deicon() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ChatRecord::clear_deicon() {
  if (deicon_ != &::google::protobuf::internal::kEmptyString) {
    deicon_->clear();
  }
  clear_has_deicon();
}
inline const ::std::string& ChatRecord::deicon() const {
  return *deicon_;
}
inline void ChatRecord::set_deicon(const ::std::string& value) {
  set_has_deicon();
  if (deicon_ == &::google::protobuf::internal::kEmptyString) {
    deicon_ = new ::std::string;
  }
  deicon_->assign(value);
}
inline void ChatRecord::set_deicon(const char* value) {
  set_has_deicon();
  if (deicon_ == &::google::protobuf::internal::kEmptyString) {
    deicon_ = new ::std::string;
  }
  deicon_->assign(value);
}
inline void ChatRecord::set_deicon(const char* value, size_t size) {
  set_has_deicon();
  if (deicon_ == &::google::protobuf::internal::kEmptyString) {
    deicon_ = new ::std::string;
  }
  deicon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChatRecord::mutable_deicon() {
  set_has_deicon();
  if (deicon_ == &::google::protobuf::internal::kEmptyString) {
    deicon_ = new ::std::string;
  }
  return deicon_;
}
inline ::std::string* ChatRecord::release_deicon() {
  clear_has_deicon();
  if (deicon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = deicon_;
    deicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 score = 8;
inline bool ChatRecord::has_score() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ChatRecord::set_has_score() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ChatRecord::clear_has_score() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ChatRecord::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 ChatRecord::score() const {
  return score_;
}
inline void ChatRecord::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// required int64 time = 9;
inline bool ChatRecord::has_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ChatRecord::set_has_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ChatRecord::clear_has_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ChatRecord::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 ChatRecord::time() const {
  return time_;
}
inline void ChatRecord::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// required bool isWin = 10;
inline bool ChatRecord::has_iswin() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ChatRecord::set_has_iswin() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ChatRecord::clear_has_iswin() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ChatRecord::clear_iswin() {
  iswin_ = false;
  clear_has_iswin();
}
inline bool ChatRecord::iswin() const {
  return iswin_;
}
inline void ChatRecord::set_iswin(bool value) {
  set_has_iswin();
  iswin_ = value;
}

// required int32 winTime = 11;
inline bool ChatRecord::has_wintime() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ChatRecord::set_has_wintime() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ChatRecord::clear_has_wintime() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ChatRecord::clear_wintime() {
  wintime_ = 0;
  clear_has_wintime();
}
inline ::google::protobuf::int32 ChatRecord::wintime() const {
  return wintime_;
}
inline void ChatRecord::set_wintime(::google::protobuf::int32 value) {
  set_has_wintime();
  wintime_ = value;
}

// required int32 failTime = 12;
inline bool ChatRecord::has_failtime() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ChatRecord::set_has_failtime() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ChatRecord::clear_has_failtime() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ChatRecord::clear_failtime() {
  failtime_ = 0;
  clear_has_failtime();
}
inline ::google::protobuf::int32 ChatRecord::failtime() const {
  return failtime_;
}
inline void ChatRecord::set_failtime(::google::protobuf::int32 value) {
  set_has_failtime();
  failtime_ = value;
}

// -------------------------------------------------------------------

// SetLineup

// repeated string ids = 1;
inline int SetLineup::ids_size() const {
  return ids_.size();
}
inline void SetLineup::clear_ids() {
  ids_.Clear();
}
inline const ::std::string& SetLineup::ids(int index) const {
  return ids_.Get(index);
}
inline ::std::string* SetLineup::mutable_ids(int index) {
  return ids_.Mutable(index);
}
inline void SetLineup::set_ids(int index, const ::std::string& value) {
  ids_.Mutable(index)->assign(value);
}
inline void SetLineup::set_ids(int index, const char* value) {
  ids_.Mutable(index)->assign(value);
}
inline void SetLineup::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SetLineup::add_ids() {
  return ids_.Add();
}
inline void SetLineup::add_ids(const ::std::string& value) {
  ids_.Add()->assign(value);
}
inline void SetLineup::add_ids(const char* value) {
  ids_.Add()->assign(value);
}
inline void SetLineup::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SetLineup::ids() const {
  return ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SetLineup::mutable_ids() {
  return &ids_;
}

// repeated string hides = 2;
inline int SetLineup::hides_size() const {
  return hides_.size();
}
inline void SetLineup::clear_hides() {
  hides_.Clear();
}
inline const ::std::string& SetLineup::hides(int index) const {
  return hides_.Get(index);
}
inline ::std::string* SetLineup::mutable_hides(int index) {
  return hides_.Mutable(index);
}
inline void SetLineup::set_hides(int index, const ::std::string& value) {
  hides_.Mutable(index)->assign(value);
}
inline void SetLineup::set_hides(int index, const char* value) {
  hides_.Mutable(index)->assign(value);
}
inline void SetLineup::set_hides(int index, const char* value, size_t size) {
  hides_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SetLineup::add_hides() {
  return hides_.Add();
}
inline void SetLineup::add_hides(const ::std::string& value) {
  hides_.Add()->assign(value);
}
inline void SetLineup::add_hides(const char* value) {
  hides_.Add()->assign(value);
}
inline void SetLineup::add_hides(const char* value, size_t size) {
  hides_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SetLineup::hides() const {
  return hides_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SetLineup::mutable_hides() {
  return &hides_;
}

// -------------------------------------------------------------------

// RecordDetailReply

// repeated .protobuf.guild.RecordDetail records = 1;
inline int RecordDetailReply::records_size() const {
  return records_.size();
}
inline void RecordDetailReply::clear_records() {
  records_.Clear();
}
inline const ::protobuf::guild::RecordDetail& RecordDetailReply::records(int index) const {
  return records_.Get(index);
}
inline ::protobuf::guild::RecordDetail* RecordDetailReply::mutable_records(int index) {
  return records_.Mutable(index);
}
inline ::protobuf::guild::RecordDetail* RecordDetailReply::add_records() {
  return records_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::guild::RecordDetail >&
RecordDetailReply::records() const {
  return records_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::guild::RecordDetail >*
RecordDetailReply::mutable_records() {
  return &records_;
}

// -------------------------------------------------------------------

// RecordDetail

// required string id = 1;
inline bool RecordDetail::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecordDetail::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecordDetail::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecordDetail::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& RecordDetail::id() const {
  return *id_;
}
inline void RecordDetail::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void RecordDetail::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void RecordDetail::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecordDetail::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* RecordDetail::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 atLv = 2;
inline bool RecordDetail::has_atlv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecordDetail::set_has_atlv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecordDetail::clear_has_atlv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecordDetail::clear_atlv() {
  atlv_ = 0;
  clear_has_atlv();
}
inline ::google::protobuf::int32 RecordDetail::atlv() const {
  return atlv_;
}
inline void RecordDetail::set_atlv(::google::protobuf::int32 value) {
  set_has_atlv();
  atlv_ = value;
}

// required string atName = 3;
inline bool RecordDetail::has_atname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RecordDetail::set_has_atname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RecordDetail::clear_has_atname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RecordDetail::clear_atname() {
  if (atname_ != &::google::protobuf::internal::kEmptyString) {
    atname_->clear();
  }
  clear_has_atname();
}
inline const ::std::string& RecordDetail::atname() const {
  return *atname_;
}
inline void RecordDetail::set_atname(const ::std::string& value) {
  set_has_atname();
  if (atname_ == &::google::protobuf::internal::kEmptyString) {
    atname_ = new ::std::string;
  }
  atname_->assign(value);
}
inline void RecordDetail::set_atname(const char* value) {
  set_has_atname();
  if (atname_ == &::google::protobuf::internal::kEmptyString) {
    atname_ = new ::std::string;
  }
  atname_->assign(value);
}
inline void RecordDetail::set_atname(const char* value, size_t size) {
  set_has_atname();
  if (atname_ == &::google::protobuf::internal::kEmptyString) {
    atname_ = new ::std::string;
  }
  atname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecordDetail::mutable_atname() {
  set_has_atname();
  if (atname_ == &::google::protobuf::internal::kEmptyString) {
    atname_ = new ::std::string;
  }
  return atname_;
}
inline ::std::string* RecordDetail::release_atname() {
  clear_has_atname();
  if (atname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = atname_;
    atname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string atHead = 4;
inline bool RecordDetail::has_athead() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RecordDetail::set_has_athead() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RecordDetail::clear_has_athead() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RecordDetail::clear_athead() {
  if (athead_ != &::google::protobuf::internal::kEmptyString) {
    athead_->clear();
  }
  clear_has_athead();
}
inline const ::std::string& RecordDetail::athead() const {
  return *athead_;
}
inline void RecordDetail::set_athead(const ::std::string& value) {
  set_has_athead();
  if (athead_ == &::google::protobuf::internal::kEmptyString) {
    athead_ = new ::std::string;
  }
  athead_->assign(value);
}
inline void RecordDetail::set_athead(const char* value) {
  set_has_athead();
  if (athead_ == &::google::protobuf::internal::kEmptyString) {
    athead_ = new ::std::string;
  }
  athead_->assign(value);
}
inline void RecordDetail::set_athead(const char* value, size_t size) {
  set_has_athead();
  if (athead_ == &::google::protobuf::internal::kEmptyString) {
    athead_ = new ::std::string;
  }
  athead_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecordDetail::mutable_athead() {
  set_has_athead();
  if (athead_ == &::google::protobuf::internal::kEmptyString) {
    athead_ = new ::std::string;
  }
  return athead_;
}
inline ::std::string* RecordDetail::release_athead() {
  clear_has_athead();
  if (athead_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = athead_;
    athead_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 atHeadFrame = 5;
inline bool RecordDetail::has_atheadframe() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RecordDetail::set_has_atheadframe() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RecordDetail::clear_has_atheadframe() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RecordDetail::clear_atheadframe() {
  atheadframe_ = 0;
  clear_has_atheadframe();
}
inline ::google::protobuf::int32 RecordDetail::atheadframe() const {
  return atheadframe_;
}
inline void RecordDetail::set_atheadframe(::google::protobuf::int32 value) {
  set_has_atheadframe();
  atheadframe_ = value;
}

// required int32 deLv = 6;
inline bool RecordDetail::has_delv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RecordDetail::set_has_delv() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RecordDetail::clear_has_delv() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RecordDetail::clear_delv() {
  delv_ = 0;
  clear_has_delv();
}
inline ::google::protobuf::int32 RecordDetail::delv() const {
  return delv_;
}
inline void RecordDetail::set_delv(::google::protobuf::int32 value) {
  set_has_delv();
  delv_ = value;
}

// required string deName = 7;
inline bool RecordDetail::has_dename() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RecordDetail::set_has_dename() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RecordDetail::clear_has_dename() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RecordDetail::clear_dename() {
  if (dename_ != &::google::protobuf::internal::kEmptyString) {
    dename_->clear();
  }
  clear_has_dename();
}
inline const ::std::string& RecordDetail::dename() const {
  return *dename_;
}
inline void RecordDetail::set_dename(const ::std::string& value) {
  set_has_dename();
  if (dename_ == &::google::protobuf::internal::kEmptyString) {
    dename_ = new ::std::string;
  }
  dename_->assign(value);
}
inline void RecordDetail::set_dename(const char* value) {
  set_has_dename();
  if (dename_ == &::google::protobuf::internal::kEmptyString) {
    dename_ = new ::std::string;
  }
  dename_->assign(value);
}
inline void RecordDetail::set_dename(const char* value, size_t size) {
  set_has_dename();
  if (dename_ == &::google::protobuf::internal::kEmptyString) {
    dename_ = new ::std::string;
  }
  dename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecordDetail::mutable_dename() {
  set_has_dename();
  if (dename_ == &::google::protobuf::internal::kEmptyString) {
    dename_ = new ::std::string;
  }
  return dename_;
}
inline ::std::string* RecordDetail::release_dename() {
  clear_has_dename();
  if (dename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dename_;
    dename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string deHead = 8;
inline bool RecordDetail::has_dehead() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RecordDetail::set_has_dehead() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RecordDetail::clear_has_dehead() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RecordDetail::clear_dehead() {
  if (dehead_ != &::google::protobuf::internal::kEmptyString) {
    dehead_->clear();
  }
  clear_has_dehead();
}
inline const ::std::string& RecordDetail::dehead() const {
  return *dehead_;
}
inline void RecordDetail::set_dehead(const ::std::string& value) {
  set_has_dehead();
  if (dehead_ == &::google::protobuf::internal::kEmptyString) {
    dehead_ = new ::std::string;
  }
  dehead_->assign(value);
}
inline void RecordDetail::set_dehead(const char* value) {
  set_has_dehead();
  if (dehead_ == &::google::protobuf::internal::kEmptyString) {
    dehead_ = new ::std::string;
  }
  dehead_->assign(value);
}
inline void RecordDetail::set_dehead(const char* value, size_t size) {
  set_has_dehead();
  if (dehead_ == &::google::protobuf::internal::kEmptyString) {
    dehead_ = new ::std::string;
  }
  dehead_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecordDetail::mutable_dehead() {
  set_has_dehead();
  if (dehead_ == &::google::protobuf::internal::kEmptyString) {
    dehead_ = new ::std::string;
  }
  return dehead_;
}
inline ::std::string* RecordDetail::release_dehead() {
  clear_has_dehead();
  if (dehead_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dehead_;
    dehead_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 deHeadFrame = 9;
inline bool RecordDetail::has_deheadframe() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RecordDetail::set_has_deheadframe() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RecordDetail::clear_has_deheadframe() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RecordDetail::clear_deheadframe() {
  deheadframe_ = 0;
  clear_has_deheadframe();
}
inline ::google::protobuf::int32 RecordDetail::deheadframe() const {
  return deheadframe_;
}
inline void RecordDetail::set_deheadframe(::google::protobuf::int32 value) {
  set_has_deheadframe();
  deheadframe_ = value;
}

// required bool atIsWin = 10;
inline bool RecordDetail::has_atiswin() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RecordDetail::set_has_atiswin() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RecordDetail::clear_has_atiswin() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RecordDetail::clear_atiswin() {
  atiswin_ = false;
  clear_has_atiswin();
}
inline bool RecordDetail::atiswin() const {
  return atiswin_;
}
inline void RecordDetail::set_atiswin(bool value) {
  set_has_atiswin();
  atiswin_ = value;
}

// repeated .protobuf.guild.HeroShow atHeros = 11;
inline int RecordDetail::atheros_size() const {
  return atheros_.size();
}
inline void RecordDetail::clear_atheros() {
  atheros_.Clear();
}
inline const ::protobuf::guild::HeroShow& RecordDetail::atheros(int index) const {
  return atheros_.Get(index);
}
inline ::protobuf::guild::HeroShow* RecordDetail::mutable_atheros(int index) {
  return atheros_.Mutable(index);
}
inline ::protobuf::guild::HeroShow* RecordDetail::add_atheros() {
  return atheros_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::guild::HeroShow >&
RecordDetail::atheros() const {
  return atheros_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::guild::HeroShow >*
RecordDetail::mutable_atheros() {
  return &atheros_;
}

// repeated .protobuf.guild.HeroShow deHeros = 12;
inline int RecordDetail::deheros_size() const {
  return deheros_.size();
}
inline void RecordDetail::clear_deheros() {
  deheros_.Clear();
}
inline const ::protobuf::guild::HeroShow& RecordDetail::deheros(int index) const {
  return deheros_.Get(index);
}
inline ::protobuf::guild::HeroShow* RecordDetail::mutable_deheros(int index) {
  return deheros_.Mutable(index);
}
inline ::protobuf::guild::HeroShow* RecordDetail::add_deheros() {
  return deheros_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::guild::HeroShow >&
RecordDetail::deheros() const {
  return deheros_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::guild::HeroShow >*
RecordDetail::mutable_deheros() {
  return &deheros_;
}

// -------------------------------------------------------------------

// HeroShow

// required int32 index = 1;
inline bool HeroShow::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeroShow::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeroShow::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeroShow::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 HeroShow::index() const {
  return index_;
}
inline void HeroShow::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// required int32 id = 2;
inline bool HeroShow::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeroShow::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeroShow::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeroShow::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 HeroShow::id() const {
  return id_;
}
inline void HeroShow::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 lv = 3;
inline bool HeroShow::has_lv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HeroShow::set_has_lv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HeroShow::clear_has_lv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HeroShow::clear_lv() {
  lv_ = 0;
  clear_has_lv();
}
inline ::google::protobuf::int32 HeroShow::lv() const {
  return lv_;
}
inline void HeroShow::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
}

// required bool isDie = 4;
inline bool HeroShow::has_isdie() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HeroShow::set_has_isdie() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HeroShow::clear_has_isdie() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HeroShow::clear_isdie() {
  isdie_ = false;
  clear_has_isdie();
}
inline bool HeroShow::isdie() const {
  return isdie_;
}
inline void HeroShow::set_isdie(bool value) {
  set_has_isdie();
  isdie_ = value;
}

// -------------------------------------------------------------------

// FinalRecord

// required string atServerName = 1;
inline bool FinalRecord::has_atservername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FinalRecord::set_has_atservername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FinalRecord::clear_has_atservername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FinalRecord::clear_atservername() {
  if (atservername_ != &::google::protobuf::internal::kEmptyString) {
    atservername_->clear();
  }
  clear_has_atservername();
}
inline const ::std::string& FinalRecord::atservername() const {
  return *atservername_;
}
inline void FinalRecord::set_atservername(const ::std::string& value) {
  set_has_atservername();
  if (atservername_ == &::google::protobuf::internal::kEmptyString) {
    atservername_ = new ::std::string;
  }
  atservername_->assign(value);
}
inline void FinalRecord::set_atservername(const char* value) {
  set_has_atservername();
  if (atservername_ == &::google::protobuf::internal::kEmptyString) {
    atservername_ = new ::std::string;
  }
  atservername_->assign(value);
}
inline void FinalRecord::set_atservername(const char* value, size_t size) {
  set_has_atservername();
  if (atservername_ == &::google::protobuf::internal::kEmptyString) {
    atservername_ = new ::std::string;
  }
  atservername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FinalRecord::mutable_atservername() {
  set_has_atservername();
  if (atservername_ == &::google::protobuf::internal::kEmptyString) {
    atservername_ = new ::std::string;
  }
  return atservername_;
}
inline ::std::string* FinalRecord::release_atservername() {
  clear_has_atservername();
  if (atservername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = atservername_;
    atservername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string atName = 2;
inline bool FinalRecord::has_atname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FinalRecord::set_has_atname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FinalRecord::clear_has_atname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FinalRecord::clear_atname() {
  if (atname_ != &::google::protobuf::internal::kEmptyString) {
    atname_->clear();
  }
  clear_has_atname();
}
inline const ::std::string& FinalRecord::atname() const {
  return *atname_;
}
inline void FinalRecord::set_atname(const ::std::string& value) {
  set_has_atname();
  if (atname_ == &::google::protobuf::internal::kEmptyString) {
    atname_ = new ::std::string;
  }
  atname_->assign(value);
}
inline void FinalRecord::set_atname(const char* value) {
  set_has_atname();
  if (atname_ == &::google::protobuf::internal::kEmptyString) {
    atname_ = new ::std::string;
  }
  atname_->assign(value);
}
inline void FinalRecord::set_atname(const char* value, size_t size) {
  set_has_atname();
  if (atname_ == &::google::protobuf::internal::kEmptyString) {
    atname_ = new ::std::string;
  }
  atname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FinalRecord::mutable_atname() {
  set_has_atname();
  if (atname_ == &::google::protobuf::internal::kEmptyString) {
    atname_ = new ::std::string;
  }
  return atname_;
}
inline ::std::string* FinalRecord::release_atname() {
  clear_has_atname();
  if (atname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = atname_;
    atname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string atIcon = 3;
inline bool FinalRecord::has_aticon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FinalRecord::set_has_aticon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FinalRecord::clear_has_aticon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FinalRecord::clear_aticon() {
  if (aticon_ != &::google::protobuf::internal::kEmptyString) {
    aticon_->clear();
  }
  clear_has_aticon();
}
inline const ::std::string& FinalRecord::aticon() const {
  return *aticon_;
}
inline void FinalRecord::set_aticon(const ::std::string& value) {
  set_has_aticon();
  if (aticon_ == &::google::protobuf::internal::kEmptyString) {
    aticon_ = new ::std::string;
  }
  aticon_->assign(value);
}
inline void FinalRecord::set_aticon(const char* value) {
  set_has_aticon();
  if (aticon_ == &::google::protobuf::internal::kEmptyString) {
    aticon_ = new ::std::string;
  }
  aticon_->assign(value);
}
inline void FinalRecord::set_aticon(const char* value, size_t size) {
  set_has_aticon();
  if (aticon_ == &::google::protobuf::internal::kEmptyString) {
    aticon_ = new ::std::string;
  }
  aticon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FinalRecord::mutable_aticon() {
  set_has_aticon();
  if (aticon_ == &::google::protobuf::internal::kEmptyString) {
    aticon_ = new ::std::string;
  }
  return aticon_;
}
inline ::std::string* FinalRecord::release_aticon() {
  clear_has_aticon();
  if (aticon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = aticon_;
    aticon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string deServerName = 4;
inline bool FinalRecord::has_deservername() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FinalRecord::set_has_deservername() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FinalRecord::clear_has_deservername() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FinalRecord::clear_deservername() {
  if (deservername_ != &::google::protobuf::internal::kEmptyString) {
    deservername_->clear();
  }
  clear_has_deservername();
}
inline const ::std::string& FinalRecord::deservername() const {
  return *deservername_;
}
inline void FinalRecord::set_deservername(const ::std::string& value) {
  set_has_deservername();
  if (deservername_ == &::google::protobuf::internal::kEmptyString) {
    deservername_ = new ::std::string;
  }
  deservername_->assign(value);
}
inline void FinalRecord::set_deservername(const char* value) {
  set_has_deservername();
  if (deservername_ == &::google::protobuf::internal::kEmptyString) {
    deservername_ = new ::std::string;
  }
  deservername_->assign(value);
}
inline void FinalRecord::set_deservername(const char* value, size_t size) {
  set_has_deservername();
  if (deservername_ == &::google::protobuf::internal::kEmptyString) {
    deservername_ = new ::std::string;
  }
  deservername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FinalRecord::mutable_deservername() {
  set_has_deservername();
  if (deservername_ == &::google::protobuf::internal::kEmptyString) {
    deservername_ = new ::std::string;
  }
  return deservername_;
}
inline ::std::string* FinalRecord::release_deservername() {
  clear_has_deservername();
  if (deservername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = deservername_;
    deservername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string deName = 5;
inline bool FinalRecord::has_dename() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FinalRecord::set_has_dename() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FinalRecord::clear_has_dename() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FinalRecord::clear_dename() {
  if (dename_ != &::google::protobuf::internal::kEmptyString) {
    dename_->clear();
  }
  clear_has_dename();
}
inline const ::std::string& FinalRecord::dename() const {
  return *dename_;
}
inline void FinalRecord::set_dename(const ::std::string& value) {
  set_has_dename();
  if (dename_ == &::google::protobuf::internal::kEmptyString) {
    dename_ = new ::std::string;
  }
  dename_->assign(value);
}
inline void FinalRecord::set_dename(const char* value) {
  set_has_dename();
  if (dename_ == &::google::protobuf::internal::kEmptyString) {
    dename_ = new ::std::string;
  }
  dename_->assign(value);
}
inline void FinalRecord::set_dename(const char* value, size_t size) {
  set_has_dename();
  if (dename_ == &::google::protobuf::internal::kEmptyString) {
    dename_ = new ::std::string;
  }
  dename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FinalRecord::mutable_dename() {
  set_has_dename();
  if (dename_ == &::google::protobuf::internal::kEmptyString) {
    dename_ = new ::std::string;
  }
  return dename_;
}
inline ::std::string* FinalRecord::release_dename() {
  clear_has_dename();
  if (dename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dename_;
    dename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string deIcon = 6;
inline bool FinalRecord::has_deicon() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FinalRecord::set_has_deicon() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FinalRecord::clear_has_deicon() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FinalRecord::clear_deicon() {
  if (deicon_ != &::google::protobuf::internal::kEmptyString) {
    deicon_->clear();
  }
  clear_has_deicon();
}
inline const ::std::string& FinalRecord::deicon() const {
  return *deicon_;
}
inline void FinalRecord::set_deicon(const ::std::string& value) {
  set_has_deicon();
  if (deicon_ == &::google::protobuf::internal::kEmptyString) {
    deicon_ = new ::std::string;
  }
  deicon_->assign(value);
}
inline void FinalRecord::set_deicon(const char* value) {
  set_has_deicon();
  if (deicon_ == &::google::protobuf::internal::kEmptyString) {
    deicon_ = new ::std::string;
  }
  deicon_->assign(value);
}
inline void FinalRecord::set_deicon(const char* value, size_t size) {
  set_has_deicon();
  if (deicon_ == &::google::protobuf::internal::kEmptyString) {
    deicon_ = new ::std::string;
  }
  deicon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FinalRecord::mutable_deicon() {
  set_has_deicon();
  if (deicon_ == &::google::protobuf::internal::kEmptyString) {
    deicon_ = new ::std::string;
  }
  return deicon_;
}
inline ::std::string* FinalRecord::release_deicon() {
  clear_has_deicon();
  if (deicon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = deicon_;
    deicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bool isWin = 7;
inline bool FinalRecord::has_iswin() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FinalRecord::set_has_iswin() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FinalRecord::clear_has_iswin() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FinalRecord::clear_iswin() {
  iswin_ = false;
  clear_has_iswin();
}
inline bool FinalRecord::iswin() const {
  return iswin_;
}
inline void FinalRecord::set_iswin(bool value) {
  set_has_iswin();
  iswin_ = value;
}

// repeated .protobuf.guild.RecordDetail records = 8;
inline int FinalRecord::records_size() const {
  return records_.size();
}
inline void FinalRecord::clear_records() {
  records_.Clear();
}
inline const ::protobuf::guild::RecordDetail& FinalRecord::records(int index) const {
  return records_.Get(index);
}
inline ::protobuf::guild::RecordDetail* FinalRecord::mutable_records(int index) {
  return records_.Mutable(index);
}
inline ::protobuf::guild::RecordDetail* FinalRecord::add_records() {
  return records_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::guild::RecordDetail >&
FinalRecord::records() const {
  return records_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::guild::RecordDetail >*
FinalRecord::mutable_records() {
  return &records_;
}

// -------------------------------------------------------------------

// FinalGuildShow

// required string id = 1;
inline bool FinalGuildShow::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FinalGuildShow::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FinalGuildShow::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FinalGuildShow::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& FinalGuildShow::id() const {
  return *id_;
}
inline void FinalGuildShow::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void FinalGuildShow::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void FinalGuildShow::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FinalGuildShow::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* FinalGuildShow::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string name = 2;
inline bool FinalGuildShow::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FinalGuildShow::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FinalGuildShow::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FinalGuildShow::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FinalGuildShow::name() const {
  return *name_;
}
inline void FinalGuildShow::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FinalGuildShow::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FinalGuildShow::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FinalGuildShow::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FinalGuildShow::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string icon = 3;
inline bool FinalGuildShow::has_icon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FinalGuildShow::set_has_icon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FinalGuildShow::clear_has_icon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FinalGuildShow::clear_icon() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    icon_->clear();
  }
  clear_has_icon();
}
inline const ::std::string& FinalGuildShow::icon() const {
  return *icon_;
}
inline void FinalGuildShow::set_icon(const ::std::string& value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void FinalGuildShow::set_icon(const char* value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void FinalGuildShow::set_icon(const char* value, size_t size) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FinalGuildShow::mutable_icon() {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  return icon_;
}
inline ::std::string* FinalGuildShow::release_icon() {
  clear_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = icon_;
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string serverName = 4;
inline bool FinalGuildShow::has_servername() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FinalGuildShow::set_has_servername() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FinalGuildShow::clear_has_servername() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FinalGuildShow::clear_servername() {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    servername_->clear();
  }
  clear_has_servername();
}
inline const ::std::string& FinalGuildShow::servername() const {
  return *servername_;
}
inline void FinalGuildShow::set_servername(const ::std::string& value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
}
inline void FinalGuildShow::set_servername(const char* value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
}
inline void FinalGuildShow::set_servername(const char* value, size_t size) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FinalGuildShow::mutable_servername() {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  return servername_;
}
inline ::std::string* FinalGuildShow::release_servername() {
  clear_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = servername_;
    servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 rank = 5;
inline bool FinalGuildShow::has_rank() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FinalGuildShow::set_has_rank() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FinalGuildShow::clear_has_rank() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FinalGuildShow::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 FinalGuildShow::rank() const {
  return rank_;
}
inline void FinalGuildShow::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional int32 lastRank = 6;
inline bool FinalGuildShow::has_lastrank() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FinalGuildShow::set_has_lastrank() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FinalGuildShow::clear_has_lastrank() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FinalGuildShow::clear_lastrank() {
  lastrank_ = 0;
  clear_has_lastrank();
}
inline ::google::protobuf::int32 FinalGuildShow::lastrank() const {
  return lastrank_;
}
inline void FinalGuildShow::set_lastrank(::google::protobuf::int32 value) {
  set_has_lastrank();
  lastrank_ = value;
}

// optional int32 finalRank = 7;
inline bool FinalGuildShow::has_finalrank() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FinalGuildShow::set_has_finalrank() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FinalGuildShow::clear_has_finalrank() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FinalGuildShow::clear_finalrank() {
  finalrank_ = 0;
  clear_has_finalrank();
}
inline ::google::protobuf::int32 FinalGuildShow::finalrank() const {
  return finalrank_;
}
inline void FinalGuildShow::set_finalrank(::google::protobuf::int32 value) {
  set_has_finalrank();
  finalrank_ = value;
}

// -------------------------------------------------------------------

// EnterFinal

// required int32 state = 1;
inline bool EnterFinal::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EnterFinal::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EnterFinal::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EnterFinal::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 EnterFinal::state() const {
  return state_;
}
inline void EnterFinal::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional int64 time = 2;
inline bool EnterFinal::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EnterFinal::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EnterFinal::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EnterFinal::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 EnterFinal::time() const {
  return time_;
}
inline void EnterFinal::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// optional bool isRank = 3;
inline bool EnterFinal::has_isrank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EnterFinal::set_has_isrank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EnterFinal::clear_has_isrank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EnterFinal::clear_isrank() {
  isrank_ = false;
  clear_has_isrank();
}
inline bool EnterFinal::isrank() const {
  return isrank_;
}
inline void EnterFinal::set_isrank(bool value) {
  set_has_isrank();
  isrank_ = value;
}

// optional .protobuf.guild.Bet bet = 4;
inline bool EnterFinal::has_bet() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EnterFinal::set_has_bet() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EnterFinal::clear_has_bet() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EnterFinal::clear_bet() {
  if (bet_ != NULL) bet_->::protobuf::guild::Bet::Clear();
  clear_has_bet();
}
inline const ::protobuf::guild::Bet& EnterFinal::bet() const {
  return bet_ != NULL ? *bet_ : *default_instance_->bet_;
}
inline ::protobuf::guild::Bet* EnterFinal::mutable_bet() {
  set_has_bet();
  if (bet_ == NULL) bet_ = new ::protobuf::guild::Bet;
  return bet_;
}
inline ::protobuf::guild::Bet* EnterFinal::release_bet() {
  clear_has_bet();
  ::protobuf::guild::Bet* temp = bet_;
  bet_ = NULL;
  return temp;
}

// repeated .protobuf.guild.FinalGuildShow lineup = 5;
inline int EnterFinal::lineup_size() const {
  return lineup_.size();
}
inline void EnterFinal::clear_lineup() {
  lineup_.Clear();
}
inline const ::protobuf::guild::FinalGuildShow& EnterFinal::lineup(int index) const {
  return lineup_.Get(index);
}
inline ::protobuf::guild::FinalGuildShow* EnterFinal::mutable_lineup(int index) {
  return lineup_.Mutable(index);
}
inline ::protobuf::guild::FinalGuildShow* EnterFinal::add_lineup() {
  return lineup_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::guild::FinalGuildShow >&
EnterFinal::lineup() const {
  return lineup_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::guild::FinalGuildShow >*
EnterFinal::mutable_lineup() {
  return &lineup_;
}

// -------------------------------------------------------------------

// Bet

// required string id = 1;
inline bool Bet::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Bet::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Bet::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Bet::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& Bet::id() const {
  return *id_;
}
inline void Bet::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Bet::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Bet::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Bet::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* Bet::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 num = 2;
inline bool Bet::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Bet::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Bet::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Bet::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 Bet::num() const {
  return num_;
}
inline void Bet::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// required int32 rank = 3;
inline bool Bet::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Bet::set_has_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Bet::clear_has_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Bet::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 Bet::rank() const {
  return rank_;
}
inline void Bet::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// -------------------------------------------------------------------

// Box

// repeated .protobuf.common.KVint3264 items = 1;
inline int Box::items_size() const {
  return items_.size();
}
inline void Box::clear_items() {
  items_.Clear();
}
inline const ::protobuf::common::KVint3264& Box::items(int index) const {
  return items_.Get(index);
}
inline ::protobuf::common::KVint3264* Box::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::protobuf::common::KVint3264* Box::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 >&
Box::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 >*
Box::mutable_items() {
  return &items_;
}

// required int32 type = 2;
inline bool Box::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Box::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Box::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Box::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Box::type() const {
  return type_;
}
inline void Box::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required int32 rank = 3;
inline bool Box::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Box::set_has_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Box::clear_has_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Box::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 Box::rank() const {
  return rank_;
}
inline void Box::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// required int32 nextType = 4;
inline bool Box::has_nexttype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Box::set_has_nexttype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Box::clear_has_nexttype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Box::clear_nexttype() {
  nexttype_ = 0;
  clear_has_nexttype();
}
inline ::google::protobuf::int32 Box::nexttype() const {
  return nexttype_;
}
inline void Box::set_nexttype(::google::protobuf::int32 value) {
  set_has_nexttype();
  nexttype_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace guild
}  // namespace protobuf

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< protobuf::guild::RecordType>() {
  return protobuf::guild::RecordType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_guild_2eproto__INCLUDED
