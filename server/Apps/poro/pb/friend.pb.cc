// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "friend.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protobuf {
namespace friend {

namespace {

const ::google::protobuf::Descriptor* iconinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  iconinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* playerInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  playerInfoList_reflection_ = NULL;
const ::google::protobuf::Descriptor* playerFriends_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  playerFriends_reflection_ = NULL;
const ::google::protobuf::Descriptor* BossDamage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BossDamage_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildBossInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildBossInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterBossReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterBossReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendRefuseReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendRefuseReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendRefuseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendRefuseInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_friend_2eproto() {
  protobuf_AddDesc_friend_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "friend.proto");
  GOOGLE_CHECK(file != NULL);
  iconinfo_descriptor_ = file->message_type(0);
  static const int iconinfo_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, lastlogintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, heartsend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, heartgot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, isshadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, blood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, isfriend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, headframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, maxpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, hangmaxmap_),
  };
  iconinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      iconinfo_descriptor_,
      iconinfo::default_instance_,
      iconinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(iconinfo));
  playerInfoList_descriptor_ = file->message_type(1);
  static const int playerInfoList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerInfoList, showinfo_),
  };
  playerInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      playerInfoList_descriptor_,
      playerInfoList::default_instance_,
      playerInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(playerInfoList));
  playerFriends_descriptor_ = file->message_type(2);
  static const int playerFriends_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerFriends, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerFriends, showinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerFriends, searchfreshtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerFriends, tilicnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerFriends, tilifreshtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerFriends, hasapplyplayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerFriends, hearttoday_),
  };
  playerFriends_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      playerFriends_descriptor_,
      playerFriends::default_instance_,
      playerFriends_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerFriends, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerFriends, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(playerFriends));
  BossDamage_descriptor_ = file->message_type(3);
  static const int BossDamage_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDamage, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDamage, totaldamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDamage, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDamage, playerhead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDamage, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDamage, playerlvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDamage, headframe_),
  };
  BossDamage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BossDamage_descriptor_,
      BossDamage::default_instance_,
      BossDamage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDamage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDamage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BossDamage));
  GuildBossInfo_descriptor_ = file->message_type(4);
  static const int GuildBossInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBossInfo, playerdamages_),
  };
  GuildBossInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildBossInfo_descriptor_,
      GuildBossInfo::default_instance_,
      GuildBossInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBossInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBossInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildBossInfo));
  EnterBossReply_descriptor_ = file->message_type(5);
  static const int EnterBossReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterBossReply, finishtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterBossReply, season_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterBossReply, nextsearchtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterBossReply, boss_),
  };
  EnterBossReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterBossReply_descriptor_,
      EnterBossReply::default_instance_,
      EnterBossReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterBossReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterBossReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterBossReply));
  FriendRefuseReply_descriptor_ = file->message_type(6);
  static const int FriendRefuseReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRefuseReply, refuseinfo_),
  };
  FriendRefuseReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendRefuseReply_descriptor_,
      FriendRefuseReply::default_instance_,
      FriendRefuseReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRefuseReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRefuseReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendRefuseReply));
  FriendRefuseInfo_descriptor_ = file->message_type(7);
  static const int FriendRefuseInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRefuseInfo, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRefuseInfo, season_),
  };
  FriendRefuseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendRefuseInfo_descriptor_,
      FriendRefuseInfo::default_instance_,
      FriendRefuseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRefuseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRefuseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendRefuseInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_friend_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    iconinfo_descriptor_, &iconinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    playerInfoList_descriptor_, &playerInfoList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    playerFriends_descriptor_, &playerFriends::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BossDamage_descriptor_, &BossDamage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildBossInfo_descriptor_, &GuildBossInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterBossReply_descriptor_, &EnterBossReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendRefuseReply_descriptor_, &FriendRefuseReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendRefuseInfo_descriptor_, &FriendRefuseInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_friend_2eproto() {
  delete iconinfo::default_instance_;
  delete iconinfo_reflection_;
  delete playerInfoList::default_instance_;
  delete playerInfoList_reflection_;
  delete playerFriends::default_instance_;
  delete playerFriends_reflection_;
  delete BossDamage::default_instance_;
  delete BossDamage_reflection_;
  delete GuildBossInfo::default_instance_;
  delete GuildBossInfo_reflection_;
  delete EnterBossReply::default_instance_;
  delete EnterBossReply_reflection_;
  delete FriendRefuseReply::default_instance_;
  delete FriendRefuseReply_reflection_;
  delete FriendRefuseInfo::default_instance_;
  delete FriendRefuseInfo_reflection_;
}

void protobuf_AddDesc_friend_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf::common::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014friend.proto\022\017protobuf.friend\032\014common."
    "proto\"\236\002\n\010iconinfo\022\r\n\005level\030\001 \002(\005\022\014\n\004nam"
    "e\030\002 \002(\t\022\014\n\004head\030\003 \002(\t\022\013\n\003gid\030\004 \001(\005\022\025\n\rla"
    "stlogintime\030\005 \001(\003\022\020\n\010playerid\030\006 \001(\t\022\021\n\th"
    "eartSend\030\007 \001(\010\022\020\n\010heartgot\030\010 \001(\005\022\020\n\010isSh"
    "adow\030\t \001(\010\022\016\n\006bossid\030\n \001(\005\022\r\n\005blood\030\013 \001("
    "\005\022\020\n\010isFriend\030\014 \001(\010\022\021\n\theadFrame\030\r \001(\005\022\020"
    "\n\010serverid\030\016 \001(\005\022\020\n\010maxpower\030\017 \001(\005\022\022\n\nha"
    "ngMaxMap\030\020 \001(\005\"=\n\016playerInfoList\022+\n\010show"
    "info\030\001 \003(\0132\031.protobuf.friend.iconinfo\"\267\001"
    "\n\rplayerFriends\022\014\n\004type\030\001 \001(\005\022+\n\010showinf"
    "o\030\002 \003(\0132\031.protobuf.friend.iconinfo\022\027\n\017se"
    "archFreshTime\030\003 \001(\003\022\017\n\007tiliCnt\030\004 \001(\005\022\025\n\r"
    "tiliFreshTime\030\005 \001(\003\022\026\n\016hasApplyPlayer\030\006 "
    "\001(\010\022\022\n\nheartToday\030\007 \001(\005\"\220\001\n\nBossDamage\022\020"
    "\n\010playerid\030\001 \002(\t\022\023\n\013totaldamage\030\002 \002(\003\022\022\n"
    "\nplayername\030\003 \002(\t\022\022\n\nplayerhead\030\004 \002(\t\022\r\n"
    "\005power\030\005 \002(\005\022\021\n\tplayerlvl\030\006 \002(\005\022\021\n\theadF"
    "rame\030\007 \001(\005\"C\n\rGuildBossInfo\0222\n\rplayerdam"
    "ages\030\001 \003(\0132\033.protobuf.friend.BossDamage\""
    "v\n\016EnterBossReply\022\022\n\nfinishTime\030\001 \002(\003\022\016\n"
    "\006season\030\002 \002(\005\022\026\n\016nextSearchTime\030\003 \001(\003\022(\n"
    "\004boss\030\004 \001(\0132\032.protobuf.common.KVint3232\""
    "J\n\021FriendRefuseReply\0225\n\nrefuseInfo\030\001 \003(\013"
    "2!.protobuf.friend.FriendRefuseInfo\"4\n\020F"
    "riendRefuseInfo\022\020\n\010playerId\030\001 \002(\t\022\016\n\006sea"
    "son\030\002 \002(\005B\"\n\023xag.idgo.core.protoB\013Friend"
    "Proto", 1085);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "friend.proto", &protobuf_RegisterTypes);
  iconinfo::default_instance_ = new iconinfo();
  playerInfoList::default_instance_ = new playerInfoList();
  playerFriends::default_instance_ = new playerFriends();
  BossDamage::default_instance_ = new BossDamage();
  GuildBossInfo::default_instance_ = new GuildBossInfo();
  EnterBossReply::default_instance_ = new EnterBossReply();
  FriendRefuseReply::default_instance_ = new FriendRefuseReply();
  FriendRefuseInfo::default_instance_ = new FriendRefuseInfo();
  iconinfo::default_instance_->InitAsDefaultInstance();
  playerInfoList::default_instance_->InitAsDefaultInstance();
  playerFriends::default_instance_->InitAsDefaultInstance();
  BossDamage::default_instance_->InitAsDefaultInstance();
  GuildBossInfo::default_instance_->InitAsDefaultInstance();
  EnterBossReply::default_instance_->InitAsDefaultInstance();
  FriendRefuseReply::default_instance_->InitAsDefaultInstance();
  FriendRefuseInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_friend_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_friend_2eproto {
  StaticDescriptorInitializer_friend_2eproto() {
    protobuf_AddDesc_friend_2eproto();
  }
} static_descriptor_initializer_friend_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int iconinfo::kLevelFieldNumber;
const int iconinfo::kNameFieldNumber;
const int iconinfo::kHeadFieldNumber;
const int iconinfo::kGidFieldNumber;
const int iconinfo::kLastlogintimeFieldNumber;
const int iconinfo::kPlayeridFieldNumber;
const int iconinfo::kHeartSendFieldNumber;
const int iconinfo::kHeartgotFieldNumber;
const int iconinfo::kIsShadowFieldNumber;
const int iconinfo::kBossidFieldNumber;
const int iconinfo::kBloodFieldNumber;
const int iconinfo::kIsFriendFieldNumber;
const int iconinfo::kHeadFrameFieldNumber;
const int iconinfo::kServeridFieldNumber;
const int iconinfo::kMaxpowerFieldNumber;
const int iconinfo::kHangMaxMapFieldNumber;
#endif  // !_MSC_VER

iconinfo::iconinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void iconinfo::InitAsDefaultInstance() {
}

iconinfo::iconinfo(const iconinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void iconinfo::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gid_ = 0;
  lastlogintime_ = GOOGLE_LONGLONG(0);
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  heartsend_ = false;
  heartgot_ = 0;
  isshadow_ = false;
  bossid_ = 0;
  blood_ = 0;
  isfriend_ = false;
  headframe_ = 0;
  serverid_ = 0;
  maxpower_ = 0;
  hangmaxmap_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

iconinfo::~iconinfo() {
  SharedDtor();
}

void iconinfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    delete head_;
  }
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (this != default_instance_) {
  }
}

void iconinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* iconinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return iconinfo_descriptor_;
}

const iconinfo& iconinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();  return *default_instance_;
}

iconinfo* iconinfo::default_instance_ = NULL;

iconinfo* iconinfo::New() const {
  return new iconinfo;
}

void iconinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_head()) {
      if (head_ != &::google::protobuf::internal::kEmptyString) {
        head_->clear();
      }
    }
    gid_ = 0;
    lastlogintime_ = GOOGLE_LONGLONG(0);
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    heartsend_ = false;
    heartgot_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    isshadow_ = false;
    bossid_ = 0;
    blood_ = 0;
    isfriend_ = false;
    headframe_ = 0;
    serverid_ = 0;
    maxpower_ = 0;
    hangmaxmap_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool iconinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_head;
        break;
      }
      
      // required string head = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_head()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->head().data(), this->head().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gid;
        break;
      }
      
      // optional int32 gid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lastlogintime;
        break;
      }
      
      // optional int64 lastlogintime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastlogintime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lastlogintime_)));
          set_has_lastlogintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_playerid;
        break;
      }
      
      // optional string playerid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_heartSend;
        break;
      }
      
      // optional bool heartSend = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heartSend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &heartsend_)));
          set_has_heartsend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_heartgot;
        break;
      }
      
      // optional int32 heartgot = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heartgot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &heartgot_)));
          set_has_heartgot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_isShadow;
        break;
      }
      
      // optional bool isShadow = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isShadow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isshadow_)));
          set_has_isshadow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_bossid;
        break;
      }
      
      // optional int32 bossid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_blood;
        break;
      }
      
      // optional int32 blood = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blood_)));
          set_has_blood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_isFriend;
        break;
      }
      
      // optional bool isFriend = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isFriend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfriend_)));
          set_has_isfriend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_headFrame;
        break;
      }
      
      // optional int32 headFrame = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headFrame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headframe_)));
          set_has_headframe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_serverid;
        break;
      }
      
      // optional int32 serverid = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_maxpower;
        break;
      }
      
      // optional int32 maxpower = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxpower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxpower_)));
          set_has_maxpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_hangMaxMap;
        break;
      }
      
      // optional int32 hangMaxMap = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hangMaxMap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hangmaxmap_)));
          set_has_hangmaxmap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void iconinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // required string head = 3;
  if (has_head()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head().data(), this->head().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->head(), output);
  }
  
  // optional int32 gid = 4;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gid(), output);
  }
  
  // optional int64 lastlogintime = 5;
  if (has_lastlogintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->lastlogintime(), output);
  }
  
  // optional string playerid = 6;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->playerid(), output);
  }
  
  // optional bool heartSend = 7;
  if (has_heartsend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->heartsend(), output);
  }
  
  // optional int32 heartgot = 8;
  if (has_heartgot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->heartgot(), output);
  }
  
  // optional bool isShadow = 9;
  if (has_isshadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->isshadow(), output);
  }
  
  // optional int32 bossid = 10;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->bossid(), output);
  }
  
  // optional int32 blood = 11;
  if (has_blood()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->blood(), output);
  }
  
  // optional bool isFriend = 12;
  if (has_isfriend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->isfriend(), output);
  }
  
  // optional int32 headFrame = 13;
  if (has_headframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->headframe(), output);
  }
  
  // optional int32 serverid = 14;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->serverid(), output);
  }
  
  // optional int32 maxpower = 15;
  if (has_maxpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->maxpower(), output);
  }
  
  // optional int32 hangMaxMap = 16;
  if (has_hangmaxmap()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->hangmaxmap(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* iconinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // required string head = 3;
  if (has_head()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head().data(), this->head().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->head(), target);
  }
  
  // optional int32 gid = 4;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gid(), target);
  }
  
  // optional int64 lastlogintime = 5;
  if (has_lastlogintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->lastlogintime(), target);
  }
  
  // optional string playerid = 6;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->playerid(), target);
  }
  
  // optional bool heartSend = 7;
  if (has_heartsend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->heartsend(), target);
  }
  
  // optional int32 heartgot = 8;
  if (has_heartgot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->heartgot(), target);
  }
  
  // optional bool isShadow = 9;
  if (has_isshadow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->isshadow(), target);
  }
  
  // optional int32 bossid = 10;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->bossid(), target);
  }
  
  // optional int32 blood = 11;
  if (has_blood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->blood(), target);
  }
  
  // optional bool isFriend = 12;
  if (has_isfriend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->isfriend(), target);
  }
  
  // optional int32 headFrame = 13;
  if (has_headframe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->headframe(), target);
  }
  
  // optional int32 serverid = 14;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->serverid(), target);
  }
  
  // optional int32 maxpower = 15;
  if (has_maxpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->maxpower(), target);
  }
  
  // optional int32 hangMaxMap = 16;
  if (has_hangmaxmap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->hangmaxmap(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int iconinfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string head = 3;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->head());
    }
    
    // optional int32 gid = 4;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gid());
    }
    
    // optional int64 lastlogintime = 5;
    if (has_lastlogintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lastlogintime());
    }
    
    // optional string playerid = 6;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }
    
    // optional bool heartSend = 7;
    if (has_heartsend()) {
      total_size += 1 + 1;
    }
    
    // optional int32 heartgot = 8;
    if (has_heartgot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->heartgot());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool isShadow = 9;
    if (has_isshadow()) {
      total_size += 1 + 1;
    }
    
    // optional int32 bossid = 10;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bossid());
    }
    
    // optional int32 blood = 11;
    if (has_blood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blood());
    }
    
    // optional bool isFriend = 12;
    if (has_isfriend()) {
      total_size += 1 + 1;
    }
    
    // optional int32 headFrame = 13;
    if (has_headframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headframe());
    }
    
    // optional int32 serverid = 14;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }
    
    // optional int32 maxpower = 15;
    if (has_maxpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxpower());
    }
    
    // optional int32 hangMaxMap = 16;
    if (has_hangmaxmap()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hangmaxmap());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void iconinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const iconinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const iconinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void iconinfo::MergeFrom(const iconinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_head()) {
      set_head(from.head());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_lastlogintime()) {
      set_lastlogintime(from.lastlogintime());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_heartsend()) {
      set_heartsend(from.heartsend());
    }
    if (from.has_heartgot()) {
      set_heartgot(from.heartgot());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isshadow()) {
      set_isshadow(from.isshadow());
    }
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_blood()) {
      set_blood(from.blood());
    }
    if (from.has_isfriend()) {
      set_isfriend(from.isfriend());
    }
    if (from.has_headframe()) {
      set_headframe(from.headframe());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_maxpower()) {
      set_maxpower(from.maxpower());
    }
    if (from.has_hangmaxmap()) {
      set_hangmaxmap(from.hangmaxmap());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void iconinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void iconinfo::CopyFrom(const iconinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool iconinfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void iconinfo::Swap(iconinfo* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(name_, other->name_);
    std::swap(head_, other->head_);
    std::swap(gid_, other->gid_);
    std::swap(lastlogintime_, other->lastlogintime_);
    std::swap(playerid_, other->playerid_);
    std::swap(heartsend_, other->heartsend_);
    std::swap(heartgot_, other->heartgot_);
    std::swap(isshadow_, other->isshadow_);
    std::swap(bossid_, other->bossid_);
    std::swap(blood_, other->blood_);
    std::swap(isfriend_, other->isfriend_);
    std::swap(headframe_, other->headframe_);
    std::swap(serverid_, other->serverid_);
    std::swap(maxpower_, other->maxpower_);
    std::swap(hangmaxmap_, other->hangmaxmap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata iconinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = iconinfo_descriptor_;
  metadata.reflection = iconinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int playerInfoList::kShowinfoFieldNumber;
#endif  // !_MSC_VER

playerInfoList::playerInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void playerInfoList::InitAsDefaultInstance() {
}

playerInfoList::playerInfoList(const playerInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void playerInfoList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

playerInfoList::~playerInfoList() {
  SharedDtor();
}

void playerInfoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void playerInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* playerInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return playerInfoList_descriptor_;
}

const playerInfoList& playerInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();  return *default_instance_;
}

playerInfoList* playerInfoList::default_instance_ = NULL;

playerInfoList* playerInfoList::New() const {
  return new playerInfoList;
}

void playerInfoList::Clear() {
  showinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool playerInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.friend.iconinfo showinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_showinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_showinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_showinfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void playerInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.friend.iconinfo showinfo = 1;
  for (int i = 0; i < this->showinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->showinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* playerInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.friend.iconinfo showinfo = 1;
  for (int i = 0; i < this->showinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->showinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int playerInfoList::ByteSize() const {
  int total_size = 0;
  
  // repeated .protobuf.friend.iconinfo showinfo = 1;
  total_size += 1 * this->showinfo_size();
  for (int i = 0; i < this->showinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->showinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void playerInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const playerInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const playerInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void playerInfoList::MergeFrom(const playerInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  showinfo_.MergeFrom(from.showinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void playerInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void playerInfoList::CopyFrom(const playerInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool playerInfoList::IsInitialized() const {
  
  for (int i = 0; i < showinfo_size(); i++) {
    if (!this->showinfo(i).IsInitialized()) return false;
  }
  return true;
}

void playerInfoList::Swap(playerInfoList* other) {
  if (other != this) {
    showinfo_.Swap(&other->showinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata playerInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = playerInfoList_descriptor_;
  metadata.reflection = playerInfoList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int playerFriends::kTypeFieldNumber;
const int playerFriends::kShowinfoFieldNumber;
const int playerFriends::kSearchFreshTimeFieldNumber;
const int playerFriends::kTiliCntFieldNumber;
const int playerFriends::kTiliFreshTimeFieldNumber;
const int playerFriends::kHasApplyPlayerFieldNumber;
const int playerFriends::kHeartTodayFieldNumber;
#endif  // !_MSC_VER

playerFriends::playerFriends()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void playerFriends::InitAsDefaultInstance() {
}

playerFriends::playerFriends(const playerFriends& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void playerFriends::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  searchfreshtime_ = GOOGLE_LONGLONG(0);
  tilicnt_ = 0;
  tilifreshtime_ = GOOGLE_LONGLONG(0);
  hasapplyplayer_ = false;
  hearttoday_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

playerFriends::~playerFriends() {
  SharedDtor();
}

void playerFriends::SharedDtor() {
  if (this != default_instance_) {
  }
}

void playerFriends::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* playerFriends::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return playerFriends_descriptor_;
}

const playerFriends& playerFriends::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();  return *default_instance_;
}

playerFriends* playerFriends::default_instance_ = NULL;

playerFriends* playerFriends::New() const {
  return new playerFriends;
}

void playerFriends::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    searchfreshtime_ = GOOGLE_LONGLONG(0);
    tilicnt_ = 0;
    tilifreshtime_ = GOOGLE_LONGLONG(0);
    hasapplyplayer_ = false;
    hearttoday_ = 0;
  }
  showinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool playerFriends::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_showinfo;
        break;
      }
      
      // repeated .protobuf.friend.iconinfo showinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_showinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_showinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_showinfo;
        if (input->ExpectTag(24)) goto parse_searchFreshTime;
        break;
      }
      
      // optional int64 searchFreshTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_searchFreshTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &searchfreshtime_)));
          set_has_searchfreshtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tiliCnt;
        break;
      }
      
      // optional int32 tiliCnt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tiliCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tilicnt_)));
          set_has_tilicnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_tiliFreshTime;
        break;
      }
      
      // optional int64 tiliFreshTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tiliFreshTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tilifreshtime_)));
          set_has_tilifreshtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_hasApplyPlayer;
        break;
      }
      
      // optional bool hasApplyPlayer = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasApplyPlayer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasapplyplayer_)));
          set_has_hasapplyplayer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_heartToday;
        break;
      }
      
      // optional int32 heartToday = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heartToday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hearttoday_)));
          set_has_hearttoday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void playerFriends::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // repeated .protobuf.friend.iconinfo showinfo = 2;
  for (int i = 0; i < this->showinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->showinfo(i), output);
  }
  
  // optional int64 searchFreshTime = 3;
  if (has_searchfreshtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->searchfreshtime(), output);
  }
  
  // optional int32 tiliCnt = 4;
  if (has_tilicnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tilicnt(), output);
  }
  
  // optional int64 tiliFreshTime = 5;
  if (has_tilifreshtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->tilifreshtime(), output);
  }
  
  // optional bool hasApplyPlayer = 6;
  if (has_hasapplyplayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->hasapplyplayer(), output);
  }
  
  // optional int32 heartToday = 7;
  if (has_hearttoday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->hearttoday(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* playerFriends::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // repeated .protobuf.friend.iconinfo showinfo = 2;
  for (int i = 0; i < this->showinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->showinfo(i), target);
  }
  
  // optional int64 searchFreshTime = 3;
  if (has_searchfreshtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->searchfreshtime(), target);
  }
  
  // optional int32 tiliCnt = 4;
  if (has_tilicnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tilicnt(), target);
  }
  
  // optional int64 tiliFreshTime = 5;
  if (has_tilifreshtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->tilifreshtime(), target);
  }
  
  // optional bool hasApplyPlayer = 6;
  if (has_hasapplyplayer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->hasapplyplayer(), target);
  }
  
  // optional int32 heartToday = 7;
  if (has_hearttoday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->hearttoday(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int playerFriends::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int64 searchFreshTime = 3;
    if (has_searchfreshtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->searchfreshtime());
    }
    
    // optional int32 tiliCnt = 4;
    if (has_tilicnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tilicnt());
    }
    
    // optional int64 tiliFreshTime = 5;
    if (has_tilifreshtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tilifreshtime());
    }
    
    // optional bool hasApplyPlayer = 6;
    if (has_hasapplyplayer()) {
      total_size += 1 + 1;
    }
    
    // optional int32 heartToday = 7;
    if (has_hearttoday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hearttoday());
    }
    
  }
  // repeated .protobuf.friend.iconinfo showinfo = 2;
  total_size += 1 * this->showinfo_size();
  for (int i = 0; i < this->showinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->showinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void playerFriends::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const playerFriends* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const playerFriends*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void playerFriends::MergeFrom(const playerFriends& from) {
  GOOGLE_CHECK_NE(&from, this);
  showinfo_.MergeFrom(from.showinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_searchfreshtime()) {
      set_searchfreshtime(from.searchfreshtime());
    }
    if (from.has_tilicnt()) {
      set_tilicnt(from.tilicnt());
    }
    if (from.has_tilifreshtime()) {
      set_tilifreshtime(from.tilifreshtime());
    }
    if (from.has_hasapplyplayer()) {
      set_hasapplyplayer(from.hasapplyplayer());
    }
    if (from.has_hearttoday()) {
      set_hearttoday(from.hearttoday());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void playerFriends::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void playerFriends::CopyFrom(const playerFriends& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool playerFriends::IsInitialized() const {
  
  for (int i = 0; i < showinfo_size(); i++) {
    if (!this->showinfo(i).IsInitialized()) return false;
  }
  return true;
}

void playerFriends::Swap(playerFriends* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    showinfo_.Swap(&other->showinfo_);
    std::swap(searchfreshtime_, other->searchfreshtime_);
    std::swap(tilicnt_, other->tilicnt_);
    std::swap(tilifreshtime_, other->tilifreshtime_);
    std::swap(hasapplyplayer_, other->hasapplyplayer_);
    std::swap(hearttoday_, other->hearttoday_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata playerFriends::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = playerFriends_descriptor_;
  metadata.reflection = playerFriends_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BossDamage::kPlayeridFieldNumber;
const int BossDamage::kTotaldamageFieldNumber;
const int BossDamage::kPlayernameFieldNumber;
const int BossDamage::kPlayerheadFieldNumber;
const int BossDamage::kPowerFieldNumber;
const int BossDamage::kPlayerlvlFieldNumber;
const int BossDamage::kHeadFrameFieldNumber;
#endif  // !_MSC_VER

BossDamage::BossDamage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BossDamage::InitAsDefaultInstance() {
}

BossDamage::BossDamage(const BossDamage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BossDamage::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  totaldamage_ = GOOGLE_LONGLONG(0);
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playerhead_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  power_ = 0;
  playerlvl_ = 0;
  headframe_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossDamage::~BossDamage() {
  SharedDtor();
}

void BossDamage::SharedDtor() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (playerhead_ != &::google::protobuf::internal::kEmptyString) {
    delete playerhead_;
  }
  if (this != default_instance_) {
  }
}

void BossDamage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BossDamage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BossDamage_descriptor_;
}

const BossDamage& BossDamage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();  return *default_instance_;
}

BossDamage* BossDamage::default_instance_ = NULL;

BossDamage* BossDamage::New() const {
  return new BossDamage;
}

void BossDamage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    totaldamage_ = GOOGLE_LONGLONG(0);
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
    if (has_playerhead()) {
      if (playerhead_ != &::google::protobuf::internal::kEmptyString) {
        playerhead_->clear();
      }
    }
    power_ = 0;
    playerlvl_ = 0;
    headframe_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BossDamage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_totaldamage;
        break;
      }
      
      // required int64 totaldamage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totaldamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totaldamage_)));
          set_has_totaldamage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_playername;
        break;
      }
      
      // required string playername = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_playerhead;
        break;
      }
      
      // required string playerhead = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerhead:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerhead()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerhead().data(), this->playerhead().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_power;
        break;
      }
      
      // required int32 power = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_playerlvl;
        break;
      }
      
      // required int32 playerlvl = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerlvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerlvl_)));
          set_has_playerlvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_headFrame;
        break;
      }
      
      // optional int32 headFrame = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headFrame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headframe_)));
          set_has_headframe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BossDamage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->playerid(), output);
  }
  
  // required int64 totaldamage = 2;
  if (has_totaldamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->totaldamage(), output);
  }
  
  // required string playername = 3;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->playername(), output);
  }
  
  // required string playerhead = 4;
  if (has_playerhead()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerhead().data(), this->playerhead().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->playerhead(), output);
  }
  
  // required int32 power = 5;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->power(), output);
  }
  
  // required int32 playerlvl = 6;
  if (has_playerlvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->playerlvl(), output);
  }
  
  // optional int32 headFrame = 7;
  if (has_headframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->headframe(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BossDamage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playerid(), target);
  }
  
  // required int64 totaldamage = 2;
  if (has_totaldamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->totaldamage(), target);
  }
  
  // required string playername = 3;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->playername(), target);
  }
  
  // required string playerhead = 4;
  if (has_playerhead()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerhead().data(), this->playerhead().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->playerhead(), target);
  }
  
  // required int32 power = 5;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->power(), target);
  }
  
  // required int32 playerlvl = 6;
  if (has_playerlvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->playerlvl(), target);
  }
  
  // optional int32 headFrame = 7;
  if (has_headframe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->headframe(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BossDamage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }
    
    // required int64 totaldamage = 2;
    if (has_totaldamage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->totaldamage());
    }
    
    // required string playername = 3;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }
    
    // required string playerhead = 4;
    if (has_playerhead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerhead());
    }
    
    // required int32 power = 5;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }
    
    // required int32 playerlvl = 6;
    if (has_playerlvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerlvl());
    }
    
    // optional int32 headFrame = 7;
    if (has_headframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headframe());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossDamage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BossDamage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BossDamage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BossDamage::MergeFrom(const BossDamage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_totaldamage()) {
      set_totaldamage(from.totaldamage());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_playerhead()) {
      set_playerhead(from.playerhead());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_playerlvl()) {
      set_playerlvl(from.playerlvl());
    }
    if (from.has_headframe()) {
      set_headframe(from.headframe());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BossDamage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BossDamage::CopyFrom(const BossDamage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossDamage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void BossDamage::Swap(BossDamage* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(totaldamage_, other->totaldamage_);
    std::swap(playername_, other->playername_);
    std::swap(playerhead_, other->playerhead_);
    std::swap(power_, other->power_);
    std::swap(playerlvl_, other->playerlvl_);
    std::swap(headframe_, other->headframe_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BossDamage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BossDamage_descriptor_;
  metadata.reflection = BossDamage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildBossInfo::kPlayerdamagesFieldNumber;
#endif  // !_MSC_VER

GuildBossInfo::GuildBossInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildBossInfo::InitAsDefaultInstance() {
}

GuildBossInfo::GuildBossInfo(const GuildBossInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildBossInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildBossInfo::~GuildBossInfo() {
  SharedDtor();
}

void GuildBossInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildBossInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildBossInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildBossInfo_descriptor_;
}

const GuildBossInfo& GuildBossInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();  return *default_instance_;
}

GuildBossInfo* GuildBossInfo::default_instance_ = NULL;

GuildBossInfo* GuildBossInfo::New() const {
  return new GuildBossInfo;
}

void GuildBossInfo::Clear() {
  playerdamages_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildBossInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.friend.BossDamage playerdamages = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerdamages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playerdamages()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_playerdamages;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildBossInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.friend.BossDamage playerdamages = 1;
  for (int i = 0; i < this->playerdamages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->playerdamages(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildBossInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.friend.BossDamage playerdamages = 1;
  for (int i = 0; i < this->playerdamages_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->playerdamages(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildBossInfo::ByteSize() const {
  int total_size = 0;
  
  // repeated .protobuf.friend.BossDamage playerdamages = 1;
  total_size += 1 * this->playerdamages_size();
  for (int i = 0; i < this->playerdamages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerdamages(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildBossInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildBossInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildBossInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildBossInfo::MergeFrom(const GuildBossInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerdamages_.MergeFrom(from.playerdamages_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildBossInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildBossInfo::CopyFrom(const GuildBossInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildBossInfo::IsInitialized() const {
  
  for (int i = 0; i < playerdamages_size(); i++) {
    if (!this->playerdamages(i).IsInitialized()) return false;
  }
  return true;
}

void GuildBossInfo::Swap(GuildBossInfo* other) {
  if (other != this) {
    playerdamages_.Swap(&other->playerdamages_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildBossInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildBossInfo_descriptor_;
  metadata.reflection = GuildBossInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterBossReply::kFinishTimeFieldNumber;
const int EnterBossReply::kSeasonFieldNumber;
const int EnterBossReply::kNextSearchTimeFieldNumber;
const int EnterBossReply::kBossFieldNumber;
#endif  // !_MSC_VER

EnterBossReply::EnterBossReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnterBossReply::InitAsDefaultInstance() {
  boss_ = const_cast< ::protobuf::common::KVint3232*>(&::protobuf::common::KVint3232::default_instance());
}

EnterBossReply::EnterBossReply(const EnterBossReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnterBossReply::SharedCtor() {
  _cached_size_ = 0;
  finishtime_ = GOOGLE_LONGLONG(0);
  season_ = 0;
  nextsearchtime_ = GOOGLE_LONGLONG(0);
  boss_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterBossReply::~EnterBossReply() {
  SharedDtor();
}

void EnterBossReply::SharedDtor() {
  if (this != default_instance_) {
    delete boss_;
  }
}

void EnterBossReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterBossReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterBossReply_descriptor_;
}

const EnterBossReply& EnterBossReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();  return *default_instance_;
}

EnterBossReply* EnterBossReply::default_instance_ = NULL;

EnterBossReply* EnterBossReply::New() const {
  return new EnterBossReply;
}

void EnterBossReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    finishtime_ = GOOGLE_LONGLONG(0);
    season_ = 0;
    nextsearchtime_ = GOOGLE_LONGLONG(0);
    if (has_boss()) {
      if (boss_ != NULL) boss_->::protobuf::common::KVint3232::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterBossReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 finishTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &finishtime_)));
          set_has_finishtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_season;
        break;
      }
      
      // required int32 season = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_season:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &season_)));
          set_has_season();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nextSearchTime;
        break;
      }
      
      // optional int64 nextSearchTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextSearchTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nextsearchtime_)));
          set_has_nextsearchtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_boss;
        break;
      }
      
      // optional .protobuf.common.KVint3232 boss = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boss:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boss()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnterBossReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 finishTime = 1;
  if (has_finishtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->finishtime(), output);
  }
  
  // required int32 season = 2;
  if (has_season()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->season(), output);
  }
  
  // optional int64 nextSearchTime = 3;
  if (has_nextsearchtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->nextsearchtime(), output);
  }
  
  // optional .protobuf.common.KVint3232 boss = 4;
  if (has_boss()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->boss(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnterBossReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 finishTime = 1;
  if (has_finishtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->finishtime(), target);
  }
  
  // required int32 season = 2;
  if (has_season()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->season(), target);
  }
  
  // optional int64 nextSearchTime = 3;
  if (has_nextsearchtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->nextsearchtime(), target);
  }
  
  // optional .protobuf.common.KVint3232 boss = 4;
  if (has_boss()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->boss(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnterBossReply::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 finishTime = 1;
    if (has_finishtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->finishtime());
    }
    
    // required int32 season = 2;
    if (has_season()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->season());
    }
    
    // optional int64 nextSearchTime = 3;
    if (has_nextsearchtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->nextsearchtime());
    }
    
    // optional .protobuf.common.KVint3232 boss = 4;
    if (has_boss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->boss());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterBossReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterBossReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterBossReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterBossReply::MergeFrom(const EnterBossReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_finishtime()) {
      set_finishtime(from.finishtime());
    }
    if (from.has_season()) {
      set_season(from.season());
    }
    if (from.has_nextsearchtime()) {
      set_nextsearchtime(from.nextsearchtime());
    }
    if (from.has_boss()) {
      mutable_boss()->::protobuf::common::KVint3232::MergeFrom(from.boss());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterBossReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterBossReply::CopyFrom(const EnterBossReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterBossReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_boss()) {
    if (!this->boss().IsInitialized()) return false;
  }
  return true;
}

void EnterBossReply::Swap(EnterBossReply* other) {
  if (other != this) {
    std::swap(finishtime_, other->finishtime_);
    std::swap(season_, other->season_);
    std::swap(nextsearchtime_, other->nextsearchtime_);
    std::swap(boss_, other->boss_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterBossReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterBossReply_descriptor_;
  metadata.reflection = EnterBossReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendRefuseReply::kRefuseInfoFieldNumber;
#endif  // !_MSC_VER

FriendRefuseReply::FriendRefuseReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendRefuseReply::InitAsDefaultInstance() {
}

FriendRefuseReply::FriendRefuseReply(const FriendRefuseReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendRefuseReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendRefuseReply::~FriendRefuseReply() {
  SharedDtor();
}

void FriendRefuseReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FriendRefuseReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendRefuseReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendRefuseReply_descriptor_;
}

const FriendRefuseReply& FriendRefuseReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();  return *default_instance_;
}

FriendRefuseReply* FriendRefuseReply::default_instance_ = NULL;

FriendRefuseReply* FriendRefuseReply::New() const {
  return new FriendRefuseReply;
}

void FriendRefuseReply::Clear() {
  refuseinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendRefuseReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.friend.FriendRefuseInfo refuseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_refuseInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_refuseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_refuseInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendRefuseReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.friend.FriendRefuseInfo refuseInfo = 1;
  for (int i = 0; i < this->refuseinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->refuseinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendRefuseReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.friend.FriendRefuseInfo refuseInfo = 1;
  for (int i = 0; i < this->refuseinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->refuseinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendRefuseReply::ByteSize() const {
  int total_size = 0;
  
  // repeated .protobuf.friend.FriendRefuseInfo refuseInfo = 1;
  total_size += 1 * this->refuseinfo_size();
  for (int i = 0; i < this->refuseinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->refuseinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendRefuseReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendRefuseReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendRefuseReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendRefuseReply::MergeFrom(const FriendRefuseReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  refuseinfo_.MergeFrom(from.refuseinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendRefuseReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendRefuseReply::CopyFrom(const FriendRefuseReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendRefuseReply::IsInitialized() const {
  
  for (int i = 0; i < refuseinfo_size(); i++) {
    if (!this->refuseinfo(i).IsInitialized()) return false;
  }
  return true;
}

void FriendRefuseReply::Swap(FriendRefuseReply* other) {
  if (other != this) {
    refuseinfo_.Swap(&other->refuseinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendRefuseReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendRefuseReply_descriptor_;
  metadata.reflection = FriendRefuseReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendRefuseInfo::kPlayerIdFieldNumber;
const int FriendRefuseInfo::kSeasonFieldNumber;
#endif  // !_MSC_VER

FriendRefuseInfo::FriendRefuseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendRefuseInfo::InitAsDefaultInstance() {
}

FriendRefuseInfo::FriendRefuseInfo(const FriendRefuseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendRefuseInfo::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  season_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendRefuseInfo::~FriendRefuseInfo() {
  SharedDtor();
}

void FriendRefuseInfo::SharedDtor() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (this != default_instance_) {
  }
}

void FriendRefuseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendRefuseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendRefuseInfo_descriptor_;
}

const FriendRefuseInfo& FriendRefuseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_friend_2eproto();  return *default_instance_;
}

FriendRefuseInfo* FriendRefuseInfo::default_instance_ = NULL;

FriendRefuseInfo* FriendRefuseInfo::New() const {
  return new FriendRefuseInfo;
}

void FriendRefuseInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    season_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendRefuseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_season;
        break;
      }
      
      // required int32 season = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_season:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &season_)));
          set_has_season();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendRefuseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->playerid(), output);
  }
  
  // required int32 season = 2;
  if (has_season()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->season(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendRefuseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playerid(), target);
  }
  
  // required int32 season = 2;
  if (has_season()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->season(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendRefuseInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }
    
    // required int32 season = 2;
    if (has_season()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->season());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendRefuseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendRefuseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendRefuseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendRefuseInfo::MergeFrom(const FriendRefuseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_season()) {
      set_season(from.season());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendRefuseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendRefuseInfo::CopyFrom(const FriendRefuseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendRefuseInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void FriendRefuseInfo::Swap(FriendRefuseInfo* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(season_, other->season_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendRefuseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendRefuseInfo_descriptor_;
  metadata.reflection = FriendRefuseInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace friend
}  // namespace protobuf

// @@protoc_insertion_point(global_scope)
