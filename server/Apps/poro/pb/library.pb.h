// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: library.proto

#ifndef PROTOBUF_library_2eproto__INCLUDED
#define PROTOBUF_library_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf {
namespace library {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_library_2eproto();
void protobuf_AssignDesc_library_2eproto();
void protobuf_ShutdownFile_library_2eproto();

class LibraryInfo;
class LibraryHeros;
class LibraryHeroInfo;
class LibraryAddHero;
class LibraryAllHero;
class LibrarySampleHero;

// ===================================================================

class LibraryInfo : public ::google::protobuf::Message {
 public:
  LibraryInfo();
  virtual ~LibraryInfo();
  
  LibraryInfo(const LibraryInfo& from);
  
  inline LibraryInfo& operator=(const LibraryInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LibraryInfo& default_instance();
  
  void Swap(LibraryInfo* other);
  
  // implements Message ----------------------------------------------
  
  LibraryInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LibraryInfo& from);
  void MergeFrom(const LibraryInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protobuf.library.LibraryHeros libraryHero = 1;
  inline int libraryhero_size() const;
  inline void clear_libraryhero();
  static const int kLibraryHeroFieldNumber = 1;
  inline const ::protobuf::library::LibraryHeros& libraryhero(int index) const;
  inline ::protobuf::library::LibraryHeros* mutable_libraryhero(int index);
  inline ::protobuf::library::LibraryHeros* add_libraryhero();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::library::LibraryHeros >&
      libraryhero() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::library::LibraryHeros >*
      mutable_libraryhero();
  
  // repeated .protobuf.library.LibraryHeroInfo heroAid = 2;
  inline int heroaid_size() const;
  inline void clear_heroaid();
  static const int kHeroAidFieldNumber = 2;
  inline const ::protobuf::library::LibraryHeroInfo& heroaid(int index) const;
  inline ::protobuf::library::LibraryHeroInfo* mutable_heroaid(int index);
  inline ::protobuf::library::LibraryHeroInfo* add_heroaid();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::library::LibraryHeroInfo >&
      heroaid() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::library::LibraryHeroInfo >*
      mutable_heroaid();
  
  // @@protoc_insertion_point(class_scope:protobuf.library.LibraryInfo)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protobuf::library::LibraryHeros > libraryhero_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::library::LibraryHeroInfo > heroaid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_library_2eproto();
  friend void protobuf_AssignDesc_library_2eproto();
  friend void protobuf_ShutdownFile_library_2eproto();
  
  void InitAsDefaultInstance();
  static LibraryInfo* default_instance_;
};
// -------------------------------------------------------------------

class LibraryHeros : public ::google::protobuf::Message {
 public:
  LibraryHeros();
  virtual ~LibraryHeros();
  
  LibraryHeros(const LibraryHeros& from);
  
  inline LibraryHeros& operator=(const LibraryHeros& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LibraryHeros& default_instance();
  
  void Swap(LibraryHeros* other);
  
  // implements Message ----------------------------------------------
  
  LibraryHeros* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LibraryHeros& from);
  void MergeFrom(const LibraryHeros& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 number = 1;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 1;
  inline ::google::protobuf::int32 number() const;
  inline void set_number(::google::protobuf::int32 value);
  
  // repeated .protobuf.library.LibraryHeroInfo heros = 2;
  inline int heros_size() const;
  inline void clear_heros();
  static const int kHerosFieldNumber = 2;
  inline const ::protobuf::library::LibraryHeroInfo& heros(int index) const;
  inline ::protobuf::library::LibraryHeroInfo* mutable_heros(int index);
  inline ::protobuf::library::LibraryHeroInfo* add_heros();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::library::LibraryHeroInfo >&
      heros() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::library::LibraryHeroInfo >*
      mutable_heros();
  
  // optional bool haveAddPosition = 3;
  inline bool has_haveaddposition() const;
  inline void clear_haveaddposition();
  static const int kHaveAddPositionFieldNumber = 3;
  inline bool haveaddposition() const;
  inline void set_haveaddposition(bool value);
  
  // @@protoc_insertion_point(class_scope:protobuf.library.LibraryHeros)
 private:
  inline void set_has_number();
  inline void clear_has_number();
  inline void set_has_haveaddposition();
  inline void clear_has_haveaddposition();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protobuf::library::LibraryHeroInfo > heros_;
  ::google::protobuf::int32 number_;
  bool haveaddposition_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_library_2eproto();
  friend void protobuf_AssignDesc_library_2eproto();
  friend void protobuf_ShutdownFile_library_2eproto();
  
  void InitAsDefaultInstance();
  static LibraryHeros* default_instance_;
};
// -------------------------------------------------------------------

class LibraryHeroInfo : public ::google::protobuf::Message {
 public:
  LibraryHeroInfo();
  virtual ~LibraryHeroInfo();
  
  LibraryHeroInfo(const LibraryHeroInfo& from);
  
  inline LibraryHeroInfo& operator=(const LibraryHeroInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LibraryHeroInfo& default_instance();
  
  void Swap(LibraryHeroInfo* other);
  
  // implements Message ----------------------------------------------
  
  LibraryHeroInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LibraryHeroInfo& from);
  void MergeFrom(const LibraryHeroInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 heroId = 1;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIdFieldNumber = 1;
  inline ::google::protobuf::int32 heroid() const;
  inline void set_heroid(::google::protobuf::int32 value);
  
  // required int32 lv = 2;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 2;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);
  
  // required int32 tier = 3;
  inline bool has_tier() const;
  inline void clear_tier();
  static const int kTierFieldNumber = 3;
  inline ::google::protobuf::int32 tier() const;
  inline void set_tier(::google::protobuf::int32 value);
  
  // optional int32 resonanceLv = 4;
  inline bool has_resonancelv() const;
  inline void clear_resonancelv();
  static const int kResonanceLvFieldNumber = 4;
  inline ::google::protobuf::int32 resonancelv() const;
  inline void set_resonancelv(::google::protobuf::int32 value);
  
  // optional bool haveAddPosition = 5;
  inline bool has_haveaddposition() const;
  inline void clear_haveaddposition();
  static const int kHaveAddPositionFieldNumber = 5;
  inline bool haveaddposition() const;
  inline void set_haveaddposition(bool value);
  
  // optional int32 id = 6;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 6;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 type = 7;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 7;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional string playerId = 8;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 8;
  inline const ::std::string& playerid() const;
  inline void set_playerid(const ::std::string& value);
  inline void set_playerid(const char* value);
  inline void set_playerid(const char* value, size_t size);
  inline ::std::string* mutable_playerid();
  inline ::std::string* release_playerid();
  
  // optional int32 serverId = 9;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 9;
  inline ::google::protobuf::int32 serverid() const;
  inline void set_serverid(::google::protobuf::int32 value);
  
  // optional int32 sex = 10;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 10;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);
  
  // optional int32 state = 11;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 11;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);
  
  // optional string name = 12;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 12;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // @@protoc_insertion_point(class_scope:protobuf.library.LibraryHeroInfo)
 private:
  inline void set_has_heroid();
  inline void clear_has_heroid();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_tier();
  inline void clear_has_tier();
  inline void set_has_resonancelv();
  inline void clear_has_resonancelv();
  inline void set_has_haveaddposition();
  inline void clear_has_haveaddposition();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_name();
  inline void clear_has_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 heroid_;
  ::google::protobuf::int32 lv_;
  ::google::protobuf::int32 tier_;
  ::google::protobuf::int32 resonancelv_;
  bool haveaddposition_;
  ::google::protobuf::int32 id_;
  ::std::string* playerid_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 serverid_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 state_;
  ::std::string* name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  friend void  protobuf_AddDesc_library_2eproto();
  friend void protobuf_AssignDesc_library_2eproto();
  friend void protobuf_ShutdownFile_library_2eproto();
  
  void InitAsDefaultInstance();
  static LibraryHeroInfo* default_instance_;
};
// -------------------------------------------------------------------

class LibraryAddHero : public ::google::protobuf::Message {
 public:
  LibraryAddHero();
  virtual ~LibraryAddHero();
  
  LibraryAddHero(const LibraryAddHero& from);
  
  inline LibraryAddHero& operator=(const LibraryAddHero& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LibraryAddHero& default_instance();
  
  void Swap(LibraryAddHero* other);
  
  // implements Message ----------------------------------------------
  
  LibraryAddHero* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LibraryAddHero& from);
  void MergeFrom(const LibraryAddHero& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional int32 number = 2;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 2;
  inline ::google::protobuf::int32 number() const;
  inline void set_number(::google::protobuf::int32 value);
  
  // optional int32 heroId = 3;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIdFieldNumber = 3;
  inline ::google::protobuf::int32 heroid() const;
  inline void set_heroid(::google::protobuf::int32 value);
  
  // optional int32 fromType = 4;
  inline bool has_fromtype() const;
  inline void clear_fromtype();
  static const int kFromTypeFieldNumber = 4;
  inline ::google::protobuf::int32 fromtype() const;
  inline void set_fromtype(::google::protobuf::int32 value);
  
  // optional string fromPlayerId = 5;
  inline bool has_fromplayerid() const;
  inline void clear_fromplayerid();
  static const int kFromPlayerIdFieldNumber = 5;
  inline const ::std::string& fromplayerid() const;
  inline void set_fromplayerid(const ::std::string& value);
  inline void set_fromplayerid(const char* value);
  inline void set_fromplayerid(const char* value, size_t size);
  inline ::std::string* mutable_fromplayerid();
  inline ::std::string* release_fromplayerid();
  
  // optional int32 fromServerId = 6;
  inline bool has_fromserverid() const;
  inline void clear_fromserverid();
  static const int kFromServerIdFieldNumber = 6;
  inline ::google::protobuf::int32 fromserverid() const;
  inline void set_fromserverid(::google::protobuf::int32 value);
  
  // optional int32 fromId = 7;
  inline bool has_fromid() const;
  inline void clear_fromid();
  static const int kFromIdFieldNumber = 7;
  inline ::google::protobuf::int32 fromid() const;
  inline void set_fromid(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protobuf.library.LibraryAddHero)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_number();
  inline void clear_has_number();
  inline void set_has_heroid();
  inline void clear_has_heroid();
  inline void set_has_fromtype();
  inline void clear_has_fromtype();
  inline void set_has_fromplayerid();
  inline void clear_has_fromplayerid();
  inline void set_has_fromserverid();
  inline void clear_has_fromserverid();
  inline void set_has_fromid();
  inline void clear_has_fromid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 number_;
  ::google::protobuf::int32 heroid_;
  ::google::protobuf::int32 fromtype_;
  ::std::string* fromplayerid_;
  ::google::protobuf::int32 fromserverid_;
  ::google::protobuf::int32 fromid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_library_2eproto();
  friend void protobuf_AssignDesc_library_2eproto();
  friend void protobuf_ShutdownFile_library_2eproto();
  
  void InitAsDefaultInstance();
  static LibraryAddHero* default_instance_;
};
// -------------------------------------------------------------------

class LibraryAllHero : public ::google::protobuf::Message {
 public:
  LibraryAllHero();
  virtual ~LibraryAllHero();
  
  LibraryAllHero(const LibraryAllHero& from);
  
  inline LibraryAllHero& operator=(const LibraryAllHero& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LibraryAllHero& default_instance();
  
  void Swap(LibraryAllHero* other);
  
  // implements Message ----------------------------------------------
  
  LibraryAllHero* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LibraryAllHero& from);
  void MergeFrom(const LibraryAllHero& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protobuf.library.LibrarySampleHero sampleHero = 1;
  inline int samplehero_size() const;
  inline void clear_samplehero();
  static const int kSampleHeroFieldNumber = 1;
  inline const ::protobuf::library::LibrarySampleHero& samplehero(int index) const;
  inline ::protobuf::library::LibrarySampleHero* mutable_samplehero(int index);
  inline ::protobuf::library::LibrarySampleHero* add_samplehero();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::library::LibrarySampleHero >&
      samplehero() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::library::LibrarySampleHero >*
      mutable_samplehero();
  
  // @@protoc_insertion_point(class_scope:protobuf.library.LibraryAllHero)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protobuf::library::LibrarySampleHero > samplehero_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_library_2eproto();
  friend void protobuf_AssignDesc_library_2eproto();
  friend void protobuf_ShutdownFile_library_2eproto();
  
  void InitAsDefaultInstance();
  static LibraryAllHero* default_instance_;
};
// -------------------------------------------------------------------

class LibrarySampleHero : public ::google::protobuf::Message {
 public:
  LibrarySampleHero();
  virtual ~LibrarySampleHero();
  
  LibrarySampleHero(const LibrarySampleHero& from);
  
  inline LibrarySampleHero& operator=(const LibrarySampleHero& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LibrarySampleHero& default_instance();
  
  void Swap(LibrarySampleHero* other);
  
  // implements Message ----------------------------------------------
  
  LibrarySampleHero* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LibrarySampleHero& from);
  void MergeFrom(const LibrarySampleHero& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 heroId = 1;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIdFieldNumber = 1;
  inline ::google::protobuf::int32 heroid() const;
  inline void set_heroid(::google::protobuf::int32 value);
  
  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 grade = 3;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 3;
  inline ::google::protobuf::int32 grade() const;
  inline void set_grade(::google::protobuf::int32 value);
  
  // optional string fromPlayerId = 4;
  inline bool has_fromplayerid() const;
  inline void clear_fromplayerid();
  static const int kFromPlayerIdFieldNumber = 4;
  inline const ::std::string& fromplayerid() const;
  inline void set_fromplayerid(const ::std::string& value);
  inline void set_fromplayerid(const char* value);
  inline void set_fromplayerid(const char* value, size_t size);
  inline ::std::string* mutable_fromplayerid();
  inline ::std::string* release_fromplayerid();
  
  // optional string fromPlayerName = 5;
  inline bool has_fromplayername() const;
  inline void clear_fromplayername();
  static const int kFromPlayerNameFieldNumber = 5;
  inline const ::std::string& fromplayername() const;
  inline void set_fromplayername(const ::std::string& value);
  inline void set_fromplayername(const char* value);
  inline void set_fromplayername(const char* value, size_t size);
  inline ::std::string* mutable_fromplayername();
  inline ::std::string* release_fromplayername();
  
  // @@protoc_insertion_point(class_scope:protobuf.library.LibrarySampleHero)
 private:
  inline void set_has_heroid();
  inline void clear_has_heroid();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_grade();
  inline void clear_has_grade();
  inline void set_has_fromplayerid();
  inline void clear_has_fromplayerid();
  inline void set_has_fromplayername();
  inline void clear_has_fromplayername();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 heroid_;
  ::google::protobuf::int32 id_;
  ::std::string* fromplayerid_;
  ::std::string* fromplayername_;
  ::google::protobuf::int32 grade_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_library_2eproto();
  friend void protobuf_AssignDesc_library_2eproto();
  friend void protobuf_ShutdownFile_library_2eproto();
  
  void InitAsDefaultInstance();
  static LibrarySampleHero* default_instance_;
};
// ===================================================================


// ===================================================================

// LibraryInfo

// repeated .protobuf.library.LibraryHeros libraryHero = 1;
inline int LibraryInfo::libraryhero_size() const {
  return libraryhero_.size();
}
inline void LibraryInfo::clear_libraryhero() {
  libraryhero_.Clear();
}
inline const ::protobuf::library::LibraryHeros& LibraryInfo::libraryhero(int index) const {
  return libraryhero_.Get(index);
}
inline ::protobuf::library::LibraryHeros* LibraryInfo::mutable_libraryhero(int index) {
  return libraryhero_.Mutable(index);
}
inline ::protobuf::library::LibraryHeros* LibraryInfo::add_libraryhero() {
  return libraryhero_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::library::LibraryHeros >&
LibraryInfo::libraryhero() const {
  return libraryhero_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::library::LibraryHeros >*
LibraryInfo::mutable_libraryhero() {
  return &libraryhero_;
}

// repeated .protobuf.library.LibraryHeroInfo heroAid = 2;
inline int LibraryInfo::heroaid_size() const {
  return heroaid_.size();
}
inline void LibraryInfo::clear_heroaid() {
  heroaid_.Clear();
}
inline const ::protobuf::library::LibraryHeroInfo& LibraryInfo::heroaid(int index) const {
  return heroaid_.Get(index);
}
inline ::protobuf::library::LibraryHeroInfo* LibraryInfo::mutable_heroaid(int index) {
  return heroaid_.Mutable(index);
}
inline ::protobuf::library::LibraryHeroInfo* LibraryInfo::add_heroaid() {
  return heroaid_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::library::LibraryHeroInfo >&
LibraryInfo::heroaid() const {
  return heroaid_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::library::LibraryHeroInfo >*
LibraryInfo::mutable_heroaid() {
  return &heroaid_;
}

// -------------------------------------------------------------------

// LibraryHeros

// optional int32 number = 1;
inline bool LibraryHeros::has_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LibraryHeros::set_has_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LibraryHeros::clear_has_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LibraryHeros::clear_number() {
  number_ = 0;
  clear_has_number();
}
inline ::google::protobuf::int32 LibraryHeros::number() const {
  return number_;
}
inline void LibraryHeros::set_number(::google::protobuf::int32 value) {
  set_has_number();
  number_ = value;
}

// repeated .protobuf.library.LibraryHeroInfo heros = 2;
inline int LibraryHeros::heros_size() const {
  return heros_.size();
}
inline void LibraryHeros::clear_heros() {
  heros_.Clear();
}
inline const ::protobuf::library::LibraryHeroInfo& LibraryHeros::heros(int index) const {
  return heros_.Get(index);
}
inline ::protobuf::library::LibraryHeroInfo* LibraryHeros::mutable_heros(int index) {
  return heros_.Mutable(index);
}
inline ::protobuf::library::LibraryHeroInfo* LibraryHeros::add_heros() {
  return heros_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::library::LibraryHeroInfo >&
LibraryHeros::heros() const {
  return heros_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::library::LibraryHeroInfo >*
LibraryHeros::mutable_heros() {
  return &heros_;
}

// optional bool haveAddPosition = 3;
inline bool LibraryHeros::has_haveaddposition() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LibraryHeros::set_has_haveaddposition() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LibraryHeros::clear_has_haveaddposition() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LibraryHeros::clear_haveaddposition() {
  haveaddposition_ = false;
  clear_has_haveaddposition();
}
inline bool LibraryHeros::haveaddposition() const {
  return haveaddposition_;
}
inline void LibraryHeros::set_haveaddposition(bool value) {
  set_has_haveaddposition();
  haveaddposition_ = value;
}

// -------------------------------------------------------------------

// LibraryHeroInfo

// required int32 heroId = 1;
inline bool LibraryHeroInfo::has_heroid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LibraryHeroInfo::set_has_heroid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LibraryHeroInfo::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LibraryHeroInfo::clear_heroid() {
  heroid_ = 0;
  clear_has_heroid();
}
inline ::google::protobuf::int32 LibraryHeroInfo::heroid() const {
  return heroid_;
}
inline void LibraryHeroInfo::set_heroid(::google::protobuf::int32 value) {
  set_has_heroid();
  heroid_ = value;
}

// required int32 lv = 2;
inline bool LibraryHeroInfo::has_lv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LibraryHeroInfo::set_has_lv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LibraryHeroInfo::clear_has_lv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LibraryHeroInfo::clear_lv() {
  lv_ = 0;
  clear_has_lv();
}
inline ::google::protobuf::int32 LibraryHeroInfo::lv() const {
  return lv_;
}
inline void LibraryHeroInfo::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
}

// required int32 tier = 3;
inline bool LibraryHeroInfo::has_tier() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LibraryHeroInfo::set_has_tier() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LibraryHeroInfo::clear_has_tier() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LibraryHeroInfo::clear_tier() {
  tier_ = 0;
  clear_has_tier();
}
inline ::google::protobuf::int32 LibraryHeroInfo::tier() const {
  return tier_;
}
inline void LibraryHeroInfo::set_tier(::google::protobuf::int32 value) {
  set_has_tier();
  tier_ = value;
}

// optional int32 resonanceLv = 4;
inline bool LibraryHeroInfo::has_resonancelv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LibraryHeroInfo::set_has_resonancelv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LibraryHeroInfo::clear_has_resonancelv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LibraryHeroInfo::clear_resonancelv() {
  resonancelv_ = 0;
  clear_has_resonancelv();
}
inline ::google::protobuf::int32 LibraryHeroInfo::resonancelv() const {
  return resonancelv_;
}
inline void LibraryHeroInfo::set_resonancelv(::google::protobuf::int32 value) {
  set_has_resonancelv();
  resonancelv_ = value;
}

// optional bool haveAddPosition = 5;
inline bool LibraryHeroInfo::has_haveaddposition() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LibraryHeroInfo::set_has_haveaddposition() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LibraryHeroInfo::clear_has_haveaddposition() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LibraryHeroInfo::clear_haveaddposition() {
  haveaddposition_ = false;
  clear_has_haveaddposition();
}
inline bool LibraryHeroInfo::haveaddposition() const {
  return haveaddposition_;
}
inline void LibraryHeroInfo::set_haveaddposition(bool value) {
  set_has_haveaddposition();
  haveaddposition_ = value;
}

// optional int32 id = 6;
inline bool LibraryHeroInfo::has_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LibraryHeroInfo::set_has_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LibraryHeroInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LibraryHeroInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 LibraryHeroInfo::id() const {
  return id_;
}
inline void LibraryHeroInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 type = 7;
inline bool LibraryHeroInfo::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LibraryHeroInfo::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LibraryHeroInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LibraryHeroInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 LibraryHeroInfo::type() const {
  return type_;
}
inline void LibraryHeroInfo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional string playerId = 8;
inline bool LibraryHeroInfo::has_playerid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LibraryHeroInfo::set_has_playerid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LibraryHeroInfo::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LibraryHeroInfo::clear_playerid() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    playerid_->clear();
  }
  clear_has_playerid();
}
inline const ::std::string& LibraryHeroInfo::playerid() const {
  return *playerid_;
}
inline void LibraryHeroInfo::set_playerid(const ::std::string& value) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(value);
}
inline void LibraryHeroInfo::set_playerid(const char* value) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(value);
}
inline void LibraryHeroInfo::set_playerid(const char* value, size_t size) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LibraryHeroInfo::mutable_playerid() {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  return playerid_;
}
inline ::std::string* LibraryHeroInfo::release_playerid() {
  clear_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playerid_;
    playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 serverId = 9;
inline bool LibraryHeroInfo::has_serverid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LibraryHeroInfo::set_has_serverid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LibraryHeroInfo::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LibraryHeroInfo::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
inline ::google::protobuf::int32 LibraryHeroInfo::serverid() const {
  return serverid_;
}
inline void LibraryHeroInfo::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
}

// optional int32 sex = 10;
inline bool LibraryHeroInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LibraryHeroInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LibraryHeroInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LibraryHeroInfo::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 LibraryHeroInfo::sex() const {
  return sex_;
}
inline void LibraryHeroInfo::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// optional int32 state = 11;
inline bool LibraryHeroInfo::has_state() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LibraryHeroInfo::set_has_state() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LibraryHeroInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LibraryHeroInfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 LibraryHeroInfo::state() const {
  return state_;
}
inline void LibraryHeroInfo::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional string name = 12;
inline bool LibraryHeroInfo::has_name() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LibraryHeroInfo::set_has_name() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LibraryHeroInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LibraryHeroInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& LibraryHeroInfo::name() const {
  return *name_;
}
inline void LibraryHeroInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void LibraryHeroInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void LibraryHeroInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LibraryHeroInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* LibraryHeroInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// LibraryAddHero

// required int32 type = 1;
inline bool LibraryAddHero::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LibraryAddHero::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LibraryAddHero::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LibraryAddHero::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 LibraryAddHero::type() const {
  return type_;
}
inline void LibraryAddHero::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 number = 2;
inline bool LibraryAddHero::has_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LibraryAddHero::set_has_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LibraryAddHero::clear_has_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LibraryAddHero::clear_number() {
  number_ = 0;
  clear_has_number();
}
inline ::google::protobuf::int32 LibraryAddHero::number() const {
  return number_;
}
inline void LibraryAddHero::set_number(::google::protobuf::int32 value) {
  set_has_number();
  number_ = value;
}

// optional int32 heroId = 3;
inline bool LibraryAddHero::has_heroid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LibraryAddHero::set_has_heroid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LibraryAddHero::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LibraryAddHero::clear_heroid() {
  heroid_ = 0;
  clear_has_heroid();
}
inline ::google::protobuf::int32 LibraryAddHero::heroid() const {
  return heroid_;
}
inline void LibraryAddHero::set_heroid(::google::protobuf::int32 value) {
  set_has_heroid();
  heroid_ = value;
}

// optional int32 fromType = 4;
inline bool LibraryAddHero::has_fromtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LibraryAddHero::set_has_fromtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LibraryAddHero::clear_has_fromtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LibraryAddHero::clear_fromtype() {
  fromtype_ = 0;
  clear_has_fromtype();
}
inline ::google::protobuf::int32 LibraryAddHero::fromtype() const {
  return fromtype_;
}
inline void LibraryAddHero::set_fromtype(::google::protobuf::int32 value) {
  set_has_fromtype();
  fromtype_ = value;
}

// optional string fromPlayerId = 5;
inline bool LibraryAddHero::has_fromplayerid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LibraryAddHero::set_has_fromplayerid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LibraryAddHero::clear_has_fromplayerid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LibraryAddHero::clear_fromplayerid() {
  if (fromplayerid_ != &::google::protobuf::internal::kEmptyString) {
    fromplayerid_->clear();
  }
  clear_has_fromplayerid();
}
inline const ::std::string& LibraryAddHero::fromplayerid() const {
  return *fromplayerid_;
}
inline void LibraryAddHero::set_fromplayerid(const ::std::string& value) {
  set_has_fromplayerid();
  if (fromplayerid_ == &::google::protobuf::internal::kEmptyString) {
    fromplayerid_ = new ::std::string;
  }
  fromplayerid_->assign(value);
}
inline void LibraryAddHero::set_fromplayerid(const char* value) {
  set_has_fromplayerid();
  if (fromplayerid_ == &::google::protobuf::internal::kEmptyString) {
    fromplayerid_ = new ::std::string;
  }
  fromplayerid_->assign(value);
}
inline void LibraryAddHero::set_fromplayerid(const char* value, size_t size) {
  set_has_fromplayerid();
  if (fromplayerid_ == &::google::protobuf::internal::kEmptyString) {
    fromplayerid_ = new ::std::string;
  }
  fromplayerid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LibraryAddHero::mutable_fromplayerid() {
  set_has_fromplayerid();
  if (fromplayerid_ == &::google::protobuf::internal::kEmptyString) {
    fromplayerid_ = new ::std::string;
  }
  return fromplayerid_;
}
inline ::std::string* LibraryAddHero::release_fromplayerid() {
  clear_has_fromplayerid();
  if (fromplayerid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fromplayerid_;
    fromplayerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 fromServerId = 6;
inline bool LibraryAddHero::has_fromserverid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LibraryAddHero::set_has_fromserverid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LibraryAddHero::clear_has_fromserverid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LibraryAddHero::clear_fromserverid() {
  fromserverid_ = 0;
  clear_has_fromserverid();
}
inline ::google::protobuf::int32 LibraryAddHero::fromserverid() const {
  return fromserverid_;
}
inline void LibraryAddHero::set_fromserverid(::google::protobuf::int32 value) {
  set_has_fromserverid();
  fromserverid_ = value;
}

// optional int32 fromId = 7;
inline bool LibraryAddHero::has_fromid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LibraryAddHero::set_has_fromid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LibraryAddHero::clear_has_fromid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LibraryAddHero::clear_fromid() {
  fromid_ = 0;
  clear_has_fromid();
}
inline ::google::protobuf::int32 LibraryAddHero::fromid() const {
  return fromid_;
}
inline void LibraryAddHero::set_fromid(::google::protobuf::int32 value) {
  set_has_fromid();
  fromid_ = value;
}

// -------------------------------------------------------------------

// LibraryAllHero

// repeated .protobuf.library.LibrarySampleHero sampleHero = 1;
inline int LibraryAllHero::samplehero_size() const {
  return samplehero_.size();
}
inline void LibraryAllHero::clear_samplehero() {
  samplehero_.Clear();
}
inline const ::protobuf::library::LibrarySampleHero& LibraryAllHero::samplehero(int index) const {
  return samplehero_.Get(index);
}
inline ::protobuf::library::LibrarySampleHero* LibraryAllHero::mutable_samplehero(int index) {
  return samplehero_.Mutable(index);
}
inline ::protobuf::library::LibrarySampleHero* LibraryAllHero::add_samplehero() {
  return samplehero_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::library::LibrarySampleHero >&
LibraryAllHero::samplehero() const {
  return samplehero_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::library::LibrarySampleHero >*
LibraryAllHero::mutable_samplehero() {
  return &samplehero_;
}

// -------------------------------------------------------------------

// LibrarySampleHero

// optional int32 heroId = 1;
inline bool LibrarySampleHero::has_heroid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LibrarySampleHero::set_has_heroid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LibrarySampleHero::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LibrarySampleHero::clear_heroid() {
  heroid_ = 0;
  clear_has_heroid();
}
inline ::google::protobuf::int32 LibrarySampleHero::heroid() const {
  return heroid_;
}
inline void LibrarySampleHero::set_heroid(::google::protobuf::int32 value) {
  set_has_heroid();
  heroid_ = value;
}

// optional int32 id = 2;
inline bool LibrarySampleHero::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LibrarySampleHero::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LibrarySampleHero::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LibrarySampleHero::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 LibrarySampleHero::id() const {
  return id_;
}
inline void LibrarySampleHero::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 grade = 3;
inline bool LibrarySampleHero::has_grade() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LibrarySampleHero::set_has_grade() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LibrarySampleHero::clear_has_grade() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LibrarySampleHero::clear_grade() {
  grade_ = 0;
  clear_has_grade();
}
inline ::google::protobuf::int32 LibrarySampleHero::grade() const {
  return grade_;
}
inline void LibrarySampleHero::set_grade(::google::protobuf::int32 value) {
  set_has_grade();
  grade_ = value;
}

// optional string fromPlayerId = 4;
inline bool LibrarySampleHero::has_fromplayerid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LibrarySampleHero::set_has_fromplayerid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LibrarySampleHero::clear_has_fromplayerid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LibrarySampleHero::clear_fromplayerid() {
  if (fromplayerid_ != &::google::protobuf::internal::kEmptyString) {
    fromplayerid_->clear();
  }
  clear_has_fromplayerid();
}
inline const ::std::string& LibrarySampleHero::fromplayerid() const {
  return *fromplayerid_;
}
inline void LibrarySampleHero::set_fromplayerid(const ::std::string& value) {
  set_has_fromplayerid();
  if (fromplayerid_ == &::google::protobuf::internal::kEmptyString) {
    fromplayerid_ = new ::std::string;
  }
  fromplayerid_->assign(value);
}
inline void LibrarySampleHero::set_fromplayerid(const char* value) {
  set_has_fromplayerid();
  if (fromplayerid_ == &::google::protobuf::internal::kEmptyString) {
    fromplayerid_ = new ::std::string;
  }
  fromplayerid_->assign(value);
}
inline void LibrarySampleHero::set_fromplayerid(const char* value, size_t size) {
  set_has_fromplayerid();
  if (fromplayerid_ == &::google::protobuf::internal::kEmptyString) {
    fromplayerid_ = new ::std::string;
  }
  fromplayerid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LibrarySampleHero::mutable_fromplayerid() {
  set_has_fromplayerid();
  if (fromplayerid_ == &::google::protobuf::internal::kEmptyString) {
    fromplayerid_ = new ::std::string;
  }
  return fromplayerid_;
}
inline ::std::string* LibrarySampleHero::release_fromplayerid() {
  clear_has_fromplayerid();
  if (fromplayerid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fromplayerid_;
    fromplayerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string fromPlayerName = 5;
inline bool LibrarySampleHero::has_fromplayername() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LibrarySampleHero::set_has_fromplayername() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LibrarySampleHero::clear_has_fromplayername() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LibrarySampleHero::clear_fromplayername() {
  if (fromplayername_ != &::google::protobuf::internal::kEmptyString) {
    fromplayername_->clear();
  }
  clear_has_fromplayername();
}
inline const ::std::string& LibrarySampleHero::fromplayername() const {
  return *fromplayername_;
}
inline void LibrarySampleHero::set_fromplayername(const ::std::string& value) {
  set_has_fromplayername();
  if (fromplayername_ == &::google::protobuf::internal::kEmptyString) {
    fromplayername_ = new ::std::string;
  }
  fromplayername_->assign(value);
}
inline void LibrarySampleHero::set_fromplayername(const char* value) {
  set_has_fromplayername();
  if (fromplayername_ == &::google::protobuf::internal::kEmptyString) {
    fromplayername_ = new ::std::string;
  }
  fromplayername_->assign(value);
}
inline void LibrarySampleHero::set_fromplayername(const char* value, size_t size) {
  set_has_fromplayername();
  if (fromplayername_ == &::google::protobuf::internal::kEmptyString) {
    fromplayername_ = new ::std::string;
  }
  fromplayername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LibrarySampleHero::mutable_fromplayername() {
  set_has_fromplayername();
  if (fromplayername_ == &::google::protobuf::internal::kEmptyString) {
    fromplayername_ = new ::std::string;
  }
  return fromplayername_;
}
inline ::std::string* LibrarySampleHero::release_fromplayername() {
  clear_has_fromplayername();
  if (fromplayername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fromplayername_;
    fromplayername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace library
}  // namespace protobuf

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_library_2eproto__INCLUDED
