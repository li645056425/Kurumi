// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "town.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protobuf {
namespace town {

namespace {

const ::google::protobuf::Descriptor* FreshReplyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FreshReplyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* iconinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  iconinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* playerInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  playerInfoList_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleHistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleHistory_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleHistoryList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleHistoryList_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewBattleHistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewBattleHistory_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewBattleHistoryList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewBattleHistoryList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_town_2eproto() {
  protobuf_AddDesc_town_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "town.proto");
  GOOGLE_CHECK(file != NULL);
  FreshReplyInfo_descriptor_ = file->message_type(0);
  static const int FreshReplyInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreshReplyInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreshReplyInfo, extid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreshReplyInfo, carbontowerh2ocount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreshReplyInfo, nextfreshtime_),
  };
  FreshReplyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FreshReplyInfo_descriptor_,
      FreshReplyInfo::default_instance_,
      FreshReplyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreshReplyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreshReplyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FreshReplyInfo));
  iconinfo_descriptor_ = file->message_type(1);
  static const int iconinfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, headframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, serverid_),
  };
  iconinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      iconinfo_descriptor_,
      iconinfo::default_instance_,
      iconinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(iconinfo));
  playerInfoList_descriptor_ = file->message_type(2);
  static const int playerInfoList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerInfoList, showinfo_),
  };
  playerInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      playerInfoList_descriptor_,
      playerInfoList::default_instance_,
      playerInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(playerInfoList));
  BattleHistory_descriptor_ = file->message_type(3);
  static const int BattleHistory_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHistory, attackname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHistory, attacklvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHistory, attackhead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHistory, attacker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHistory, attackid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHistory, defineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHistory, seed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHistory, battletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHistory, victory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHistory, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHistory, headframe_),
  };
  BattleHistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleHistory_descriptor_,
      BattleHistory::default_instance_,
      BattleHistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleHistory));
  BattleHistoryList_descriptor_ = file->message_type(4);
  static const int BattleHistoryList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHistoryList, battles_),
  };
  BattleHistoryList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleHistoryList_descriptor_,
      BattleHistoryList::default_instance_,
      BattleHistoryList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHistoryList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHistoryList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleHistoryList));
  NewBattleHistory_descriptor_ = file->message_type(5);
  static const int NewBattleHistory_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewBattleHistory, attackname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewBattleHistory, attacklvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewBattleHistory, attackhead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewBattleHistory, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewBattleHistory, attackid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewBattleHistory, battletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewBattleHistory, victory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewBattleHistory, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewBattleHistory, defineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewBattleHistory, headframe_),
  };
  NewBattleHistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewBattleHistory_descriptor_,
      NewBattleHistory::default_instance_,
      NewBattleHistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewBattleHistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewBattleHistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewBattleHistory));
  NewBattleHistoryList_descriptor_ = file->message_type(6);
  static const int NewBattleHistoryList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewBattleHistoryList, battles_),
  };
  NewBattleHistoryList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewBattleHistoryList_descriptor_,
      NewBattleHistoryList::default_instance_,
      NewBattleHistoryList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewBattleHistoryList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewBattleHistoryList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewBattleHistoryList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_town_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FreshReplyInfo_descriptor_, &FreshReplyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    iconinfo_descriptor_, &iconinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    playerInfoList_descriptor_, &playerInfoList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleHistory_descriptor_, &BattleHistory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleHistoryList_descriptor_, &BattleHistoryList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewBattleHistory_descriptor_, &NewBattleHistory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewBattleHistoryList_descriptor_, &NewBattleHistoryList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_town_2eproto() {
  delete FreshReplyInfo::default_instance_;
  delete FreshReplyInfo_reflection_;
  delete iconinfo::default_instance_;
  delete iconinfo_reflection_;
  delete playerInfoList::default_instance_;
  delete playerInfoList_reflection_;
  delete BattleHistory::default_instance_;
  delete BattleHistory_reflection_;
  delete BattleHistoryList::default_instance_;
  delete BattleHistoryList_reflection_;
  delete NewBattleHistory::default_instance_;
  delete NewBattleHistory_reflection_;
  delete NewBattleHistoryList::default_instance_;
  delete NewBattleHistoryList_reflection_;
}

void protobuf_AddDesc_town_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf::common::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ntown.proto\022\rprotobuf.town\032\014common.prot"
    "o\"a\n\016FreshReplyInfo\022\014\n\004type\030\001 \002(\005\022\r\n\005ext"
    "id\030\002 \001(\005\022\033\n\023carbonTowerh2ocount\030\003 \001(\005\022\025\n"
    "\rnextFreshTime\030\004 \001(\003\"\177\n\010iconinfo\022\r\n\005leve"
    "l\030\001 \002(\005\022\014\n\004name\030\002 \002(\t\022\014\n\004head\030\003 \002(\t\022\021\n\tg"
    "uildName\030\004 \001(\t\022\021\n\theadFrame\030\005 \001(\005\022\020\n\010pla"
    "yerId\030\006 \001(\t\022\020\n\010serverId\030\007 \001(\005\";\n\016playerI"
    "nfoList\022)\n\010showinfo\030\001 \003(\0132\027.protobuf.tow"
    "n.iconinfo\"\363\001\n\rBattleHistory\022\022\n\nattackNa"
    "me\030\001 \002(\t\022\021\n\tattackLvl\030\002 \002(\005\022\022\n\nattackHea"
    "d\030\003 \002(\t\022/\n\010attacker\030\004 \001(\0132\035.protobuf.com"
    "mon.LineupDetail\022\020\n\010attackId\030\005 \002(\t\022\020\n\010de"
    "fineid\030\006 \001(\005\022\014\n\004seed\030\007 \002(\003\022\022\n\nbattletype"
    "\030\010 \002(\005\022\017\n\007victory\030\t \002(\010\022\014\n\004time\030\n \002(\003\022\021\n"
    "\theadFrame\030\013 \001(\005\"B\n\021BattleHistoryList\022-\n"
    "\007battles\030\001 \003(\0132\034.protobuf.town.BattleHis"
    "tory\"\303\001\n\020NewBattleHistory\022\022\n\nattackName\030"
    "\001 \002(\t\022\021\n\tattackLvl\030\002 \002(\005\022\022\n\nattackHead\030\003"
    " \002(\t\022\n\n\002id\030\004 \002(\t\022\020\n\010attackId\030\005 \002(\t\022\022\n\nba"
    "ttletype\030\006 \002(\005\022\017\n\007victory\030\007 \002(\010\022\014\n\004time\030"
    "\010 \002(\003\022\020\n\010defineid\030\t \002(\005\022\021\n\theadFrame\030\n \001"
    "(\005\"H\n\024NewBattleHistoryList\0220\n\007battles\030\001 "
    "\003(\0132\037.protobuf.town.NewBattleHistoryB \n\023"
    "xag.idgo.core.protoB\tTownProto", 950);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "town.proto", &protobuf_RegisterTypes);
  FreshReplyInfo::default_instance_ = new FreshReplyInfo();
  iconinfo::default_instance_ = new iconinfo();
  playerInfoList::default_instance_ = new playerInfoList();
  BattleHistory::default_instance_ = new BattleHistory();
  BattleHistoryList::default_instance_ = new BattleHistoryList();
  NewBattleHistory::default_instance_ = new NewBattleHistory();
  NewBattleHistoryList::default_instance_ = new NewBattleHistoryList();
  FreshReplyInfo::default_instance_->InitAsDefaultInstance();
  iconinfo::default_instance_->InitAsDefaultInstance();
  playerInfoList::default_instance_->InitAsDefaultInstance();
  BattleHistory::default_instance_->InitAsDefaultInstance();
  BattleHistoryList::default_instance_->InitAsDefaultInstance();
  NewBattleHistory::default_instance_->InitAsDefaultInstance();
  NewBattleHistoryList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_town_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_town_2eproto {
  StaticDescriptorInitializer_town_2eproto() {
    protobuf_AddDesc_town_2eproto();
  }
} static_descriptor_initializer_town_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int FreshReplyInfo::kTypeFieldNumber;
const int FreshReplyInfo::kExtidFieldNumber;
const int FreshReplyInfo::kCarbonTowerh2OcountFieldNumber;
const int FreshReplyInfo::kNextFreshTimeFieldNumber;
#endif  // !_MSC_VER

FreshReplyInfo::FreshReplyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FreshReplyInfo::InitAsDefaultInstance() {
}

FreshReplyInfo::FreshReplyInfo(const FreshReplyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FreshReplyInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  extid_ = 0;
  carbontowerh2ocount_ = 0;
  nextfreshtime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FreshReplyInfo::~FreshReplyInfo() {
  SharedDtor();
}

void FreshReplyInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FreshReplyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FreshReplyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FreshReplyInfo_descriptor_;
}

const FreshReplyInfo& FreshReplyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_town_2eproto();  return *default_instance_;
}

FreshReplyInfo* FreshReplyInfo::default_instance_ = NULL;

FreshReplyInfo* FreshReplyInfo::New() const {
  return new FreshReplyInfo;
}

void FreshReplyInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    extid_ = 0;
    carbontowerh2ocount_ = 0;
    nextfreshtime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FreshReplyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_extid;
        break;
      }
      
      // optional int32 extid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_extid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &extid_)));
          set_has_extid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_carbonTowerh2ocount;
        break;
      }
      
      // optional int32 carbonTowerh2ocount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_carbonTowerh2ocount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &carbontowerh2ocount_)));
          set_has_carbontowerh2ocount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nextFreshTime;
        break;
      }
      
      // optional int64 nextFreshTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextFreshTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nextfreshtime_)));
          set_has_nextfreshtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FreshReplyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // optional int32 extid = 2;
  if (has_extid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->extid(), output);
  }
  
  // optional int32 carbonTowerh2ocount = 3;
  if (has_carbontowerh2ocount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->carbontowerh2ocount(), output);
  }
  
  // optional int64 nextFreshTime = 4;
  if (has_nextfreshtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->nextfreshtime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FreshReplyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // optional int32 extid = 2;
  if (has_extid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->extid(), target);
  }
  
  // optional int32 carbonTowerh2ocount = 3;
  if (has_carbontowerh2ocount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->carbontowerh2ocount(), target);
  }
  
  // optional int64 nextFreshTime = 4;
  if (has_nextfreshtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->nextfreshtime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FreshReplyInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int32 extid = 2;
    if (has_extid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->extid());
    }
    
    // optional int32 carbonTowerh2ocount = 3;
    if (has_carbontowerh2ocount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->carbontowerh2ocount());
    }
    
    // optional int64 nextFreshTime = 4;
    if (has_nextfreshtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->nextfreshtime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FreshReplyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FreshReplyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FreshReplyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FreshReplyInfo::MergeFrom(const FreshReplyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_extid()) {
      set_extid(from.extid());
    }
    if (from.has_carbontowerh2ocount()) {
      set_carbontowerh2ocount(from.carbontowerh2ocount());
    }
    if (from.has_nextfreshtime()) {
      set_nextfreshtime(from.nextfreshtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FreshReplyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FreshReplyInfo::CopyFrom(const FreshReplyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FreshReplyInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void FreshReplyInfo::Swap(FreshReplyInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(extid_, other->extid_);
    std::swap(carbontowerh2ocount_, other->carbontowerh2ocount_);
    std::swap(nextfreshtime_, other->nextfreshtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FreshReplyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FreshReplyInfo_descriptor_;
  metadata.reflection = FreshReplyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int iconinfo::kLevelFieldNumber;
const int iconinfo::kNameFieldNumber;
const int iconinfo::kHeadFieldNumber;
const int iconinfo::kGuildNameFieldNumber;
const int iconinfo::kHeadFrameFieldNumber;
const int iconinfo::kPlayerIdFieldNumber;
const int iconinfo::kServerIdFieldNumber;
#endif  // !_MSC_VER

iconinfo::iconinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void iconinfo::InitAsDefaultInstance() {
}

iconinfo::iconinfo(const iconinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void iconinfo::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  headframe_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serverid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

iconinfo::~iconinfo() {
  SharedDtor();
}

void iconinfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    delete head_;
  }
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (this != default_instance_) {
  }
}

void iconinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* iconinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return iconinfo_descriptor_;
}

const iconinfo& iconinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_town_2eproto();  return *default_instance_;
}

iconinfo* iconinfo::default_instance_ = NULL;

iconinfo* iconinfo::New() const {
  return new iconinfo;
}

void iconinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_head()) {
      if (head_ != &::google::protobuf::internal::kEmptyString) {
        head_->clear();
      }
    }
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
    headframe_ = 0;
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    serverid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool iconinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_head;
        break;
      }
      
      // required string head = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_head()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->head().data(), this->head().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_guildName;
        break;
      }
      
      // optional string guildName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_headFrame;
        break;
      }
      
      // optional int32 headFrame = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headFrame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headframe_)));
          set_has_headframe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_playerId;
        break;
      }
      
      // optional string playerId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_serverId;
        break;
      }
      
      // optional int32 serverId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void iconinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // required string head = 3;
  if (has_head()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head().data(), this->head().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->head(), output);
  }
  
  // optional string guildName = 4;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->guildname(), output);
  }
  
  // optional int32 headFrame = 5;
  if (has_headframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->headframe(), output);
  }
  
  // optional string playerId = 6;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->playerid(), output);
  }
  
  // optional int32 serverId = 7;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->serverid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* iconinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // required string head = 3;
  if (has_head()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head().data(), this->head().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->head(), target);
  }
  
  // optional string guildName = 4;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->guildname(), target);
  }
  
  // optional int32 headFrame = 5;
  if (has_headframe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->headframe(), target);
  }
  
  // optional string playerId = 6;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->playerid(), target);
  }
  
  // optional int32 serverId = 7;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->serverid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int iconinfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string head = 3;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->head());
    }
    
    // optional string guildName = 4;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }
    
    // optional int32 headFrame = 5;
    if (has_headframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headframe());
    }
    
    // optional string playerId = 6;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }
    
    // optional int32 serverId = 7;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void iconinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const iconinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const iconinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void iconinfo::MergeFrom(const iconinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_head()) {
      set_head(from.head());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_headframe()) {
      set_headframe(from.headframe());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void iconinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void iconinfo::CopyFrom(const iconinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool iconinfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void iconinfo::Swap(iconinfo* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(name_, other->name_);
    std::swap(head_, other->head_);
    std::swap(guildname_, other->guildname_);
    std::swap(headframe_, other->headframe_);
    std::swap(playerid_, other->playerid_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata iconinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = iconinfo_descriptor_;
  metadata.reflection = iconinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int playerInfoList::kShowinfoFieldNumber;
#endif  // !_MSC_VER

playerInfoList::playerInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void playerInfoList::InitAsDefaultInstance() {
}

playerInfoList::playerInfoList(const playerInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void playerInfoList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

playerInfoList::~playerInfoList() {
  SharedDtor();
}

void playerInfoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void playerInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* playerInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return playerInfoList_descriptor_;
}

const playerInfoList& playerInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_town_2eproto();  return *default_instance_;
}

playerInfoList* playerInfoList::default_instance_ = NULL;

playerInfoList* playerInfoList::New() const {
  return new playerInfoList;
}

void playerInfoList::Clear() {
  showinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool playerInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.town.iconinfo showinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_showinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_showinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_showinfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void playerInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.town.iconinfo showinfo = 1;
  for (int i = 0; i < this->showinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->showinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* playerInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.town.iconinfo showinfo = 1;
  for (int i = 0; i < this->showinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->showinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int playerInfoList::ByteSize() const {
  int total_size = 0;
  
  // repeated .protobuf.town.iconinfo showinfo = 1;
  total_size += 1 * this->showinfo_size();
  for (int i = 0; i < this->showinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->showinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void playerInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const playerInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const playerInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void playerInfoList::MergeFrom(const playerInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  showinfo_.MergeFrom(from.showinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void playerInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void playerInfoList::CopyFrom(const playerInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool playerInfoList::IsInitialized() const {
  
  for (int i = 0; i < showinfo_size(); i++) {
    if (!this->showinfo(i).IsInitialized()) return false;
  }
  return true;
}

void playerInfoList::Swap(playerInfoList* other) {
  if (other != this) {
    showinfo_.Swap(&other->showinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata playerInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = playerInfoList_descriptor_;
  metadata.reflection = playerInfoList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleHistory::kAttackNameFieldNumber;
const int BattleHistory::kAttackLvlFieldNumber;
const int BattleHistory::kAttackHeadFieldNumber;
const int BattleHistory::kAttackerFieldNumber;
const int BattleHistory::kAttackIdFieldNumber;
const int BattleHistory::kDefineidFieldNumber;
const int BattleHistory::kSeedFieldNumber;
const int BattleHistory::kBattletypeFieldNumber;
const int BattleHistory::kVictoryFieldNumber;
const int BattleHistory::kTimeFieldNumber;
const int BattleHistory::kHeadFrameFieldNumber;
#endif  // !_MSC_VER

BattleHistory::BattleHistory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleHistory::InitAsDefaultInstance() {
  attacker_ = const_cast< ::protobuf::common::LineupDetail*>(&::protobuf::common::LineupDetail::default_instance());
}

BattleHistory::BattleHistory(const BattleHistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleHistory::SharedCtor() {
  _cached_size_ = 0;
  attackname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  attacklvl_ = 0;
  attackhead_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  attacker_ = NULL;
  attackid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  defineid_ = 0;
  seed_ = GOOGLE_LONGLONG(0);
  battletype_ = 0;
  victory_ = false;
  time_ = GOOGLE_LONGLONG(0);
  headframe_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleHistory::~BattleHistory() {
  SharedDtor();
}

void BattleHistory::SharedDtor() {
  if (attackname_ != &::google::protobuf::internal::kEmptyString) {
    delete attackname_;
  }
  if (attackhead_ != &::google::protobuf::internal::kEmptyString) {
    delete attackhead_;
  }
  if (attackid_ != &::google::protobuf::internal::kEmptyString) {
    delete attackid_;
  }
  if (this != default_instance_) {
    delete attacker_;
  }
}

void BattleHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleHistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleHistory_descriptor_;
}

const BattleHistory& BattleHistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_town_2eproto();  return *default_instance_;
}

BattleHistory* BattleHistory::default_instance_ = NULL;

BattleHistory* BattleHistory::New() const {
  return new BattleHistory;
}

void BattleHistory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_attackname()) {
      if (attackname_ != &::google::protobuf::internal::kEmptyString) {
        attackname_->clear();
      }
    }
    attacklvl_ = 0;
    if (has_attackhead()) {
      if (attackhead_ != &::google::protobuf::internal::kEmptyString) {
        attackhead_->clear();
      }
    }
    if (has_attacker()) {
      if (attacker_ != NULL) attacker_->::protobuf::common::LineupDetail::Clear();
    }
    if (has_attackid()) {
      if (attackid_ != &::google::protobuf::internal::kEmptyString) {
        attackid_->clear();
      }
    }
    defineid_ = 0;
    seed_ = GOOGLE_LONGLONG(0);
    battletype_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    victory_ = false;
    time_ = GOOGLE_LONGLONG(0);
    headframe_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string attackName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attackname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->attackname().data(), this->attackname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attackLvl;
        break;
      }
      
      // required int32 attackLvl = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attackLvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attacklvl_)));
          set_has_attacklvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attackHead;
        break;
      }
      
      // required string attackHead = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attackHead:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attackhead()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->attackhead().data(), this->attackhead().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_attacker;
        break;
      }
      
      // optional .protobuf.common.LineupDetail attacker = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attacker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attacker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_attackId;
        break;
      }
      
      // required string attackId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attackId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attackid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->attackid().data(), this->attackid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_defineid;
        break;
      }
      
      // optional int32 defineid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defineid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defineid_)));
          set_has_defineid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_seed;
        break;
      }
      
      // required int64 seed = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &seed_)));
          set_has_seed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_battletype;
        break;
      }
      
      // required int32 battletype = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battletype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battletype_)));
          set_has_battletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_victory;
        break;
      }
      
      // required bool victory = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_victory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &victory_)));
          set_has_victory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_time;
        break;
      }
      
      // required int64 time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_headFrame;
        break;
      }
      
      // optional int32 headFrame = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headFrame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headframe_)));
          set_has_headframe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string attackName = 1;
  if (has_attackname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attackname().data(), this->attackname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->attackname(), output);
  }
  
  // required int32 attackLvl = 2;
  if (has_attacklvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->attacklvl(), output);
  }
  
  // required string attackHead = 3;
  if (has_attackhead()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attackhead().data(), this->attackhead().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->attackhead(), output);
  }
  
  // optional .protobuf.common.LineupDetail attacker = 4;
  if (has_attacker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->attacker(), output);
  }
  
  // required string attackId = 5;
  if (has_attackid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attackid().data(), this->attackid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->attackid(), output);
  }
  
  // optional int32 defineid = 6;
  if (has_defineid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->defineid(), output);
  }
  
  // required int64 seed = 7;
  if (has_seed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->seed(), output);
  }
  
  // required int32 battletype = 8;
  if (has_battletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->battletype(), output);
  }
  
  // required bool victory = 9;
  if (has_victory()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->victory(), output);
  }
  
  // required int64 time = 10;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->time(), output);
  }
  
  // optional int32 headFrame = 11;
  if (has_headframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->headframe(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleHistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string attackName = 1;
  if (has_attackname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attackname().data(), this->attackname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->attackname(), target);
  }
  
  // required int32 attackLvl = 2;
  if (has_attacklvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->attacklvl(), target);
  }
  
  // required string attackHead = 3;
  if (has_attackhead()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attackhead().data(), this->attackhead().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->attackhead(), target);
  }
  
  // optional .protobuf.common.LineupDetail attacker = 4;
  if (has_attacker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->attacker(), target);
  }
  
  // required string attackId = 5;
  if (has_attackid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attackid().data(), this->attackid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->attackid(), target);
  }
  
  // optional int32 defineid = 6;
  if (has_defineid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->defineid(), target);
  }
  
  // required int64 seed = 7;
  if (has_seed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->seed(), target);
  }
  
  // required int32 battletype = 8;
  if (has_battletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->battletype(), target);
  }
  
  // required bool victory = 9;
  if (has_victory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->victory(), target);
  }
  
  // required int64 time = 10;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->time(), target);
  }
  
  // optional int32 headFrame = 11;
  if (has_headframe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->headframe(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleHistory::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string attackName = 1;
    if (has_attackname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attackname());
    }
    
    // required int32 attackLvl = 2;
    if (has_attacklvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attacklvl());
    }
    
    // required string attackHead = 3;
    if (has_attackhead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attackhead());
    }
    
    // optional .protobuf.common.LineupDetail attacker = 4;
    if (has_attacker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attacker());
    }
    
    // required string attackId = 5;
    if (has_attackid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attackid());
    }
    
    // optional int32 defineid = 6;
    if (has_defineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defineid());
    }
    
    // required int64 seed = 7;
    if (has_seed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->seed());
    }
    
    // required int32 battletype = 8;
    if (has_battletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battletype());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bool victory = 9;
    if (has_victory()) {
      total_size += 1 + 1;
    }
    
    // required int64 time = 10;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }
    
    // optional int32 headFrame = 11;
    if (has_headframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headframe());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleHistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleHistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleHistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleHistory::MergeFrom(const BattleHistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attackname()) {
      set_attackname(from.attackname());
    }
    if (from.has_attacklvl()) {
      set_attacklvl(from.attacklvl());
    }
    if (from.has_attackhead()) {
      set_attackhead(from.attackhead());
    }
    if (from.has_attacker()) {
      mutable_attacker()->::protobuf::common::LineupDetail::MergeFrom(from.attacker());
    }
    if (from.has_attackid()) {
      set_attackid(from.attackid());
    }
    if (from.has_defineid()) {
      set_defineid(from.defineid());
    }
    if (from.has_seed()) {
      set_seed(from.seed());
    }
    if (from.has_battletype()) {
      set_battletype(from.battletype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_victory()) {
      set_victory(from.victory());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_headframe()) {
      set_headframe(from.headframe());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleHistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleHistory::CopyFrom(const BattleHistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleHistory::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003d7) != 0x000003d7) return false;
  
  if (has_attacker()) {
    if (!this->attacker().IsInitialized()) return false;
  }
  return true;
}

void BattleHistory::Swap(BattleHistory* other) {
  if (other != this) {
    std::swap(attackname_, other->attackname_);
    std::swap(attacklvl_, other->attacklvl_);
    std::swap(attackhead_, other->attackhead_);
    std::swap(attacker_, other->attacker_);
    std::swap(attackid_, other->attackid_);
    std::swap(defineid_, other->defineid_);
    std::swap(seed_, other->seed_);
    std::swap(battletype_, other->battletype_);
    std::swap(victory_, other->victory_);
    std::swap(time_, other->time_);
    std::swap(headframe_, other->headframe_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleHistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleHistory_descriptor_;
  metadata.reflection = BattleHistory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleHistoryList::kBattlesFieldNumber;
#endif  // !_MSC_VER

BattleHistoryList::BattleHistoryList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleHistoryList::InitAsDefaultInstance() {
}

BattleHistoryList::BattleHistoryList(const BattleHistoryList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleHistoryList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleHistoryList::~BattleHistoryList() {
  SharedDtor();
}

void BattleHistoryList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleHistoryList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleHistoryList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleHistoryList_descriptor_;
}

const BattleHistoryList& BattleHistoryList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_town_2eproto();  return *default_instance_;
}

BattleHistoryList* BattleHistoryList::default_instance_ = NULL;

BattleHistoryList* BattleHistoryList::New() const {
  return new BattleHistoryList;
}

void BattleHistoryList::Clear() {
  battles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleHistoryList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.town.BattleHistory battles = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_battles;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleHistoryList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.town.BattleHistory battles = 1;
  for (int i = 0; i < this->battles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->battles(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleHistoryList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.town.BattleHistory battles = 1;
  for (int i = 0; i < this->battles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->battles(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleHistoryList::ByteSize() const {
  int total_size = 0;
  
  // repeated .protobuf.town.BattleHistory battles = 1;
  total_size += 1 * this->battles_size();
  for (int i = 0; i < this->battles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battles(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleHistoryList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleHistoryList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleHistoryList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleHistoryList::MergeFrom(const BattleHistoryList& from) {
  GOOGLE_CHECK_NE(&from, this);
  battles_.MergeFrom(from.battles_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleHistoryList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleHistoryList::CopyFrom(const BattleHistoryList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleHistoryList::IsInitialized() const {
  
  for (int i = 0; i < battles_size(); i++) {
    if (!this->battles(i).IsInitialized()) return false;
  }
  return true;
}

void BattleHistoryList::Swap(BattleHistoryList* other) {
  if (other != this) {
    battles_.Swap(&other->battles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleHistoryList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleHistoryList_descriptor_;
  metadata.reflection = BattleHistoryList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewBattleHistory::kAttackNameFieldNumber;
const int NewBattleHistory::kAttackLvlFieldNumber;
const int NewBattleHistory::kAttackHeadFieldNumber;
const int NewBattleHistory::kIdFieldNumber;
const int NewBattleHistory::kAttackIdFieldNumber;
const int NewBattleHistory::kBattletypeFieldNumber;
const int NewBattleHistory::kVictoryFieldNumber;
const int NewBattleHistory::kTimeFieldNumber;
const int NewBattleHistory::kDefineidFieldNumber;
const int NewBattleHistory::kHeadFrameFieldNumber;
#endif  // !_MSC_VER

NewBattleHistory::NewBattleHistory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NewBattleHistory::InitAsDefaultInstance() {
}

NewBattleHistory::NewBattleHistory(const NewBattleHistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NewBattleHistory::SharedCtor() {
  _cached_size_ = 0;
  attackname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  attacklvl_ = 0;
  attackhead_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  attackid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  battletype_ = 0;
  victory_ = false;
  time_ = GOOGLE_LONGLONG(0);
  defineid_ = 0;
  headframe_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewBattleHistory::~NewBattleHistory() {
  SharedDtor();
}

void NewBattleHistory::SharedDtor() {
  if (attackname_ != &::google::protobuf::internal::kEmptyString) {
    delete attackname_;
  }
  if (attackhead_ != &::google::protobuf::internal::kEmptyString) {
    delete attackhead_;
  }
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (attackid_ != &::google::protobuf::internal::kEmptyString) {
    delete attackid_;
  }
  if (this != default_instance_) {
  }
}

void NewBattleHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewBattleHistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewBattleHistory_descriptor_;
}

const NewBattleHistory& NewBattleHistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_town_2eproto();  return *default_instance_;
}

NewBattleHistory* NewBattleHistory::default_instance_ = NULL;

NewBattleHistory* NewBattleHistory::New() const {
  return new NewBattleHistory;
}

void NewBattleHistory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_attackname()) {
      if (attackname_ != &::google::protobuf::internal::kEmptyString) {
        attackname_->clear();
      }
    }
    attacklvl_ = 0;
    if (has_attackhead()) {
      if (attackhead_ != &::google::protobuf::internal::kEmptyString) {
        attackhead_->clear();
      }
    }
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_attackid()) {
      if (attackid_ != &::google::protobuf::internal::kEmptyString) {
        attackid_->clear();
      }
    }
    battletype_ = 0;
    victory_ = false;
    time_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    defineid_ = 0;
    headframe_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewBattleHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string attackName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attackname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->attackname().data(), this->attackname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attackLvl;
        break;
      }
      
      // required int32 attackLvl = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attackLvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attacklvl_)));
          set_has_attacklvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attackHead;
        break;
      }
      
      // required string attackHead = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attackHead:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attackhead()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->attackhead().data(), this->attackhead().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_id;
        break;
      }
      
      // required string id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_attackId;
        break;
      }
      
      // required string attackId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attackId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attackid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->attackid().data(), this->attackid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_battletype;
        break;
      }
      
      // required int32 battletype = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battletype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battletype_)));
          set_has_battletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_victory;
        break;
      }
      
      // required bool victory = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_victory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &victory_)));
          set_has_victory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_time;
        break;
      }
      
      // required int64 time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_defineid;
        break;
      }
      
      // required int32 defineid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defineid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defineid_)));
          set_has_defineid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_headFrame;
        break;
      }
      
      // optional int32 headFrame = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headFrame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headframe_)));
          set_has_headframe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NewBattleHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string attackName = 1;
  if (has_attackname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attackname().data(), this->attackname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->attackname(), output);
  }
  
  // required int32 attackLvl = 2;
  if (has_attacklvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->attacklvl(), output);
  }
  
  // required string attackHead = 3;
  if (has_attackhead()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attackhead().data(), this->attackhead().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->attackhead(), output);
  }
  
  // required string id = 4;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->id(), output);
  }
  
  // required string attackId = 5;
  if (has_attackid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attackid().data(), this->attackid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->attackid(), output);
  }
  
  // required int32 battletype = 6;
  if (has_battletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->battletype(), output);
  }
  
  // required bool victory = 7;
  if (has_victory()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->victory(), output);
  }
  
  // required int64 time = 8;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->time(), output);
  }
  
  // required int32 defineid = 9;
  if (has_defineid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->defineid(), output);
  }
  
  // optional int32 headFrame = 10;
  if (has_headframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->headframe(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NewBattleHistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string attackName = 1;
  if (has_attackname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attackname().data(), this->attackname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->attackname(), target);
  }
  
  // required int32 attackLvl = 2;
  if (has_attacklvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->attacklvl(), target);
  }
  
  // required string attackHead = 3;
  if (has_attackhead()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attackhead().data(), this->attackhead().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->attackhead(), target);
  }
  
  // required string id = 4;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->id(), target);
  }
  
  // required string attackId = 5;
  if (has_attackid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attackid().data(), this->attackid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->attackid(), target);
  }
  
  // required int32 battletype = 6;
  if (has_battletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->battletype(), target);
  }
  
  // required bool victory = 7;
  if (has_victory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->victory(), target);
  }
  
  // required int64 time = 8;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->time(), target);
  }
  
  // required int32 defineid = 9;
  if (has_defineid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->defineid(), target);
  }
  
  // optional int32 headFrame = 10;
  if (has_headframe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->headframe(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NewBattleHistory::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string attackName = 1;
    if (has_attackname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attackname());
    }
    
    // required int32 attackLvl = 2;
    if (has_attacklvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attacklvl());
    }
    
    // required string attackHead = 3;
    if (has_attackhead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attackhead());
    }
    
    // required string id = 4;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
    // required string attackId = 5;
    if (has_attackid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attackid());
    }
    
    // required int32 battletype = 6;
    if (has_battletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battletype());
    }
    
    // required bool victory = 7;
    if (has_victory()) {
      total_size += 1 + 1;
    }
    
    // required int64 time = 8;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 defineid = 9;
    if (has_defineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defineid());
    }
    
    // optional int32 headFrame = 10;
    if (has_headframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headframe());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewBattleHistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewBattleHistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewBattleHistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewBattleHistory::MergeFrom(const NewBattleHistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attackname()) {
      set_attackname(from.attackname());
    }
    if (from.has_attacklvl()) {
      set_attacklvl(from.attacklvl());
    }
    if (from.has_attackhead()) {
      set_attackhead(from.attackhead());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_attackid()) {
      set_attackid(from.attackid());
    }
    if (from.has_battletype()) {
      set_battletype(from.battletype());
    }
    if (from.has_victory()) {
      set_victory(from.victory());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_defineid()) {
      set_defineid(from.defineid());
    }
    if (from.has_headframe()) {
      set_headframe(from.headframe());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewBattleHistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewBattleHistory::CopyFrom(const NewBattleHistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewBattleHistory::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  
  return true;
}

void NewBattleHistory::Swap(NewBattleHistory* other) {
  if (other != this) {
    std::swap(attackname_, other->attackname_);
    std::swap(attacklvl_, other->attacklvl_);
    std::swap(attackhead_, other->attackhead_);
    std::swap(id_, other->id_);
    std::swap(attackid_, other->attackid_);
    std::swap(battletype_, other->battletype_);
    std::swap(victory_, other->victory_);
    std::swap(time_, other->time_);
    std::swap(defineid_, other->defineid_);
    std::swap(headframe_, other->headframe_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewBattleHistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewBattleHistory_descriptor_;
  metadata.reflection = NewBattleHistory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewBattleHistoryList::kBattlesFieldNumber;
#endif  // !_MSC_VER

NewBattleHistoryList::NewBattleHistoryList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NewBattleHistoryList::InitAsDefaultInstance() {
}

NewBattleHistoryList::NewBattleHistoryList(const NewBattleHistoryList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NewBattleHistoryList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewBattleHistoryList::~NewBattleHistoryList() {
  SharedDtor();
}

void NewBattleHistoryList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NewBattleHistoryList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewBattleHistoryList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewBattleHistoryList_descriptor_;
}

const NewBattleHistoryList& NewBattleHistoryList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_town_2eproto();  return *default_instance_;
}

NewBattleHistoryList* NewBattleHistoryList::default_instance_ = NULL;

NewBattleHistoryList* NewBattleHistoryList::New() const {
  return new NewBattleHistoryList;
}

void NewBattleHistoryList::Clear() {
  battles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewBattleHistoryList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.town.NewBattleHistory battles = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_battles;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NewBattleHistoryList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.town.NewBattleHistory battles = 1;
  for (int i = 0; i < this->battles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->battles(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NewBattleHistoryList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.town.NewBattleHistory battles = 1;
  for (int i = 0; i < this->battles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->battles(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NewBattleHistoryList::ByteSize() const {
  int total_size = 0;
  
  // repeated .protobuf.town.NewBattleHistory battles = 1;
  total_size += 1 * this->battles_size();
  for (int i = 0; i < this->battles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battles(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewBattleHistoryList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewBattleHistoryList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewBattleHistoryList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewBattleHistoryList::MergeFrom(const NewBattleHistoryList& from) {
  GOOGLE_CHECK_NE(&from, this);
  battles_.MergeFrom(from.battles_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewBattleHistoryList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewBattleHistoryList::CopyFrom(const NewBattleHistoryList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewBattleHistoryList::IsInitialized() const {
  
  for (int i = 0; i < battles_size(); i++) {
    if (!this->battles(i).IsInitialized()) return false;
  }
  return true;
}

void NewBattleHistoryList::Swap(NewBattleHistoryList* other) {
  if (other != this) {
    battles_.Swap(&other->battles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewBattleHistoryList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewBattleHistoryList_descriptor_;
  metadata.reflection = NewBattleHistoryList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace town
}  // namespace protobuf

// @@protoc_insertion_point(global_scope)
