// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "battle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protobuf {
namespace battle {

namespace {

const ::google::protobuf::Descriptor* FreshReplyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FreshReplyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* iconinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  iconinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetLineupTemplate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetLineupTemplate_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleStart_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleEnd_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_battle_2eproto() {
  protobuf_AddDesc_battle_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "battle.proto");
  GOOGLE_CHECK(file != NULL);
  FreshReplyInfo_descriptor_ = file->message_type(0);
  static const int FreshReplyInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreshReplyInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreshReplyInfo, carbondaycnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreshReplyInfo, carbonpass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreshReplyInfo, isopenbrave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreshReplyInfo, nextfreshtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreshReplyInfo, upid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreshReplyInfo, braveselecttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreshReplyInfo, bravepasstype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreshReplyInfo, bravephase_),
  };
  FreshReplyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FreshReplyInfo_descriptor_,
      FreshReplyInfo::default_instance_,
      FreshReplyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreshReplyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreshReplyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FreshReplyInfo));
  iconinfo_descriptor_ = file->message_type(1);
  static const int iconinfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, servername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, headframe_),
  };
  iconinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      iconinfo_descriptor_,
      iconinfo::default_instance_,
      iconinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(iconinfo));
  SetLineupTemplate_descriptor_ = file->message_type(2);
  static const int SetLineupTemplate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetLineupTemplate, lineup_),
  };
  SetLineupTemplate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetLineupTemplate_descriptor_,
      SetLineupTemplate::default_instance_,
      SetLineupTemplate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetLineupTemplate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetLineupTemplate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetLineupTemplate));
  BattleRequest_descriptor_ = file->message_type(3);
  static const int BattleRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleRequest, beattackid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleRequest, needlineup_),
  };
  BattleRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleRequest_descriptor_,
      BattleRequest::default_instance_,
      BattleRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleRequest));
  BattleInfo_descriptor_ = file->message_type(4);
  static const int BattleInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, randseed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, enemyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, teamname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, enemylinup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, showinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, enemyblood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, herohps_),
  };
  BattleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleInfo_descriptor_,
      BattleInfo::default_instance_,
      BattleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleInfo));
  BattleStart_descriptor_ = file->message_type(5);
  static const int BattleStart_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleStart, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleStart, enemyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleStart, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleStart, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleStart, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleStart, maxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleStart, mydamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleStart, lineupindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleStart, lineupblood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleStart, lineuppet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleStart, attackcnt_),
  };
  BattleStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleStart_descriptor_,
      BattleStart::default_instance_,
      BattleStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleStart));
  BattleEnd_descriptor_ = file->message_type(6);
  static const int BattleEnd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleEnd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleEnd, enemyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleEnd, rewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleEnd, points_),
  };
  BattleEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleEnd_descriptor_,
      BattleEnd::default_instance_,
      BattleEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleEnd));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_battle_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FreshReplyInfo_descriptor_, &FreshReplyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    iconinfo_descriptor_, &iconinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetLineupTemplate_descriptor_, &SetLineupTemplate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleRequest_descriptor_, &BattleRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleInfo_descriptor_, &BattleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleStart_descriptor_, &BattleStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleEnd_descriptor_, &BattleEnd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_battle_2eproto() {
  delete FreshReplyInfo::default_instance_;
  delete FreshReplyInfo_reflection_;
  delete iconinfo::default_instance_;
  delete iconinfo_reflection_;
  delete SetLineupTemplate::default_instance_;
  delete SetLineupTemplate_reflection_;
  delete BattleRequest::default_instance_;
  delete BattleRequest_reflection_;
  delete BattleInfo::default_instance_;
  delete BattleInfo_reflection_;
  delete BattleStart::default_instance_;
  delete BattleStart_reflection_;
  delete BattleEnd::default_instance_;
  delete BattleEnd_reflection_;
}

void protobuf_AddDesc_battle_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf::common::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014battle.proto\022\017protobuf.battle\032\014common."
    "proto\"\371\001\n\016FreshReplyInfo\022\014\n\004type\030\001 \002(\005\0220"
    "\n\014carbonDayCnt\030\002 \003(\0132\032.protobuf.common.K"
    "Vint3232\022)\n\ncarbonPass\030\005 \003(\0132\025.protobuf."
    "common.Id32\022\023\n\013isOpenBrave\030\003 \001(\010\022\025\n\rnext"
    "FreshTime\030\004 \001(\003\022\014\n\004upId\030\006 \001(\005\022\027\n\017braveSe"
    "lectType\030\007 \001(\005\022\025\n\rbravePassType\030\010 \001(\005\022\022\n"
    "\nbravePhase\030\t \001(\005\"\220\001\n\010iconinfo\022\r\n\005level\030"
    "\001 \002(\005\022\014\n\004name\030\002 \002(\t\022\014\n\004head\030\003 \002(\t\022\021\n\tgui"
    "ldName\030\004 \001(\t\022\022\n\nserverName\030\005 \001(\t\022\020\n\010play"
    "erid\030\006 \001(\t\022\r\n\005power\030\007 \001(\005\022\021\n\theadFrame\030\010"
    " \001(\005\"D\n\021SetLineupTemplate\022/\n\006lineup\030\001 \003("
    "\0132\037.protobuf.common.LineupTemplate\"E\n\rBa"
    "ttleRequest\022\014\n\004type\030\001 \002(\005\022\022\n\nbeAttackId\030"
    "\002 \001(\t\022\022\n\nneedLineup\030\003 \001(\010\"\214\002\n\nBattleInfo"
    "\022\014\n\004type\030\001 \002(\005\022\020\n\010randseed\030\002 \002(\003\022\017\n\007enem"
    "yid\030\003 \001(\t\022\020\n\010teamName\030\004 \001(\t\0221\n\nenemylinu"
    "p\030\005 \003(\0132\035.protobuf.common.LineupDetail\022+"
    "\n\010showinfo\030\006 \003(\0132\031.protobuf.battle.iconi"
    "nfo\022.\n\nenemyblood\030\007 \003(\0132\032.protobuf.commo"
    "n.KVint3264\022+\n\007herohps\030\010 \003(\0132\032.protobuf."
    "common.KVint3264\"\347\001\n\013BattleStart\022\014\n\004type"
    "\030\001 \002(\005\022\017\n\007enemyId\030\002 \002(\t\022\016\n\006result\030\003 \002(\010\022"
    "\014\n\004sign\030\004 \002(\t\022\016\n\006damage\030\005 \003(\003\022\r\n\005maxhp\030\006"
    " \003(\003\022\020\n\010mydamage\030\013 \001(\003\022\023\n\013lineupindex\030\007 "
    "\001(\005\022/\n\013lineupblood\030\010 \003(\0132\032.protobuf.comm"
    "on.KVint3264\022\021\n\tlineuppet\030\t \001(\005\022\021\n\tattac"
    "kCnt\030\n \001(\005\"g\n\tBattleEnd\022\014\n\004type\030\001 \002(\005\022\017\n"
    "\007enemyId\030\002 \002(\t\022+\n\007rewards\030\003 \003(\0132\032.protob"
    "uf.common.KVint3232\022\016\n\006points\030\004 \003(\tB\"\n\023x"
    "ag.idgo.core.protoB\013BattleProto", 1231);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "battle.proto", &protobuf_RegisterTypes);
  FreshReplyInfo::default_instance_ = new FreshReplyInfo();
  iconinfo::default_instance_ = new iconinfo();
  SetLineupTemplate::default_instance_ = new SetLineupTemplate();
  BattleRequest::default_instance_ = new BattleRequest();
  BattleInfo::default_instance_ = new BattleInfo();
  BattleStart::default_instance_ = new BattleStart();
  BattleEnd::default_instance_ = new BattleEnd();
  FreshReplyInfo::default_instance_->InitAsDefaultInstance();
  iconinfo::default_instance_->InitAsDefaultInstance();
  SetLineupTemplate::default_instance_->InitAsDefaultInstance();
  BattleRequest::default_instance_->InitAsDefaultInstance();
  BattleInfo::default_instance_->InitAsDefaultInstance();
  BattleStart::default_instance_->InitAsDefaultInstance();
  BattleEnd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_battle_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_battle_2eproto {
  StaticDescriptorInitializer_battle_2eproto() {
    protobuf_AddDesc_battle_2eproto();
  }
} static_descriptor_initializer_battle_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int FreshReplyInfo::kTypeFieldNumber;
const int FreshReplyInfo::kCarbonDayCntFieldNumber;
const int FreshReplyInfo::kCarbonPassFieldNumber;
const int FreshReplyInfo::kIsOpenBraveFieldNumber;
const int FreshReplyInfo::kNextFreshTimeFieldNumber;
const int FreshReplyInfo::kUpIdFieldNumber;
const int FreshReplyInfo::kBraveSelectTypeFieldNumber;
const int FreshReplyInfo::kBravePassTypeFieldNumber;
const int FreshReplyInfo::kBravePhaseFieldNumber;
#endif  // !_MSC_VER

FreshReplyInfo::FreshReplyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FreshReplyInfo::InitAsDefaultInstance() {
}

FreshReplyInfo::FreshReplyInfo(const FreshReplyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FreshReplyInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  isopenbrave_ = false;
  nextfreshtime_ = GOOGLE_LONGLONG(0);
  upid_ = 0;
  braveselecttype_ = 0;
  bravepasstype_ = 0;
  bravephase_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FreshReplyInfo::~FreshReplyInfo() {
  SharedDtor();
}

void FreshReplyInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FreshReplyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FreshReplyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FreshReplyInfo_descriptor_;
}

const FreshReplyInfo& FreshReplyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();  return *default_instance_;
}

FreshReplyInfo* FreshReplyInfo::default_instance_ = NULL;

FreshReplyInfo* FreshReplyInfo::New() const {
  return new FreshReplyInfo;
}

void FreshReplyInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    isopenbrave_ = false;
    nextfreshtime_ = GOOGLE_LONGLONG(0);
    upid_ = 0;
    braveselecttype_ = 0;
    bravepasstype_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    bravephase_ = 0;
  }
  carbondaycnt_.Clear();
  carbonpass_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FreshReplyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_carbonDayCnt;
        break;
      }
      
      // repeated .protobuf.common.KVint3232 carbonDayCnt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_carbonDayCnt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_carbondaycnt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_carbonDayCnt;
        if (input->ExpectTag(24)) goto parse_isOpenBrave;
        break;
      }
      
      // optional bool isOpenBrave = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isOpenBrave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isopenbrave_)));
          set_has_isopenbrave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nextFreshTime;
        break;
      }
      
      // optional int64 nextFreshTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextFreshTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nextfreshtime_)));
          set_has_nextfreshtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_carbonPass;
        break;
      }
      
      // repeated .protobuf.common.Id32 carbonPass = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_carbonPass:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_carbonpass()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_carbonPass;
        if (input->ExpectTag(48)) goto parse_upId;
        break;
      }
      
      // optional int32 upId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upid_)));
          set_has_upid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_braveSelectType;
        break;
      }
      
      // optional int32 braveSelectType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_braveSelectType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &braveselecttype_)));
          set_has_braveselecttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bravePassType;
        break;
      }
      
      // optional int32 bravePassType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bravePassType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bravepasstype_)));
          set_has_bravepasstype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_bravePhase;
        break;
      }
      
      // optional int32 bravePhase = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bravePhase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bravephase_)));
          set_has_bravephase();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FreshReplyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // repeated .protobuf.common.KVint3232 carbonDayCnt = 2;
  for (int i = 0; i < this->carbondaycnt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->carbondaycnt(i), output);
  }
  
  // optional bool isOpenBrave = 3;
  if (has_isopenbrave()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isopenbrave(), output);
  }
  
  // optional int64 nextFreshTime = 4;
  if (has_nextfreshtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->nextfreshtime(), output);
  }
  
  // repeated .protobuf.common.Id32 carbonPass = 5;
  for (int i = 0; i < this->carbonpass_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->carbonpass(i), output);
  }
  
  // optional int32 upId = 6;
  if (has_upid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->upid(), output);
  }
  
  // optional int32 braveSelectType = 7;
  if (has_braveselecttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->braveselecttype(), output);
  }
  
  // optional int32 bravePassType = 8;
  if (has_bravepasstype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->bravepasstype(), output);
  }
  
  // optional int32 bravePhase = 9;
  if (has_bravephase()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->bravephase(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FreshReplyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // repeated .protobuf.common.KVint3232 carbonDayCnt = 2;
  for (int i = 0; i < this->carbondaycnt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->carbondaycnt(i), target);
  }
  
  // optional bool isOpenBrave = 3;
  if (has_isopenbrave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isopenbrave(), target);
  }
  
  // optional int64 nextFreshTime = 4;
  if (has_nextfreshtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->nextfreshtime(), target);
  }
  
  // repeated .protobuf.common.Id32 carbonPass = 5;
  for (int i = 0; i < this->carbonpass_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->carbonpass(i), target);
  }
  
  // optional int32 upId = 6;
  if (has_upid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->upid(), target);
  }
  
  // optional int32 braveSelectType = 7;
  if (has_braveselecttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->braveselecttype(), target);
  }
  
  // optional int32 bravePassType = 8;
  if (has_bravepasstype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->bravepasstype(), target);
  }
  
  // optional int32 bravePhase = 9;
  if (has_bravephase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->bravephase(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FreshReplyInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional bool isOpenBrave = 3;
    if (has_isopenbrave()) {
      total_size += 1 + 1;
    }
    
    // optional int64 nextFreshTime = 4;
    if (has_nextfreshtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->nextfreshtime());
    }
    
    // optional int32 upId = 6;
    if (has_upid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upid());
    }
    
    // optional int32 braveSelectType = 7;
    if (has_braveselecttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->braveselecttype());
    }
    
    // optional int32 bravePassType = 8;
    if (has_bravepasstype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bravepasstype());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 bravePhase = 9;
    if (has_bravephase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bravephase());
    }
    
  }
  // repeated .protobuf.common.KVint3232 carbonDayCnt = 2;
  total_size += 1 * this->carbondaycnt_size();
  for (int i = 0; i < this->carbondaycnt_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->carbondaycnt(i));
  }
  
  // repeated .protobuf.common.Id32 carbonPass = 5;
  total_size += 1 * this->carbonpass_size();
  for (int i = 0; i < this->carbonpass_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->carbonpass(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FreshReplyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FreshReplyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FreshReplyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FreshReplyInfo::MergeFrom(const FreshReplyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  carbondaycnt_.MergeFrom(from.carbondaycnt_);
  carbonpass_.MergeFrom(from.carbonpass_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_isopenbrave()) {
      set_isopenbrave(from.isopenbrave());
    }
    if (from.has_nextfreshtime()) {
      set_nextfreshtime(from.nextfreshtime());
    }
    if (from.has_upid()) {
      set_upid(from.upid());
    }
    if (from.has_braveselecttype()) {
      set_braveselecttype(from.braveselecttype());
    }
    if (from.has_bravepasstype()) {
      set_bravepasstype(from.bravepasstype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bravephase()) {
      set_bravephase(from.bravephase());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FreshReplyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FreshReplyInfo::CopyFrom(const FreshReplyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FreshReplyInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < carbondaycnt_size(); i++) {
    if (!this->carbondaycnt(i).IsInitialized()) return false;
  }
  for (int i = 0; i < carbonpass_size(); i++) {
    if (!this->carbonpass(i).IsInitialized()) return false;
  }
  return true;
}

void FreshReplyInfo::Swap(FreshReplyInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    carbondaycnt_.Swap(&other->carbondaycnt_);
    carbonpass_.Swap(&other->carbonpass_);
    std::swap(isopenbrave_, other->isopenbrave_);
    std::swap(nextfreshtime_, other->nextfreshtime_);
    std::swap(upid_, other->upid_);
    std::swap(braveselecttype_, other->braveselecttype_);
    std::swap(bravepasstype_, other->bravepasstype_);
    std::swap(bravephase_, other->bravephase_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FreshReplyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FreshReplyInfo_descriptor_;
  metadata.reflection = FreshReplyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int iconinfo::kLevelFieldNumber;
const int iconinfo::kNameFieldNumber;
const int iconinfo::kHeadFieldNumber;
const int iconinfo::kGuildNameFieldNumber;
const int iconinfo::kServerNameFieldNumber;
const int iconinfo::kPlayeridFieldNumber;
const int iconinfo::kPowerFieldNumber;
const int iconinfo::kHeadFrameFieldNumber;
#endif  // !_MSC_VER

iconinfo::iconinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void iconinfo::InitAsDefaultInstance() {
}

iconinfo::iconinfo(const iconinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void iconinfo::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  power_ = 0;
  headframe_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

iconinfo::~iconinfo() {
  SharedDtor();
}

void iconinfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    delete head_;
  }
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    delete servername_;
  }
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (this != default_instance_) {
  }
}

void iconinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* iconinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return iconinfo_descriptor_;
}

const iconinfo& iconinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();  return *default_instance_;
}

iconinfo* iconinfo::default_instance_ = NULL;

iconinfo* iconinfo::New() const {
  return new iconinfo;
}

void iconinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_head()) {
      if (head_ != &::google::protobuf::internal::kEmptyString) {
        head_->clear();
      }
    }
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
    if (has_servername()) {
      if (servername_ != &::google::protobuf::internal::kEmptyString) {
        servername_->clear();
      }
    }
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    power_ = 0;
    headframe_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool iconinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_head;
        break;
      }
      
      // required string head = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_head()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->head().data(), this->head().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_guildName;
        break;
      }
      
      // optional string guildName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_serverName;
        break;
      }
      
      // optional string serverName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serverName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->servername().data(), this->servername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_playerid;
        break;
      }
      
      // optional string playerid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_power;
        break;
      }
      
      // optional int32 power = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_headFrame;
        break;
      }
      
      // optional int32 headFrame = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headFrame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headframe_)));
          set_has_headframe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void iconinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // required string head = 3;
  if (has_head()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head().data(), this->head().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->head(), output);
  }
  
  // optional string guildName = 4;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->guildname(), output);
  }
  
  // optional string serverName = 5;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->servername(), output);
  }
  
  // optional string playerid = 6;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->playerid(), output);
  }
  
  // optional int32 power = 7;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->power(), output);
  }
  
  // optional int32 headFrame = 8;
  if (has_headframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->headframe(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* iconinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // required string head = 3;
  if (has_head()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head().data(), this->head().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->head(), target);
  }
  
  // optional string guildName = 4;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->guildname(), target);
  }
  
  // optional string serverName = 5;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->servername(), target);
  }
  
  // optional string playerid = 6;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->playerid(), target);
  }
  
  // optional int32 power = 7;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->power(), target);
  }
  
  // optional int32 headFrame = 8;
  if (has_headframe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->headframe(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int iconinfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string head = 3;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->head());
    }
    
    // optional string guildName = 4;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }
    
    // optional string serverName = 5;
    if (has_servername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servername());
    }
    
    // optional string playerid = 6;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }
    
    // optional int32 power = 7;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }
    
    // optional int32 headFrame = 8;
    if (has_headframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headframe());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void iconinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const iconinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const iconinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void iconinfo::MergeFrom(const iconinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_head()) {
      set_head(from.head());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_servername()) {
      set_servername(from.servername());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_headframe()) {
      set_headframe(from.headframe());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void iconinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void iconinfo::CopyFrom(const iconinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool iconinfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void iconinfo::Swap(iconinfo* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(name_, other->name_);
    std::swap(head_, other->head_);
    std::swap(guildname_, other->guildname_);
    std::swap(servername_, other->servername_);
    std::swap(playerid_, other->playerid_);
    std::swap(power_, other->power_);
    std::swap(headframe_, other->headframe_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata iconinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = iconinfo_descriptor_;
  metadata.reflection = iconinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetLineupTemplate::kLineupFieldNumber;
#endif  // !_MSC_VER

SetLineupTemplate::SetLineupTemplate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetLineupTemplate::InitAsDefaultInstance() {
}

SetLineupTemplate::SetLineupTemplate(const SetLineupTemplate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetLineupTemplate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetLineupTemplate::~SetLineupTemplate() {
  SharedDtor();
}

void SetLineupTemplate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetLineupTemplate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetLineupTemplate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetLineupTemplate_descriptor_;
}

const SetLineupTemplate& SetLineupTemplate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();  return *default_instance_;
}

SetLineupTemplate* SetLineupTemplate::default_instance_ = NULL;

SetLineupTemplate* SetLineupTemplate::New() const {
  return new SetLineupTemplate;
}

void SetLineupTemplate::Clear() {
  lineup_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetLineupTemplate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.common.LineupTemplate lineup = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lineup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lineup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_lineup;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetLineupTemplate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.common.LineupTemplate lineup = 1;
  for (int i = 0; i < this->lineup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lineup(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetLineupTemplate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.common.LineupTemplate lineup = 1;
  for (int i = 0; i < this->lineup_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->lineup(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetLineupTemplate::ByteSize() const {
  int total_size = 0;
  
  // repeated .protobuf.common.LineupTemplate lineup = 1;
  total_size += 1 * this->lineup_size();
  for (int i = 0; i < this->lineup_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lineup(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetLineupTemplate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetLineupTemplate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetLineupTemplate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetLineupTemplate::MergeFrom(const SetLineupTemplate& from) {
  GOOGLE_CHECK_NE(&from, this);
  lineup_.MergeFrom(from.lineup_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetLineupTemplate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetLineupTemplate::CopyFrom(const SetLineupTemplate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetLineupTemplate::IsInitialized() const {
  
  for (int i = 0; i < lineup_size(); i++) {
    if (!this->lineup(i).IsInitialized()) return false;
  }
  return true;
}

void SetLineupTemplate::Swap(SetLineupTemplate* other) {
  if (other != this) {
    lineup_.Swap(&other->lineup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetLineupTemplate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetLineupTemplate_descriptor_;
  metadata.reflection = SetLineupTemplate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleRequest::kTypeFieldNumber;
const int BattleRequest::kBeAttackIdFieldNumber;
const int BattleRequest::kNeedLineupFieldNumber;
#endif  // !_MSC_VER

BattleRequest::BattleRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleRequest::InitAsDefaultInstance() {
}

BattleRequest::BattleRequest(const BattleRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  beattackid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  needlineup_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleRequest::~BattleRequest() {
  SharedDtor();
}

void BattleRequest::SharedDtor() {
  if (beattackid_ != &::google::protobuf::internal::kEmptyString) {
    delete beattackid_;
  }
  if (this != default_instance_) {
  }
}

void BattleRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleRequest_descriptor_;
}

const BattleRequest& BattleRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();  return *default_instance_;
}

BattleRequest* BattleRequest::default_instance_ = NULL;

BattleRequest* BattleRequest::New() const {
  return new BattleRequest;
}

void BattleRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_beattackid()) {
      if (beattackid_ != &::google::protobuf::internal::kEmptyString) {
        beattackid_->clear();
      }
    }
    needlineup_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_beAttackId;
        break;
      }
      
      // optional string beAttackId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_beAttackId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_beattackid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->beattackid().data(), this->beattackid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_needLineup;
        break;
      }
      
      // optional bool needLineup = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needLineup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needlineup_)));
          set_has_needlineup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // optional string beAttackId = 2;
  if (has_beattackid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beattackid().data(), this->beattackid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->beattackid(), output);
  }
  
  // optional bool needLineup = 3;
  if (has_needlineup()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->needlineup(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // optional string beAttackId = 2;
  if (has_beattackid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beattackid().data(), this->beattackid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->beattackid(), target);
  }
  
  // optional bool needLineup = 3;
  if (has_needlineup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->needlineup(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional string beAttackId = 2;
    if (has_beattackid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->beattackid());
    }
    
    // optional bool needLineup = 3;
    if (has_needlineup()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleRequest::MergeFrom(const BattleRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_beattackid()) {
      set_beattackid(from.beattackid());
    }
    if (from.has_needlineup()) {
      set_needlineup(from.needlineup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleRequest::CopyFrom(const BattleRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void BattleRequest::Swap(BattleRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(beattackid_, other->beattackid_);
    std::swap(needlineup_, other->needlineup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleRequest_descriptor_;
  metadata.reflection = BattleRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleInfo::kTypeFieldNumber;
const int BattleInfo::kRandseedFieldNumber;
const int BattleInfo::kEnemyidFieldNumber;
const int BattleInfo::kTeamNameFieldNumber;
const int BattleInfo::kEnemylinupFieldNumber;
const int BattleInfo::kShowinfoFieldNumber;
const int BattleInfo::kEnemybloodFieldNumber;
const int BattleInfo::kHerohpsFieldNumber;
#endif  // !_MSC_VER

BattleInfo::BattleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleInfo::InitAsDefaultInstance() {
}

BattleInfo::BattleInfo(const BattleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  randseed_ = GOOGLE_LONGLONG(0);
  enemyid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  teamname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleInfo::~BattleInfo() {
  SharedDtor();
}

void BattleInfo::SharedDtor() {
  if (enemyid_ != &::google::protobuf::internal::kEmptyString) {
    delete enemyid_;
  }
  if (teamname_ != &::google::protobuf::internal::kEmptyString) {
    delete teamname_;
  }
  if (this != default_instance_) {
  }
}

void BattleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleInfo_descriptor_;
}

const BattleInfo& BattleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();  return *default_instance_;
}

BattleInfo* BattleInfo::default_instance_ = NULL;

BattleInfo* BattleInfo::New() const {
  return new BattleInfo;
}

void BattleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    randseed_ = GOOGLE_LONGLONG(0);
    if (has_enemyid()) {
      if (enemyid_ != &::google::protobuf::internal::kEmptyString) {
        enemyid_->clear();
      }
    }
    if (has_teamname()) {
      if (teamname_ != &::google::protobuf::internal::kEmptyString) {
        teamname_->clear();
      }
    }
  }
  enemylinup_.Clear();
  showinfo_.Clear();
  enemyblood_.Clear();
  herohps_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_randseed;
        break;
      }
      
      // required int64 randseed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_randseed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &randseed_)));
          set_has_randseed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_enemyid;
        break;
      }
      
      // optional string enemyid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enemyid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_enemyid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->enemyid().data(), this->enemyid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_teamName;
        break;
      }
      
      // optional string teamName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_teamName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_teamname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->teamname().data(), this->teamname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_enemylinup;
        break;
      }
      
      // repeated .protobuf.common.LineupDetail enemylinup = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enemylinup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_enemylinup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_enemylinup;
        if (input->ExpectTag(50)) goto parse_showinfo;
        break;
      }
      
      // repeated .protobuf.battle.iconinfo showinfo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_showinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_showinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_showinfo;
        if (input->ExpectTag(58)) goto parse_enemyblood;
        break;
      }
      
      // repeated .protobuf.common.KVint3264 enemyblood = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enemyblood:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_enemyblood()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_enemyblood;
        if (input->ExpectTag(66)) goto parse_herohps;
        break;
      }
      
      // repeated .protobuf.common.KVint3264 herohps = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_herohps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_herohps()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_herohps;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // required int64 randseed = 2;
  if (has_randseed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->randseed(), output);
  }
  
  // optional string enemyid = 3;
  if (has_enemyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->enemyid().data(), this->enemyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->enemyid(), output);
  }
  
  // optional string teamName = 4;
  if (has_teamname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->teamname().data(), this->teamname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->teamname(), output);
  }
  
  // repeated .protobuf.common.LineupDetail enemylinup = 5;
  for (int i = 0; i < this->enemylinup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->enemylinup(i), output);
  }
  
  // repeated .protobuf.battle.iconinfo showinfo = 6;
  for (int i = 0; i < this->showinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->showinfo(i), output);
  }
  
  // repeated .protobuf.common.KVint3264 enemyblood = 7;
  for (int i = 0; i < this->enemyblood_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->enemyblood(i), output);
  }
  
  // repeated .protobuf.common.KVint3264 herohps = 8;
  for (int i = 0; i < this->herohps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->herohps(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // required int64 randseed = 2;
  if (has_randseed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->randseed(), target);
  }
  
  // optional string enemyid = 3;
  if (has_enemyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->enemyid().data(), this->enemyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->enemyid(), target);
  }
  
  // optional string teamName = 4;
  if (has_teamname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->teamname().data(), this->teamname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->teamname(), target);
  }
  
  // repeated .protobuf.common.LineupDetail enemylinup = 5;
  for (int i = 0; i < this->enemylinup_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->enemylinup(i), target);
  }
  
  // repeated .protobuf.battle.iconinfo showinfo = 6;
  for (int i = 0; i < this->showinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->showinfo(i), target);
  }
  
  // repeated .protobuf.common.KVint3264 enemyblood = 7;
  for (int i = 0; i < this->enemyblood_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->enemyblood(i), target);
  }
  
  // repeated .protobuf.common.KVint3264 herohps = 8;
  for (int i = 0; i < this->herohps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->herohps(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required int64 randseed = 2;
    if (has_randseed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->randseed());
    }
    
    // optional string enemyid = 3;
    if (has_enemyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->enemyid());
    }
    
    // optional string teamName = 4;
    if (has_teamname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->teamname());
    }
    
  }
  // repeated .protobuf.common.LineupDetail enemylinup = 5;
  total_size += 1 * this->enemylinup_size();
  for (int i = 0; i < this->enemylinup_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->enemylinup(i));
  }
  
  // repeated .protobuf.battle.iconinfo showinfo = 6;
  total_size += 1 * this->showinfo_size();
  for (int i = 0; i < this->showinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->showinfo(i));
  }
  
  // repeated .protobuf.common.KVint3264 enemyblood = 7;
  total_size += 1 * this->enemyblood_size();
  for (int i = 0; i < this->enemyblood_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->enemyblood(i));
  }
  
  // repeated .protobuf.common.KVint3264 herohps = 8;
  total_size += 1 * this->herohps_size();
  for (int i = 0; i < this->herohps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->herohps(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleInfo::MergeFrom(const BattleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  enemylinup_.MergeFrom(from.enemylinup_);
  showinfo_.MergeFrom(from.showinfo_);
  enemyblood_.MergeFrom(from.enemyblood_);
  herohps_.MergeFrom(from.herohps_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_randseed()) {
      set_randseed(from.randseed());
    }
    if (from.has_enemyid()) {
      set_enemyid(from.enemyid());
    }
    if (from.has_teamname()) {
      set_teamname(from.teamname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleInfo::CopyFrom(const BattleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < enemylinup_size(); i++) {
    if (!this->enemylinup(i).IsInitialized()) return false;
  }
  for (int i = 0; i < showinfo_size(); i++) {
    if (!this->showinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < enemyblood_size(); i++) {
    if (!this->enemyblood(i).IsInitialized()) return false;
  }
  for (int i = 0; i < herohps_size(); i++) {
    if (!this->herohps(i).IsInitialized()) return false;
  }
  return true;
}

void BattleInfo::Swap(BattleInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(randseed_, other->randseed_);
    std::swap(enemyid_, other->enemyid_);
    std::swap(teamname_, other->teamname_);
    enemylinup_.Swap(&other->enemylinup_);
    showinfo_.Swap(&other->showinfo_);
    enemyblood_.Swap(&other->enemyblood_);
    herohps_.Swap(&other->herohps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleInfo_descriptor_;
  metadata.reflection = BattleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleStart::kTypeFieldNumber;
const int BattleStart::kEnemyIdFieldNumber;
const int BattleStart::kResultFieldNumber;
const int BattleStart::kSignFieldNumber;
const int BattleStart::kDamageFieldNumber;
const int BattleStart::kMaxhpFieldNumber;
const int BattleStart::kMydamageFieldNumber;
const int BattleStart::kLineupindexFieldNumber;
const int BattleStart::kLineupbloodFieldNumber;
const int BattleStart::kLineuppetFieldNumber;
const int BattleStart::kAttackCntFieldNumber;
#endif  // !_MSC_VER

BattleStart::BattleStart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleStart::InitAsDefaultInstance() {
}

BattleStart::BattleStart(const BattleStart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleStart::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  enemyid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  result_ = false;
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mydamage_ = GOOGLE_LONGLONG(0);
  lineupindex_ = 0;
  lineuppet_ = 0;
  attackcnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleStart::~BattleStart() {
  SharedDtor();
}

void BattleStart::SharedDtor() {
  if (enemyid_ != &::google::protobuf::internal::kEmptyString) {
    delete enemyid_;
  }
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (this != default_instance_) {
  }
}

void BattleStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleStart_descriptor_;
}

const BattleStart& BattleStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();  return *default_instance_;
}

BattleStart* BattleStart::default_instance_ = NULL;

BattleStart* BattleStart::New() const {
  return new BattleStart;
}

void BattleStart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_enemyid()) {
      if (enemyid_ != &::google::protobuf::internal::kEmptyString) {
        enemyid_->clear();
      }
    }
    result_ = false;
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::kEmptyString) {
        sign_->clear();
      }
    }
    mydamage_ = GOOGLE_LONGLONG(0);
    lineupindex_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    lineuppet_ = 0;
    attackcnt_ = 0;
  }
  damage_.Clear();
  maxhp_.Clear();
  lineupblood_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_enemyId;
        break;
      }
      
      // required string enemyId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enemyId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_enemyid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->enemyid().data(), this->enemyid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }
      
      // required bool result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sign;
        break;
      }
      
      // required string sign = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_damage;
        break;
      }
      
      // repeated int64 damage = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 40, input, this->mutable_damage())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_damage())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_damage;
        if (input->ExpectTag(48)) goto parse_maxhp;
        break;
      }
      
      // repeated int64 maxhp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxhp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 48, input, this->mutable_maxhp())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_maxhp())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_maxhp;
        if (input->ExpectTag(56)) goto parse_lineupindex;
        break;
      }
      
      // optional int32 lineupindex = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lineupindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lineupindex_)));
          set_has_lineupindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_lineupblood;
        break;
      }
      
      // repeated .protobuf.common.KVint3264 lineupblood = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lineupblood:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lineupblood()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_lineupblood;
        if (input->ExpectTag(72)) goto parse_lineuppet;
        break;
      }
      
      // optional int32 lineuppet = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lineuppet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lineuppet_)));
          set_has_lineuppet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_attackCnt;
        break;
      }
      
      // optional int32 attackCnt = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attackCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attackcnt_)));
          set_has_attackcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_mydamage;
        break;
      }
      
      // optional int64 mydamage = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mydamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mydamage_)));
          set_has_mydamage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // required string enemyId = 2;
  if (has_enemyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->enemyid().data(), this->enemyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->enemyid(), output);
  }
  
  // required bool result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->result(), output);
  }
  
  // required string sign = 4;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->sign(), output);
  }
  
  // repeated int64 damage = 5;
  for (int i = 0; i < this->damage_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      5, this->damage(i), output);
  }
  
  // repeated int64 maxhp = 6;
  for (int i = 0; i < this->maxhp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      6, this->maxhp(i), output);
  }
  
  // optional int32 lineupindex = 7;
  if (has_lineupindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->lineupindex(), output);
  }
  
  // repeated .protobuf.common.KVint3264 lineupblood = 8;
  for (int i = 0; i < this->lineupblood_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->lineupblood(i), output);
  }
  
  // optional int32 lineuppet = 9;
  if (has_lineuppet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->lineuppet(), output);
  }
  
  // optional int32 attackCnt = 10;
  if (has_attackcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->attackcnt(), output);
  }
  
  // optional int64 mydamage = 11;
  if (has_mydamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->mydamage(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // required string enemyId = 2;
  if (has_enemyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->enemyid().data(), this->enemyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->enemyid(), target);
  }
  
  // required bool result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->result(), target);
  }
  
  // required string sign = 4;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sign(), target);
  }
  
  // repeated int64 damage = 5;
  for (int i = 0; i < this->damage_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(5, this->damage(i), target);
  }
  
  // repeated int64 maxhp = 6;
  for (int i = 0; i < this->maxhp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(6, this->maxhp(i), target);
  }
  
  // optional int32 lineupindex = 7;
  if (has_lineupindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->lineupindex(), target);
  }
  
  // repeated .protobuf.common.KVint3264 lineupblood = 8;
  for (int i = 0; i < this->lineupblood_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->lineupblood(i), target);
  }
  
  // optional int32 lineuppet = 9;
  if (has_lineuppet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->lineuppet(), target);
  }
  
  // optional int32 attackCnt = 10;
  if (has_attackcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->attackcnt(), target);
  }
  
  // optional int64 mydamage = 11;
  if (has_mydamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->mydamage(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleStart::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required string enemyId = 2;
    if (has_enemyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->enemyid());
    }
    
    // required bool result = 3;
    if (has_result()) {
      total_size += 1 + 1;
    }
    
    // required string sign = 4;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign());
    }
    
    // optional int64 mydamage = 11;
    if (has_mydamage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mydamage());
    }
    
    // optional int32 lineupindex = 7;
    if (has_lineupindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lineupindex());
    }
    
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int32 lineuppet = 9;
    if (has_lineuppet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lineuppet());
    }
    
    // optional int32 attackCnt = 10;
    if (has_attackcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attackcnt());
    }
    
  }
  // repeated int64 damage = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->damage_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->damage(i));
    }
    total_size += 1 * this->damage_size() + data_size;
  }
  
  // repeated int64 maxhp = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->maxhp_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->maxhp(i));
    }
    total_size += 1 * this->maxhp_size() + data_size;
  }
  
  // repeated .protobuf.common.KVint3264 lineupblood = 8;
  total_size += 1 * this->lineupblood_size();
  for (int i = 0; i < this->lineupblood_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lineupblood(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleStart::MergeFrom(const BattleStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  damage_.MergeFrom(from.damage_);
  maxhp_.MergeFrom(from.maxhp_);
  lineupblood_.MergeFrom(from.lineupblood_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_enemyid()) {
      set_enemyid(from.enemyid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
    if (from.has_mydamage()) {
      set_mydamage(from.mydamage());
    }
    if (from.has_lineupindex()) {
      set_lineupindex(from.lineupindex());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_lineuppet()) {
      set_lineuppet(from.lineuppet());
    }
    if (from.has_attackcnt()) {
      set_attackcnt(from.attackcnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleStart::CopyFrom(const BattleStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleStart::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  for (int i = 0; i < lineupblood_size(); i++) {
    if (!this->lineupblood(i).IsInitialized()) return false;
  }
  return true;
}

void BattleStart::Swap(BattleStart* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(enemyid_, other->enemyid_);
    std::swap(result_, other->result_);
    std::swap(sign_, other->sign_);
    damage_.Swap(&other->damage_);
    maxhp_.Swap(&other->maxhp_);
    std::swap(mydamage_, other->mydamage_);
    std::swap(lineupindex_, other->lineupindex_);
    lineupblood_.Swap(&other->lineupblood_);
    std::swap(lineuppet_, other->lineuppet_);
    std::swap(attackcnt_, other->attackcnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleStart_descriptor_;
  metadata.reflection = BattleStart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleEnd::kTypeFieldNumber;
const int BattleEnd::kEnemyIdFieldNumber;
const int BattleEnd::kRewardsFieldNumber;
const int BattleEnd::kPointsFieldNumber;
#endif  // !_MSC_VER

BattleEnd::BattleEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleEnd::InitAsDefaultInstance() {
}

BattleEnd::BattleEnd(const BattleEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleEnd::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  enemyid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleEnd::~BattleEnd() {
  SharedDtor();
}

void BattleEnd::SharedDtor() {
  if (enemyid_ != &::google::protobuf::internal::kEmptyString) {
    delete enemyid_;
  }
  if (this != default_instance_) {
  }
}

void BattleEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleEnd_descriptor_;
}

const BattleEnd& BattleEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_battle_2eproto();  return *default_instance_;
}

BattleEnd* BattleEnd::default_instance_ = NULL;

BattleEnd* BattleEnd::New() const {
  return new BattleEnd;
}

void BattleEnd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_enemyid()) {
      if (enemyid_ != &::google::protobuf::internal::kEmptyString) {
        enemyid_->clear();
      }
    }
  }
  rewards_.Clear();
  points_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_enemyId;
        break;
      }
      
      // required string enemyId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enemyId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_enemyid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->enemyid().data(), this->enemyid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rewards;
        break;
      }
      
      // repeated .protobuf.common.KVint3232 rewards = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rewards;
        if (input->ExpectTag(34)) goto parse_points;
        break;
      }
      
      // repeated string points = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_points()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->points(0).data(), this->points(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_points;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // required string enemyId = 2;
  if (has_enemyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->enemyid().data(), this->enemyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->enemyid(), output);
  }
  
  // repeated .protobuf.common.KVint3232 rewards = 3;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rewards(i), output);
  }
  
  // repeated string points = 4;
  for (int i = 0; i < this->points_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->points(i).data(), this->points(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->points(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // required string enemyId = 2;
  if (has_enemyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->enemyid().data(), this->enemyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->enemyid(), target);
  }
  
  // repeated .protobuf.common.KVint3232 rewards = 3;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rewards(i), target);
  }
  
  // repeated string points = 4;
  for (int i = 0; i < this->points_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->points(i).data(), this->points(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->points(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleEnd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required string enemyId = 2;
    if (has_enemyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->enemyid());
    }
    
  }
  // repeated .protobuf.common.KVint3232 rewards = 3;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }
  
  // repeated string points = 4;
  total_size += 1 * this->points_size();
  for (int i = 0; i < this->points_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->points(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleEnd::MergeFrom(const BattleEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewards_.MergeFrom(from.rewards_);
  points_.MergeFrom(from.points_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_enemyid()) {
      set_enemyid(from.enemyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleEnd::CopyFrom(const BattleEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleEnd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < rewards_size(); i++) {
    if (!this->rewards(i).IsInitialized()) return false;
  }
  return true;
}

void BattleEnd::Swap(BattleEnd* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(enemyid_, other->enemyid_);
    rewards_.Swap(&other->rewards_);
    points_.Swap(&other->points_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleEnd_descriptor_;
  metadata.reflection = BattleEnd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace battle
}  // namespace protobuf

// @@protoc_insertion_point(global_scope)
