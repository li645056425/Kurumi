// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protobuf {
namespace pet {

namespace {

const ::google::protobuf::Descriptor* ReplyTierUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyTierUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyLvUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyLvUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplySkillUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplySkillUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyRebirth_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyRebirth_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_pet_2eproto() {
  protobuf_AddDesc_pet_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pet.proto");
  GOOGLE_CHECK(file != NULL);
  ReplyTierUp_descriptor_ = file->message_type(0);
  static const int ReplyTierUp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyTierUp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyTierUp, pet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyTierUp, items_),
  };
  ReplyTierUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyTierUp_descriptor_,
      ReplyTierUp::default_instance_,
      ReplyTierUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyTierUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyTierUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyTierUp));
  ReplyLvUp_descriptor_ = file->message_type(1);
  static const int ReplyLvUp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLvUp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLvUp, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLvUp, items_),
  };
  ReplyLvUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyLvUp_descriptor_,
      ReplyLvUp::default_instance_,
      ReplyLvUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLvUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLvUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyLvUp));
  PetList_descriptor_ = file->message_type(2);
  static const int PetList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetList, pets_),
  };
  PetList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetList_descriptor_,
      PetList::default_instance_,
      PetList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetList));
  ReplySkillUp_descriptor_ = file->message_type(3);
  static const int ReplySkillUp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplySkillUp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplySkillUp, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplySkillUp, items_),
  };
  ReplySkillUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplySkillUp_descriptor_,
      ReplySkillUp::default_instance_,
      ReplySkillUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplySkillUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplySkillUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplySkillUp));
  ReplyRebirth_descriptor_ = file->message_type(4);
  static const int ReplyRebirth_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyRebirth, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyRebirth, items_),
  };
  ReplyRebirth_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyRebirth_descriptor_,
      ReplyRebirth::default_instance_,
      ReplyRebirth_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyRebirth, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyRebirth, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyRebirth));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pet_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyTierUp_descriptor_, &ReplyTierUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyLvUp_descriptor_, &ReplyLvUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetList_descriptor_, &PetList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplySkillUp_descriptor_, &ReplySkillUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyRebirth_descriptor_, &ReplyRebirth::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pet_2eproto() {
  delete ReplyTierUp::default_instance_;
  delete ReplyTierUp_reflection_;
  delete ReplyLvUp::default_instance_;
  delete ReplyLvUp_reflection_;
  delete PetList::default_instance_;
  delete PetList_reflection_;
  delete ReplySkillUp::default_instance_;
  delete ReplySkillUp_reflection_;
  delete ReplyRebirth::default_instance_;
  delete ReplyRebirth_reflection_;
}

void protobuf_AddDesc_pet_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf::common::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tpet.proto\022\014protobuf.pet\032\014common.proto\""
    "g\n\013ReplyTierUp\022\n\n\002id\030\001 \002(\005\022!\n\003pet\030\002 \002(\0132"
    "\024.protobuf.common.Pet\022)\n\005items\030\003 \003(\0132\032.p"
    "rotobuf.common.KVint3264\"N\n\tReplyLvUp\022\n\n"
    "\002id\030\001 \002(\005\022\n\n\002lv\030\002 \002(\005\022)\n\005items\030\003 \003(\0132\032.p"
    "rotobuf.common.KVint3264\"-\n\007PetList\022\"\n\004p"
    "ets\030\001 \003(\0132\024.protobuf.common.Pet\"p\n\014Reply"
    "SkillUp\022\n\n\002id\030\001 \002(\005\022)\n\005skill\030\002 \002(\0132\032.pro"
    "tobuf.common.KVint3232\022)\n\005items\030\003 \003(\0132\032."
    "protobuf.common.KVint3264\"F\n\014ReplyRebirt"
    "h\022\013\n\003key\030\001 \002(\005\022)\n\005items\030\002 \003(\0132\032.protobuf"
    ".common.KVint3264B\037\n\023xag.idgo.core.proto"
    "B\010PetProto", 490);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pet.proto", &protobuf_RegisterTypes);
  ReplyTierUp::default_instance_ = new ReplyTierUp();
  ReplyLvUp::default_instance_ = new ReplyLvUp();
  PetList::default_instance_ = new PetList();
  ReplySkillUp::default_instance_ = new ReplySkillUp();
  ReplyRebirth::default_instance_ = new ReplyRebirth();
  ReplyTierUp::default_instance_->InitAsDefaultInstance();
  ReplyLvUp::default_instance_->InitAsDefaultInstance();
  PetList::default_instance_->InitAsDefaultInstance();
  ReplySkillUp::default_instance_->InitAsDefaultInstance();
  ReplyRebirth::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pet_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pet_2eproto {
  StaticDescriptorInitializer_pet_2eproto() {
    protobuf_AddDesc_pet_2eproto();
  }
} static_descriptor_initializer_pet_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ReplyTierUp::kIdFieldNumber;
const int ReplyTierUp::kPetFieldNumber;
const int ReplyTierUp::kItemsFieldNumber;
#endif  // !_MSC_VER

ReplyTierUp::ReplyTierUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReplyTierUp::InitAsDefaultInstance() {
  pet_ = const_cast< ::protobuf::common::Pet*>(&::protobuf::common::Pet::default_instance());
}

ReplyTierUp::ReplyTierUp(const ReplyTierUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReplyTierUp::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  pet_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyTierUp::~ReplyTierUp() {
  SharedDtor();
}

void ReplyTierUp::SharedDtor() {
  if (this != default_instance_) {
    delete pet_;
  }
}

void ReplyTierUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyTierUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyTierUp_descriptor_;
}

const ReplyTierUp& ReplyTierUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2eproto();  return *default_instance_;
}

ReplyTierUp* ReplyTierUp::default_instance_ = NULL;

ReplyTierUp* ReplyTierUp::New() const {
  return new ReplyTierUp;
}

void ReplyTierUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_pet()) {
      if (pet_ != NULL) pet_->::protobuf::common::Pet::Clear();
    }
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyTierUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pet;
        break;
      }
      
      // required .protobuf.common.Pet pet = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }
      
      // repeated .protobuf.common.KVint3264 items = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReplyTierUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // required .protobuf.common.Pet pet = 2;
  if (has_pet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pet(), output);
  }
  
  // repeated .protobuf.common.KVint3264 items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReplyTierUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // required .protobuf.common.Pet pet = 2;
  if (has_pet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pet(), target);
  }
  
  // repeated .protobuf.common.KVint3264 items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReplyTierUp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required .protobuf.common.Pet pet = 2;
    if (has_pet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pet());
    }
    
  }
  // repeated .protobuf.common.KVint3264 items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyTierUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyTierUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyTierUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyTierUp::MergeFrom(const ReplyTierUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pet()) {
      mutable_pet()->::protobuf::common::Pet::MergeFrom(from.pet());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyTierUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyTierUp::CopyFrom(const ReplyTierUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyTierUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_pet()) {
    if (!this->pet().IsInitialized()) return false;
  }
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void ReplyTierUp::Swap(ReplyTierUp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(pet_, other->pet_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyTierUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyTierUp_descriptor_;
  metadata.reflection = ReplyTierUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyLvUp::kIdFieldNumber;
const int ReplyLvUp::kLvFieldNumber;
const int ReplyLvUp::kItemsFieldNumber;
#endif  // !_MSC_VER

ReplyLvUp::ReplyLvUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReplyLvUp::InitAsDefaultInstance() {
}

ReplyLvUp::ReplyLvUp(const ReplyLvUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReplyLvUp::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  lv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyLvUp::~ReplyLvUp() {
  SharedDtor();
}

void ReplyLvUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReplyLvUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyLvUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyLvUp_descriptor_;
}

const ReplyLvUp& ReplyLvUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2eproto();  return *default_instance_;
}

ReplyLvUp* ReplyLvUp::default_instance_ = NULL;

ReplyLvUp* ReplyLvUp::New() const {
  return new ReplyLvUp;
}

void ReplyLvUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    lv_ = 0;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyLvUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lv;
        break;
      }
      
      // required int32 lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }
      
      // repeated .protobuf.common.KVint3264 items = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReplyLvUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // required int32 lv = 2;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lv(), output);
  }
  
  // repeated .protobuf.common.KVint3264 items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReplyLvUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // required int32 lv = 2;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lv(), target);
  }
  
  // repeated .protobuf.common.KVint3264 items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReplyLvUp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required int32 lv = 2;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }
    
  }
  // repeated .protobuf.common.KVint3264 items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyLvUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyLvUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyLvUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyLvUp::MergeFrom(const ReplyLvUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyLvUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyLvUp::CopyFrom(const ReplyLvUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyLvUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void ReplyLvUp::Swap(ReplyLvUp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(lv_, other->lv_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyLvUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyLvUp_descriptor_;
  metadata.reflection = ReplyLvUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetList::kPetsFieldNumber;
#endif  // !_MSC_VER

PetList::PetList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetList::InitAsDefaultInstance() {
}

PetList::PetList(const PetList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetList::~PetList() {
  SharedDtor();
}

void PetList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetList_descriptor_;
}

const PetList& PetList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2eproto();  return *default_instance_;
}

PetList* PetList::default_instance_ = NULL;

PetList* PetList::New() const {
  return new PetList;
}

void PetList::Clear() {
  pets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.common.Pet pets = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pets;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.common.Pet pets = 1;
  for (int i = 0; i < this->pets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pets(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.common.Pet pets = 1;
  for (int i = 0; i < this->pets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pets(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetList::ByteSize() const {
  int total_size = 0;
  
  // repeated .protobuf.common.Pet pets = 1;
  total_size += 1 * this->pets_size();
  for (int i = 0; i < this->pets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pets(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetList::MergeFrom(const PetList& from) {
  GOOGLE_CHECK_NE(&from, this);
  pets_.MergeFrom(from.pets_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetList::CopyFrom(const PetList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetList::IsInitialized() const {
  
  for (int i = 0; i < pets_size(); i++) {
    if (!this->pets(i).IsInitialized()) return false;
  }
  return true;
}

void PetList::Swap(PetList* other) {
  if (other != this) {
    pets_.Swap(&other->pets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetList_descriptor_;
  metadata.reflection = PetList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplySkillUp::kIdFieldNumber;
const int ReplySkillUp::kSkillFieldNumber;
const int ReplySkillUp::kItemsFieldNumber;
#endif  // !_MSC_VER

ReplySkillUp::ReplySkillUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReplySkillUp::InitAsDefaultInstance() {
  skill_ = const_cast< ::protobuf::common::KVint3232*>(&::protobuf::common::KVint3232::default_instance());
}

ReplySkillUp::ReplySkillUp(const ReplySkillUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReplySkillUp::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  skill_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplySkillUp::~ReplySkillUp() {
  SharedDtor();
}

void ReplySkillUp::SharedDtor() {
  if (this != default_instance_) {
    delete skill_;
  }
}

void ReplySkillUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplySkillUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplySkillUp_descriptor_;
}

const ReplySkillUp& ReplySkillUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2eproto();  return *default_instance_;
}

ReplySkillUp* ReplySkillUp::default_instance_ = NULL;

ReplySkillUp* ReplySkillUp::New() const {
  return new ReplySkillUp;
}

void ReplySkillUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_skill()) {
      if (skill_ != NULL) skill_->::protobuf::common::KVint3232::Clear();
    }
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplySkillUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_skill;
        break;
      }
      
      // required .protobuf.common.KVint3232 skill = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }
      
      // repeated .protobuf.common.KVint3264 items = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReplySkillUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // required .protobuf.common.KVint3232 skill = 2;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->skill(), output);
  }
  
  // repeated .protobuf.common.KVint3264 items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReplySkillUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // required .protobuf.common.KVint3232 skill = 2;
  if (has_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->skill(), target);
  }
  
  // repeated .protobuf.common.KVint3264 items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReplySkillUp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required .protobuf.common.KVint3232 skill = 2;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill());
    }
    
  }
  // repeated .protobuf.common.KVint3264 items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplySkillUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplySkillUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplySkillUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplySkillUp::MergeFrom(const ReplySkillUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_skill()) {
      mutable_skill()->::protobuf::common::KVint3232::MergeFrom(from.skill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplySkillUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplySkillUp::CopyFrom(const ReplySkillUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplySkillUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_skill()) {
    if (!this->skill().IsInitialized()) return false;
  }
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void ReplySkillUp::Swap(ReplySkillUp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(skill_, other->skill_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplySkillUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplySkillUp_descriptor_;
  metadata.reflection = ReplySkillUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyRebirth::kKeyFieldNumber;
const int ReplyRebirth::kItemsFieldNumber;
#endif  // !_MSC_VER

ReplyRebirth::ReplyRebirth()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReplyRebirth::InitAsDefaultInstance() {
}

ReplyRebirth::ReplyRebirth(const ReplyRebirth& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReplyRebirth::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyRebirth::~ReplyRebirth() {
  SharedDtor();
}

void ReplyRebirth::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReplyRebirth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyRebirth::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyRebirth_descriptor_;
}

const ReplyRebirth& ReplyRebirth::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pet_2eproto();  return *default_instance_;
}

ReplyRebirth* ReplyRebirth::default_instance_ = NULL;

ReplyRebirth* ReplyRebirth::New() const {
  return new ReplyRebirth;
}

void ReplyRebirth::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyRebirth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }
      
      // repeated .protobuf.common.KVint3264 items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReplyRebirth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }
  
  // repeated .protobuf.common.KVint3264 items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReplyRebirth::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }
  
  // repeated .protobuf.common.KVint3264 items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReplyRebirth::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }
    
  }
  // repeated .protobuf.common.KVint3264 items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyRebirth::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyRebirth* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyRebirth*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyRebirth::MergeFrom(const ReplyRebirth& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyRebirth::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyRebirth::CopyFrom(const ReplyRebirth& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyRebirth::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void ReplyRebirth::Swap(ReplyRebirth* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyRebirth::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyRebirth_descriptor_;
  metadata.reflection = ReplyRebirth_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pet
}  // namespace protobuf

// @@protoc_insertion_point(global_scope)
