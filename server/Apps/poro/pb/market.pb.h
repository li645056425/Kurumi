// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: market.proto

#ifndef PROTOBUF_market_2eproto__INCLUDED
#define PROTOBUF_market_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf {
namespace market {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_market_2eproto();
void protobuf_AssignDesc_market_2eproto();
void protobuf_ShutdownFile_market_2eproto();

class Market;
class WishLotteryRecord;
class Record;
class Wish;
class Item;
class WishLottery;

// ===================================================================

class Market : public ::google::protobuf::Message {
 public:
  Market();
  virtual ~Market();
  
  Market(const Market& from);
  
  inline Market& operator=(const Market& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Market& default_instance();
  
  void Swap(Market* other);
  
  // implements Message ----------------------------------------------
  
  Market* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Market& from);
  void MergeFrom(const Market& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // repeated .protobuf.common.KVint3233 items = 2;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 2;
  inline const ::protobuf::common::KVint3233& items(int index) const;
  inline ::protobuf::common::KVint3233* mutable_items(int index);
  inline ::protobuf::common::KVint3233* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3233 >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3233 >*
      mutable_items();
  
  // repeated .protobuf.common.KVint3264 limit = 5;
  inline int limit_size() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 5;
  inline const ::protobuf::common::KVint3264& limit(int index) const;
  inline ::protobuf::common::KVint3264* mutable_limit(int index);
  inline ::protobuf::common::KVint3264* add_limit();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 >&
      limit() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 >*
      mutable_limit();
  
  // optional int64 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);
  
  // repeated .protobuf.common.KVint3232 refreshCost = 4;
  inline int refreshcost_size() const;
  inline void clear_refreshcost();
  static const int kRefreshCostFieldNumber = 4;
  inline const ::protobuf::common::KVint3232& refreshcost(int index) const;
  inline ::protobuf::common::KVint3232* mutable_refreshcost(int index);
  inline ::protobuf::common::KVint3232* add_refreshcost();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >&
      refreshcost() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >*
      mutable_refreshcost();
  
  // @@protoc_insertion_point(class_scope:protobuf.market.Market)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_time();
  inline void clear_has_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3233 > items_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 > limit_;
  ::google::protobuf::int64 time_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 > refreshcost_;
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_market_2eproto();
  friend void protobuf_AssignDesc_market_2eproto();
  friend void protobuf_ShutdownFile_market_2eproto();
  
  void InitAsDefaultInstance();
  static Market* default_instance_;
};
// -------------------------------------------------------------------

class WishLotteryRecord : public ::google::protobuf::Message {
 public:
  WishLotteryRecord();
  virtual ~WishLotteryRecord();
  
  WishLotteryRecord(const WishLotteryRecord& from);
  
  inline WishLotteryRecord& operator=(const WishLotteryRecord& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WishLotteryRecord& default_instance();
  
  void Swap(WishLotteryRecord* other);
  
  // implements Message ----------------------------------------------
  
  WishLotteryRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WishLotteryRecord& from);
  void MergeFrom(const WishLotteryRecord& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protobuf.market.Record record = 1;
  inline int record_size() const;
  inline void clear_record();
  static const int kRecordFieldNumber = 1;
  inline const ::protobuf::market::Record& record(int index) const;
  inline ::protobuf::market::Record* mutable_record(int index);
  inline ::protobuf::market::Record* add_record();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::market::Record >&
      record() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::market::Record >*
      mutable_record();
  
  // @@protoc_insertion_point(class_scope:protobuf.market.WishLotteryRecord)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protobuf::market::Record > record_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_market_2eproto();
  friend void protobuf_AssignDesc_market_2eproto();
  friend void protobuf_ShutdownFile_market_2eproto();
  
  void InitAsDefaultInstance();
  static WishLotteryRecord* default_instance_;
};
// -------------------------------------------------------------------

class Record : public ::google::protobuf::Message {
 public:
  Record();
  virtual ~Record();
  
  Record(const Record& from);
  
  inline Record& operator=(const Record& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Record& default_instance();
  
  void Swap(Record* other);
  
  // implements Message ----------------------------------------------
  
  Record* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Record& from);
  void MergeFrom(const Record& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required int32 itemId = 2;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);
  
  // required int32 itemNum = 3;
  inline bool has_itemnum() const;
  inline void clear_itemnum();
  static const int kItemNumFieldNumber = 3;
  inline ::google::protobuf::int32 itemnum() const;
  inline void set_itemnum(::google::protobuf::int32 value);
  
  // optional bool isChat = 4;
  inline bool has_ischat() const;
  inline void clear_ischat();
  static const int kIsChatFieldNumber = 4;
  inline bool ischat() const;
  inline void set_ischat(bool value);
  
  // @@protoc_insertion_point(class_scope:protobuf.market.Record)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_itemnum();
  inline void clear_has_itemnum();
  inline void set_has_ischat();
  inline void clear_has_ischat();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::int32 itemid_;
  ::google::protobuf::int32 itemnum_;
  bool ischat_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_market_2eproto();
  friend void protobuf_AssignDesc_market_2eproto();
  friend void protobuf_ShutdownFile_market_2eproto();
  
  void InitAsDefaultInstance();
  static Record* default_instance_;
};
// -------------------------------------------------------------------

class Wish : public ::google::protobuf::Message {
 public:
  Wish();
  virtual ~Wish();
  
  Wish(const Wish& from);
  
  inline Wish& operator=(const Wish& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Wish& default_instance();
  
  void Swap(Wish* other);
  
  // implements Message ----------------------------------------------
  
  Wish* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Wish& from);
  void MergeFrom(const Wish& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // repeated .protobuf.market.Item items = 2;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 2;
  inline const ::protobuf::market::Item& items(int index) const;
  inline ::protobuf::market::Item* mutable_items(int index);
  inline ::protobuf::market::Item* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::market::Item >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::market::Item >*
      mutable_items();
  
  // optional int64 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);
  
  // repeated .protobuf.common.KVint3232 refreshCost = 4;
  inline int refreshcost_size() const;
  inline void clear_refreshcost();
  static const int kRefreshCostFieldNumber = 4;
  inline const ::protobuf::common::KVint3232& refreshcost(int index) const;
  inline ::protobuf::common::KVint3232* mutable_refreshcost(int index);
  inline ::protobuf::common::KVint3232* add_refreshcost();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >&
      refreshcost() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >*
      mutable_refreshcost();
  
  // optional int64 forceTime = 5;
  inline bool has_forcetime() const;
  inline void clear_forcetime();
  static const int kForceTimeFieldNumber = 5;
  inline ::google::protobuf::int64 forcetime() const;
  inline void set_forcetime(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:protobuf.market.Wish)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_forcetime();
  inline void clear_has_forcetime();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protobuf::market::Item > items_;
  ::google::protobuf::int64 time_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 > refreshcost_;
  ::google::protobuf::int64 forcetime_;
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_market_2eproto();
  friend void protobuf_AssignDesc_market_2eproto();
  friend void protobuf_ShutdownFile_market_2eproto();
  
  void InitAsDefaultInstance();
  static Wish* default_instance_;
};
// -------------------------------------------------------------------

class Item : public ::google::protobuf::Message {
 public:
  Item();
  virtual ~Item();
  
  Item(const Item& from);
  
  inline Item& operator=(const Item& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Item& default_instance();
  
  void Swap(Item* other);
  
  // implements Message ----------------------------------------------
  
  Item* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Item& from);
  void MergeFrom(const Item& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 itemId = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);
  
  // required int32 itemNum = 2;
  inline bool has_itemnum() const;
  inline void clear_itemnum();
  static const int kItemNumFieldNumber = 2;
  inline ::google::protobuf::int32 itemnum() const;
  inline void set_itemnum(::google::protobuf::int32 value);
  
  // required int32 times = 3;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 3;
  inline ::google::protobuf::int32 times() const;
  inline void set_times(::google::protobuf::int32 value);
  
  // optional int32 id = 4;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 4;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protobuf.market.Item)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_itemnum();
  inline void clear_has_itemnum();
  inline void set_has_times();
  inline void clear_has_times();
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 itemid_;
  ::google::protobuf::int32 itemnum_;
  ::google::protobuf::int32 times_;
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_market_2eproto();
  friend void protobuf_AssignDesc_market_2eproto();
  friend void protobuf_ShutdownFile_market_2eproto();
  
  void InitAsDefaultInstance();
  static Item* default_instance_;
};
// -------------------------------------------------------------------

class WishLottery : public ::google::protobuf::Message {
 public:
  WishLottery();
  virtual ~WishLottery();
  
  WishLottery(const WishLottery& from);
  
  inline WishLottery& operator=(const WishLottery& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WishLottery& default_instance();
  
  void Swap(WishLottery* other);
  
  // implements Message ----------------------------------------------
  
  WishLottery* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WishLottery& from);
  void MergeFrom(const WishLottery& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protobuf.common.KVint3232 items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::protobuf::common::KVint3232& items(int index) const;
  inline ::protobuf::common::KVint3232* mutable_items(int index);
  inline ::protobuf::common::KVint3232* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >*
      mutable_items();
  
  // @@protoc_insertion_point(class_scope:protobuf.market.WishLottery)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 > items_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_market_2eproto();
  friend void protobuf_AssignDesc_market_2eproto();
  friend void protobuf_ShutdownFile_market_2eproto();
  
  void InitAsDefaultInstance();
  static WishLottery* default_instance_;
};
// ===================================================================


// ===================================================================

// Market

// required int32 id = 1;
inline bool Market::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Market::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Market::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Market::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Market::id() const {
  return id_;
}
inline void Market::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// repeated .protobuf.common.KVint3233 items = 2;
inline int Market::items_size() const {
  return items_.size();
}
inline void Market::clear_items() {
  items_.Clear();
}
inline const ::protobuf::common::KVint3233& Market::items(int index) const {
  return items_.Get(index);
}
inline ::protobuf::common::KVint3233* Market::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::protobuf::common::KVint3233* Market::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3233 >&
Market::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3233 >*
Market::mutable_items() {
  return &items_;
}

// repeated .protobuf.common.KVint3264 limit = 5;
inline int Market::limit_size() const {
  return limit_.size();
}
inline void Market::clear_limit() {
  limit_.Clear();
}
inline const ::protobuf::common::KVint3264& Market::limit(int index) const {
  return limit_.Get(index);
}
inline ::protobuf::common::KVint3264* Market::mutable_limit(int index) {
  return limit_.Mutable(index);
}
inline ::protobuf::common::KVint3264* Market::add_limit() {
  return limit_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 >&
Market::limit() const {
  return limit_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 >*
Market::mutable_limit() {
  return &limit_;
}

// optional int64 time = 3;
inline bool Market::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Market::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Market::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Market::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 Market::time() const {
  return time_;
}
inline void Market::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// repeated .protobuf.common.KVint3232 refreshCost = 4;
inline int Market::refreshcost_size() const {
  return refreshcost_.size();
}
inline void Market::clear_refreshcost() {
  refreshcost_.Clear();
}
inline const ::protobuf::common::KVint3232& Market::refreshcost(int index) const {
  return refreshcost_.Get(index);
}
inline ::protobuf::common::KVint3232* Market::mutable_refreshcost(int index) {
  return refreshcost_.Mutable(index);
}
inline ::protobuf::common::KVint3232* Market::add_refreshcost() {
  return refreshcost_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >&
Market::refreshcost() const {
  return refreshcost_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >*
Market::mutable_refreshcost() {
  return &refreshcost_;
}

// -------------------------------------------------------------------

// WishLotteryRecord

// repeated .protobuf.market.Record record = 1;
inline int WishLotteryRecord::record_size() const {
  return record_.size();
}
inline void WishLotteryRecord::clear_record() {
  record_.Clear();
}
inline const ::protobuf::market::Record& WishLotteryRecord::record(int index) const {
  return record_.Get(index);
}
inline ::protobuf::market::Record* WishLotteryRecord::mutable_record(int index) {
  return record_.Mutable(index);
}
inline ::protobuf::market::Record* WishLotteryRecord::add_record() {
  return record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::market::Record >&
WishLotteryRecord::record() const {
  return record_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::market::Record >*
WishLotteryRecord::mutable_record() {
  return &record_;
}

// -------------------------------------------------------------------

// Record

// required string name = 1;
inline bool Record::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Record::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Record::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Record::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Record::name() const {
  return *name_;
}
inline void Record::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Record::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Record::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Record::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Record::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 itemId = 2;
inline bool Record::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Record::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Record::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Record::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
inline ::google::protobuf::int32 Record::itemid() const {
  return itemid_;
}
inline void Record::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
}

// required int32 itemNum = 3;
inline bool Record::has_itemnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Record::set_has_itemnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Record::clear_has_itemnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Record::clear_itemnum() {
  itemnum_ = 0;
  clear_has_itemnum();
}
inline ::google::protobuf::int32 Record::itemnum() const {
  return itemnum_;
}
inline void Record::set_itemnum(::google::protobuf::int32 value) {
  set_has_itemnum();
  itemnum_ = value;
}

// optional bool isChat = 4;
inline bool Record::has_ischat() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Record::set_has_ischat() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Record::clear_has_ischat() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Record::clear_ischat() {
  ischat_ = false;
  clear_has_ischat();
}
inline bool Record::ischat() const {
  return ischat_;
}
inline void Record::set_ischat(bool value) {
  set_has_ischat();
  ischat_ = value;
}

// -------------------------------------------------------------------

// Wish

// required int32 id = 1;
inline bool Wish::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Wish::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Wish::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Wish::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Wish::id() const {
  return id_;
}
inline void Wish::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// repeated .protobuf.market.Item items = 2;
inline int Wish::items_size() const {
  return items_.size();
}
inline void Wish::clear_items() {
  items_.Clear();
}
inline const ::protobuf::market::Item& Wish::items(int index) const {
  return items_.Get(index);
}
inline ::protobuf::market::Item* Wish::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::protobuf::market::Item* Wish::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::market::Item >&
Wish::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::market::Item >*
Wish::mutable_items() {
  return &items_;
}

// optional int64 time = 3;
inline bool Wish::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Wish::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Wish::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Wish::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 Wish::time() const {
  return time_;
}
inline void Wish::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// repeated .protobuf.common.KVint3232 refreshCost = 4;
inline int Wish::refreshcost_size() const {
  return refreshcost_.size();
}
inline void Wish::clear_refreshcost() {
  refreshcost_.Clear();
}
inline const ::protobuf::common::KVint3232& Wish::refreshcost(int index) const {
  return refreshcost_.Get(index);
}
inline ::protobuf::common::KVint3232* Wish::mutable_refreshcost(int index) {
  return refreshcost_.Mutable(index);
}
inline ::protobuf::common::KVint3232* Wish::add_refreshcost() {
  return refreshcost_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >&
Wish::refreshcost() const {
  return refreshcost_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >*
Wish::mutable_refreshcost() {
  return &refreshcost_;
}

// optional int64 forceTime = 5;
inline bool Wish::has_forcetime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Wish::set_has_forcetime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Wish::clear_has_forcetime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Wish::clear_forcetime() {
  forcetime_ = GOOGLE_LONGLONG(0);
  clear_has_forcetime();
}
inline ::google::protobuf::int64 Wish::forcetime() const {
  return forcetime_;
}
inline void Wish::set_forcetime(::google::protobuf::int64 value) {
  set_has_forcetime();
  forcetime_ = value;
}

// -------------------------------------------------------------------

// Item

// required int32 itemId = 1;
inline bool Item::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Item::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Item::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Item::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
inline ::google::protobuf::int32 Item::itemid() const {
  return itemid_;
}
inline void Item::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
}

// required int32 itemNum = 2;
inline bool Item::has_itemnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Item::set_has_itemnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Item::clear_has_itemnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Item::clear_itemnum() {
  itemnum_ = 0;
  clear_has_itemnum();
}
inline ::google::protobuf::int32 Item::itemnum() const {
  return itemnum_;
}
inline void Item::set_itemnum(::google::protobuf::int32 value) {
  set_has_itemnum();
  itemnum_ = value;
}

// required int32 times = 3;
inline bool Item::has_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Item::set_has_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Item::clear_has_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Item::clear_times() {
  times_ = 0;
  clear_has_times();
}
inline ::google::protobuf::int32 Item::times() const {
  return times_;
}
inline void Item::set_times(::google::protobuf::int32 value) {
  set_has_times();
  times_ = value;
}

// optional int32 id = 4;
inline bool Item::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Item::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Item::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Item::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Item::id() const {
  return id_;
}
inline void Item::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// WishLottery

// repeated .protobuf.common.KVint3232 items = 1;
inline int WishLottery::items_size() const {
  return items_.size();
}
inline void WishLottery::clear_items() {
  items_.Clear();
}
inline const ::protobuf::common::KVint3232& WishLottery::items(int index) const {
  return items_.Get(index);
}
inline ::protobuf::common::KVint3232* WishLottery::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::protobuf::common::KVint3232* WishLottery::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >&
WishLottery::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >*
WishLottery::mutable_items() {
  return &items_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace market
}  // namespace protobuf

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_market_2eproto__INCLUDED
