// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "chat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protobuf {
namespace chat {

namespace {

const ::google::protobuf::Descriptor* ChatInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatInfoList_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecruitInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecruitInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleShare_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleShare_reflection_ = NULL;
const ::google::protobuf::Descriptor* OneBattleShow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OneBattleShow_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleShow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleShow_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendChat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendChat_reflection_ = NULL;
const ::google::protobuf::Descriptor* PullChatInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PullChatInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_chat_2eproto() {
  protobuf_AddDesc_chat_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "chat.proto");
  GOOGLE_CHECK(file != NULL);
  ChatInfo_descriptor_ = file->message_type(0);
  static const int ChatInfo_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, chatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, sendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, pram_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, recruit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, pet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, headframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, sendtoplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, serverid_),
  };
  ChatInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatInfo_descriptor_,
      ChatInfo::default_instance_,
      ChatInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatInfo));
  ChatInfoList_descriptor_ = file->message_type(1);
  static const int ChatInfoList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfoList, chatinfo_),
  };
  ChatInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatInfoList_descriptor_,
      ChatInfoList::default_instance_,
      ChatInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatInfoList));
  RecruitInfo_descriptor_ = file->message_type(2);
  static const int RecruitInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecruitInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecruitInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecruitInfo, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecruitInfo, lvorpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecruitInfo, objid_),
  };
  RecruitInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecruitInfo_descriptor_,
      RecruitInfo::default_instance_,
      RecruitInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecruitInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecruitInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecruitInfo));
  BattleShare_descriptor_ = file->message_type(3);
  static const int BattleShare_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleShare, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleShare, id_),
  };
  BattleShare_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleShare_descriptor_,
      BattleShare::default_instance_,
      BattleShare_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleShare, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleShare, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleShare));
  OneBattleShow_descriptor_ = file->message_type(4);
  static const int OneBattleShow_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneBattleShow, attackname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneBattleShow, attacklvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneBattleShow, attackhead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneBattleShow, attackid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneBattleShow, atheadframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneBattleShow, defenseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneBattleShow, defensename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneBattleShow, defenselvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneBattleShow, defensehead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneBattleShow, deheadframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneBattleShow, victory_),
  };
  OneBattleShow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OneBattleShow_descriptor_,
      OneBattleShow::default_instance_,
      OneBattleShow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneBattleShow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneBattleShow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OneBattleShow));
  BattleShow_descriptor_ = file->message_type(5);
  static const int BattleShow_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleShow, show_),
  };
  BattleShow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleShow_descriptor_,
      BattleShow::default_instance_,
      BattleShow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleShow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleShow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleShow));
  SendChat_descriptor_ = file->message_type(6);
  static const int SendChat_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendChat, chatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendChat, pram_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendChat, recruit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendChat, battle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendChat, hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendChat, pet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendChat, sendtoplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendChat, serverid_),
  };
  SendChat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendChat_descriptor_,
      SendChat::default_instance_,
      SendChat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendChat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendChat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendChat));
  PullChatInfo_descriptor_ = file->message_type(7);
  static const int PullChatInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullChatInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullChatInfo, chatinfo_),
  };
  PullChatInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PullChatInfo_descriptor_,
      PullChatInfo::default_instance_,
      PullChatInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullChatInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PullChatInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PullChatInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_chat_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatInfo_descriptor_, &ChatInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatInfoList_descriptor_, &ChatInfoList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecruitInfo_descriptor_, &RecruitInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleShare_descriptor_, &BattleShare::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OneBattleShow_descriptor_, &OneBattleShow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleShow_descriptor_, &BattleShow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendChat_descriptor_, &SendChat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PullChatInfo_descriptor_, &PullChatInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_chat_2eproto() {
  delete ChatInfo::default_instance_;
  delete ChatInfo_reflection_;
  delete ChatInfoList::default_instance_;
  delete ChatInfoList_reflection_;
  delete RecruitInfo::default_instance_;
  delete RecruitInfo_reflection_;
  delete BattleShare::default_instance_;
  delete BattleShare_reflection_;
  delete OneBattleShow::default_instance_;
  delete OneBattleShow_reflection_;
  delete BattleShow::default_instance_;
  delete BattleShow_reflection_;
  delete SendChat::default_instance_;
  delete SendChat_reflection_;
  delete PullChatInfo::default_instance_;
  delete PullChatInfo_reflection_;
}

void protobuf_AddDesc_chat_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf::common::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nchat.proto\022\rprotobuf.chat\032\014common.prot"
    "o\"\371\002\n\010ChatInfo\022\n\n\002id\030\001 \002(\003\022\016\n\006chatId\030\002 \002"
    "(\005\022\020\n\010sendTime\030\003 \002(\003\022\r\n\005level\030\004 \001(\005\022\014\n\004n"
    "ame\030\005 \001(\t\022\014\n\004head\030\006 \001(\t\022\020\n\010playerId\030\007 \001("
    "\t\022\014\n\004pram\030\010 \003(\t\022+\n\007recruit\030\t \001(\0132\032.proto"
    "buf.chat.RecruitInfo\022(\n\004item\030\n \003(\0132\032.pro"
    "tobuf.common.KVint3232\022+\n\004hero\030\014 \001(\0132\035.p"
    "rotobuf.common.LineupDetail\022\020\n\010vipLevel\030"
    "\r \001(\005\022!\n\003pet\030\016 \003(\0132\024.protobuf.common.Pet"
    "\022\021\n\theadFrame\030\017 \001(\005\022\026\n\016sendToPlayerId\030\020 "
    "\001(\t\022\020\n\010serverId\030\021 \001(\005\"9\n\014ChatInfoList\022)\n"
    "\010chatInfo\030\001 \003(\0132\027.protobuf.chat.ChatInfo"
    "\"W\n\013RecruitInfo\022\n\n\002id\030\001 \002(\005\022\014\n\004name\030\002 \002("
    "\t\022\014\n\004info\030\003 \002(\t\022\021\n\tlvOrPower\030\004 \002(\005\022\r\n\005ob"
    "jId\030\005 \001(\t\"\'\n\013BattleShare\022\014\n\004type\030\001 \002(\005\022\n"
    "\n\002id\030\002 \001(\t\"\350\001\n\rOneBattleShow\022\022\n\nattackNa"
    "me\030\002 \002(\t\022\021\n\tattackLvl\030\003 \002(\005\022\022\n\nattackHea"
    "d\030\004 \002(\t\022\020\n\010attackId\030\005 \002(\t\022\023\n\013atHeadFrame"
    "\030\006 \001(\005\022\021\n\tdefenseId\030\007 \002(\t\022\023\n\013defenseName"
    "\030\010 \002(\t\022\022\n\ndefenseLvl\030\t \002(\005\022\023\n\013defenseHea"
    "d\030\n \002(\t\022\023\n\013deHeadFrame\030\013 \001(\005\022\017\n\007victory\030"
    "\016 \002(\010\"8\n\nBattleShow\022*\n\004show\030\001 \003(\0132\034.prot"
    "obuf.chat.OneBattleShow\"\306\001\n\010SendChat\022\016\n\006"
    "chatId\030\001 \002(\005\022\014\n\004pram\030\002 \003(\t\022+\n\007recruit\030\003 "
    "\001(\0132\032.protobuf.chat.RecruitInfo\022*\n\006battl"
    "e\030\004 \001(\0132\032.protobuf.chat.BattleShare\022\014\n\004h"
    "ero\030\005 \001(\005\022\013\n\003pet\030\006 \001(\005\022\026\n\016sendToPlayerId"
    "\030\007 \001(\t\022\020\n\010serverId\030\010 \001(\005\"E\n\014PullChatInfo"
    "\022\n\n\002id\030\001 \002(\005\022)\n\010chatInfo\030\002 \003(\0132\027.protobu"
    "f.chat.ChatInfoB \n\023xag.idgo.core.protoB\t"
    "ChatProto", 1209);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "chat.proto", &protobuf_RegisterTypes);
  ChatInfo::default_instance_ = new ChatInfo();
  ChatInfoList::default_instance_ = new ChatInfoList();
  RecruitInfo::default_instance_ = new RecruitInfo();
  BattleShare::default_instance_ = new BattleShare();
  OneBattleShow::default_instance_ = new OneBattleShow();
  BattleShow::default_instance_ = new BattleShow();
  SendChat::default_instance_ = new SendChat();
  PullChatInfo::default_instance_ = new PullChatInfo();
  ChatInfo::default_instance_->InitAsDefaultInstance();
  ChatInfoList::default_instance_->InitAsDefaultInstance();
  RecruitInfo::default_instance_->InitAsDefaultInstance();
  BattleShare::default_instance_->InitAsDefaultInstance();
  OneBattleShow::default_instance_->InitAsDefaultInstance();
  BattleShow::default_instance_->InitAsDefaultInstance();
  SendChat::default_instance_->InitAsDefaultInstance();
  PullChatInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_chat_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_chat_2eproto {
  StaticDescriptorInitializer_chat_2eproto() {
    protobuf_AddDesc_chat_2eproto();
  }
} static_descriptor_initializer_chat_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ChatInfo::kIdFieldNumber;
const int ChatInfo::kChatIdFieldNumber;
const int ChatInfo::kSendTimeFieldNumber;
const int ChatInfo::kLevelFieldNumber;
const int ChatInfo::kNameFieldNumber;
const int ChatInfo::kHeadFieldNumber;
const int ChatInfo::kPlayerIdFieldNumber;
const int ChatInfo::kPramFieldNumber;
const int ChatInfo::kRecruitFieldNumber;
const int ChatInfo::kItemFieldNumber;
const int ChatInfo::kHeroFieldNumber;
const int ChatInfo::kVipLevelFieldNumber;
const int ChatInfo::kPetFieldNumber;
const int ChatInfo::kHeadFrameFieldNumber;
const int ChatInfo::kSendToPlayerIdFieldNumber;
const int ChatInfo::kServerIdFieldNumber;
#endif  // !_MSC_VER

ChatInfo::ChatInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatInfo::InitAsDefaultInstance() {
  recruit_ = const_cast< ::protobuf::chat::RecruitInfo*>(&::protobuf::chat::RecruitInfo::default_instance());
  hero_ = const_cast< ::protobuf::common::LineupDetail*>(&::protobuf::common::LineupDetail::default_instance());
}

ChatInfo::ChatInfo(const ChatInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  chatid_ = 0;
  sendtime_ = GOOGLE_LONGLONG(0);
  level_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  recruit_ = NULL;
  hero_ = NULL;
  viplevel_ = 0;
  headframe_ = 0;
  sendtoplayerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serverid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatInfo::~ChatInfo() {
  SharedDtor();
}

void ChatInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    delete head_;
  }
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (sendtoplayerid_ != &::google::protobuf::internal::kEmptyString) {
    delete sendtoplayerid_;
  }
  if (this != default_instance_) {
    delete recruit_;
    delete hero_;
  }
}

void ChatInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatInfo_descriptor_;
}

const ChatInfo& ChatInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();  return *default_instance_;
}

ChatInfo* ChatInfo::default_instance_ = NULL;

ChatInfo* ChatInfo::New() const {
  return new ChatInfo;
}

void ChatInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    chatid_ = 0;
    sendtime_ = GOOGLE_LONGLONG(0);
    level_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_head()) {
      if (head_ != &::google::protobuf::internal::kEmptyString) {
        head_->clear();
      }
    }
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_recruit()) {
      if (recruit_ != NULL) recruit_->::protobuf::chat::RecruitInfo::Clear();
    }
    if (has_hero()) {
      if (hero_ != NULL) hero_->::protobuf::common::LineupDetail::Clear();
    }
    viplevel_ = 0;
    headframe_ = 0;
    if (has_sendtoplayerid()) {
      if (sendtoplayerid_ != &::google::protobuf::internal::kEmptyString) {
        sendtoplayerid_->clear();
      }
    }
    serverid_ = 0;
  }
  pram_.Clear();
  item_.Clear();
  pet_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chatId;
        break;
      }
      
      // required int32 chatId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chatId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chatid_)));
          set_has_chatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sendTime;
        break;
      }
      
      // required int64 sendTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sendTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sendtime_)));
          set_has_sendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }
      
      // optional int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }
      
      // optional string name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_head;
        break;
      }
      
      // optional string head = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_head()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->head().data(), this->head().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_playerId;
        break;
      }
      
      // optional string playerId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_pram;
        break;
      }
      
      // repeated string pram = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pram:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_pram()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pram(0).data(), this->pram(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_pram;
        if (input->ExpectTag(74)) goto parse_recruit;
        break;
      }
      
      // optional .protobuf.chat.RecruitInfo recruit = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recruit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recruit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_item;
        break;
      }
      
      // repeated .protobuf.common.KVint3232 item = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_item;
        if (input->ExpectTag(98)) goto parse_hero;
        break;
      }
      
      // optional .protobuf.common.LineupDetail hero = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hero()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_vipLevel;
        break;
      }
      
      // optional int32 vipLevel = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_pet;
        break;
      }
      
      // repeated .protobuf.common.Pet pet = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_pet;
        if (input->ExpectTag(120)) goto parse_headFrame;
        break;
      }
      
      // optional int32 headFrame = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headFrame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headframe_)));
          set_has_headframe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_sendToPlayerId;
        break;
      }
      
      // optional string sendToPlayerId = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sendToPlayerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendtoplayerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sendtoplayerid().data(), this->sendtoplayerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_serverId;
        break;
      }
      
      // optional int32 serverId = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }
  
  // required int32 chatId = 2;
  if (has_chatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chatid(), output);
  }
  
  // required int64 sendTime = 3;
  if (has_sendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->sendtime(), output);
  }
  
  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }
  
  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name(), output);
  }
  
  // optional string head = 6;
  if (has_head()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head().data(), this->head().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->head(), output);
  }
  
  // optional string playerId = 7;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->playerid(), output);
  }
  
  // repeated string pram = 8;
  for (int i = 0; i < this->pram_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->pram(i).data(), this->pram(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->pram(i), output);
  }
  
  // optional .protobuf.chat.RecruitInfo recruit = 9;
  if (has_recruit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->recruit(), output);
  }
  
  // repeated .protobuf.common.KVint3232 item = 10;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->item(i), output);
  }
  
  // optional .protobuf.common.LineupDetail hero = 12;
  if (has_hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->hero(), output);
  }
  
  // optional int32 vipLevel = 13;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->viplevel(), output);
  }
  
  // repeated .protobuf.common.Pet pet = 14;
  for (int i = 0; i < this->pet_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->pet(i), output);
  }
  
  // optional int32 headFrame = 15;
  if (has_headframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->headframe(), output);
  }
  
  // optional string sendToPlayerId = 16;
  if (has_sendtoplayerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendtoplayerid().data(), this->sendtoplayerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->sendtoplayerid(), output);
  }
  
  // optional int32 serverId = 17;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->serverid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }
  
  // required int32 chatId = 2;
  if (has_chatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chatid(), target);
  }
  
  // required int64 sendTime = 3;
  if (has_sendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->sendtime(), target);
  }
  
  // optional int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }
  
  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }
  
  // optional string head = 6;
  if (has_head()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head().data(), this->head().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->head(), target);
  }
  
  // optional string playerId = 7;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->playerid(), target);
  }
  
  // repeated string pram = 8;
  for (int i = 0; i < this->pram_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pram(i).data(), this->pram(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->pram(i), target);
  }
  
  // optional .protobuf.chat.RecruitInfo recruit = 9;
  if (has_recruit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->recruit(), target);
  }
  
  // repeated .protobuf.common.KVint3232 item = 10;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->item(i), target);
  }
  
  // optional .protobuf.common.LineupDetail hero = 12;
  if (has_hero()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->hero(), target);
  }
  
  // optional int32 vipLevel = 13;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->viplevel(), target);
  }
  
  // repeated .protobuf.common.Pet pet = 14;
  for (int i = 0; i < this->pet_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->pet(i), target);
  }
  
  // optional int32 headFrame = 15;
  if (has_headframe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->headframe(), target);
  }
  
  // optional string sendToPlayerId = 16;
  if (has_sendtoplayerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendtoplayerid().data(), this->sendtoplayerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->sendtoplayerid(), target);
  }
  
  // optional int32 serverId = 17;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->serverid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
    // required int32 chatId = 2;
    if (has_chatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chatid());
    }
    
    // required int64 sendTime = 3;
    if (has_sendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sendtime());
    }
    
    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string head = 6;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->head());
    }
    
    // optional string playerId = 7;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .protobuf.chat.RecruitInfo recruit = 9;
    if (has_recruit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recruit());
    }
    
    // optional .protobuf.common.LineupDetail hero = 12;
    if (has_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hero());
    }
    
    // optional int32 vipLevel = 13;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }
    
    // optional int32 headFrame = 15;
    if (has_headframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headframe());
    }
    
    // optional string sendToPlayerId = 16;
    if (has_sendtoplayerid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sendtoplayerid());
    }
    
    // optional int32 serverId = 17;
    if (has_serverid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }
    
  }
  // repeated string pram = 8;
  total_size += 1 * this->pram_size();
  for (int i = 0; i < this->pram_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->pram(i));
  }
  
  // repeated .protobuf.common.KVint3232 item = 10;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }
  
  // repeated .protobuf.common.Pet pet = 14;
  total_size += 1 * this->pet_size();
  for (int i = 0; i < this->pet_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pet(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatInfo::MergeFrom(const ChatInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  pram_.MergeFrom(from.pram_);
  item_.MergeFrom(from.item_);
  pet_.MergeFrom(from.pet_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_chatid()) {
      set_chatid(from.chatid());
    }
    if (from.has_sendtime()) {
      set_sendtime(from.sendtime());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_head()) {
      set_head(from.head());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_recruit()) {
      mutable_recruit()->::protobuf::chat::RecruitInfo::MergeFrom(from.recruit());
    }
    if (from.has_hero()) {
      mutable_hero()->::protobuf::common::LineupDetail::MergeFrom(from.hero());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_headframe()) {
      set_headframe(from.headframe());
    }
    if (from.has_sendtoplayerid()) {
      set_sendtoplayerid(from.sendtoplayerid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatInfo::CopyFrom(const ChatInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_recruit()) {
    if (!this->recruit().IsInitialized()) return false;
  }
  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  if (has_hero()) {
    if (!this->hero().IsInitialized()) return false;
  }
  for (int i = 0; i < pet_size(); i++) {
    if (!this->pet(i).IsInitialized()) return false;
  }
  return true;
}

void ChatInfo::Swap(ChatInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(chatid_, other->chatid_);
    std::swap(sendtime_, other->sendtime_);
    std::swap(level_, other->level_);
    std::swap(name_, other->name_);
    std::swap(head_, other->head_);
    std::swap(playerid_, other->playerid_);
    pram_.Swap(&other->pram_);
    std::swap(recruit_, other->recruit_);
    item_.Swap(&other->item_);
    std::swap(hero_, other->hero_);
    std::swap(viplevel_, other->viplevel_);
    pet_.Swap(&other->pet_);
    std::swap(headframe_, other->headframe_);
    std::swap(sendtoplayerid_, other->sendtoplayerid_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatInfo_descriptor_;
  metadata.reflection = ChatInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatInfoList::kChatInfoFieldNumber;
#endif  // !_MSC_VER

ChatInfoList::ChatInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatInfoList::InitAsDefaultInstance() {
}

ChatInfoList::ChatInfoList(const ChatInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatInfoList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatInfoList::~ChatInfoList() {
  SharedDtor();
}

void ChatInfoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChatInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatInfoList_descriptor_;
}

const ChatInfoList& ChatInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();  return *default_instance_;
}

ChatInfoList* ChatInfoList::default_instance_ = NULL;

ChatInfoList* ChatInfoList::New() const {
  return new ChatInfoList;
}

void ChatInfoList::Clear() {
  chatinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.chat.ChatInfo chatInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chatInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chatinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_chatInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.chat.ChatInfo chatInfo = 1;
  for (int i = 0; i < this->chatinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->chatinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.chat.ChatInfo chatInfo = 1;
  for (int i = 0; i < this->chatinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->chatinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatInfoList::ByteSize() const {
  int total_size = 0;
  
  // repeated .protobuf.chat.ChatInfo chatInfo = 1;
  total_size += 1 * this->chatinfo_size();
  for (int i = 0; i < this->chatinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chatinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatInfoList::MergeFrom(const ChatInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  chatinfo_.MergeFrom(from.chatinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatInfoList::CopyFrom(const ChatInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatInfoList::IsInitialized() const {
  
  for (int i = 0; i < chatinfo_size(); i++) {
    if (!this->chatinfo(i).IsInitialized()) return false;
  }
  return true;
}

void ChatInfoList::Swap(ChatInfoList* other) {
  if (other != this) {
    chatinfo_.Swap(&other->chatinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatInfoList_descriptor_;
  metadata.reflection = ChatInfoList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecruitInfo::kIdFieldNumber;
const int RecruitInfo::kNameFieldNumber;
const int RecruitInfo::kInfoFieldNumber;
const int RecruitInfo::kLvOrPowerFieldNumber;
const int RecruitInfo::kObjIdFieldNumber;
#endif  // !_MSC_VER

RecruitInfo::RecruitInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecruitInfo::InitAsDefaultInstance() {
}

RecruitInfo::RecruitInfo(const RecruitInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecruitInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lvorpower_ = 0;
  objid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecruitInfo::~RecruitInfo() {
  SharedDtor();
}

void RecruitInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    delete info_;
  }
  if (objid_ != &::google::protobuf::internal::kEmptyString) {
    delete objid_;
  }
  if (this != default_instance_) {
  }
}

void RecruitInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecruitInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecruitInfo_descriptor_;
}

const RecruitInfo& RecruitInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();  return *default_instance_;
}

RecruitInfo* RecruitInfo::default_instance_ = NULL;

RecruitInfo* RecruitInfo::New() const {
  return new RecruitInfo;
}

void RecruitInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::kEmptyString) {
        info_->clear();
      }
    }
    lvorpower_ = 0;
    if (has_objid()) {
      if (objid_ != &::google::protobuf::internal::kEmptyString) {
        objid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecruitInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }
      
      // required string info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lvOrPower;
        break;
      }
      
      // required int32 lvOrPower = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lvOrPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lvorpower_)));
          set_has_lvorpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_objId;
        break;
      }
      
      // optional string objId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_objId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_objid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->objid().data(), this->objid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecruitInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // required string info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->info(), output);
  }
  
  // required int32 lvOrPower = 4;
  if (has_lvorpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lvorpower(), output);
  }
  
  // optional string objId = 5;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->objid().data(), this->objid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->objid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecruitInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // required string info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->info(), target);
  }
  
  // required int32 lvOrPower = 4;
  if (has_lvorpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lvorpower(), target);
  }
  
  // optional string objId = 5;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->objid().data(), this->objid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->objid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecruitInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }
    
    // required int32 lvOrPower = 4;
    if (has_lvorpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lvorpower());
    }
    
    // optional string objId = 5;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->objid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecruitInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecruitInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecruitInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecruitInfo::MergeFrom(const RecruitInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_info()) {
      set_info(from.info());
    }
    if (from.has_lvorpower()) {
      set_lvorpower(from.lvorpower());
    }
    if (from.has_objid()) {
      set_objid(from.objid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecruitInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecruitInfo::CopyFrom(const RecruitInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecruitInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void RecruitInfo::Swap(RecruitInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(info_, other->info_);
    std::swap(lvorpower_, other->lvorpower_);
    std::swap(objid_, other->objid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecruitInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecruitInfo_descriptor_;
  metadata.reflection = RecruitInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleShare::kTypeFieldNumber;
const int BattleShare::kIdFieldNumber;
#endif  // !_MSC_VER

BattleShare::BattleShare()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleShare::InitAsDefaultInstance() {
}

BattleShare::BattleShare(const BattleShare& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleShare::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleShare::~BattleShare() {
  SharedDtor();
}

void BattleShare::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void BattleShare::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleShare::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleShare_descriptor_;
}

const BattleShare& BattleShare::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();  return *default_instance_;
}

BattleShare* BattleShare::default_instance_ = NULL;

BattleShare* BattleShare::New() const {
  return new BattleShare;
}

void BattleShare::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleShare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }
      
      // optional string id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleShare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // optional string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleShare::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // optional string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleShare::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional string id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleShare::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleShare* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleShare*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleShare::MergeFrom(const BattleShare& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleShare::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleShare::CopyFrom(const BattleShare& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleShare::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void BattleShare::Swap(BattleShare* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleShare::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleShare_descriptor_;
  metadata.reflection = BattleShare_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OneBattleShow::kAttackNameFieldNumber;
const int OneBattleShow::kAttackLvlFieldNumber;
const int OneBattleShow::kAttackHeadFieldNumber;
const int OneBattleShow::kAttackIdFieldNumber;
const int OneBattleShow::kAtHeadFrameFieldNumber;
const int OneBattleShow::kDefenseIdFieldNumber;
const int OneBattleShow::kDefenseNameFieldNumber;
const int OneBattleShow::kDefenseLvlFieldNumber;
const int OneBattleShow::kDefenseHeadFieldNumber;
const int OneBattleShow::kDeHeadFrameFieldNumber;
const int OneBattleShow::kVictoryFieldNumber;
#endif  // !_MSC_VER

OneBattleShow::OneBattleShow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OneBattleShow::InitAsDefaultInstance() {
}

OneBattleShow::OneBattleShow(const OneBattleShow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OneBattleShow::SharedCtor() {
  _cached_size_ = 0;
  attackname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  attacklvl_ = 0;
  attackhead_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  attackid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  atheadframe_ = 0;
  defenseid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  defensename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  defenselvl_ = 0;
  defensehead_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deheadframe_ = 0;
  victory_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OneBattleShow::~OneBattleShow() {
  SharedDtor();
}

void OneBattleShow::SharedDtor() {
  if (attackname_ != &::google::protobuf::internal::kEmptyString) {
    delete attackname_;
  }
  if (attackhead_ != &::google::protobuf::internal::kEmptyString) {
    delete attackhead_;
  }
  if (attackid_ != &::google::protobuf::internal::kEmptyString) {
    delete attackid_;
  }
  if (defenseid_ != &::google::protobuf::internal::kEmptyString) {
    delete defenseid_;
  }
  if (defensename_ != &::google::protobuf::internal::kEmptyString) {
    delete defensename_;
  }
  if (defensehead_ != &::google::protobuf::internal::kEmptyString) {
    delete defensehead_;
  }
  if (this != default_instance_) {
  }
}

void OneBattleShow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneBattleShow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OneBattleShow_descriptor_;
}

const OneBattleShow& OneBattleShow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();  return *default_instance_;
}

OneBattleShow* OneBattleShow::default_instance_ = NULL;

OneBattleShow* OneBattleShow::New() const {
  return new OneBattleShow;
}

void OneBattleShow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_attackname()) {
      if (attackname_ != &::google::protobuf::internal::kEmptyString) {
        attackname_->clear();
      }
    }
    attacklvl_ = 0;
    if (has_attackhead()) {
      if (attackhead_ != &::google::protobuf::internal::kEmptyString) {
        attackhead_->clear();
      }
    }
    if (has_attackid()) {
      if (attackid_ != &::google::protobuf::internal::kEmptyString) {
        attackid_->clear();
      }
    }
    atheadframe_ = 0;
    if (has_defenseid()) {
      if (defenseid_ != &::google::protobuf::internal::kEmptyString) {
        defenseid_->clear();
      }
    }
    if (has_defensename()) {
      if (defensename_ != &::google::protobuf::internal::kEmptyString) {
        defensename_->clear();
      }
    }
    defenselvl_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_defensehead()) {
      if (defensehead_ != &::google::protobuf::internal::kEmptyString) {
        defensehead_->clear();
      }
    }
    deheadframe_ = 0;
    victory_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OneBattleShow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string attackName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attackname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->attackname().data(), this->attackname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_attackLvl;
        break;
      }
      
      // required int32 attackLvl = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attackLvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attacklvl_)));
          set_has_attacklvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_attackHead;
        break;
      }
      
      // required string attackHead = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attackHead:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attackhead()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->attackhead().data(), this->attackhead().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_attackId;
        break;
      }
      
      // required string attackId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attackId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attackid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->attackid().data(), this->attackid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_atHeadFrame;
        break;
      }
      
      // optional int32 atHeadFrame = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atHeadFrame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &atheadframe_)));
          set_has_atheadframe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_defenseId;
        break;
      }
      
      // required string defenseId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defenseId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_defenseid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->defenseid().data(), this->defenseid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_defenseName;
        break;
      }
      
      // required string defenseName = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defenseName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_defensename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->defensename().data(), this->defensename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_defenseLvl;
        break;
      }
      
      // required int32 defenseLvl = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defenseLvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defenselvl_)));
          set_has_defenselvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_defenseHead;
        break;
      }
      
      // required string defenseHead = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defenseHead:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_defensehead()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->defensehead().data(), this->defensehead().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_deHeadFrame;
        break;
      }
      
      // optional int32 deHeadFrame = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deHeadFrame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deheadframe_)));
          set_has_deheadframe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_victory;
        break;
      }
      
      // required bool victory = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_victory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &victory_)));
          set_has_victory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OneBattleShow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string attackName = 2;
  if (has_attackname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attackname().data(), this->attackname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->attackname(), output);
  }
  
  // required int32 attackLvl = 3;
  if (has_attacklvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->attacklvl(), output);
  }
  
  // required string attackHead = 4;
  if (has_attackhead()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attackhead().data(), this->attackhead().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->attackhead(), output);
  }
  
  // required string attackId = 5;
  if (has_attackid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attackid().data(), this->attackid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->attackid(), output);
  }
  
  // optional int32 atHeadFrame = 6;
  if (has_atheadframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->atheadframe(), output);
  }
  
  // required string defenseId = 7;
  if (has_defenseid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->defenseid().data(), this->defenseid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->defenseid(), output);
  }
  
  // required string defenseName = 8;
  if (has_defensename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->defensename().data(), this->defensename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->defensename(), output);
  }
  
  // required int32 defenseLvl = 9;
  if (has_defenselvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->defenselvl(), output);
  }
  
  // required string defenseHead = 10;
  if (has_defensehead()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->defensehead().data(), this->defensehead().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->defensehead(), output);
  }
  
  // optional int32 deHeadFrame = 11;
  if (has_deheadframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->deheadframe(), output);
  }
  
  // required bool victory = 14;
  if (has_victory()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->victory(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OneBattleShow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string attackName = 2;
  if (has_attackname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attackname().data(), this->attackname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->attackname(), target);
  }
  
  // required int32 attackLvl = 3;
  if (has_attacklvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->attacklvl(), target);
  }
  
  // required string attackHead = 4;
  if (has_attackhead()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attackhead().data(), this->attackhead().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->attackhead(), target);
  }
  
  // required string attackId = 5;
  if (has_attackid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attackid().data(), this->attackid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->attackid(), target);
  }
  
  // optional int32 atHeadFrame = 6;
  if (has_atheadframe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->atheadframe(), target);
  }
  
  // required string defenseId = 7;
  if (has_defenseid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->defenseid().data(), this->defenseid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->defenseid(), target);
  }
  
  // required string defenseName = 8;
  if (has_defensename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->defensename().data(), this->defensename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->defensename(), target);
  }
  
  // required int32 defenseLvl = 9;
  if (has_defenselvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->defenselvl(), target);
  }
  
  // required string defenseHead = 10;
  if (has_defensehead()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->defensehead().data(), this->defensehead().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->defensehead(), target);
  }
  
  // optional int32 deHeadFrame = 11;
  if (has_deheadframe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->deheadframe(), target);
  }
  
  // required bool victory = 14;
  if (has_victory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->victory(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OneBattleShow::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string attackName = 2;
    if (has_attackname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attackname());
    }
    
    // required int32 attackLvl = 3;
    if (has_attacklvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attacklvl());
    }
    
    // required string attackHead = 4;
    if (has_attackhead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attackhead());
    }
    
    // required string attackId = 5;
    if (has_attackid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attackid());
    }
    
    // optional int32 atHeadFrame = 6;
    if (has_atheadframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->atheadframe());
    }
    
    // required string defenseId = 7;
    if (has_defenseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->defenseid());
    }
    
    // required string defenseName = 8;
    if (has_defensename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->defensename());
    }
    
    // required int32 defenseLvl = 9;
    if (has_defenselvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defenselvl());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string defenseHead = 10;
    if (has_defensehead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->defensehead());
    }
    
    // optional int32 deHeadFrame = 11;
    if (has_deheadframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deheadframe());
    }
    
    // required bool victory = 14;
    if (has_victory()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneBattleShow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OneBattleShow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OneBattleShow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OneBattleShow::MergeFrom(const OneBattleShow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attackname()) {
      set_attackname(from.attackname());
    }
    if (from.has_attacklvl()) {
      set_attacklvl(from.attacklvl());
    }
    if (from.has_attackhead()) {
      set_attackhead(from.attackhead());
    }
    if (from.has_attackid()) {
      set_attackid(from.attackid());
    }
    if (from.has_atheadframe()) {
      set_atheadframe(from.atheadframe());
    }
    if (from.has_defenseid()) {
      set_defenseid(from.defenseid());
    }
    if (from.has_defensename()) {
      set_defensename(from.defensename());
    }
    if (from.has_defenselvl()) {
      set_defenselvl(from.defenselvl());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_defensehead()) {
      set_defensehead(from.defensehead());
    }
    if (from.has_deheadframe()) {
      set_deheadframe(from.deheadframe());
    }
    if (from.has_victory()) {
      set_victory(from.victory());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OneBattleShow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneBattleShow::CopyFrom(const OneBattleShow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneBattleShow::IsInitialized() const {
  if ((_has_bits_[0] & 0x000005ef) != 0x000005ef) return false;
  
  return true;
}

void OneBattleShow::Swap(OneBattleShow* other) {
  if (other != this) {
    std::swap(attackname_, other->attackname_);
    std::swap(attacklvl_, other->attacklvl_);
    std::swap(attackhead_, other->attackhead_);
    std::swap(attackid_, other->attackid_);
    std::swap(atheadframe_, other->atheadframe_);
    std::swap(defenseid_, other->defenseid_);
    std::swap(defensename_, other->defensename_);
    std::swap(defenselvl_, other->defenselvl_);
    std::swap(defensehead_, other->defensehead_);
    std::swap(deheadframe_, other->deheadframe_);
    std::swap(victory_, other->victory_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OneBattleShow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OneBattleShow_descriptor_;
  metadata.reflection = OneBattleShow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleShow::kShowFieldNumber;
#endif  // !_MSC_VER

BattleShow::BattleShow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleShow::InitAsDefaultInstance() {
}

BattleShow::BattleShow(const BattleShow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleShow::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleShow::~BattleShow() {
  SharedDtor();
}

void BattleShow::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleShow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleShow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleShow_descriptor_;
}

const BattleShow& BattleShow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();  return *default_instance_;
}

BattleShow* BattleShow::default_instance_ = NULL;

BattleShow* BattleShow::New() const {
  return new BattleShow;
}

void BattleShow::Clear() {
  show_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleShow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.chat.OneBattleShow show = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_show:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_show()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_show;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleShow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.chat.OneBattleShow show = 1;
  for (int i = 0; i < this->show_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->show(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleShow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.chat.OneBattleShow show = 1;
  for (int i = 0; i < this->show_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->show(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleShow::ByteSize() const {
  int total_size = 0;
  
  // repeated .protobuf.chat.OneBattleShow show = 1;
  total_size += 1 * this->show_size();
  for (int i = 0; i < this->show_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->show(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleShow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleShow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleShow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleShow::MergeFrom(const BattleShow& from) {
  GOOGLE_CHECK_NE(&from, this);
  show_.MergeFrom(from.show_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleShow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleShow::CopyFrom(const BattleShow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleShow::IsInitialized() const {
  
  for (int i = 0; i < show_size(); i++) {
    if (!this->show(i).IsInitialized()) return false;
  }
  return true;
}

void BattleShow::Swap(BattleShow* other) {
  if (other != this) {
    show_.Swap(&other->show_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleShow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleShow_descriptor_;
  metadata.reflection = BattleShow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendChat::kChatIdFieldNumber;
const int SendChat::kPramFieldNumber;
const int SendChat::kRecruitFieldNumber;
const int SendChat::kBattleFieldNumber;
const int SendChat::kHeroFieldNumber;
const int SendChat::kPetFieldNumber;
const int SendChat::kSendToPlayerIdFieldNumber;
const int SendChat::kServerIdFieldNumber;
#endif  // !_MSC_VER

SendChat::SendChat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SendChat::InitAsDefaultInstance() {
  recruit_ = const_cast< ::protobuf::chat::RecruitInfo*>(&::protobuf::chat::RecruitInfo::default_instance());
  battle_ = const_cast< ::protobuf::chat::BattleShare*>(&::protobuf::chat::BattleShare::default_instance());
}

SendChat::SendChat(const SendChat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SendChat::SharedCtor() {
  _cached_size_ = 0;
  chatid_ = 0;
  recruit_ = NULL;
  battle_ = NULL;
  hero_ = 0;
  pet_ = 0;
  sendtoplayerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serverid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendChat::~SendChat() {
  SharedDtor();
}

void SendChat::SharedDtor() {
  if (sendtoplayerid_ != &::google::protobuf::internal::kEmptyString) {
    delete sendtoplayerid_;
  }
  if (this != default_instance_) {
    delete recruit_;
    delete battle_;
  }
}

void SendChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendChat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendChat_descriptor_;
}

const SendChat& SendChat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();  return *default_instance_;
}

SendChat* SendChat::default_instance_ = NULL;

SendChat* SendChat::New() const {
  return new SendChat;
}

void SendChat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chatid_ = 0;
    if (has_recruit()) {
      if (recruit_ != NULL) recruit_->::protobuf::chat::RecruitInfo::Clear();
    }
    if (has_battle()) {
      if (battle_ != NULL) battle_->::protobuf::chat::BattleShare::Clear();
    }
    hero_ = 0;
    pet_ = 0;
    if (has_sendtoplayerid()) {
      if (sendtoplayerid_ != &::google::protobuf::internal::kEmptyString) {
        sendtoplayerid_->clear();
      }
    }
    serverid_ = 0;
  }
  pram_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chatId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chatid_)));
          set_has_chatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pram;
        break;
      }
      
      // repeated string pram = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pram:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_pram()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pram(0).data(), this->pram(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pram;
        if (input->ExpectTag(26)) goto parse_recruit;
        break;
      }
      
      // optional .protobuf.chat.RecruitInfo recruit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recruit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recruit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_battle;
        break;
      }
      
      // optional .protobuf.chat.BattleShare battle = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hero;
        break;
      }
      
      // optional int32 hero = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero_)));
          set_has_hero();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_pet;
        break;
      }
      
      // optional int32 pet = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pet_)));
          set_has_pet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_sendToPlayerId;
        break;
      }
      
      // optional string sendToPlayerId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sendToPlayerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendtoplayerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sendtoplayerid().data(), this->sendtoplayerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_serverId;
        break;
      }
      
      // optional int32 serverId = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 chatId = 1;
  if (has_chatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chatid(), output);
  }
  
  // repeated string pram = 2;
  for (int i = 0; i < this->pram_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->pram(i).data(), this->pram(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pram(i), output);
  }
  
  // optional .protobuf.chat.RecruitInfo recruit = 3;
  if (has_recruit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->recruit(), output);
  }
  
  // optional .protobuf.chat.BattleShare battle = 4;
  if (has_battle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->battle(), output);
  }
  
  // optional int32 hero = 5;
  if (has_hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hero(), output);
  }
  
  // optional int32 pet = 6;
  if (has_pet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->pet(), output);
  }
  
  // optional string sendToPlayerId = 7;
  if (has_sendtoplayerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendtoplayerid().data(), this->sendtoplayerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->sendtoplayerid(), output);
  }
  
  // optional int32 serverId = 8;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->serverid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SendChat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 chatId = 1;
  if (has_chatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chatid(), target);
  }
  
  // repeated string pram = 2;
  for (int i = 0; i < this->pram_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pram(i).data(), this->pram(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->pram(i), target);
  }
  
  // optional .protobuf.chat.RecruitInfo recruit = 3;
  if (has_recruit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->recruit(), target);
  }
  
  // optional .protobuf.chat.BattleShare battle = 4;
  if (has_battle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->battle(), target);
  }
  
  // optional int32 hero = 5;
  if (has_hero()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hero(), target);
  }
  
  // optional int32 pet = 6;
  if (has_pet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->pet(), target);
  }
  
  // optional string sendToPlayerId = 7;
  if (has_sendtoplayerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendtoplayerid().data(), this->sendtoplayerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->sendtoplayerid(), target);
  }
  
  // optional int32 serverId = 8;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->serverid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SendChat::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 chatId = 1;
    if (has_chatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chatid());
    }
    
    // optional .protobuf.chat.RecruitInfo recruit = 3;
    if (has_recruit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recruit());
    }
    
    // optional .protobuf.chat.BattleShare battle = 4;
    if (has_battle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battle());
    }
    
    // optional int32 hero = 5;
    if (has_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hero());
    }
    
    // optional int32 pet = 6;
    if (has_pet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pet());
    }
    
    // optional string sendToPlayerId = 7;
    if (has_sendtoplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sendtoplayerid());
    }
    
    // optional int32 serverId = 8;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }
    
  }
  // repeated string pram = 2;
  total_size += 1 * this->pram_size();
  for (int i = 0; i < this->pram_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->pram(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendChat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendChat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendChat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendChat::MergeFrom(const SendChat& from) {
  GOOGLE_CHECK_NE(&from, this);
  pram_.MergeFrom(from.pram_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chatid()) {
      set_chatid(from.chatid());
    }
    if (from.has_recruit()) {
      mutable_recruit()->::protobuf::chat::RecruitInfo::MergeFrom(from.recruit());
    }
    if (from.has_battle()) {
      mutable_battle()->::protobuf::chat::BattleShare::MergeFrom(from.battle());
    }
    if (from.has_hero()) {
      set_hero(from.hero());
    }
    if (from.has_pet()) {
      set_pet(from.pet());
    }
    if (from.has_sendtoplayerid()) {
      set_sendtoplayerid(from.sendtoplayerid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendChat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendChat::CopyFrom(const SendChat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendChat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_recruit()) {
    if (!this->recruit().IsInitialized()) return false;
  }
  if (has_battle()) {
    if (!this->battle().IsInitialized()) return false;
  }
  return true;
}

void SendChat::Swap(SendChat* other) {
  if (other != this) {
    std::swap(chatid_, other->chatid_);
    pram_.Swap(&other->pram_);
    std::swap(recruit_, other->recruit_);
    std::swap(battle_, other->battle_);
    std::swap(hero_, other->hero_);
    std::swap(pet_, other->pet_);
    std::swap(sendtoplayerid_, other->sendtoplayerid_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendChat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendChat_descriptor_;
  metadata.reflection = SendChat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PullChatInfo::kIdFieldNumber;
const int PullChatInfo::kChatInfoFieldNumber;
#endif  // !_MSC_VER

PullChatInfo::PullChatInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PullChatInfo::InitAsDefaultInstance() {
}

PullChatInfo::PullChatInfo(const PullChatInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PullChatInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PullChatInfo::~PullChatInfo() {
  SharedDtor();
}

void PullChatInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PullChatInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PullChatInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PullChatInfo_descriptor_;
}

const PullChatInfo& PullChatInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();  return *default_instance_;
}

PullChatInfo* PullChatInfo::default_instance_ = NULL;

PullChatInfo* PullChatInfo::New() const {
  return new PullChatInfo;
}

void PullChatInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  chatinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PullChatInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_chatInfo;
        break;
      }
      
      // repeated .protobuf.chat.ChatInfo chatInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chatInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chatinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_chatInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PullChatInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // repeated .protobuf.chat.ChatInfo chatInfo = 2;
  for (int i = 0; i < this->chatinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->chatinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PullChatInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // repeated .protobuf.chat.ChatInfo chatInfo = 2;
  for (int i = 0; i < this->chatinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->chatinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PullChatInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  // repeated .protobuf.chat.ChatInfo chatInfo = 2;
  total_size += 1 * this->chatinfo_size();
  for (int i = 0; i < this->chatinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chatinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PullChatInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PullChatInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PullChatInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PullChatInfo::MergeFrom(const PullChatInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  chatinfo_.MergeFrom(from.chatinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PullChatInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PullChatInfo::CopyFrom(const PullChatInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PullChatInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < chatinfo_size(); i++) {
    if (!this->chatinfo(i).IsInitialized()) return false;
  }
  return true;
}

void PullChatInfo::Swap(PullChatInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    chatinfo_.Swap(&other->chatinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PullChatInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PullChatInfo_descriptor_;
  metadata.reflection = PullChatInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace chat
}  // namespace protobuf

// @@protoc_insertion_point(global_scope)
