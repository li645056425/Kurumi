// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: newBattle.proto

#ifndef PROTOBUF_newBattle_2eproto__INCLUDED
#define PROTOBUF_newBattle_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf {
namespace newBattle {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_newBattle_2eproto();
void protobuf_AssignDesc_newBattle_2eproto();
void protobuf_ShutdownFile_newBattle_2eproto();

class FreshReplyInfo;
class iconinfo;
class SetLineupTemplate;
class BattleStatistics;
class ArenaRecord;
class BattleResults;
class BattleRequest;
class BattleInfo;
class BattleStart;
class BattleEnd;
class BattleRecord;
class BattleVideo;
class BattleData;
class NewBattleStartM;
class OneBattleData;

// ===================================================================

class FreshReplyInfo : public ::google::protobuf::Message {
 public:
  FreshReplyInfo();
  virtual ~FreshReplyInfo();
  
  FreshReplyInfo(const FreshReplyInfo& from);
  
  inline FreshReplyInfo& operator=(const FreshReplyInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FreshReplyInfo& default_instance();
  
  void Swap(FreshReplyInfo* other);
  
  // implements Message ----------------------------------------------
  
  FreshReplyInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FreshReplyInfo& from);
  void MergeFrom(const FreshReplyInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // repeated .protobuf.common.KVint3232 carbonDayCnt = 2;
  inline int carbondaycnt_size() const;
  inline void clear_carbondaycnt();
  static const int kCarbonDayCntFieldNumber = 2;
  inline const ::protobuf::common::KVint3232& carbondaycnt(int index) const;
  inline ::protobuf::common::KVint3232* mutable_carbondaycnt(int index);
  inline ::protobuf::common::KVint3232* add_carbondaycnt();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >&
      carbondaycnt() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >*
      mutable_carbondaycnt();
  
  // optional bool isOpenBrave = 3;
  inline bool has_isopenbrave() const;
  inline void clear_isopenbrave();
  static const int kIsOpenBraveFieldNumber = 3;
  inline bool isopenbrave() const;
  inline void set_isopenbrave(bool value);
  
  // optional int64 nextFreshTime = 4;
  inline bool has_nextfreshtime() const;
  inline void clear_nextfreshtime();
  static const int kNextFreshTimeFieldNumber = 4;
  inline ::google::protobuf::int64 nextfreshtime() const;
  inline void set_nextfreshtime(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:protobuf.newBattle.FreshReplyInfo)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_isopenbrave();
  inline void clear_has_isopenbrave();
  inline void set_has_nextfreshtime();
  inline void clear_has_nextfreshtime();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 > carbondaycnt_;
  ::google::protobuf::int32 type_;
  bool isopenbrave_;
  ::google::protobuf::int64 nextfreshtime_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_newBattle_2eproto();
  friend void protobuf_AssignDesc_newBattle_2eproto();
  friend void protobuf_ShutdownFile_newBattle_2eproto();
  
  void InitAsDefaultInstance();
  static FreshReplyInfo* default_instance_;
};
// -------------------------------------------------------------------

class iconinfo : public ::google::protobuf::Message {
 public:
  iconinfo();
  virtual ~iconinfo();
  
  iconinfo(const iconinfo& from);
  
  inline iconinfo& operator=(const iconinfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const iconinfo& default_instance();
  
  void Swap(iconinfo* other);
  
  // implements Message ----------------------------------------------
  
  iconinfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const iconinfo& from);
  void MergeFrom(const iconinfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required string head = 3;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 3;
  inline const ::std::string& head() const;
  inline void set_head(const ::std::string& value);
  inline void set_head(const char* value);
  inline void set_head(const char* value, size_t size);
  inline ::std::string* mutable_head();
  inline ::std::string* release_head();
  
  // optional string guildName = 4;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildNameFieldNumber = 4;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  
  // optional string serverName = 5;
  inline bool has_servername() const;
  inline void clear_servername();
  static const int kServerNameFieldNumber = 5;
  inline const ::std::string& servername() const;
  inline void set_servername(const ::std::string& value);
  inline void set_servername(const char* value);
  inline void set_servername(const char* value, size_t size);
  inline ::std::string* mutable_servername();
  inline ::std::string* release_servername();
  
  // optional string playerid = 6;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 6;
  inline const ::std::string& playerid() const;
  inline void set_playerid(const ::std::string& value);
  inline void set_playerid(const char* value);
  inline void set_playerid(const char* value, size_t size);
  inline ::std::string* mutable_playerid();
  inline ::std::string* release_playerid();
  
  // optional int32 power = 7;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 7;
  inline ::google::protobuf::int32 power() const;
  inline void set_power(::google::protobuf::int32 value);
  
  // optional int32 headFrame = 8;
  inline bool has_headframe() const;
  inline void clear_headframe();
  static const int kHeadFrameFieldNumber = 8;
  inline ::google::protobuf::int32 headframe() const;
  inline void set_headframe(::google::protobuf::int32 value);
  
  // optional bool isEnemy = 9;
  inline bool has_isenemy() const;
  inline void clear_isenemy();
  static const int kIsEnemyFieldNumber = 9;
  inline bool isenemy() const;
  inline void set_isenemy(bool value);
  
  // @@protoc_insertion_point(class_scope:protobuf.newBattle.iconinfo)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_guildname();
  inline void clear_has_guildname();
  inline void set_has_servername();
  inline void clear_has_servername();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_headframe();
  inline void clear_has_headframe();
  inline void set_has_isenemy();
  inline void clear_has_isenemy();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::std::string* head_;
  ::std::string* guildname_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 power_;
  ::std::string* servername_;
  ::std::string* playerid_;
  ::google::protobuf::int32 headframe_;
  bool isenemy_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_newBattle_2eproto();
  friend void protobuf_AssignDesc_newBattle_2eproto();
  friend void protobuf_ShutdownFile_newBattle_2eproto();
  
  void InitAsDefaultInstance();
  static iconinfo* default_instance_;
};
// -------------------------------------------------------------------

class SetLineupTemplate : public ::google::protobuf::Message {
 public:
  SetLineupTemplate();
  virtual ~SetLineupTemplate();
  
  SetLineupTemplate(const SetLineupTemplate& from);
  
  inline SetLineupTemplate& operator=(const SetLineupTemplate& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetLineupTemplate& default_instance();
  
  void Swap(SetLineupTemplate* other);
  
  // implements Message ----------------------------------------------
  
  SetLineupTemplate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetLineupTemplate& from);
  void MergeFrom(const SetLineupTemplate& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protobuf.common.LineupTemplate lineup = 1;
  inline int lineup_size() const;
  inline void clear_lineup();
  static const int kLineupFieldNumber = 1;
  inline const ::protobuf::common::LineupTemplate& lineup(int index) const;
  inline ::protobuf::common::LineupTemplate* mutable_lineup(int index);
  inline ::protobuf::common::LineupTemplate* add_lineup();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::LineupTemplate >&
      lineup() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::LineupTemplate >*
      mutable_lineup();
  
  // @@protoc_insertion_point(class_scope:protobuf.newBattle.SetLineupTemplate)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protobuf::common::LineupTemplate > lineup_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_newBattle_2eproto();
  friend void protobuf_AssignDesc_newBattle_2eproto();
  friend void protobuf_ShutdownFile_newBattle_2eproto();
  
  void InitAsDefaultInstance();
  static SetLineupTemplate* default_instance_;
};
// -------------------------------------------------------------------

class BattleStatistics : public ::google::protobuf::Message {
 public:
  BattleStatistics();
  virtual ~BattleStatistics();
  
  BattleStatistics(const BattleStatistics& from);
  
  inline BattleStatistics& operator=(const BattleStatistics& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BattleStatistics& default_instance();
  
  void Swap(BattleStatistics* other);
  
  // implements Message ----------------------------------------------
  
  BattleStatistics* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BattleStatistics& from);
  void MergeFrom(const BattleStatistics& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protobuf.newBattle.ArenaRecord data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::protobuf::newBattle::ArenaRecord& data(int index) const;
  inline ::protobuf::newBattle::ArenaRecord* mutable_data(int index);
  inline ::protobuf::newBattle::ArenaRecord* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::newBattle::ArenaRecord >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::newBattle::ArenaRecord >*
      mutable_data();
  
  // @@protoc_insertion_point(class_scope:protobuf.newBattle.BattleStatistics)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protobuf::newBattle::ArenaRecord > data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_newBattle_2eproto();
  friend void protobuf_AssignDesc_newBattle_2eproto();
  friend void protobuf_ShutdownFile_newBattle_2eproto();
  
  void InitAsDefaultInstance();
  static BattleStatistics* default_instance_;
};
// -------------------------------------------------------------------

class ArenaRecord : public ::google::protobuf::Message {
 public:
  ArenaRecord();
  virtual ~ArenaRecord();
  
  ArenaRecord(const ArenaRecord& from);
  
  inline ArenaRecord& operator=(const ArenaRecord& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ArenaRecord& default_instance();
  
  void Swap(ArenaRecord* other);
  
  // implements Message ----------------------------------------------
  
  ArenaRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArenaRecord& from);
  void MergeFrom(const ArenaRecord& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protobuf.newBattle.BattleData battleData = 1;
  inline int battledata_size() const;
  inline void clear_battledata();
  static const int kBattleDataFieldNumber = 1;
  inline const ::protobuf::newBattle::BattleData& battledata(int index) const;
  inline ::protobuf::newBattle::BattleData* mutable_battledata(int index);
  inline ::protobuf::newBattle::BattleData* add_battledata();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::newBattle::BattleData >&
      battledata() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::newBattle::BattleData >*
      mutable_battledata();
  
  // repeated .protobuf.common.LineupDetail selfLineup = 2;
  inline int selflineup_size() const;
  inline void clear_selflineup();
  static const int kSelfLineupFieldNumber = 2;
  inline const ::protobuf::common::LineupDetail& selflineup(int index) const;
  inline ::protobuf::common::LineupDetail* mutable_selflineup(int index);
  inline ::protobuf::common::LineupDetail* add_selflineup();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::LineupDetail >&
      selflineup() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::LineupDetail >*
      mutable_selflineup();
  
  // repeated .protobuf.common.LineupDetail enemyLineup = 3;
  inline int enemylineup_size() const;
  inline void clear_enemylineup();
  static const int kEnemyLineupFieldNumber = 3;
  inline const ::protobuf::common::LineupDetail& enemylineup(int index) const;
  inline ::protobuf::common::LineupDetail* mutable_enemylineup(int index);
  inline ::protobuf::common::LineupDetail* add_enemylineup();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::LineupDetail >&
      enemylineup() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::LineupDetail >*
      mutable_enemylineup();
  
  // optional int32 score = 4;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 4;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);
  
  // optional int64 recordTime = 5;
  inline bool has_recordtime() const;
  inline void clear_recordtime();
  static const int kRecordTimeFieldNumber = 5;
  inline ::google::protobuf::int64 recordtime() const;
  inline void set_recordtime(::google::protobuf::int64 value);
  
  // repeated .protobuf.newBattle.iconinfo playerInfo = 6;
  inline int playerinfo_size() const;
  inline void clear_playerinfo();
  static const int kPlayerInfoFieldNumber = 6;
  inline const ::protobuf::newBattle::iconinfo& playerinfo(int index) const;
  inline ::protobuf::newBattle::iconinfo* mutable_playerinfo(int index);
  inline ::protobuf::newBattle::iconinfo* add_playerinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::newBattle::iconinfo >&
      playerinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::newBattle::iconinfo >*
      mutable_playerinfo();
  
  // optional int32 recordNumber = 7;
  inline bool has_recordnumber() const;
  inline void clear_recordnumber();
  static const int kRecordNumberFieldNumber = 7;
  inline ::google::protobuf::int32 recordnumber() const;
  inline void set_recordnumber(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protobuf.newBattle.ArenaRecord)
 private:
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_recordtime();
  inline void clear_has_recordtime();
  inline void set_has_recordnumber();
  inline void clear_has_recordnumber();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protobuf::newBattle::BattleData > battledata_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::common::LineupDetail > selflineup_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::common::LineupDetail > enemylineup_;
  ::google::protobuf::int64 recordtime_;
  ::google::protobuf::int32 score_;
  ::google::protobuf::int32 recordnumber_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::newBattle::iconinfo > playerinfo_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_newBattle_2eproto();
  friend void protobuf_AssignDesc_newBattle_2eproto();
  friend void protobuf_ShutdownFile_newBattle_2eproto();
  
  void InitAsDefaultInstance();
  static ArenaRecord* default_instance_;
};
// -------------------------------------------------------------------

class BattleResults : public ::google::protobuf::Message {
 public:
  BattleResults();
  virtual ~BattleResults();
  
  BattleResults(const BattleResults& from);
  
  inline BattleResults& operator=(const BattleResults& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BattleResults& default_instance();
  
  void Swap(BattleResults* other);
  
  // implements Message ----------------------------------------------
  
  BattleResults* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BattleResults& from);
  void MergeFrom(const BattleResults& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional bool result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline bool result() const;
  inline void set_result(bool value);
  
  // repeated .protobuf.newBattle.BattleData battleData = 3;
  inline int battledata_size() const;
  inline void clear_battledata();
  static const int kBattleDataFieldNumber = 3;
  inline const ::protobuf::newBattle::BattleData& battledata(int index) const;
  inline ::protobuf::newBattle::BattleData* mutable_battledata(int index);
  inline ::protobuf::newBattle::BattleData* add_battledata();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::newBattle::BattleData >&
      battledata() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::newBattle::BattleData >*
      mutable_battledata();
  
  // optional string arenaPlayerId = 4;
  inline bool has_arenaplayerid() const;
  inline void clear_arenaplayerid();
  static const int kArenaPlayerIdFieldNumber = 4;
  inline const ::std::string& arenaplayerid() const;
  inline void set_arenaplayerid(const ::std::string& value);
  inline void set_arenaplayerid(const char* value);
  inline void set_arenaplayerid(const char* value, size_t size);
  inline ::std::string* mutable_arenaplayerid();
  inline ::std::string* release_arenaplayerid();
  
  // repeated .protobuf.common.LineupDetail selfLineup = 5;
  inline int selflineup_size() const;
  inline void clear_selflineup();
  static const int kSelfLineupFieldNumber = 5;
  inline const ::protobuf::common::LineupDetail& selflineup(int index) const;
  inline ::protobuf::common::LineupDetail* mutable_selflineup(int index);
  inline ::protobuf::common::LineupDetail* add_selflineup();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::LineupDetail >&
      selflineup() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::LineupDetail >*
      mutable_selflineup();
  
  // repeated .protobuf.common.LineupDetail enemyLineup = 6;
  inline int enemylineup_size() const;
  inline void clear_enemylineup();
  static const int kEnemyLineupFieldNumber = 6;
  inline const ::protobuf::common::LineupDetail& enemylineup(int index) const;
  inline ::protobuf::common::LineupDetail* mutable_enemylineup(int index);
  inline ::protobuf::common::LineupDetail* add_enemylineup();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::LineupDetail >&
      enemylineup() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::LineupDetail >*
      mutable_enemylineup();
  
  // optional int32 mapId = 7;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapIdFieldNumber = 7;
  inline ::google::protobuf::int32 mapid() const;
  inline void set_mapid(::google::protobuf::int32 value);
  
  // optional bool isRevenge = 8;
  inline bool has_isrevenge() const;
  inline void clear_isrevenge();
  static const int kIsRevengeFieldNumber = 8;
  inline bool isrevenge() const;
  inline void set_isrevenge(bool value);
  
  // @@protoc_insertion_point(class_scope:protobuf.newBattle.BattleResults)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_arenaplayerid();
  inline void clear_has_arenaplayerid();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_isrevenge();
  inline void clear_has_isrevenge();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protobuf::newBattle::BattleData > battledata_;
  ::google::protobuf::int32 type_;
  bool result_;
  bool isrevenge_;
  ::std::string* arenaplayerid_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::common::LineupDetail > selflineup_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::common::LineupDetail > enemylineup_;
  ::google::protobuf::int32 mapid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_newBattle_2eproto();
  friend void protobuf_AssignDesc_newBattle_2eproto();
  friend void protobuf_ShutdownFile_newBattle_2eproto();
  
  void InitAsDefaultInstance();
  static BattleResults* default_instance_;
};
// -------------------------------------------------------------------

class BattleRequest : public ::google::protobuf::Message {
 public:
  BattleRequest();
  virtual ~BattleRequest();
  
  BattleRequest(const BattleRequest& from);
  
  inline BattleRequest& operator=(const BattleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BattleRequest& default_instance();
  
  void Swap(BattleRequest* other);
  
  // implements Message ----------------------------------------------
  
  BattleRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BattleRequest& from);
  void MergeFrom(const BattleRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional string beAttackId = 2;
  inline bool has_beattackid() const;
  inline void clear_beattackid();
  static const int kBeAttackIdFieldNumber = 2;
  inline const ::std::string& beattackid() const;
  inline void set_beattackid(const ::std::string& value);
  inline void set_beattackid(const char* value);
  inline void set_beattackid(const char* value, size_t size);
  inline ::std::string* mutable_beattackid();
  inline ::std::string* release_beattackid();
  
  // optional bool needLineup = 3;
  inline bool has_needlineup() const;
  inline void clear_needlineup();
  static const int kNeedLineupFieldNumber = 3;
  inline bool needlineup() const;
  inline void set_needlineup(bool value);
  
  // optional int32 mapId = 4;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapIdFieldNumber = 4;
  inline ::google::protobuf::int32 mapid() const;
  inline void set_mapid(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protobuf.newBattle.BattleRequest)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_beattackid();
  inline void clear_has_beattackid();
  inline void set_has_needlineup();
  inline void clear_has_needlineup();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* beattackid_;
  ::google::protobuf::int32 type_;
  bool needlineup_;
  ::google::protobuf::int32 mapid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_newBattle_2eproto();
  friend void protobuf_AssignDesc_newBattle_2eproto();
  friend void protobuf_ShutdownFile_newBattle_2eproto();
  
  void InitAsDefaultInstance();
  static BattleRequest* default_instance_;
};
// -------------------------------------------------------------------

class BattleInfo : public ::google::protobuf::Message {
 public:
  BattleInfo();
  virtual ~BattleInfo();
  
  BattleInfo(const BattleInfo& from);
  
  inline BattleInfo& operator=(const BattleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BattleInfo& default_instance();
  
  void Swap(BattleInfo* other);
  
  // implements Message ----------------------------------------------
  
  BattleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BattleInfo& from);
  void MergeFrom(const BattleInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional string enemyid = 3;
  inline bool has_enemyid() const;
  inline void clear_enemyid();
  static const int kEnemyidFieldNumber = 3;
  inline const ::std::string& enemyid() const;
  inline void set_enemyid(const ::std::string& value);
  inline void set_enemyid(const char* value);
  inline void set_enemyid(const char* value, size_t size);
  inline ::std::string* mutable_enemyid();
  inline ::std::string* release_enemyid();
  
  // optional string teamName = 4;
  inline bool has_teamname() const;
  inline void clear_teamname();
  static const int kTeamNameFieldNumber = 4;
  inline const ::std::string& teamname() const;
  inline void set_teamname(const ::std::string& value);
  inline void set_teamname(const char* value);
  inline void set_teamname(const char* value, size_t size);
  inline ::std::string* mutable_teamname();
  inline ::std::string* release_teamname();
  
  // repeated .protobuf.common.LineupDetail enemylinup = 5;
  inline int enemylinup_size() const;
  inline void clear_enemylinup();
  static const int kEnemylinupFieldNumber = 5;
  inline const ::protobuf::common::LineupDetail& enemylinup(int index) const;
  inline ::protobuf::common::LineupDetail* mutable_enemylinup(int index);
  inline ::protobuf::common::LineupDetail* add_enemylinup();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::LineupDetail >&
      enemylinup() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::LineupDetail >*
      mutable_enemylinup();
  
  // repeated .protobuf.newBattle.iconinfo showinfo = 6;
  inline int showinfo_size() const;
  inline void clear_showinfo();
  static const int kShowinfoFieldNumber = 6;
  inline const ::protobuf::newBattle::iconinfo& showinfo(int index) const;
  inline ::protobuf::newBattle::iconinfo* mutable_showinfo(int index);
  inline ::protobuf::newBattle::iconinfo* add_showinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::newBattle::iconinfo >&
      showinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::newBattle::iconinfo >*
      mutable_showinfo();
  
  // repeated .protobuf.common.KVint3264 enemyblood = 7;
  inline int enemyblood_size() const;
  inline void clear_enemyblood();
  static const int kEnemybloodFieldNumber = 7;
  inline const ::protobuf::common::KVint3264& enemyblood(int index) const;
  inline ::protobuf::common::KVint3264* mutable_enemyblood(int index);
  inline ::protobuf::common::KVint3264* add_enemyblood();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 >&
      enemyblood() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 >*
      mutable_enemyblood();
  
  // repeated .protobuf.common.LineupTemplate lineupTemplate = 8;
  inline int lineuptemplate_size() const;
  inline void clear_lineuptemplate();
  static const int kLineupTemplateFieldNumber = 8;
  inline const ::protobuf::common::LineupTemplate& lineuptemplate(int index) const;
  inline ::protobuf::common::LineupTemplate* mutable_lineuptemplate(int index);
  inline ::protobuf::common::LineupTemplate* add_lineuptemplate();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::LineupTemplate >&
      lineuptemplate() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::LineupTemplate >*
      mutable_lineuptemplate();
  
  // @@protoc_insertion_point(class_scope:protobuf.newBattle.BattleInfo)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_enemyid();
  inline void clear_has_enemyid();
  inline void set_has_teamname();
  inline void clear_has_teamname();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* enemyid_;
  ::std::string* teamname_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::common::LineupDetail > enemylinup_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::newBattle::iconinfo > showinfo_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 > enemyblood_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::common::LineupTemplate > lineuptemplate_;
  ::google::protobuf::int32 type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_newBattle_2eproto();
  friend void protobuf_AssignDesc_newBattle_2eproto();
  friend void protobuf_ShutdownFile_newBattle_2eproto();
  
  void InitAsDefaultInstance();
  static BattleInfo* default_instance_;
};
// -------------------------------------------------------------------

class BattleStart : public ::google::protobuf::Message {
 public:
  BattleStart();
  virtual ~BattleStart();
  
  BattleStart(const BattleStart& from);
  
  inline BattleStart& operator=(const BattleStart& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BattleStart& default_instance();
  
  void Swap(BattleStart* other);
  
  // implements Message ----------------------------------------------
  
  BattleStart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BattleStart& from);
  void MergeFrom(const BattleStart& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // required string enemyId = 2;
  inline bool has_enemyid() const;
  inline void clear_enemyid();
  static const int kEnemyIdFieldNumber = 2;
  inline const ::std::string& enemyid() const;
  inline void set_enemyid(const ::std::string& value);
  inline void set_enemyid(const char* value);
  inline void set_enemyid(const char* value, size_t size);
  inline ::std::string* mutable_enemyid();
  inline ::std::string* release_enemyid();
  
  // optional int32 lineupindex = 3;
  inline bool has_lineupindex() const;
  inline void clear_lineupindex();
  static const int kLineupindexFieldNumber = 3;
  inline ::google::protobuf::int32 lineupindex() const;
  inline void set_lineupindex(::google::protobuf::int32 value);
  
  // repeated .protobuf.common.Id32 lineupIds = 4;
  inline int lineupids_size() const;
  inline void clear_lineupids();
  static const int kLineupIdsFieldNumber = 4;
  inline const ::protobuf::common::Id32& lineupids(int index) const;
  inline ::protobuf::common::Id32* mutable_lineupids(int index);
  inline ::protobuf::common::Id32* add_lineupids();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::Id32 >&
      lineupids() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::Id32 >*
      mutable_lineupids();
  
  // optional int32 lineuppet = 5;
  inline bool has_lineuppet() const;
  inline void clear_lineuppet();
  static const int kLineuppetFieldNumber = 5;
  inline ::google::protobuf::int32 lineuppet() const;
  inline void set_lineuppet(::google::protobuf::int32 value);
  
  // optional int32 attackCnt = 6;
  inline bool has_attackcnt() const;
  inline void clear_attackcnt();
  static const int kAttackCntFieldNumber = 6;
  inline ::google::protobuf::int32 attackcnt() const;
  inline void set_attackcnt(::google::protobuf::int32 value);
  
  // optional bool isSkip = 7;
  inline bool has_isskip() const;
  inline void clear_isskip();
  static const int kIsSkipFieldNumber = 7;
  inline bool isskip() const;
  inline void set_isskip(bool value);
  
  // optional int32 suspectIslandId = 8;
  inline bool has_suspectislandid() const;
  inline void clear_suspectislandid();
  static const int kSuspectIslandIdFieldNumber = 8;
  inline ::google::protobuf::int32 suspectislandid() const;
  inline void set_suspectislandid(::google::protobuf::int32 value);
  
  // optional string guidev = 10;
  inline bool has_guidev() const;
  inline void clear_guidev();
  static const int kGuidevFieldNumber = 10;
  inline const ::std::string& guidev() const;
  inline void set_guidev(const ::std::string& value);
  inline void set_guidev(const char* value);
  inline void set_guidev(const char* value, size_t size);
  inline ::std::string* mutable_guidev();
  inline ::std::string* release_guidev();
  
  // @@protoc_insertion_point(class_scope:protobuf.newBattle.BattleStart)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_enemyid();
  inline void clear_has_enemyid();
  inline void set_has_lineupindex();
  inline void clear_has_lineupindex();
  inline void set_has_lineuppet();
  inline void clear_has_lineuppet();
  inline void set_has_attackcnt();
  inline void clear_has_attackcnt();
  inline void set_has_isskip();
  inline void clear_has_isskip();
  inline void set_has_suspectislandid();
  inline void clear_has_suspectislandid();
  inline void set_has_guidev();
  inline void clear_has_guidev();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* enemyid_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 lineupindex_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::common::Id32 > lineupids_;
  ::google::protobuf::int32 lineuppet_;
  ::google::protobuf::int32 attackcnt_;
  bool isskip_;
  ::google::protobuf::int32 suspectislandid_;
  ::std::string* guidev_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_newBattle_2eproto();
  friend void protobuf_AssignDesc_newBattle_2eproto();
  friend void protobuf_ShutdownFile_newBattle_2eproto();
  
  void InitAsDefaultInstance();
  static BattleStart* default_instance_;
};
// -------------------------------------------------------------------

class BattleEnd : public ::google::protobuf::Message {
 public:
  BattleEnd();
  virtual ~BattleEnd();
  
  BattleEnd(const BattleEnd& from);
  
  inline BattleEnd& operator=(const BattleEnd& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BattleEnd& default_instance();
  
  void Swap(BattleEnd* other);
  
  // implements Message ----------------------------------------------
  
  BattleEnd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BattleEnd& from);
  void MergeFrom(const BattleEnd& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // required string enemyId = 2;
  inline bool has_enemyid() const;
  inline void clear_enemyid();
  static const int kEnemyIdFieldNumber = 2;
  inline const ::std::string& enemyid() const;
  inline void set_enemyid(const ::std::string& value);
  inline void set_enemyid(const char* value);
  inline void set_enemyid(const char* value, size_t size);
  inline ::std::string* mutable_enemyid();
  inline ::std::string* release_enemyid();
  
  // repeated bool victory = 3;
  inline int victory_size() const;
  inline void clear_victory();
  static const int kVictoryFieldNumber = 3;
  inline bool victory(int index) const;
  inline void set_victory(int index, bool value);
  inline void add_victory(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      victory() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_victory();
  
  // repeated .protobuf.common.KVint3232 rewards = 4;
  inline int rewards_size() const;
  inline void clear_rewards();
  static const int kRewardsFieldNumber = 4;
  inline const ::protobuf::common::KVint3232& rewards(int index) const;
  inline ::protobuf::common::KVint3232* mutable_rewards(int index);
  inline ::protobuf::common::KVint3232* add_rewards();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >&
      rewards() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >*
      mutable_rewards();
  
  // repeated string points = 5;
  inline int points_size() const;
  inline void clear_points();
  static const int kPointsFieldNumber = 5;
  inline const ::std::string& points(int index) const;
  inline ::std::string* mutable_points(int index);
  inline void set_points(int index, const ::std::string& value);
  inline void set_points(int index, const char* value);
  inline void set_points(int index, const char* value, size_t size);
  inline ::std::string* add_points();
  inline void add_points(const ::std::string& value);
  inline void add_points(const char* value);
  inline void add_points(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& points() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_points();
  
  // required string sign = 6;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 6;
  inline const ::std::string& sign() const;
  inline void set_sign(const ::std::string& value);
  inline void set_sign(const char* value);
  inline void set_sign(const char* value, size_t size);
  inline ::std::string* mutable_sign();
  inline ::std::string* release_sign();
  
  // required int32 len = 7;
  inline bool has_len() const;
  inline void clear_len();
  static const int kLenFieldNumber = 7;
  inline ::google::protobuf::int32 len() const;
  inline void set_len(::google::protobuf::int32 value);
  
  // repeated .protobuf.newBattle.BattleData data = 8;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 8;
  inline const ::protobuf::newBattle::BattleData& data(int index) const;
  inline ::protobuf::newBattle::BattleData* mutable_data(int index);
  inline ::protobuf::newBattle::BattleData* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::newBattle::BattleData >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::newBattle::BattleData >*
      mutable_data();
  
  // optional int64 damage = 9;
  inline bool has_damage() const;
  inline void clear_damage();
  static const int kDamageFieldNumber = 9;
  inline ::google::protobuf::int64 damage() const;
  inline void set_damage(::google::protobuf::int64 value);
  
  // optional int32 suspectIslandId = 10;
  inline bool has_suspectislandid() const;
  inline void clear_suspectislandid();
  static const int kSuspectIslandIdFieldNumber = 10;
  inline ::google::protobuf::int32 suspectislandid() const;
  inline void set_suspectislandid(::google::protobuf::int32 value);
  
  // optional int32 isSp = 11;
  inline bool has_issp() const;
  inline void clear_issp();
  static const int kIsSpFieldNumber = 11;
  inline ::google::protobuf::int32 issp() const;
  inline void set_issp(::google::protobuf::int32 value);
  
  // repeated .protobuf.common.KVint3232 spRewards = 12;
  inline int sprewards_size() const;
  inline void clear_sprewards();
  static const int kSpRewardsFieldNumber = 12;
  inline const ::protobuf::common::KVint3232& sprewards(int index) const;
  inline ::protobuf::common::KVint3232* mutable_sprewards(int index);
  inline ::protobuf::common::KVint3232* add_sprewards();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >&
      sprewards() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >*
      mutable_sprewards();
  
  // @@protoc_insertion_point(class_scope:protobuf.newBattle.BattleEnd)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_enemyid();
  inline void clear_has_enemyid();
  inline void set_has_sign();
  inline void clear_has_sign();
  inline void set_has_len();
  inline void clear_has_len();
  inline void set_has_damage();
  inline void clear_has_damage();
  inline void set_has_suspectislandid();
  inline void clear_has_suspectislandid();
  inline void set_has_issp();
  inline void clear_has_issp();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* enemyid_;
  ::google::protobuf::RepeatedField< bool > victory_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 > rewards_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 len_;
  ::google::protobuf::RepeatedPtrField< ::std::string> points_;
  ::std::string* sign_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::newBattle::BattleData > data_;
  ::google::protobuf::int64 damage_;
  ::google::protobuf::int32 suspectislandid_;
  ::google::protobuf::int32 issp_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 > sprewards_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  friend void  protobuf_AddDesc_newBattle_2eproto();
  friend void protobuf_AssignDesc_newBattle_2eproto();
  friend void protobuf_ShutdownFile_newBattle_2eproto();
  
  void InitAsDefaultInstance();
  static BattleEnd* default_instance_;
};
// -------------------------------------------------------------------

class BattleRecord : public ::google::protobuf::Message {
 public:
  BattleRecord();
  virtual ~BattleRecord();
  
  BattleRecord(const BattleRecord& from);
  
  inline BattleRecord& operator=(const BattleRecord& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BattleRecord& default_instance();
  
  void Swap(BattleRecord* other);
  
  // implements Message ----------------------------------------------
  
  BattleRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BattleRecord& from);
  void MergeFrom(const BattleRecord& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string record = 1;
  inline bool has_record() const;
  inline void clear_record();
  static const int kRecordFieldNumber = 1;
  inline const ::std::string& record() const;
  inline void set_record(const ::std::string& value);
  inline void set_record(const char* value);
  inline void set_record(const char* value, size_t size);
  inline ::std::string* mutable_record();
  inline ::std::string* release_record();
  
  // required int32 len = 2;
  inline bool has_len() const;
  inline void clear_len();
  static const int kLenFieldNumber = 2;
  inline ::google::protobuf::int32 len() const;
  inline void set_len(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protobuf.newBattle.BattleRecord)
 private:
  inline void set_has_record();
  inline void clear_has_record();
  inline void set_has_len();
  inline void clear_has_len();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* record_;
  ::google::protobuf::int32 len_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_newBattle_2eproto();
  friend void protobuf_AssignDesc_newBattle_2eproto();
  friend void protobuf_ShutdownFile_newBattle_2eproto();
  
  void InitAsDefaultInstance();
  static BattleRecord* default_instance_;
};
// -------------------------------------------------------------------

class BattleVideo : public ::google::protobuf::Message {
 public:
  BattleVideo();
  virtual ~BattleVideo();
  
  BattleVideo(const BattleVideo& from);
  
  inline BattleVideo& operator=(const BattleVideo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BattleVideo& default_instance();
  
  void Swap(BattleVideo* other);
  
  // implements Message ----------------------------------------------
  
  BattleVideo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BattleVideo& from);
  void MergeFrom(const BattleVideo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 atPetId = 1;
  inline bool has_atpetid() const;
  inline void clear_atpetid();
  static const int kAtPetIdFieldNumber = 1;
  inline ::google::protobuf::int32 atpetid() const;
  inline void set_atpetid(::google::protobuf::int32 value);
  
  // repeated .protobuf.common.Pet atPet = 2;
  inline int atpet_size() const;
  inline void clear_atpet();
  static const int kAtPetFieldNumber = 2;
  inline const ::protobuf::common::Pet& atpet(int index) const;
  inline ::protobuf::common::Pet* mutable_atpet(int index);
  inline ::protobuf::common::Pet* add_atpet();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::Pet >&
      atpet() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::Pet >*
      mutable_atpet();
  
  // required int32 dePetId = 3;
  inline bool has_depetid() const;
  inline void clear_depetid();
  static const int kDePetIdFieldNumber = 3;
  inline ::google::protobuf::int32 depetid() const;
  inline void set_depetid(::google::protobuf::int32 value);
  
  // repeated .protobuf.common.Pet dePet = 4;
  inline int depet_size() const;
  inline void clear_depet();
  static const int kDePetFieldNumber = 4;
  inline const ::protobuf::common::Pet& depet(int index) const;
  inline ::protobuf::common::Pet* mutable_depet(int index);
  inline ::protobuf::common::Pet* add_depet();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::Pet >&
      depet() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::Pet >*
      mutable_depet();
  
  // required string sign = 5;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 5;
  inline const ::std::string& sign() const;
  inline void set_sign(const ::std::string& value);
  inline void set_sign(const char* value);
  inline void set_sign(const char* value, size_t size);
  inline ::std::string* mutable_sign();
  inline ::std::string* release_sign();
  
  // required int32 len = 6;
  inline bool has_len() const;
  inline void clear_len();
  static const int kLenFieldNumber = 6;
  inline ::google::protobuf::int32 len() const;
  inline void set_len(::google::protobuf::int32 value);
  
  // repeated bool victory = 7;
  inline int victory_size() const;
  inline void clear_victory();
  static const int kVictoryFieldNumber = 7;
  inline bool victory(int index) const;
  inline void set_victory(int index, bool value);
  inline void add_victory(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      victory() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_victory();
  
  // required int32 type = 8;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 8;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protobuf.newBattle.BattleVideo)
 private:
  inline void set_has_atpetid();
  inline void clear_has_atpetid();
  inline void set_has_depetid();
  inline void clear_has_depetid();
  inline void set_has_sign();
  inline void clear_has_sign();
  inline void set_has_len();
  inline void clear_has_len();
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protobuf::common::Pet > atpet_;
  ::google::protobuf::int32 atpetid_;
  ::google::protobuf::int32 depetid_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::common::Pet > depet_;
  ::std::string* sign_;
  ::google::protobuf::RepeatedField< bool > victory_;
  ::google::protobuf::int32 len_;
  ::google::protobuf::int32 type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_newBattle_2eproto();
  friend void protobuf_AssignDesc_newBattle_2eproto();
  friend void protobuf_ShutdownFile_newBattle_2eproto();
  
  void InitAsDefaultInstance();
  static BattleVideo* default_instance_;
};
// -------------------------------------------------------------------

class BattleData : public ::google::protobuf::Message {
 public:
  BattleData();
  virtual ~BattleData();
  
  BattleData(const BattleData& from);
  
  inline BattleData& operator=(const BattleData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BattleData& default_instance();
  
  void Swap(BattleData* other);
  
  // implements Message ----------------------------------------------
  
  BattleData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BattleData& from);
  void MergeFrom(const BattleData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // required int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // required int32 lv = 3;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 3;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);
  
  // required int32 damage = 4;
  inline bool has_damage() const;
  inline void clear_damage();
  static const int kDamageFieldNumber = 4;
  inline ::google::protobuf::int32 damage() const;
  inline void set_damage(::google::protobuf::int32 value);
  
  // required int32 heal = 5;
  inline bool has_heal() const;
  inline void clear_heal();
  static const int kHealFieldNumber = 5;
  inline ::google::protobuf::int32 heal() const;
  inline void set_heal(::google::protobuf::int32 value);
  
  // required int32 receiveDamage = 6;
  inline bool has_receivedamage() const;
  inline void clear_receivedamage();
  static const int kReceiveDamageFieldNumber = 6;
  inline ::google::protobuf::int32 receivedamage() const;
  inline void set_receivedamage(::google::protobuf::int32 value);
  
  // optional string playerId = 7;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 7;
  inline const ::std::string& playerid() const;
  inline void set_playerid(const ::std::string& value);
  inline void set_playerid(const char* value);
  inline void set_playerid(const char* value, size_t size);
  inline ::std::string* mutable_playerid();
  inline ::std::string* release_playerid();
  
  // @@protoc_insertion_point(class_scope:protobuf.newBattle.BattleData)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_damage();
  inline void clear_has_damage();
  inline void set_has_heal();
  inline void clear_has_heal();
  inline void set_has_receivedamage();
  inline void clear_has_receivedamage();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 lv_;
  ::google::protobuf::int32 damage_;
  ::google::protobuf::int32 heal_;
  ::google::protobuf::int32 receivedamage_;
  ::std::string* playerid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_newBattle_2eproto();
  friend void protobuf_AssignDesc_newBattle_2eproto();
  friend void protobuf_ShutdownFile_newBattle_2eproto();
  
  void InitAsDefaultInstance();
  static BattleData* default_instance_;
};
// -------------------------------------------------------------------

class NewBattleStartM : public ::google::protobuf::Message {
 public:
  NewBattleStartM();
  virtual ~NewBattleStartM();
  
  NewBattleStartM(const NewBattleStartM& from);
  
  inline NewBattleStartM& operator=(const NewBattleStartM& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NewBattleStartM& default_instance();
  
  void Swap(NewBattleStartM* other);
  
  // implements Message ----------------------------------------------
  
  NewBattleStartM* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NewBattleStartM& from);
  void MergeFrom(const NewBattleStartM& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // required string enemyId = 2;
  inline bool has_enemyid() const;
  inline void clear_enemyid();
  static const int kEnemyIdFieldNumber = 2;
  inline const ::std::string& enemyid() const;
  inline void set_enemyid(const ::std::string& value);
  inline void set_enemyid(const char* value);
  inline void set_enemyid(const char* value, size_t size);
  inline ::std::string* mutable_enemyid();
  inline ::std::string* release_enemyid();
  
  // repeated .protobuf.common.LineupTemplate perLineup = 3;
  inline int perlineup_size() const;
  inline void clear_perlineup();
  static const int kPerLineupFieldNumber = 3;
  inline const ::protobuf::common::LineupTemplate& perlineup(int index) const;
  inline ::protobuf::common::LineupTemplate* mutable_perlineup(int index);
  inline ::protobuf::common::LineupTemplate* add_perlineup();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::LineupTemplate >&
      perlineup() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::LineupTemplate >*
      mutable_perlineup();
  
  // repeated .protobuf.common.Id32 lineupIds = 4;
  inline int lineupids_size() const;
  inline void clear_lineupids();
  static const int kLineupIdsFieldNumber = 4;
  inline const ::protobuf::common::Id32& lineupids(int index) const;
  inline ::protobuf::common::Id32* mutable_lineupids(int index);
  inline ::protobuf::common::Id32* add_lineupids();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::Id32 >&
      lineupids() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::Id32 >*
      mutable_lineupids();
  
  // optional int32 attackCnt = 5;
  inline bool has_attackcnt() const;
  inline void clear_attackcnt();
  static const int kAttackCntFieldNumber = 5;
  inline ::google::protobuf::int32 attackcnt() const;
  inline void set_attackcnt(::google::protobuf::int32 value);
  
  // optional bool isSkip = 6;
  inline bool has_isskip() const;
  inline void clear_isskip();
  static const int kIsSkipFieldNumber = 6;
  inline bool isskip() const;
  inline void set_isskip(bool value);
  
  // @@protoc_insertion_point(class_scope:protobuf.newBattle.NewBattleStartM)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_enemyid();
  inline void clear_has_enemyid();
  inline void set_has_attackcnt();
  inline void clear_has_attackcnt();
  inline void set_has_isskip();
  inline void clear_has_isskip();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* enemyid_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::common::LineupTemplate > perlineup_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 attackcnt_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::common::Id32 > lineupids_;
  bool isskip_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_newBattle_2eproto();
  friend void protobuf_AssignDesc_newBattle_2eproto();
  friend void protobuf_ShutdownFile_newBattle_2eproto();
  
  void InitAsDefaultInstance();
  static NewBattleStartM* default_instance_;
};
// -------------------------------------------------------------------

class OneBattleData : public ::google::protobuf::Message {
 public:
  OneBattleData();
  virtual ~OneBattleData();
  
  OneBattleData(const OneBattleData& from);
  
  inline OneBattleData& operator=(const OneBattleData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OneBattleData& default_instance();
  
  void Swap(OneBattleData* other);
  
  // implements Message ----------------------------------------------
  
  OneBattleData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OneBattleData& from);
  void MergeFrom(const OneBattleData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protobuf.newBattle.BattleData data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::protobuf::newBattle::BattleData& data(int index) const;
  inline ::protobuf::newBattle::BattleData* mutable_data(int index);
  inline ::protobuf::newBattle::BattleData* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::newBattle::BattleData >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::newBattle::BattleData >*
      mutable_data();
  
  // @@protoc_insertion_point(class_scope:protobuf.newBattle.OneBattleData)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protobuf::newBattle::BattleData > data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_newBattle_2eproto();
  friend void protobuf_AssignDesc_newBattle_2eproto();
  friend void protobuf_ShutdownFile_newBattle_2eproto();
  
  void InitAsDefaultInstance();
  static OneBattleData* default_instance_;
};
// ===================================================================


// ===================================================================

// FreshReplyInfo

// required int32 type = 1;
inline bool FreshReplyInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FreshReplyInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FreshReplyInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FreshReplyInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 FreshReplyInfo::type() const {
  return type_;
}
inline void FreshReplyInfo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// repeated .protobuf.common.KVint3232 carbonDayCnt = 2;
inline int FreshReplyInfo::carbondaycnt_size() const {
  return carbondaycnt_.size();
}
inline void FreshReplyInfo::clear_carbondaycnt() {
  carbondaycnt_.Clear();
}
inline const ::protobuf::common::KVint3232& FreshReplyInfo::carbondaycnt(int index) const {
  return carbondaycnt_.Get(index);
}
inline ::protobuf::common::KVint3232* FreshReplyInfo::mutable_carbondaycnt(int index) {
  return carbondaycnt_.Mutable(index);
}
inline ::protobuf::common::KVint3232* FreshReplyInfo::add_carbondaycnt() {
  return carbondaycnt_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >&
FreshReplyInfo::carbondaycnt() const {
  return carbondaycnt_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >*
FreshReplyInfo::mutable_carbondaycnt() {
  return &carbondaycnt_;
}

// optional bool isOpenBrave = 3;
inline bool FreshReplyInfo::has_isopenbrave() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FreshReplyInfo::set_has_isopenbrave() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FreshReplyInfo::clear_has_isopenbrave() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FreshReplyInfo::clear_isopenbrave() {
  isopenbrave_ = false;
  clear_has_isopenbrave();
}
inline bool FreshReplyInfo::isopenbrave() const {
  return isopenbrave_;
}
inline void FreshReplyInfo::set_isopenbrave(bool value) {
  set_has_isopenbrave();
  isopenbrave_ = value;
}

// optional int64 nextFreshTime = 4;
inline bool FreshReplyInfo::has_nextfreshtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FreshReplyInfo::set_has_nextfreshtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FreshReplyInfo::clear_has_nextfreshtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FreshReplyInfo::clear_nextfreshtime() {
  nextfreshtime_ = GOOGLE_LONGLONG(0);
  clear_has_nextfreshtime();
}
inline ::google::protobuf::int64 FreshReplyInfo::nextfreshtime() const {
  return nextfreshtime_;
}
inline void FreshReplyInfo::set_nextfreshtime(::google::protobuf::int64 value) {
  set_has_nextfreshtime();
  nextfreshtime_ = value;
}

// -------------------------------------------------------------------

// iconinfo

// required int32 level = 1;
inline bool iconinfo::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void iconinfo::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void iconinfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void iconinfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 iconinfo::level() const {
  return level_;
}
inline void iconinfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// required string name = 2;
inline bool iconinfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void iconinfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void iconinfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void iconinfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& iconinfo::name() const {
  return *name_;
}
inline void iconinfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void iconinfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void iconinfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* iconinfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* iconinfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string head = 3;
inline bool iconinfo::has_head() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void iconinfo::set_has_head() {
  _has_bits_[0] |= 0x00000004u;
}
inline void iconinfo::clear_has_head() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void iconinfo::clear_head() {
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    head_->clear();
  }
  clear_has_head();
}
inline const ::std::string& iconinfo::head() const {
  return *head_;
}
inline void iconinfo::set_head(const ::std::string& value) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(value);
}
inline void iconinfo::set_head(const char* value) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(value);
}
inline void iconinfo::set_head(const char* value, size_t size) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* iconinfo::mutable_head() {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  return head_;
}
inline ::std::string* iconinfo::release_head() {
  clear_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = head_;
    head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string guildName = 4;
inline bool iconinfo::has_guildname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void iconinfo::set_has_guildname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void iconinfo::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void iconinfo::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    guildname_->clear();
  }
  clear_has_guildname();
}
inline const ::std::string& iconinfo::guildname() const {
  return *guildname_;
}
inline void iconinfo::set_guildname(const ::std::string& value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void iconinfo::set_guildname(const char* value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void iconinfo::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* iconinfo::mutable_guildname() {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  return guildname_;
}
inline ::std::string* iconinfo::release_guildname() {
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string serverName = 5;
inline bool iconinfo::has_servername() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void iconinfo::set_has_servername() {
  _has_bits_[0] |= 0x00000010u;
}
inline void iconinfo::clear_has_servername() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void iconinfo::clear_servername() {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    servername_->clear();
  }
  clear_has_servername();
}
inline const ::std::string& iconinfo::servername() const {
  return *servername_;
}
inline void iconinfo::set_servername(const ::std::string& value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
}
inline void iconinfo::set_servername(const char* value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
}
inline void iconinfo::set_servername(const char* value, size_t size) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* iconinfo::mutable_servername() {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  return servername_;
}
inline ::std::string* iconinfo::release_servername() {
  clear_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = servername_;
    servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string playerid = 6;
inline bool iconinfo::has_playerid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void iconinfo::set_has_playerid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void iconinfo::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void iconinfo::clear_playerid() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    playerid_->clear();
  }
  clear_has_playerid();
}
inline const ::std::string& iconinfo::playerid() const {
  return *playerid_;
}
inline void iconinfo::set_playerid(const ::std::string& value) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(value);
}
inline void iconinfo::set_playerid(const char* value) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(value);
}
inline void iconinfo::set_playerid(const char* value, size_t size) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* iconinfo::mutable_playerid() {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  return playerid_;
}
inline ::std::string* iconinfo::release_playerid() {
  clear_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playerid_;
    playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 power = 7;
inline bool iconinfo::has_power() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void iconinfo::set_has_power() {
  _has_bits_[0] |= 0x00000040u;
}
inline void iconinfo::clear_has_power() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void iconinfo::clear_power() {
  power_ = 0;
  clear_has_power();
}
inline ::google::protobuf::int32 iconinfo::power() const {
  return power_;
}
inline void iconinfo::set_power(::google::protobuf::int32 value) {
  set_has_power();
  power_ = value;
}

// optional int32 headFrame = 8;
inline bool iconinfo::has_headframe() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void iconinfo::set_has_headframe() {
  _has_bits_[0] |= 0x00000080u;
}
inline void iconinfo::clear_has_headframe() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void iconinfo::clear_headframe() {
  headframe_ = 0;
  clear_has_headframe();
}
inline ::google::protobuf::int32 iconinfo::headframe() const {
  return headframe_;
}
inline void iconinfo::set_headframe(::google::protobuf::int32 value) {
  set_has_headframe();
  headframe_ = value;
}

// optional bool isEnemy = 9;
inline bool iconinfo::has_isenemy() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void iconinfo::set_has_isenemy() {
  _has_bits_[0] |= 0x00000100u;
}
inline void iconinfo::clear_has_isenemy() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void iconinfo::clear_isenemy() {
  isenemy_ = false;
  clear_has_isenemy();
}
inline bool iconinfo::isenemy() const {
  return isenemy_;
}
inline void iconinfo::set_isenemy(bool value) {
  set_has_isenemy();
  isenemy_ = value;
}

// -------------------------------------------------------------------

// SetLineupTemplate

// repeated .protobuf.common.LineupTemplate lineup = 1;
inline int SetLineupTemplate::lineup_size() const {
  return lineup_.size();
}
inline void SetLineupTemplate::clear_lineup() {
  lineup_.Clear();
}
inline const ::protobuf::common::LineupTemplate& SetLineupTemplate::lineup(int index) const {
  return lineup_.Get(index);
}
inline ::protobuf::common::LineupTemplate* SetLineupTemplate::mutable_lineup(int index) {
  return lineup_.Mutable(index);
}
inline ::protobuf::common::LineupTemplate* SetLineupTemplate::add_lineup() {
  return lineup_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::LineupTemplate >&
SetLineupTemplate::lineup() const {
  return lineup_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::LineupTemplate >*
SetLineupTemplate::mutable_lineup() {
  return &lineup_;
}

// -------------------------------------------------------------------

// BattleStatistics

// repeated .protobuf.newBattle.ArenaRecord data = 1;
inline int BattleStatistics::data_size() const {
  return data_.size();
}
inline void BattleStatistics::clear_data() {
  data_.Clear();
}
inline const ::protobuf::newBattle::ArenaRecord& BattleStatistics::data(int index) const {
  return data_.Get(index);
}
inline ::protobuf::newBattle::ArenaRecord* BattleStatistics::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::protobuf::newBattle::ArenaRecord* BattleStatistics::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::newBattle::ArenaRecord >&
BattleStatistics::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::newBattle::ArenaRecord >*
BattleStatistics::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// ArenaRecord

// repeated .protobuf.newBattle.BattleData battleData = 1;
inline int ArenaRecord::battledata_size() const {
  return battledata_.size();
}
inline void ArenaRecord::clear_battledata() {
  battledata_.Clear();
}
inline const ::protobuf::newBattle::BattleData& ArenaRecord::battledata(int index) const {
  return battledata_.Get(index);
}
inline ::protobuf::newBattle::BattleData* ArenaRecord::mutable_battledata(int index) {
  return battledata_.Mutable(index);
}
inline ::protobuf::newBattle::BattleData* ArenaRecord::add_battledata() {
  return battledata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::newBattle::BattleData >&
ArenaRecord::battledata() const {
  return battledata_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::newBattle::BattleData >*
ArenaRecord::mutable_battledata() {
  return &battledata_;
}

// repeated .protobuf.common.LineupDetail selfLineup = 2;
inline int ArenaRecord::selflineup_size() const {
  return selflineup_.size();
}
inline void ArenaRecord::clear_selflineup() {
  selflineup_.Clear();
}
inline const ::protobuf::common::LineupDetail& ArenaRecord::selflineup(int index) const {
  return selflineup_.Get(index);
}
inline ::protobuf::common::LineupDetail* ArenaRecord::mutable_selflineup(int index) {
  return selflineup_.Mutable(index);
}
inline ::protobuf::common::LineupDetail* ArenaRecord::add_selflineup() {
  return selflineup_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::LineupDetail >&
ArenaRecord::selflineup() const {
  return selflineup_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::LineupDetail >*
ArenaRecord::mutable_selflineup() {
  return &selflineup_;
}

// repeated .protobuf.common.LineupDetail enemyLineup = 3;
inline int ArenaRecord::enemylineup_size() const {
  return enemylineup_.size();
}
inline void ArenaRecord::clear_enemylineup() {
  enemylineup_.Clear();
}
inline const ::protobuf::common::LineupDetail& ArenaRecord::enemylineup(int index) const {
  return enemylineup_.Get(index);
}
inline ::protobuf::common::LineupDetail* ArenaRecord::mutable_enemylineup(int index) {
  return enemylineup_.Mutable(index);
}
inline ::protobuf::common::LineupDetail* ArenaRecord::add_enemylineup() {
  return enemylineup_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::LineupDetail >&
ArenaRecord::enemylineup() const {
  return enemylineup_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::LineupDetail >*
ArenaRecord::mutable_enemylineup() {
  return &enemylineup_;
}

// optional int32 score = 4;
inline bool ArenaRecord::has_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ArenaRecord::set_has_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ArenaRecord::clear_has_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ArenaRecord::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 ArenaRecord::score() const {
  return score_;
}
inline void ArenaRecord::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// optional int64 recordTime = 5;
inline bool ArenaRecord::has_recordtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ArenaRecord::set_has_recordtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ArenaRecord::clear_has_recordtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ArenaRecord::clear_recordtime() {
  recordtime_ = GOOGLE_LONGLONG(0);
  clear_has_recordtime();
}
inline ::google::protobuf::int64 ArenaRecord::recordtime() const {
  return recordtime_;
}
inline void ArenaRecord::set_recordtime(::google::protobuf::int64 value) {
  set_has_recordtime();
  recordtime_ = value;
}

// repeated .protobuf.newBattle.iconinfo playerInfo = 6;
inline int ArenaRecord::playerinfo_size() const {
  return playerinfo_.size();
}
inline void ArenaRecord::clear_playerinfo() {
  playerinfo_.Clear();
}
inline const ::protobuf::newBattle::iconinfo& ArenaRecord::playerinfo(int index) const {
  return playerinfo_.Get(index);
}
inline ::protobuf::newBattle::iconinfo* ArenaRecord::mutable_playerinfo(int index) {
  return playerinfo_.Mutable(index);
}
inline ::protobuf::newBattle::iconinfo* ArenaRecord::add_playerinfo() {
  return playerinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::newBattle::iconinfo >&
ArenaRecord::playerinfo() const {
  return playerinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::newBattle::iconinfo >*
ArenaRecord::mutable_playerinfo() {
  return &playerinfo_;
}

// optional int32 recordNumber = 7;
inline bool ArenaRecord::has_recordnumber() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ArenaRecord::set_has_recordnumber() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ArenaRecord::clear_has_recordnumber() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ArenaRecord::clear_recordnumber() {
  recordnumber_ = 0;
  clear_has_recordnumber();
}
inline ::google::protobuf::int32 ArenaRecord::recordnumber() const {
  return recordnumber_;
}
inline void ArenaRecord::set_recordnumber(::google::protobuf::int32 value) {
  set_has_recordnumber();
  recordnumber_ = value;
}

// -------------------------------------------------------------------

// BattleResults

// optional int32 type = 1;
inline bool BattleResults::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BattleResults::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BattleResults::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BattleResults::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 BattleResults::type() const {
  return type_;
}
inline void BattleResults::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional bool result = 2;
inline bool BattleResults::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BattleResults::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BattleResults::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BattleResults::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool BattleResults::result() const {
  return result_;
}
inline void BattleResults::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// repeated .protobuf.newBattle.BattleData battleData = 3;
inline int BattleResults::battledata_size() const {
  return battledata_.size();
}
inline void BattleResults::clear_battledata() {
  battledata_.Clear();
}
inline const ::protobuf::newBattle::BattleData& BattleResults::battledata(int index) const {
  return battledata_.Get(index);
}
inline ::protobuf::newBattle::BattleData* BattleResults::mutable_battledata(int index) {
  return battledata_.Mutable(index);
}
inline ::protobuf::newBattle::BattleData* BattleResults::add_battledata() {
  return battledata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::newBattle::BattleData >&
BattleResults::battledata() const {
  return battledata_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::newBattle::BattleData >*
BattleResults::mutable_battledata() {
  return &battledata_;
}

// optional string arenaPlayerId = 4;
inline bool BattleResults::has_arenaplayerid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BattleResults::set_has_arenaplayerid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BattleResults::clear_has_arenaplayerid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BattleResults::clear_arenaplayerid() {
  if (arenaplayerid_ != &::google::protobuf::internal::kEmptyString) {
    arenaplayerid_->clear();
  }
  clear_has_arenaplayerid();
}
inline const ::std::string& BattleResults::arenaplayerid() const {
  return *arenaplayerid_;
}
inline void BattleResults::set_arenaplayerid(const ::std::string& value) {
  set_has_arenaplayerid();
  if (arenaplayerid_ == &::google::protobuf::internal::kEmptyString) {
    arenaplayerid_ = new ::std::string;
  }
  arenaplayerid_->assign(value);
}
inline void BattleResults::set_arenaplayerid(const char* value) {
  set_has_arenaplayerid();
  if (arenaplayerid_ == &::google::protobuf::internal::kEmptyString) {
    arenaplayerid_ = new ::std::string;
  }
  arenaplayerid_->assign(value);
}
inline void BattleResults::set_arenaplayerid(const char* value, size_t size) {
  set_has_arenaplayerid();
  if (arenaplayerid_ == &::google::protobuf::internal::kEmptyString) {
    arenaplayerid_ = new ::std::string;
  }
  arenaplayerid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BattleResults::mutable_arenaplayerid() {
  set_has_arenaplayerid();
  if (arenaplayerid_ == &::google::protobuf::internal::kEmptyString) {
    arenaplayerid_ = new ::std::string;
  }
  return arenaplayerid_;
}
inline ::std::string* BattleResults::release_arenaplayerid() {
  clear_has_arenaplayerid();
  if (arenaplayerid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = arenaplayerid_;
    arenaplayerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .protobuf.common.LineupDetail selfLineup = 5;
inline int BattleResults::selflineup_size() const {
  return selflineup_.size();
}
inline void BattleResults::clear_selflineup() {
  selflineup_.Clear();
}
inline const ::protobuf::common::LineupDetail& BattleResults::selflineup(int index) const {
  return selflineup_.Get(index);
}
inline ::protobuf::common::LineupDetail* BattleResults::mutable_selflineup(int index) {
  return selflineup_.Mutable(index);
}
inline ::protobuf::common::LineupDetail* BattleResults::add_selflineup() {
  return selflineup_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::LineupDetail >&
BattleResults::selflineup() const {
  return selflineup_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::LineupDetail >*
BattleResults::mutable_selflineup() {
  return &selflineup_;
}

// repeated .protobuf.common.LineupDetail enemyLineup = 6;
inline int BattleResults::enemylineup_size() const {
  return enemylineup_.size();
}
inline void BattleResults::clear_enemylineup() {
  enemylineup_.Clear();
}
inline const ::protobuf::common::LineupDetail& BattleResults::enemylineup(int index) const {
  return enemylineup_.Get(index);
}
inline ::protobuf::common::LineupDetail* BattleResults::mutable_enemylineup(int index) {
  return enemylineup_.Mutable(index);
}
inline ::protobuf::common::LineupDetail* BattleResults::add_enemylineup() {
  return enemylineup_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::LineupDetail >&
BattleResults::enemylineup() const {
  return enemylineup_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::LineupDetail >*
BattleResults::mutable_enemylineup() {
  return &enemylineup_;
}

// optional int32 mapId = 7;
inline bool BattleResults::has_mapid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BattleResults::set_has_mapid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BattleResults::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BattleResults::clear_mapid() {
  mapid_ = 0;
  clear_has_mapid();
}
inline ::google::protobuf::int32 BattleResults::mapid() const {
  return mapid_;
}
inline void BattleResults::set_mapid(::google::protobuf::int32 value) {
  set_has_mapid();
  mapid_ = value;
}

// optional bool isRevenge = 8;
inline bool BattleResults::has_isrevenge() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BattleResults::set_has_isrevenge() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BattleResults::clear_has_isrevenge() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BattleResults::clear_isrevenge() {
  isrevenge_ = false;
  clear_has_isrevenge();
}
inline bool BattleResults::isrevenge() const {
  return isrevenge_;
}
inline void BattleResults::set_isrevenge(bool value) {
  set_has_isrevenge();
  isrevenge_ = value;
}

// -------------------------------------------------------------------

// BattleRequest

// required int32 type = 1;
inline bool BattleRequest::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BattleRequest::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BattleRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BattleRequest::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 BattleRequest::type() const {
  return type_;
}
inline void BattleRequest::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional string beAttackId = 2;
inline bool BattleRequest::has_beattackid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BattleRequest::set_has_beattackid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BattleRequest::clear_has_beattackid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BattleRequest::clear_beattackid() {
  if (beattackid_ != &::google::protobuf::internal::kEmptyString) {
    beattackid_->clear();
  }
  clear_has_beattackid();
}
inline const ::std::string& BattleRequest::beattackid() const {
  return *beattackid_;
}
inline void BattleRequest::set_beattackid(const ::std::string& value) {
  set_has_beattackid();
  if (beattackid_ == &::google::protobuf::internal::kEmptyString) {
    beattackid_ = new ::std::string;
  }
  beattackid_->assign(value);
}
inline void BattleRequest::set_beattackid(const char* value) {
  set_has_beattackid();
  if (beattackid_ == &::google::protobuf::internal::kEmptyString) {
    beattackid_ = new ::std::string;
  }
  beattackid_->assign(value);
}
inline void BattleRequest::set_beattackid(const char* value, size_t size) {
  set_has_beattackid();
  if (beattackid_ == &::google::protobuf::internal::kEmptyString) {
    beattackid_ = new ::std::string;
  }
  beattackid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BattleRequest::mutable_beattackid() {
  set_has_beattackid();
  if (beattackid_ == &::google::protobuf::internal::kEmptyString) {
    beattackid_ = new ::std::string;
  }
  return beattackid_;
}
inline ::std::string* BattleRequest::release_beattackid() {
  clear_has_beattackid();
  if (beattackid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = beattackid_;
    beattackid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool needLineup = 3;
inline bool BattleRequest::has_needlineup() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BattleRequest::set_has_needlineup() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BattleRequest::clear_has_needlineup() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BattleRequest::clear_needlineup() {
  needlineup_ = false;
  clear_has_needlineup();
}
inline bool BattleRequest::needlineup() const {
  return needlineup_;
}
inline void BattleRequest::set_needlineup(bool value) {
  set_has_needlineup();
  needlineup_ = value;
}

// optional int32 mapId = 4;
inline bool BattleRequest::has_mapid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BattleRequest::set_has_mapid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BattleRequest::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BattleRequest::clear_mapid() {
  mapid_ = 0;
  clear_has_mapid();
}
inline ::google::protobuf::int32 BattleRequest::mapid() const {
  return mapid_;
}
inline void BattleRequest::set_mapid(::google::protobuf::int32 value) {
  set_has_mapid();
  mapid_ = value;
}

// -------------------------------------------------------------------

// BattleInfo

// required int32 type = 1;
inline bool BattleInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BattleInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BattleInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BattleInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 BattleInfo::type() const {
  return type_;
}
inline void BattleInfo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional string enemyid = 3;
inline bool BattleInfo::has_enemyid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BattleInfo::set_has_enemyid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BattleInfo::clear_has_enemyid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BattleInfo::clear_enemyid() {
  if (enemyid_ != &::google::protobuf::internal::kEmptyString) {
    enemyid_->clear();
  }
  clear_has_enemyid();
}
inline const ::std::string& BattleInfo::enemyid() const {
  return *enemyid_;
}
inline void BattleInfo::set_enemyid(const ::std::string& value) {
  set_has_enemyid();
  if (enemyid_ == &::google::protobuf::internal::kEmptyString) {
    enemyid_ = new ::std::string;
  }
  enemyid_->assign(value);
}
inline void BattleInfo::set_enemyid(const char* value) {
  set_has_enemyid();
  if (enemyid_ == &::google::protobuf::internal::kEmptyString) {
    enemyid_ = new ::std::string;
  }
  enemyid_->assign(value);
}
inline void BattleInfo::set_enemyid(const char* value, size_t size) {
  set_has_enemyid();
  if (enemyid_ == &::google::protobuf::internal::kEmptyString) {
    enemyid_ = new ::std::string;
  }
  enemyid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BattleInfo::mutable_enemyid() {
  set_has_enemyid();
  if (enemyid_ == &::google::protobuf::internal::kEmptyString) {
    enemyid_ = new ::std::string;
  }
  return enemyid_;
}
inline ::std::string* BattleInfo::release_enemyid() {
  clear_has_enemyid();
  if (enemyid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = enemyid_;
    enemyid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string teamName = 4;
inline bool BattleInfo::has_teamname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BattleInfo::set_has_teamname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BattleInfo::clear_has_teamname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BattleInfo::clear_teamname() {
  if (teamname_ != &::google::protobuf::internal::kEmptyString) {
    teamname_->clear();
  }
  clear_has_teamname();
}
inline const ::std::string& BattleInfo::teamname() const {
  return *teamname_;
}
inline void BattleInfo::set_teamname(const ::std::string& value) {
  set_has_teamname();
  if (teamname_ == &::google::protobuf::internal::kEmptyString) {
    teamname_ = new ::std::string;
  }
  teamname_->assign(value);
}
inline void BattleInfo::set_teamname(const char* value) {
  set_has_teamname();
  if (teamname_ == &::google::protobuf::internal::kEmptyString) {
    teamname_ = new ::std::string;
  }
  teamname_->assign(value);
}
inline void BattleInfo::set_teamname(const char* value, size_t size) {
  set_has_teamname();
  if (teamname_ == &::google::protobuf::internal::kEmptyString) {
    teamname_ = new ::std::string;
  }
  teamname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BattleInfo::mutable_teamname() {
  set_has_teamname();
  if (teamname_ == &::google::protobuf::internal::kEmptyString) {
    teamname_ = new ::std::string;
  }
  return teamname_;
}
inline ::std::string* BattleInfo::release_teamname() {
  clear_has_teamname();
  if (teamname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = teamname_;
    teamname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .protobuf.common.LineupDetail enemylinup = 5;
inline int BattleInfo::enemylinup_size() const {
  return enemylinup_.size();
}
inline void BattleInfo::clear_enemylinup() {
  enemylinup_.Clear();
}
inline const ::protobuf::common::LineupDetail& BattleInfo::enemylinup(int index) const {
  return enemylinup_.Get(index);
}
inline ::protobuf::common::LineupDetail* BattleInfo::mutable_enemylinup(int index) {
  return enemylinup_.Mutable(index);
}
inline ::protobuf::common::LineupDetail* BattleInfo::add_enemylinup() {
  return enemylinup_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::LineupDetail >&
BattleInfo::enemylinup() const {
  return enemylinup_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::LineupDetail >*
BattleInfo::mutable_enemylinup() {
  return &enemylinup_;
}

// repeated .protobuf.newBattle.iconinfo showinfo = 6;
inline int BattleInfo::showinfo_size() const {
  return showinfo_.size();
}
inline void BattleInfo::clear_showinfo() {
  showinfo_.Clear();
}
inline const ::protobuf::newBattle::iconinfo& BattleInfo::showinfo(int index) const {
  return showinfo_.Get(index);
}
inline ::protobuf::newBattle::iconinfo* BattleInfo::mutable_showinfo(int index) {
  return showinfo_.Mutable(index);
}
inline ::protobuf::newBattle::iconinfo* BattleInfo::add_showinfo() {
  return showinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::newBattle::iconinfo >&
BattleInfo::showinfo() const {
  return showinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::newBattle::iconinfo >*
BattleInfo::mutable_showinfo() {
  return &showinfo_;
}

// repeated .protobuf.common.KVint3264 enemyblood = 7;
inline int BattleInfo::enemyblood_size() const {
  return enemyblood_.size();
}
inline void BattleInfo::clear_enemyblood() {
  enemyblood_.Clear();
}
inline const ::protobuf::common::KVint3264& BattleInfo::enemyblood(int index) const {
  return enemyblood_.Get(index);
}
inline ::protobuf::common::KVint3264* BattleInfo::mutable_enemyblood(int index) {
  return enemyblood_.Mutable(index);
}
inline ::protobuf::common::KVint3264* BattleInfo::add_enemyblood() {
  return enemyblood_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 >&
BattleInfo::enemyblood() const {
  return enemyblood_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 >*
BattleInfo::mutable_enemyblood() {
  return &enemyblood_;
}

// repeated .protobuf.common.LineupTemplate lineupTemplate = 8;
inline int BattleInfo::lineuptemplate_size() const {
  return lineuptemplate_.size();
}
inline void BattleInfo::clear_lineuptemplate() {
  lineuptemplate_.Clear();
}
inline const ::protobuf::common::LineupTemplate& BattleInfo::lineuptemplate(int index) const {
  return lineuptemplate_.Get(index);
}
inline ::protobuf::common::LineupTemplate* BattleInfo::mutable_lineuptemplate(int index) {
  return lineuptemplate_.Mutable(index);
}
inline ::protobuf::common::LineupTemplate* BattleInfo::add_lineuptemplate() {
  return lineuptemplate_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::LineupTemplate >&
BattleInfo::lineuptemplate() const {
  return lineuptemplate_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::LineupTemplate >*
BattleInfo::mutable_lineuptemplate() {
  return &lineuptemplate_;
}

// -------------------------------------------------------------------

// BattleStart

// required int32 type = 1;
inline bool BattleStart::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BattleStart::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BattleStart::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BattleStart::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 BattleStart::type() const {
  return type_;
}
inline void BattleStart::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required string enemyId = 2;
inline bool BattleStart::has_enemyid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BattleStart::set_has_enemyid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BattleStart::clear_has_enemyid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BattleStart::clear_enemyid() {
  if (enemyid_ != &::google::protobuf::internal::kEmptyString) {
    enemyid_->clear();
  }
  clear_has_enemyid();
}
inline const ::std::string& BattleStart::enemyid() const {
  return *enemyid_;
}
inline void BattleStart::set_enemyid(const ::std::string& value) {
  set_has_enemyid();
  if (enemyid_ == &::google::protobuf::internal::kEmptyString) {
    enemyid_ = new ::std::string;
  }
  enemyid_->assign(value);
}
inline void BattleStart::set_enemyid(const char* value) {
  set_has_enemyid();
  if (enemyid_ == &::google::protobuf::internal::kEmptyString) {
    enemyid_ = new ::std::string;
  }
  enemyid_->assign(value);
}
inline void BattleStart::set_enemyid(const char* value, size_t size) {
  set_has_enemyid();
  if (enemyid_ == &::google::protobuf::internal::kEmptyString) {
    enemyid_ = new ::std::string;
  }
  enemyid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BattleStart::mutable_enemyid() {
  set_has_enemyid();
  if (enemyid_ == &::google::protobuf::internal::kEmptyString) {
    enemyid_ = new ::std::string;
  }
  return enemyid_;
}
inline ::std::string* BattleStart::release_enemyid() {
  clear_has_enemyid();
  if (enemyid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = enemyid_;
    enemyid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 lineupindex = 3;
inline bool BattleStart::has_lineupindex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BattleStart::set_has_lineupindex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BattleStart::clear_has_lineupindex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BattleStart::clear_lineupindex() {
  lineupindex_ = 0;
  clear_has_lineupindex();
}
inline ::google::protobuf::int32 BattleStart::lineupindex() const {
  return lineupindex_;
}
inline void BattleStart::set_lineupindex(::google::protobuf::int32 value) {
  set_has_lineupindex();
  lineupindex_ = value;
}

// repeated .protobuf.common.Id32 lineupIds = 4;
inline int BattleStart::lineupids_size() const {
  return lineupids_.size();
}
inline void BattleStart::clear_lineupids() {
  lineupids_.Clear();
}
inline const ::protobuf::common::Id32& BattleStart::lineupids(int index) const {
  return lineupids_.Get(index);
}
inline ::protobuf::common::Id32* BattleStart::mutable_lineupids(int index) {
  return lineupids_.Mutable(index);
}
inline ::protobuf::common::Id32* BattleStart::add_lineupids() {
  return lineupids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::Id32 >&
BattleStart::lineupids() const {
  return lineupids_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::Id32 >*
BattleStart::mutable_lineupids() {
  return &lineupids_;
}

// optional int32 lineuppet = 5;
inline bool BattleStart::has_lineuppet() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BattleStart::set_has_lineuppet() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BattleStart::clear_has_lineuppet() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BattleStart::clear_lineuppet() {
  lineuppet_ = 0;
  clear_has_lineuppet();
}
inline ::google::protobuf::int32 BattleStart::lineuppet() const {
  return lineuppet_;
}
inline void BattleStart::set_lineuppet(::google::protobuf::int32 value) {
  set_has_lineuppet();
  lineuppet_ = value;
}

// optional int32 attackCnt = 6;
inline bool BattleStart::has_attackcnt() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BattleStart::set_has_attackcnt() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BattleStart::clear_has_attackcnt() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BattleStart::clear_attackcnt() {
  attackcnt_ = 0;
  clear_has_attackcnt();
}
inline ::google::protobuf::int32 BattleStart::attackcnt() const {
  return attackcnt_;
}
inline void BattleStart::set_attackcnt(::google::protobuf::int32 value) {
  set_has_attackcnt();
  attackcnt_ = value;
}

// optional bool isSkip = 7;
inline bool BattleStart::has_isskip() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BattleStart::set_has_isskip() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BattleStart::clear_has_isskip() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BattleStart::clear_isskip() {
  isskip_ = false;
  clear_has_isskip();
}
inline bool BattleStart::isskip() const {
  return isskip_;
}
inline void BattleStart::set_isskip(bool value) {
  set_has_isskip();
  isskip_ = value;
}

// optional int32 suspectIslandId = 8;
inline bool BattleStart::has_suspectislandid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BattleStart::set_has_suspectislandid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BattleStart::clear_has_suspectislandid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BattleStart::clear_suspectislandid() {
  suspectislandid_ = 0;
  clear_has_suspectislandid();
}
inline ::google::protobuf::int32 BattleStart::suspectislandid() const {
  return suspectislandid_;
}
inline void BattleStart::set_suspectislandid(::google::protobuf::int32 value) {
  set_has_suspectislandid();
  suspectislandid_ = value;
}

// optional string guidev = 10;
inline bool BattleStart::has_guidev() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BattleStart::set_has_guidev() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BattleStart::clear_has_guidev() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BattleStart::clear_guidev() {
  if (guidev_ != &::google::protobuf::internal::kEmptyString) {
    guidev_->clear();
  }
  clear_has_guidev();
}
inline const ::std::string& BattleStart::guidev() const {
  return *guidev_;
}
inline void BattleStart::set_guidev(const ::std::string& value) {
  set_has_guidev();
  if (guidev_ == &::google::protobuf::internal::kEmptyString) {
    guidev_ = new ::std::string;
  }
  guidev_->assign(value);
}
inline void BattleStart::set_guidev(const char* value) {
  set_has_guidev();
  if (guidev_ == &::google::protobuf::internal::kEmptyString) {
    guidev_ = new ::std::string;
  }
  guidev_->assign(value);
}
inline void BattleStart::set_guidev(const char* value, size_t size) {
  set_has_guidev();
  if (guidev_ == &::google::protobuf::internal::kEmptyString) {
    guidev_ = new ::std::string;
  }
  guidev_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BattleStart::mutable_guidev() {
  set_has_guidev();
  if (guidev_ == &::google::protobuf::internal::kEmptyString) {
    guidev_ = new ::std::string;
  }
  return guidev_;
}
inline ::std::string* BattleStart::release_guidev() {
  clear_has_guidev();
  if (guidev_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guidev_;
    guidev_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// BattleEnd

// required int32 type = 1;
inline bool BattleEnd::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BattleEnd::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BattleEnd::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BattleEnd::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 BattleEnd::type() const {
  return type_;
}
inline void BattleEnd::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required string enemyId = 2;
inline bool BattleEnd::has_enemyid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BattleEnd::set_has_enemyid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BattleEnd::clear_has_enemyid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BattleEnd::clear_enemyid() {
  if (enemyid_ != &::google::protobuf::internal::kEmptyString) {
    enemyid_->clear();
  }
  clear_has_enemyid();
}
inline const ::std::string& BattleEnd::enemyid() const {
  return *enemyid_;
}
inline void BattleEnd::set_enemyid(const ::std::string& value) {
  set_has_enemyid();
  if (enemyid_ == &::google::protobuf::internal::kEmptyString) {
    enemyid_ = new ::std::string;
  }
  enemyid_->assign(value);
}
inline void BattleEnd::set_enemyid(const char* value) {
  set_has_enemyid();
  if (enemyid_ == &::google::protobuf::internal::kEmptyString) {
    enemyid_ = new ::std::string;
  }
  enemyid_->assign(value);
}
inline void BattleEnd::set_enemyid(const char* value, size_t size) {
  set_has_enemyid();
  if (enemyid_ == &::google::protobuf::internal::kEmptyString) {
    enemyid_ = new ::std::string;
  }
  enemyid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BattleEnd::mutable_enemyid() {
  set_has_enemyid();
  if (enemyid_ == &::google::protobuf::internal::kEmptyString) {
    enemyid_ = new ::std::string;
  }
  return enemyid_;
}
inline ::std::string* BattleEnd::release_enemyid() {
  clear_has_enemyid();
  if (enemyid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = enemyid_;
    enemyid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated bool victory = 3;
inline int BattleEnd::victory_size() const {
  return victory_.size();
}
inline void BattleEnd::clear_victory() {
  victory_.Clear();
}
inline bool BattleEnd::victory(int index) const {
  return victory_.Get(index);
}
inline void BattleEnd::set_victory(int index, bool value) {
  victory_.Set(index, value);
}
inline void BattleEnd::add_victory(bool value) {
  victory_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
BattleEnd::victory() const {
  return victory_;
}
inline ::google::protobuf::RepeatedField< bool >*
BattleEnd::mutable_victory() {
  return &victory_;
}

// repeated .protobuf.common.KVint3232 rewards = 4;
inline int BattleEnd::rewards_size() const {
  return rewards_.size();
}
inline void BattleEnd::clear_rewards() {
  rewards_.Clear();
}
inline const ::protobuf::common::KVint3232& BattleEnd::rewards(int index) const {
  return rewards_.Get(index);
}
inline ::protobuf::common::KVint3232* BattleEnd::mutable_rewards(int index) {
  return rewards_.Mutable(index);
}
inline ::protobuf::common::KVint3232* BattleEnd::add_rewards() {
  return rewards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >&
BattleEnd::rewards() const {
  return rewards_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >*
BattleEnd::mutable_rewards() {
  return &rewards_;
}

// repeated string points = 5;
inline int BattleEnd::points_size() const {
  return points_.size();
}
inline void BattleEnd::clear_points() {
  points_.Clear();
}
inline const ::std::string& BattleEnd::points(int index) const {
  return points_.Get(index);
}
inline ::std::string* BattleEnd::mutable_points(int index) {
  return points_.Mutable(index);
}
inline void BattleEnd::set_points(int index, const ::std::string& value) {
  points_.Mutable(index)->assign(value);
}
inline void BattleEnd::set_points(int index, const char* value) {
  points_.Mutable(index)->assign(value);
}
inline void BattleEnd::set_points(int index, const char* value, size_t size) {
  points_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BattleEnd::add_points() {
  return points_.Add();
}
inline void BattleEnd::add_points(const ::std::string& value) {
  points_.Add()->assign(value);
}
inline void BattleEnd::add_points(const char* value) {
  points_.Add()->assign(value);
}
inline void BattleEnd::add_points(const char* value, size_t size) {
  points_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BattleEnd::points() const {
  return points_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BattleEnd::mutable_points() {
  return &points_;
}

// required string sign = 6;
inline bool BattleEnd::has_sign() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BattleEnd::set_has_sign() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BattleEnd::clear_has_sign() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BattleEnd::clear_sign() {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    sign_->clear();
  }
  clear_has_sign();
}
inline const ::std::string& BattleEnd::sign() const {
  return *sign_;
}
inline void BattleEnd::set_sign(const ::std::string& value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void BattleEnd::set_sign(const char* value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void BattleEnd::set_sign(const char* value, size_t size) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BattleEnd::mutable_sign() {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  return sign_;
}
inline ::std::string* BattleEnd::release_sign() {
  clear_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sign_;
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 len = 7;
inline bool BattleEnd::has_len() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BattleEnd::set_has_len() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BattleEnd::clear_has_len() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BattleEnd::clear_len() {
  len_ = 0;
  clear_has_len();
}
inline ::google::protobuf::int32 BattleEnd::len() const {
  return len_;
}
inline void BattleEnd::set_len(::google::protobuf::int32 value) {
  set_has_len();
  len_ = value;
}

// repeated .protobuf.newBattle.BattleData data = 8;
inline int BattleEnd::data_size() const {
  return data_.size();
}
inline void BattleEnd::clear_data() {
  data_.Clear();
}
inline const ::protobuf::newBattle::BattleData& BattleEnd::data(int index) const {
  return data_.Get(index);
}
inline ::protobuf::newBattle::BattleData* BattleEnd::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::protobuf::newBattle::BattleData* BattleEnd::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::newBattle::BattleData >&
BattleEnd::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::newBattle::BattleData >*
BattleEnd::mutable_data() {
  return &data_;
}

// optional int64 damage = 9;
inline bool BattleEnd::has_damage() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BattleEnd::set_has_damage() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BattleEnd::clear_has_damage() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BattleEnd::clear_damage() {
  damage_ = GOOGLE_LONGLONG(0);
  clear_has_damage();
}
inline ::google::protobuf::int64 BattleEnd::damage() const {
  return damage_;
}
inline void BattleEnd::set_damage(::google::protobuf::int64 value) {
  set_has_damage();
  damage_ = value;
}

// optional int32 suspectIslandId = 10;
inline bool BattleEnd::has_suspectislandid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BattleEnd::set_has_suspectislandid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BattleEnd::clear_has_suspectislandid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BattleEnd::clear_suspectislandid() {
  suspectislandid_ = 0;
  clear_has_suspectislandid();
}
inline ::google::protobuf::int32 BattleEnd::suspectislandid() const {
  return suspectislandid_;
}
inline void BattleEnd::set_suspectislandid(::google::protobuf::int32 value) {
  set_has_suspectislandid();
  suspectislandid_ = value;
}

// optional int32 isSp = 11;
inline bool BattleEnd::has_issp() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BattleEnd::set_has_issp() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BattleEnd::clear_has_issp() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BattleEnd::clear_issp() {
  issp_ = 0;
  clear_has_issp();
}
inline ::google::protobuf::int32 BattleEnd::issp() const {
  return issp_;
}
inline void BattleEnd::set_issp(::google::protobuf::int32 value) {
  set_has_issp();
  issp_ = value;
}

// repeated .protobuf.common.KVint3232 spRewards = 12;
inline int BattleEnd::sprewards_size() const {
  return sprewards_.size();
}
inline void BattleEnd::clear_sprewards() {
  sprewards_.Clear();
}
inline const ::protobuf::common::KVint3232& BattleEnd::sprewards(int index) const {
  return sprewards_.Get(index);
}
inline ::protobuf::common::KVint3232* BattleEnd::mutable_sprewards(int index) {
  return sprewards_.Mutable(index);
}
inline ::protobuf::common::KVint3232* BattleEnd::add_sprewards() {
  return sprewards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >&
BattleEnd::sprewards() const {
  return sprewards_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >*
BattleEnd::mutable_sprewards() {
  return &sprewards_;
}

// -------------------------------------------------------------------

// BattleRecord

// required string record = 1;
inline bool BattleRecord::has_record() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BattleRecord::set_has_record() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BattleRecord::clear_has_record() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BattleRecord::clear_record() {
  if (record_ != &::google::protobuf::internal::kEmptyString) {
    record_->clear();
  }
  clear_has_record();
}
inline const ::std::string& BattleRecord::record() const {
  return *record_;
}
inline void BattleRecord::set_record(const ::std::string& value) {
  set_has_record();
  if (record_ == &::google::protobuf::internal::kEmptyString) {
    record_ = new ::std::string;
  }
  record_->assign(value);
}
inline void BattleRecord::set_record(const char* value) {
  set_has_record();
  if (record_ == &::google::protobuf::internal::kEmptyString) {
    record_ = new ::std::string;
  }
  record_->assign(value);
}
inline void BattleRecord::set_record(const char* value, size_t size) {
  set_has_record();
  if (record_ == &::google::protobuf::internal::kEmptyString) {
    record_ = new ::std::string;
  }
  record_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BattleRecord::mutable_record() {
  set_has_record();
  if (record_ == &::google::protobuf::internal::kEmptyString) {
    record_ = new ::std::string;
  }
  return record_;
}
inline ::std::string* BattleRecord::release_record() {
  clear_has_record();
  if (record_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = record_;
    record_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 len = 2;
inline bool BattleRecord::has_len() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BattleRecord::set_has_len() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BattleRecord::clear_has_len() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BattleRecord::clear_len() {
  len_ = 0;
  clear_has_len();
}
inline ::google::protobuf::int32 BattleRecord::len() const {
  return len_;
}
inline void BattleRecord::set_len(::google::protobuf::int32 value) {
  set_has_len();
  len_ = value;
}

// -------------------------------------------------------------------

// BattleVideo

// required int32 atPetId = 1;
inline bool BattleVideo::has_atpetid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BattleVideo::set_has_atpetid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BattleVideo::clear_has_atpetid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BattleVideo::clear_atpetid() {
  atpetid_ = 0;
  clear_has_atpetid();
}
inline ::google::protobuf::int32 BattleVideo::atpetid() const {
  return atpetid_;
}
inline void BattleVideo::set_atpetid(::google::protobuf::int32 value) {
  set_has_atpetid();
  atpetid_ = value;
}

// repeated .protobuf.common.Pet atPet = 2;
inline int BattleVideo::atpet_size() const {
  return atpet_.size();
}
inline void BattleVideo::clear_atpet() {
  atpet_.Clear();
}
inline const ::protobuf::common::Pet& BattleVideo::atpet(int index) const {
  return atpet_.Get(index);
}
inline ::protobuf::common::Pet* BattleVideo::mutable_atpet(int index) {
  return atpet_.Mutable(index);
}
inline ::protobuf::common::Pet* BattleVideo::add_atpet() {
  return atpet_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::Pet >&
BattleVideo::atpet() const {
  return atpet_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::Pet >*
BattleVideo::mutable_atpet() {
  return &atpet_;
}

// required int32 dePetId = 3;
inline bool BattleVideo::has_depetid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BattleVideo::set_has_depetid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BattleVideo::clear_has_depetid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BattleVideo::clear_depetid() {
  depetid_ = 0;
  clear_has_depetid();
}
inline ::google::protobuf::int32 BattleVideo::depetid() const {
  return depetid_;
}
inline void BattleVideo::set_depetid(::google::protobuf::int32 value) {
  set_has_depetid();
  depetid_ = value;
}

// repeated .protobuf.common.Pet dePet = 4;
inline int BattleVideo::depet_size() const {
  return depet_.size();
}
inline void BattleVideo::clear_depet() {
  depet_.Clear();
}
inline const ::protobuf::common::Pet& BattleVideo::depet(int index) const {
  return depet_.Get(index);
}
inline ::protobuf::common::Pet* BattleVideo::mutable_depet(int index) {
  return depet_.Mutable(index);
}
inline ::protobuf::common::Pet* BattleVideo::add_depet() {
  return depet_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::Pet >&
BattleVideo::depet() const {
  return depet_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::Pet >*
BattleVideo::mutable_depet() {
  return &depet_;
}

// required string sign = 5;
inline bool BattleVideo::has_sign() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BattleVideo::set_has_sign() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BattleVideo::clear_has_sign() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BattleVideo::clear_sign() {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    sign_->clear();
  }
  clear_has_sign();
}
inline const ::std::string& BattleVideo::sign() const {
  return *sign_;
}
inline void BattleVideo::set_sign(const ::std::string& value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void BattleVideo::set_sign(const char* value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void BattleVideo::set_sign(const char* value, size_t size) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BattleVideo::mutable_sign() {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  return sign_;
}
inline ::std::string* BattleVideo::release_sign() {
  clear_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sign_;
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 len = 6;
inline bool BattleVideo::has_len() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BattleVideo::set_has_len() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BattleVideo::clear_has_len() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BattleVideo::clear_len() {
  len_ = 0;
  clear_has_len();
}
inline ::google::protobuf::int32 BattleVideo::len() const {
  return len_;
}
inline void BattleVideo::set_len(::google::protobuf::int32 value) {
  set_has_len();
  len_ = value;
}

// repeated bool victory = 7;
inline int BattleVideo::victory_size() const {
  return victory_.size();
}
inline void BattleVideo::clear_victory() {
  victory_.Clear();
}
inline bool BattleVideo::victory(int index) const {
  return victory_.Get(index);
}
inline void BattleVideo::set_victory(int index, bool value) {
  victory_.Set(index, value);
}
inline void BattleVideo::add_victory(bool value) {
  victory_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
BattleVideo::victory() const {
  return victory_;
}
inline ::google::protobuf::RepeatedField< bool >*
BattleVideo::mutable_victory() {
  return &victory_;
}

// required int32 type = 8;
inline bool BattleVideo::has_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BattleVideo::set_has_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BattleVideo::clear_has_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BattleVideo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 BattleVideo::type() const {
  return type_;
}
inline void BattleVideo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// BattleData

// required int32 index = 1;
inline bool BattleData::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BattleData::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BattleData::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BattleData::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 BattleData::index() const {
  return index_;
}
inline void BattleData::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// required int32 id = 2;
inline bool BattleData::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BattleData::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BattleData::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BattleData::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 BattleData::id() const {
  return id_;
}
inline void BattleData::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 lv = 3;
inline bool BattleData::has_lv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BattleData::set_has_lv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BattleData::clear_has_lv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BattleData::clear_lv() {
  lv_ = 0;
  clear_has_lv();
}
inline ::google::protobuf::int32 BattleData::lv() const {
  return lv_;
}
inline void BattleData::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
}

// required int32 damage = 4;
inline bool BattleData::has_damage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BattleData::set_has_damage() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BattleData::clear_has_damage() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BattleData::clear_damage() {
  damage_ = 0;
  clear_has_damage();
}
inline ::google::protobuf::int32 BattleData::damage() const {
  return damage_;
}
inline void BattleData::set_damage(::google::protobuf::int32 value) {
  set_has_damage();
  damage_ = value;
}

// required int32 heal = 5;
inline bool BattleData::has_heal() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BattleData::set_has_heal() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BattleData::clear_has_heal() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BattleData::clear_heal() {
  heal_ = 0;
  clear_has_heal();
}
inline ::google::protobuf::int32 BattleData::heal() const {
  return heal_;
}
inline void BattleData::set_heal(::google::protobuf::int32 value) {
  set_has_heal();
  heal_ = value;
}

// required int32 receiveDamage = 6;
inline bool BattleData::has_receivedamage() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BattleData::set_has_receivedamage() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BattleData::clear_has_receivedamage() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BattleData::clear_receivedamage() {
  receivedamage_ = 0;
  clear_has_receivedamage();
}
inline ::google::protobuf::int32 BattleData::receivedamage() const {
  return receivedamage_;
}
inline void BattleData::set_receivedamage(::google::protobuf::int32 value) {
  set_has_receivedamage();
  receivedamage_ = value;
}

// optional string playerId = 7;
inline bool BattleData::has_playerid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BattleData::set_has_playerid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BattleData::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BattleData::clear_playerid() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    playerid_->clear();
  }
  clear_has_playerid();
}
inline const ::std::string& BattleData::playerid() const {
  return *playerid_;
}
inline void BattleData::set_playerid(const ::std::string& value) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(value);
}
inline void BattleData::set_playerid(const char* value) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(value);
}
inline void BattleData::set_playerid(const char* value, size_t size) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BattleData::mutable_playerid() {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  return playerid_;
}
inline ::std::string* BattleData::release_playerid() {
  clear_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playerid_;
    playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// NewBattleStartM

// required int32 type = 1;
inline bool NewBattleStartM::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewBattleStartM::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NewBattleStartM::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NewBattleStartM::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 NewBattleStartM::type() const {
  return type_;
}
inline void NewBattleStartM::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required string enemyId = 2;
inline bool NewBattleStartM::has_enemyid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NewBattleStartM::set_has_enemyid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NewBattleStartM::clear_has_enemyid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NewBattleStartM::clear_enemyid() {
  if (enemyid_ != &::google::protobuf::internal::kEmptyString) {
    enemyid_->clear();
  }
  clear_has_enemyid();
}
inline const ::std::string& NewBattleStartM::enemyid() const {
  return *enemyid_;
}
inline void NewBattleStartM::set_enemyid(const ::std::string& value) {
  set_has_enemyid();
  if (enemyid_ == &::google::protobuf::internal::kEmptyString) {
    enemyid_ = new ::std::string;
  }
  enemyid_->assign(value);
}
inline void NewBattleStartM::set_enemyid(const char* value) {
  set_has_enemyid();
  if (enemyid_ == &::google::protobuf::internal::kEmptyString) {
    enemyid_ = new ::std::string;
  }
  enemyid_->assign(value);
}
inline void NewBattleStartM::set_enemyid(const char* value, size_t size) {
  set_has_enemyid();
  if (enemyid_ == &::google::protobuf::internal::kEmptyString) {
    enemyid_ = new ::std::string;
  }
  enemyid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NewBattleStartM::mutable_enemyid() {
  set_has_enemyid();
  if (enemyid_ == &::google::protobuf::internal::kEmptyString) {
    enemyid_ = new ::std::string;
  }
  return enemyid_;
}
inline ::std::string* NewBattleStartM::release_enemyid() {
  clear_has_enemyid();
  if (enemyid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = enemyid_;
    enemyid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .protobuf.common.LineupTemplate perLineup = 3;
inline int NewBattleStartM::perlineup_size() const {
  return perlineup_.size();
}
inline void NewBattleStartM::clear_perlineup() {
  perlineup_.Clear();
}
inline const ::protobuf::common::LineupTemplate& NewBattleStartM::perlineup(int index) const {
  return perlineup_.Get(index);
}
inline ::protobuf::common::LineupTemplate* NewBattleStartM::mutable_perlineup(int index) {
  return perlineup_.Mutable(index);
}
inline ::protobuf::common::LineupTemplate* NewBattleStartM::add_perlineup() {
  return perlineup_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::LineupTemplate >&
NewBattleStartM::perlineup() const {
  return perlineup_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::LineupTemplate >*
NewBattleStartM::mutable_perlineup() {
  return &perlineup_;
}

// repeated .protobuf.common.Id32 lineupIds = 4;
inline int NewBattleStartM::lineupids_size() const {
  return lineupids_.size();
}
inline void NewBattleStartM::clear_lineupids() {
  lineupids_.Clear();
}
inline const ::protobuf::common::Id32& NewBattleStartM::lineupids(int index) const {
  return lineupids_.Get(index);
}
inline ::protobuf::common::Id32* NewBattleStartM::mutable_lineupids(int index) {
  return lineupids_.Mutable(index);
}
inline ::protobuf::common::Id32* NewBattleStartM::add_lineupids() {
  return lineupids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::Id32 >&
NewBattleStartM::lineupids() const {
  return lineupids_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::Id32 >*
NewBattleStartM::mutable_lineupids() {
  return &lineupids_;
}

// optional int32 attackCnt = 5;
inline bool NewBattleStartM::has_attackcnt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NewBattleStartM::set_has_attackcnt() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NewBattleStartM::clear_has_attackcnt() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NewBattleStartM::clear_attackcnt() {
  attackcnt_ = 0;
  clear_has_attackcnt();
}
inline ::google::protobuf::int32 NewBattleStartM::attackcnt() const {
  return attackcnt_;
}
inline void NewBattleStartM::set_attackcnt(::google::protobuf::int32 value) {
  set_has_attackcnt();
  attackcnt_ = value;
}

// optional bool isSkip = 6;
inline bool NewBattleStartM::has_isskip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NewBattleStartM::set_has_isskip() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NewBattleStartM::clear_has_isskip() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NewBattleStartM::clear_isskip() {
  isskip_ = false;
  clear_has_isskip();
}
inline bool NewBattleStartM::isskip() const {
  return isskip_;
}
inline void NewBattleStartM::set_isskip(bool value) {
  set_has_isskip();
  isskip_ = value;
}

// -------------------------------------------------------------------

// OneBattleData

// repeated .protobuf.newBattle.BattleData data = 1;
inline int OneBattleData::data_size() const {
  return data_.size();
}
inline void OneBattleData::clear_data() {
  data_.Clear();
}
inline const ::protobuf::newBattle::BattleData& OneBattleData::data(int index) const {
  return data_.Get(index);
}
inline ::protobuf::newBattle::BattleData* OneBattleData::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::protobuf::newBattle::BattleData* OneBattleData::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::newBattle::BattleData >&
OneBattleData::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::newBattle::BattleData >*
OneBattleData::mutable_data() {
  return &data_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace newBattle
}  // namespace protobuf

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_newBattle_2eproto__INCLUDED
