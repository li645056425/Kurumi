// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "hero.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protobuf {
namespace hero {

namespace {

const ::google::protobuf::Descriptor* ReplyTierUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyTierUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* JewelUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JewelUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyJewelUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyJewelUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyHeroLvUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyHeroLvUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyHeroDestroy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyHeroDestroy_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArtifactUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArtifactUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyArtifactUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyArtifactUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeEquipment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeEquipment_reflection_ = NULL;
const ::google::protobuf::Descriptor* StrengthenEquipment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StrengthenEquipment_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyChangeEquipment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyChangeEquipment_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChEquipment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChEquipment_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroStarUpAll_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroStarUpAll_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyHeroStarUpAll_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyHeroStarUpAll_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroStarUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroStarUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyHeroStarUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyHeroStarUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyAddHeros_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyAddHeros_reflection_ = NULL;
const ::google::protobuf::Descriptor* PictureInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PictureInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroPictureInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroPictureInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PictureAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PictureAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroPictureAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroPictureAward_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_hero_2eproto() {
  protobuf_AddDesc_hero_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "hero.proto");
  GOOGLE_CHECK(file != NULL);
  ReplyTierUp_descriptor_ = file->message_type(0);
  static const int ReplyTierUp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyTierUp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyTierUp, tier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyTierUp, items_),
  };
  ReplyTierUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyTierUp_descriptor_,
      ReplyTierUp::default_instance_,
      ReplyTierUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyTierUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyTierUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyTierUp));
  JewelUp_descriptor_ = file->message_type(1);
  static const int JewelUp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelUp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelUp, lock_),
  };
  JewelUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JewelUp_descriptor_,
      JewelUp::default_instance_,
      JewelUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JewelUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JewelUp));
  ReplyJewelUp_descriptor_ = file->message_type(2);
  static const int ReplyJewelUp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyJewelUp, jewelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyJewelUp, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyJewelUp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyJewelUp, oldid_),
  };
  ReplyJewelUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyJewelUp_descriptor_,
      ReplyJewelUp::default_instance_,
      ReplyJewelUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyJewelUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyJewelUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyJewelUp));
  ReplyHeroLvUp_descriptor_ = file->message_type(3);
  static const int ReplyHeroLvUp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyHeroLvUp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyHeroLvUp, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyHeroLvUp, items_),
  };
  ReplyHeroLvUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyHeroLvUp_descriptor_,
      ReplyHeroLvUp::default_instance_,
      ReplyHeroLvUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyHeroLvUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyHeroLvUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyHeroLvUp));
  ReplyHeroDestroy_descriptor_ = file->message_type(4);
  static const int ReplyHeroDestroy_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyHeroDestroy, ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyHeroDestroy, items_),
  };
  ReplyHeroDestroy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyHeroDestroy_descriptor_,
      ReplyHeroDestroy::default_instance_,
      ReplyHeroDestroy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyHeroDestroy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyHeroDestroy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyHeroDestroy));
  ArtifactUp_descriptor_ = file->message_type(5);
  static const int ArtifactUp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactUp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactUp, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactUp, lv_),
  };
  ArtifactUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArtifactUp_descriptor_,
      ArtifactUp::default_instance_,
      ArtifactUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArtifactUp));
  ReplyArtifactUp_descriptor_ = file->message_type(6);
  static const int ReplyArtifactUp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyArtifactUp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyArtifactUp, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyArtifactUp, artifactid_),
  };
  ReplyArtifactUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyArtifactUp_descriptor_,
      ReplyArtifactUp::default_instance_,
      ReplyArtifactUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyArtifactUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyArtifactUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyArtifactUp));
  ChangeEquipment_descriptor_ = file->message_type(7);
  static const int ChangeEquipment_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeEquipment, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeEquipment, equipment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeEquipment, guidev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeEquipment, otherid_),
  };
  ChangeEquipment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeEquipment_descriptor_,
      ChangeEquipment::default_instance_,
      ChangeEquipment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeEquipment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeEquipment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeEquipment));
  StrengthenEquipment_descriptor_ = file->message_type(8);
  static const int StrengthenEquipment_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrengthenEquipment, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrengthenEquipment, equipmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrengthenEquipment, materials_),
  };
  StrengthenEquipment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StrengthenEquipment_descriptor_,
      StrengthenEquipment::default_instance_,
      StrengthenEquipment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrengthenEquipment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrengthenEquipment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StrengthenEquipment));
  ReplyChangeEquipment_descriptor_ = file->message_type(9);
  static const int ReplyChangeEquipment_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyChangeEquipment, equipment_),
  };
  ReplyChangeEquipment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyChangeEquipment_descriptor_,
      ReplyChangeEquipment::default_instance_,
      ReplyChangeEquipment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyChangeEquipment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyChangeEquipment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyChangeEquipment));
  ChEquipment_descriptor_ = file->message_type(10);
  static const int ChEquipment_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChEquipment, hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChEquipment, items_),
  };
  ChEquipment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChEquipment_descriptor_,
      ChEquipment::default_instance_,
      ChEquipment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChEquipment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChEquipment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChEquipment));
  HeroStarUpAll_descriptor_ = file->message_type(11);
  static const int HeroStarUpAll_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroStarUpAll, herodata_),
  };
  HeroStarUpAll_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroStarUpAll_descriptor_,
      HeroStarUpAll::default_instance_,
      HeroStarUpAll_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroStarUpAll, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroStarUpAll, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroStarUpAll));
  ReplyHeroStarUpAll_descriptor_ = file->message_type(12);
  static const int ReplyHeroStarUpAll_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyHeroStarUpAll, herodata_),
  };
  ReplyHeroStarUpAll_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyHeroStarUpAll_descriptor_,
      ReplyHeroStarUpAll::default_instance_,
      ReplyHeroStarUpAll_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyHeroStarUpAll, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyHeroStarUpAll, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyHeroStarUpAll));
  HeroStarUp_descriptor_ = file->message_type(13);
  static const int HeroStarUp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroStarUp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroStarUp, ids_),
  };
  HeroStarUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroStarUp_descriptor_,
      HeroStarUp::default_instance_,
      HeroStarUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroStarUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroStarUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroStarUp));
  ReplyHeroStarUp_descriptor_ = file->message_type(14);
  static const int ReplyHeroStarUp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyHeroStarUp, hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyHeroStarUp, ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyHeroStarUp, items_),
  };
  ReplyHeroStarUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyHeroStarUp_descriptor_,
      ReplyHeroStarUp::default_instance_,
      ReplyHeroStarUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyHeroStarUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyHeroStarUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyHeroStarUp));
  ReplyAddHeros_descriptor_ = file->message_type(15);
  static const int ReplyAddHeros_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAddHeros, hero_),
  };
  ReplyAddHeros_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyAddHeros_descriptor_,
      ReplyAddHeros::default_instance_,
      ReplyAddHeros_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAddHeros, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAddHeros, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyAddHeros));
  PictureInfo_descriptor_ = file->message_type(16);
  static const int PictureInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureInfo, pictureid_),
  };
  PictureInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PictureInfo_descriptor_,
      PictureInfo::default_instance_,
      PictureInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PictureInfo));
  HeroPictureInfo_descriptor_ = file->message_type(17);
  static const int HeroPictureInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroPictureInfo, infos_),
  };
  HeroPictureInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroPictureInfo_descriptor_,
      HeroPictureInfo::default_instance_,
      HeroPictureInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroPictureInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroPictureInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroPictureInfo));
  PictureAward_descriptor_ = file->message_type(18);
  static const int PictureAward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureAward, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureAward, pictureid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureAward, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureAward, award_),
  };
  PictureAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PictureAward_descriptor_,
      PictureAward::default_instance_,
      PictureAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PictureAward));
  HeroPictureAward_descriptor_ = file->message_type(19);
  static const int HeroPictureAward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroPictureAward, awards_),
  };
  HeroPictureAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroPictureAward_descriptor_,
      HeroPictureAward::default_instance_,
      HeroPictureAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroPictureAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroPictureAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroPictureAward));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_hero_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyTierUp_descriptor_, &ReplyTierUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JewelUp_descriptor_, &JewelUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyJewelUp_descriptor_, &ReplyJewelUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyHeroLvUp_descriptor_, &ReplyHeroLvUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyHeroDestroy_descriptor_, &ReplyHeroDestroy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArtifactUp_descriptor_, &ArtifactUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyArtifactUp_descriptor_, &ReplyArtifactUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeEquipment_descriptor_, &ChangeEquipment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StrengthenEquipment_descriptor_, &StrengthenEquipment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyChangeEquipment_descriptor_, &ReplyChangeEquipment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChEquipment_descriptor_, &ChEquipment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroStarUpAll_descriptor_, &HeroStarUpAll::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyHeroStarUpAll_descriptor_, &ReplyHeroStarUpAll::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroStarUp_descriptor_, &HeroStarUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyHeroStarUp_descriptor_, &ReplyHeroStarUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyAddHeros_descriptor_, &ReplyAddHeros::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PictureInfo_descriptor_, &PictureInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroPictureInfo_descriptor_, &HeroPictureInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PictureAward_descriptor_, &PictureAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroPictureAward_descriptor_, &HeroPictureAward::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_hero_2eproto() {
  delete ReplyTierUp::default_instance_;
  delete ReplyTierUp_reflection_;
  delete JewelUp::default_instance_;
  delete JewelUp_reflection_;
  delete ReplyJewelUp::default_instance_;
  delete ReplyJewelUp_reflection_;
  delete ReplyHeroLvUp::default_instance_;
  delete ReplyHeroLvUp_reflection_;
  delete ReplyHeroDestroy::default_instance_;
  delete ReplyHeroDestroy_reflection_;
  delete ArtifactUp::default_instance_;
  delete ArtifactUp_reflection_;
  delete ReplyArtifactUp::default_instance_;
  delete ReplyArtifactUp_reflection_;
  delete ChangeEquipment::default_instance_;
  delete ChangeEquipment_reflection_;
  delete StrengthenEquipment::default_instance_;
  delete StrengthenEquipment_reflection_;
  delete ReplyChangeEquipment::default_instance_;
  delete ReplyChangeEquipment_reflection_;
  delete ChEquipment::default_instance_;
  delete ChEquipment_reflection_;
  delete HeroStarUpAll::default_instance_;
  delete HeroStarUpAll_reflection_;
  delete ReplyHeroStarUpAll::default_instance_;
  delete ReplyHeroStarUpAll_reflection_;
  delete HeroStarUp::default_instance_;
  delete HeroStarUp_reflection_;
  delete ReplyHeroStarUp::default_instance_;
  delete ReplyHeroStarUp_reflection_;
  delete ReplyAddHeros::default_instance_;
  delete ReplyAddHeros_reflection_;
  delete PictureInfo::default_instance_;
  delete PictureInfo_reflection_;
  delete HeroPictureInfo::default_instance_;
  delete HeroPictureInfo_reflection_;
  delete PictureAward::default_instance_;
  delete PictureAward_reflection_;
  delete HeroPictureAward::default_instance_;
  delete HeroPictureAward_reflection_;
}

void protobuf_AddDesc_hero_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf::common::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nhero.proto\022\rprotobuf.hero\032\014common.prot"
    "o\"R\n\013ReplyTierUp\022\n\n\002id\030\001 \002(\005\022\014\n\004tier\030\002 \002"
    "(\005\022)\n\005items\030\003 \003(\0132\032.protobuf.common.KVin"
    "t3264\"#\n\007JewelUp\022\n\n\002id\030\001 \002(\005\022\014\n\004lock\030\002 \001"
    "(\010\"e\n\014ReplyJewelUp\022\017\n\007jewelId\030\001 \002(\005\022)\n\005i"
    "tems\030\002 \003(\0132\032.protobuf.common.KVint3264\022\n"
    "\n\002id\030\003 \002(\005\022\r\n\005oldId\030\004 \001(\005\"R\n\rReplyHeroLv"
    "Up\022\n\n\002id\030\001 \002(\005\022\n\n\002lv\030\002 \002(\005\022)\n\005items\030\003 \003("
    "\0132\032.protobuf.common.KVint3264\"e\n\020ReplyHe"
    "roDestroy\022&\n\003ids\030\001 \002(\0132\031.protobuf.common"
    ".ListId32\022)\n\005items\030\002 \003(\0132\032.protobuf.comm"
    "on.KVint3264\"O\n\nArtifactUp\022\n\n\002id\030\001 \002(\005\022)"
    "\n\005items\030\002 \003(\0132\032.protobuf.common.KVint323"
    "2\022\n\n\002lv\030\003 \001(\005\"\\\n\017ReplyArtifactUp\022\n\n\002id\030\001"
    " \002(\005\022)\n\005items\030\002 \003(\0132\032.protobuf.common.KV"
    "int3232\022\022\n\nartifactId\030\003 \002(\005\"m\n\017ChangeEqu"
    "ipment\022\n\n\002id\030\001 \002(\005\022-\n\tequipment\030\002 \003(\0132\032."
    "protobuf.common.KVint3232\022\016\n\006guidev\030\003 \001("
    "\t\022\017\n\007otherId\030\004 \001(\005\"I\n\023StrengthenEquipmen"
    "t\022\n\n\002id\030\001 \001(\005\022\023\n\013equipmentId\030\002 \002(\005\022\021\n\tma"
    "terials\030\003 \003(\005\"E\n\024ReplyChangeEquipment\022-\n"
    "\tequipment\030\001 \003(\0132\032.protobuf.hero.ChEquip"
    "ment\"]\n\013ChEquipment\022#\n\004hero\030\001 \002(\0132\025.prot"
    "obuf.common.Hero\022)\n\005items\030\002 \003(\0132\032.protob"
    "uf.common.KVint3232\"<\n\rHeroStarUpAll\022+\n\010"
    "heroData\030\001 \003(\0132\031.protobuf.hero.HeroStarU"
    "p\"F\n\022ReplyHeroStarUpAll\0220\n\010heroData\030\001 \003("
    "\0132\036.protobuf.hero.ReplyHeroStarUp\"@\n\nHer"
    "oStarUp\022\n\n\002id\030\001 \002(\005\022&\n\003ids\030\002 \002(\0132\031.proto"
    "buf.common.ListId32\"\211\001\n\017ReplyHeroStarUp\022"
    "#\n\004hero\030\001 \002(\0132\025.protobuf.common.Hero\022&\n\003"
    "ids\030\002 \002(\0132\031.protobuf.common.ListId32\022)\n\005"
    "items\030\003 \003(\0132\032.protobuf.common.KVint3264\""
    "4\n\rReplyAddHeros\022#\n\004hero\030\001 \003(\0132\025.protobu"
    "f.common.Hero\".\n\013PictureInfo\022\014\n\004type\030\001 \001"
    "(\005\022\021\n\tpictureId\030\002 \001(\005\"<\n\017HeroPictureInfo"
    "\022)\n\005infos\030\001 \003(\0132\032.protobuf.hero.PictureI"
    "nfo\"j\n\014PictureAward\022\014\n\004type\030\001 \001(\005\022\021\n\tpic"
    "tureId\030\002 \001(\005\022\016\n\006status\030\003 \001(\005\022)\n\005award\030\004 "
    "\003(\0132\032.protobuf.common.KVint3264\"\?\n\020HeroP"
    "ictureAward\022+\n\006awards\030\001 \003(\0132\033.protobuf.h"
    "ero.PictureAwardB \n\023xag.idgo.core.protoB"
    "\tHeroProto", 1690);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "hero.proto", &protobuf_RegisterTypes);
  ReplyTierUp::default_instance_ = new ReplyTierUp();
  JewelUp::default_instance_ = new JewelUp();
  ReplyJewelUp::default_instance_ = new ReplyJewelUp();
  ReplyHeroLvUp::default_instance_ = new ReplyHeroLvUp();
  ReplyHeroDestroy::default_instance_ = new ReplyHeroDestroy();
  ArtifactUp::default_instance_ = new ArtifactUp();
  ReplyArtifactUp::default_instance_ = new ReplyArtifactUp();
  ChangeEquipment::default_instance_ = new ChangeEquipment();
  StrengthenEquipment::default_instance_ = new StrengthenEquipment();
  ReplyChangeEquipment::default_instance_ = new ReplyChangeEquipment();
  ChEquipment::default_instance_ = new ChEquipment();
  HeroStarUpAll::default_instance_ = new HeroStarUpAll();
  ReplyHeroStarUpAll::default_instance_ = new ReplyHeroStarUpAll();
  HeroStarUp::default_instance_ = new HeroStarUp();
  ReplyHeroStarUp::default_instance_ = new ReplyHeroStarUp();
  ReplyAddHeros::default_instance_ = new ReplyAddHeros();
  PictureInfo::default_instance_ = new PictureInfo();
  HeroPictureInfo::default_instance_ = new HeroPictureInfo();
  PictureAward::default_instance_ = new PictureAward();
  HeroPictureAward::default_instance_ = new HeroPictureAward();
  ReplyTierUp::default_instance_->InitAsDefaultInstance();
  JewelUp::default_instance_->InitAsDefaultInstance();
  ReplyJewelUp::default_instance_->InitAsDefaultInstance();
  ReplyHeroLvUp::default_instance_->InitAsDefaultInstance();
  ReplyHeroDestroy::default_instance_->InitAsDefaultInstance();
  ArtifactUp::default_instance_->InitAsDefaultInstance();
  ReplyArtifactUp::default_instance_->InitAsDefaultInstance();
  ChangeEquipment::default_instance_->InitAsDefaultInstance();
  StrengthenEquipment::default_instance_->InitAsDefaultInstance();
  ReplyChangeEquipment::default_instance_->InitAsDefaultInstance();
  ChEquipment::default_instance_->InitAsDefaultInstance();
  HeroStarUpAll::default_instance_->InitAsDefaultInstance();
  ReplyHeroStarUpAll::default_instance_->InitAsDefaultInstance();
  HeroStarUp::default_instance_->InitAsDefaultInstance();
  ReplyHeroStarUp::default_instance_->InitAsDefaultInstance();
  ReplyAddHeros::default_instance_->InitAsDefaultInstance();
  PictureInfo::default_instance_->InitAsDefaultInstance();
  HeroPictureInfo::default_instance_->InitAsDefaultInstance();
  PictureAward::default_instance_->InitAsDefaultInstance();
  HeroPictureAward::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_hero_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_hero_2eproto {
  StaticDescriptorInitializer_hero_2eproto() {
    protobuf_AddDesc_hero_2eproto();
  }
} static_descriptor_initializer_hero_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ReplyTierUp::kIdFieldNumber;
const int ReplyTierUp::kTierFieldNumber;
const int ReplyTierUp::kItemsFieldNumber;
#endif  // !_MSC_VER

ReplyTierUp::ReplyTierUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReplyTierUp::InitAsDefaultInstance() {
}

ReplyTierUp::ReplyTierUp(const ReplyTierUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReplyTierUp::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  tier_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyTierUp::~ReplyTierUp() {
  SharedDtor();
}

void ReplyTierUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReplyTierUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyTierUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyTierUp_descriptor_;
}

const ReplyTierUp& ReplyTierUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();  return *default_instance_;
}

ReplyTierUp* ReplyTierUp::default_instance_ = NULL;

ReplyTierUp* ReplyTierUp::New() const {
  return new ReplyTierUp;
}

void ReplyTierUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    tier_ = 0;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyTierUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tier;
        break;
      }
      
      // required int32 tier = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tier_)));
          set_has_tier();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }
      
      // repeated .protobuf.common.KVint3264 items = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReplyTierUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // required int32 tier = 2;
  if (has_tier()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tier(), output);
  }
  
  // repeated .protobuf.common.KVint3264 items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReplyTierUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // required int32 tier = 2;
  if (has_tier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tier(), target);
  }
  
  // repeated .protobuf.common.KVint3264 items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReplyTierUp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required int32 tier = 2;
    if (has_tier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tier());
    }
    
  }
  // repeated .protobuf.common.KVint3264 items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyTierUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyTierUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyTierUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyTierUp::MergeFrom(const ReplyTierUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_tier()) {
      set_tier(from.tier());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyTierUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyTierUp::CopyFrom(const ReplyTierUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyTierUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void ReplyTierUp::Swap(ReplyTierUp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(tier_, other->tier_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyTierUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyTierUp_descriptor_;
  metadata.reflection = ReplyTierUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JewelUp::kIdFieldNumber;
const int JewelUp::kLockFieldNumber;
#endif  // !_MSC_VER

JewelUp::JewelUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JewelUp::InitAsDefaultInstance() {
}

JewelUp::JewelUp(const JewelUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JewelUp::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  lock_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JewelUp::~JewelUp() {
  SharedDtor();
}

void JewelUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JewelUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JewelUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JewelUp_descriptor_;
}

const JewelUp& JewelUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();  return *default_instance_;
}

JewelUp* JewelUp::default_instance_ = NULL;

JewelUp* JewelUp::New() const {
  return new JewelUp;
}

void JewelUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    lock_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JewelUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lock;
        break;
      }
      
      // optional bool lock = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lock_)));
          set_has_lock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JewelUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional bool lock = 2;
  if (has_lock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->lock(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JewelUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional bool lock = 2;
  if (has_lock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->lock(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JewelUp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional bool lock = 2;
    if (has_lock()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JewelUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JewelUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JewelUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JewelUp::MergeFrom(const JewelUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_lock()) {
      set_lock(from.lock());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JewelUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JewelUp::CopyFrom(const JewelUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JewelUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void JewelUp::Swap(JewelUp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(lock_, other->lock_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JewelUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JewelUp_descriptor_;
  metadata.reflection = JewelUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyJewelUp::kJewelIdFieldNumber;
const int ReplyJewelUp::kItemsFieldNumber;
const int ReplyJewelUp::kIdFieldNumber;
const int ReplyJewelUp::kOldIdFieldNumber;
#endif  // !_MSC_VER

ReplyJewelUp::ReplyJewelUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReplyJewelUp::InitAsDefaultInstance() {
}

ReplyJewelUp::ReplyJewelUp(const ReplyJewelUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReplyJewelUp::SharedCtor() {
  _cached_size_ = 0;
  jewelid_ = 0;
  id_ = 0;
  oldid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyJewelUp::~ReplyJewelUp() {
  SharedDtor();
}

void ReplyJewelUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReplyJewelUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyJewelUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyJewelUp_descriptor_;
}

const ReplyJewelUp& ReplyJewelUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();  return *default_instance_;
}

ReplyJewelUp* ReplyJewelUp::default_instance_ = NULL;

ReplyJewelUp* ReplyJewelUp::New() const {
  return new ReplyJewelUp;
}

void ReplyJewelUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    jewelid_ = 0;
    id_ = 0;
    oldid_ = 0;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyJewelUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 jewelId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jewelid_)));
          set_has_jewelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }
      
      // repeated .protobuf.common.KVint3264 items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }
      
      // required int32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_oldId;
        break;
      }
      
      // optional int32 oldId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oldId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oldid_)));
          set_has_oldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReplyJewelUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 jewelId = 1;
  if (has_jewelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->jewelid(), output);
  }
  
  // repeated .protobuf.common.KVint3264 items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }
  
  // required int32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }
  
  // optional int32 oldId = 4;
  if (has_oldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->oldid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReplyJewelUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 jewelId = 1;
  if (has_jewelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->jewelid(), target);
  }
  
  // repeated .protobuf.common.KVint3264 items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }
  
  // required int32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }
  
  // optional int32 oldId = 4;
  if (has_oldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->oldid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReplyJewelUp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 jewelId = 1;
    if (has_jewelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jewelid());
    }
    
    // required int32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 oldId = 4;
    if (has_oldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oldid());
    }
    
  }
  // repeated .protobuf.common.KVint3264 items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyJewelUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyJewelUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyJewelUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyJewelUp::MergeFrom(const ReplyJewelUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_jewelid()) {
      set_jewelid(from.jewelid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_oldid()) {
      set_oldid(from.oldid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyJewelUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyJewelUp::CopyFrom(const ReplyJewelUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyJewelUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void ReplyJewelUp::Swap(ReplyJewelUp* other) {
  if (other != this) {
    std::swap(jewelid_, other->jewelid_);
    items_.Swap(&other->items_);
    std::swap(id_, other->id_);
    std::swap(oldid_, other->oldid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyJewelUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyJewelUp_descriptor_;
  metadata.reflection = ReplyJewelUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyHeroLvUp::kIdFieldNumber;
const int ReplyHeroLvUp::kLvFieldNumber;
const int ReplyHeroLvUp::kItemsFieldNumber;
#endif  // !_MSC_VER

ReplyHeroLvUp::ReplyHeroLvUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReplyHeroLvUp::InitAsDefaultInstance() {
}

ReplyHeroLvUp::ReplyHeroLvUp(const ReplyHeroLvUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReplyHeroLvUp::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  lv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyHeroLvUp::~ReplyHeroLvUp() {
  SharedDtor();
}

void ReplyHeroLvUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReplyHeroLvUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyHeroLvUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyHeroLvUp_descriptor_;
}

const ReplyHeroLvUp& ReplyHeroLvUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();  return *default_instance_;
}

ReplyHeroLvUp* ReplyHeroLvUp::default_instance_ = NULL;

ReplyHeroLvUp* ReplyHeroLvUp::New() const {
  return new ReplyHeroLvUp;
}

void ReplyHeroLvUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    lv_ = 0;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyHeroLvUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lv;
        break;
      }
      
      // required int32 lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }
      
      // repeated .protobuf.common.KVint3264 items = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReplyHeroLvUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // required int32 lv = 2;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lv(), output);
  }
  
  // repeated .protobuf.common.KVint3264 items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReplyHeroLvUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // required int32 lv = 2;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lv(), target);
  }
  
  // repeated .protobuf.common.KVint3264 items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReplyHeroLvUp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required int32 lv = 2;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }
    
  }
  // repeated .protobuf.common.KVint3264 items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyHeroLvUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyHeroLvUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyHeroLvUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyHeroLvUp::MergeFrom(const ReplyHeroLvUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyHeroLvUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyHeroLvUp::CopyFrom(const ReplyHeroLvUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyHeroLvUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void ReplyHeroLvUp::Swap(ReplyHeroLvUp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(lv_, other->lv_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyHeroLvUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyHeroLvUp_descriptor_;
  metadata.reflection = ReplyHeroLvUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyHeroDestroy::kIdsFieldNumber;
const int ReplyHeroDestroy::kItemsFieldNumber;
#endif  // !_MSC_VER

ReplyHeroDestroy::ReplyHeroDestroy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReplyHeroDestroy::InitAsDefaultInstance() {
  ids_ = const_cast< ::protobuf::common::ListId32*>(&::protobuf::common::ListId32::default_instance());
}

ReplyHeroDestroy::ReplyHeroDestroy(const ReplyHeroDestroy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReplyHeroDestroy::SharedCtor() {
  _cached_size_ = 0;
  ids_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyHeroDestroy::~ReplyHeroDestroy() {
  SharedDtor();
}

void ReplyHeroDestroy::SharedDtor() {
  if (this != default_instance_) {
    delete ids_;
  }
}

void ReplyHeroDestroy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyHeroDestroy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyHeroDestroy_descriptor_;
}

const ReplyHeroDestroy& ReplyHeroDestroy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();  return *default_instance_;
}

ReplyHeroDestroy* ReplyHeroDestroy::default_instance_ = NULL;

ReplyHeroDestroy* ReplyHeroDestroy::New() const {
  return new ReplyHeroDestroy;
}

void ReplyHeroDestroy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ids()) {
      if (ids_ != NULL) ids_->::protobuf::common::ListId32::Clear();
    }
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyHeroDestroy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protobuf.common.ListId32 ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }
      
      // repeated .protobuf.common.KVint3264 items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReplyHeroDestroy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protobuf.common.ListId32 ids = 1;
  if (has_ids()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ids(), output);
  }
  
  // repeated .protobuf.common.KVint3264 items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReplyHeroDestroy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protobuf.common.ListId32 ids = 1;
  if (has_ids()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ids(), target);
  }
  
  // repeated .protobuf.common.KVint3264 items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReplyHeroDestroy::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protobuf.common.ListId32 ids = 1;
    if (has_ids()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ids());
    }
    
  }
  // repeated .protobuf.common.KVint3264 items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyHeroDestroy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyHeroDestroy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyHeroDestroy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyHeroDestroy::MergeFrom(const ReplyHeroDestroy& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ids()) {
      mutable_ids()->::protobuf::common::ListId32::MergeFrom(from.ids());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyHeroDestroy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyHeroDestroy::CopyFrom(const ReplyHeroDestroy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyHeroDestroy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void ReplyHeroDestroy::Swap(ReplyHeroDestroy* other) {
  if (other != this) {
    std::swap(ids_, other->ids_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyHeroDestroy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyHeroDestroy_descriptor_;
  metadata.reflection = ReplyHeroDestroy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArtifactUp::kIdFieldNumber;
const int ArtifactUp::kItemsFieldNumber;
const int ArtifactUp::kLvFieldNumber;
#endif  // !_MSC_VER

ArtifactUp::ArtifactUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArtifactUp::InitAsDefaultInstance() {
}

ArtifactUp::ArtifactUp(const ArtifactUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArtifactUp::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  lv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArtifactUp::~ArtifactUp() {
  SharedDtor();
}

void ArtifactUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArtifactUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArtifactUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArtifactUp_descriptor_;
}

const ArtifactUp& ArtifactUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();  return *default_instance_;
}

ArtifactUp* ArtifactUp::default_instance_ = NULL;

ArtifactUp* ArtifactUp::New() const {
  return new ArtifactUp;
}

void ArtifactUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    lv_ = 0;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArtifactUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }
      
      // repeated .protobuf.common.KVint3232 items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectTag(24)) goto parse_lv;
        break;
      }
      
      // optional int32 lv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArtifactUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // repeated .protobuf.common.KVint3232 items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }
  
  // optional int32 lv = 3;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lv(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArtifactUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // repeated .protobuf.common.KVint3232 items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }
  
  // optional int32 lv = 3;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lv(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArtifactUp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 lv = 3;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }
    
  }
  // repeated .protobuf.common.KVint3232 items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArtifactUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArtifactUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArtifactUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArtifactUp::MergeFrom(const ArtifactUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArtifactUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArtifactUp::CopyFrom(const ArtifactUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtifactUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void ArtifactUp::Swap(ArtifactUp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    items_.Swap(&other->items_);
    std::swap(lv_, other->lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArtifactUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArtifactUp_descriptor_;
  metadata.reflection = ArtifactUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyArtifactUp::kIdFieldNumber;
const int ReplyArtifactUp::kItemsFieldNumber;
const int ReplyArtifactUp::kArtifactIdFieldNumber;
#endif  // !_MSC_VER

ReplyArtifactUp::ReplyArtifactUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReplyArtifactUp::InitAsDefaultInstance() {
}

ReplyArtifactUp::ReplyArtifactUp(const ReplyArtifactUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReplyArtifactUp::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  artifactid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyArtifactUp::~ReplyArtifactUp() {
  SharedDtor();
}

void ReplyArtifactUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReplyArtifactUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyArtifactUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyArtifactUp_descriptor_;
}

const ReplyArtifactUp& ReplyArtifactUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();  return *default_instance_;
}

ReplyArtifactUp* ReplyArtifactUp::default_instance_ = NULL;

ReplyArtifactUp* ReplyArtifactUp::New() const {
  return new ReplyArtifactUp;
}

void ReplyArtifactUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    artifactid_ = 0;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyArtifactUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }
      
      // repeated .protobuf.common.KVint3232 items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectTag(24)) goto parse_artifactId;
        break;
      }
      
      // required int32 artifactId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_artifactId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &artifactid_)));
          set_has_artifactid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReplyArtifactUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // repeated .protobuf.common.KVint3232 items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }
  
  // required int32 artifactId = 3;
  if (has_artifactid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->artifactid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReplyArtifactUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // repeated .protobuf.common.KVint3232 items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }
  
  // required int32 artifactId = 3;
  if (has_artifactid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->artifactid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReplyArtifactUp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required int32 artifactId = 3;
    if (has_artifactid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->artifactid());
    }
    
  }
  // repeated .protobuf.common.KVint3232 items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyArtifactUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyArtifactUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyArtifactUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyArtifactUp::MergeFrom(const ReplyArtifactUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_artifactid()) {
      set_artifactid(from.artifactid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyArtifactUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyArtifactUp::CopyFrom(const ReplyArtifactUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyArtifactUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void ReplyArtifactUp::Swap(ReplyArtifactUp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    items_.Swap(&other->items_);
    std::swap(artifactid_, other->artifactid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyArtifactUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyArtifactUp_descriptor_;
  metadata.reflection = ReplyArtifactUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeEquipment::kIdFieldNumber;
const int ChangeEquipment::kEquipmentFieldNumber;
const int ChangeEquipment::kGuidevFieldNumber;
const int ChangeEquipment::kOtherIdFieldNumber;
#endif  // !_MSC_VER

ChangeEquipment::ChangeEquipment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeEquipment::InitAsDefaultInstance() {
}

ChangeEquipment::ChangeEquipment(const ChangeEquipment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeEquipment::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  guidev_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  otherid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeEquipment::~ChangeEquipment() {
  SharedDtor();
}

void ChangeEquipment::SharedDtor() {
  if (guidev_ != &::google::protobuf::internal::kEmptyString) {
    delete guidev_;
  }
  if (this != default_instance_) {
  }
}

void ChangeEquipment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeEquipment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeEquipment_descriptor_;
}

const ChangeEquipment& ChangeEquipment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();  return *default_instance_;
}

ChangeEquipment* ChangeEquipment::default_instance_ = NULL;

ChangeEquipment* ChangeEquipment::New() const {
  return new ChangeEquipment;
}

void ChangeEquipment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_guidev()) {
      if (guidev_ != &::google::protobuf::internal::kEmptyString) {
        guidev_->clear();
      }
    }
    otherid_ = 0;
  }
  equipment_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeEquipment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equipment;
        break;
      }
      
      // repeated .protobuf.common.KVint3232 equipment = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equipment;
        if (input->ExpectTag(26)) goto parse_guidev;
        break;
      }
      
      // optional string guidev = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guidev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guidev()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guidev().data(), this->guidev().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_otherId;
        break;
      }
      
      // optional int32 otherId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_otherId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &otherid_)));
          set_has_otherid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeEquipment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // repeated .protobuf.common.KVint3232 equipment = 2;
  for (int i = 0; i < this->equipment_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equipment(i), output);
  }
  
  // optional string guidev = 3;
  if (has_guidev()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guidev().data(), this->guidev().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->guidev(), output);
  }
  
  // optional int32 otherId = 4;
  if (has_otherid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->otherid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeEquipment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // repeated .protobuf.common.KVint3232 equipment = 2;
  for (int i = 0; i < this->equipment_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equipment(i), target);
  }
  
  // optional string guidev = 3;
  if (has_guidev()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guidev().data(), this->guidev().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->guidev(), target);
  }
  
  // optional int32 otherId = 4;
  if (has_otherid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->otherid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeEquipment::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string guidev = 3;
    if (has_guidev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guidev());
    }
    
    // optional int32 otherId = 4;
    if (has_otherid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->otherid());
    }
    
  }
  // repeated .protobuf.common.KVint3232 equipment = 2;
  total_size += 1 * this->equipment_size();
  for (int i = 0; i < this->equipment_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipment(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeEquipment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeEquipment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeEquipment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeEquipment::MergeFrom(const ChangeEquipment& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipment_.MergeFrom(from.equipment_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_guidev()) {
      set_guidev(from.guidev());
    }
    if (from.has_otherid()) {
      set_otherid(from.otherid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeEquipment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeEquipment::CopyFrom(const ChangeEquipment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeEquipment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < equipment_size(); i++) {
    if (!this->equipment(i).IsInitialized()) return false;
  }
  return true;
}

void ChangeEquipment::Swap(ChangeEquipment* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    equipment_.Swap(&other->equipment_);
    std::swap(guidev_, other->guidev_);
    std::swap(otherid_, other->otherid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeEquipment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeEquipment_descriptor_;
  metadata.reflection = ChangeEquipment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StrengthenEquipment::kIdFieldNumber;
const int StrengthenEquipment::kEquipmentIdFieldNumber;
const int StrengthenEquipment::kMaterialsFieldNumber;
#endif  // !_MSC_VER

StrengthenEquipment::StrengthenEquipment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StrengthenEquipment::InitAsDefaultInstance() {
}

StrengthenEquipment::StrengthenEquipment(const StrengthenEquipment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StrengthenEquipment::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  equipmentid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StrengthenEquipment::~StrengthenEquipment() {
  SharedDtor();
}

void StrengthenEquipment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StrengthenEquipment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StrengthenEquipment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StrengthenEquipment_descriptor_;
}

const StrengthenEquipment& StrengthenEquipment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();  return *default_instance_;
}

StrengthenEquipment* StrengthenEquipment::default_instance_ = NULL;

StrengthenEquipment* StrengthenEquipment::New() const {
  return new StrengthenEquipment;
}

void StrengthenEquipment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    equipmentid_ = 0;
  }
  materials_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StrengthenEquipment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equipmentId;
        break;
      }
      
      // required int32 equipmentId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipmentId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equipmentid_)));
          set_has_equipmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_materials;
        break;
      }
      
      // repeated int32 materials = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_materials:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_materials())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_materials())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_materials;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StrengthenEquipment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // required int32 equipmentId = 2;
  if (has_equipmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->equipmentid(), output);
  }
  
  // repeated int32 materials = 3;
  for (int i = 0; i < this->materials_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->materials(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StrengthenEquipment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // required int32 equipmentId = 2;
  if (has_equipmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->equipmentid(), target);
  }
  
  // repeated int32 materials = 3;
  for (int i = 0; i < this->materials_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->materials(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StrengthenEquipment::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required int32 equipmentId = 2;
    if (has_equipmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equipmentid());
    }
    
  }
  // repeated int32 materials = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->materials_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->materials(i));
    }
    total_size += 1 * this->materials_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StrengthenEquipment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StrengthenEquipment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StrengthenEquipment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StrengthenEquipment::MergeFrom(const StrengthenEquipment& from) {
  GOOGLE_CHECK_NE(&from, this);
  materials_.MergeFrom(from.materials_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_equipmentid()) {
      set_equipmentid(from.equipmentid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StrengthenEquipment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StrengthenEquipment::CopyFrom(const StrengthenEquipment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StrengthenEquipment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void StrengthenEquipment::Swap(StrengthenEquipment* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(equipmentid_, other->equipmentid_);
    materials_.Swap(&other->materials_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StrengthenEquipment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StrengthenEquipment_descriptor_;
  metadata.reflection = StrengthenEquipment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyChangeEquipment::kEquipmentFieldNumber;
#endif  // !_MSC_VER

ReplyChangeEquipment::ReplyChangeEquipment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReplyChangeEquipment::InitAsDefaultInstance() {
}

ReplyChangeEquipment::ReplyChangeEquipment(const ReplyChangeEquipment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReplyChangeEquipment::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyChangeEquipment::~ReplyChangeEquipment() {
  SharedDtor();
}

void ReplyChangeEquipment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReplyChangeEquipment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyChangeEquipment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyChangeEquipment_descriptor_;
}

const ReplyChangeEquipment& ReplyChangeEquipment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();  return *default_instance_;
}

ReplyChangeEquipment* ReplyChangeEquipment::default_instance_ = NULL;

ReplyChangeEquipment* ReplyChangeEquipment::New() const {
  return new ReplyChangeEquipment;
}

void ReplyChangeEquipment::Clear() {
  equipment_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyChangeEquipment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.hero.ChEquipment equipment = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_equipment;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReplyChangeEquipment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.hero.ChEquipment equipment = 1;
  for (int i = 0; i < this->equipment_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equipment(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReplyChangeEquipment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.hero.ChEquipment equipment = 1;
  for (int i = 0; i < this->equipment_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equipment(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReplyChangeEquipment::ByteSize() const {
  int total_size = 0;
  
  // repeated .protobuf.hero.ChEquipment equipment = 1;
  total_size += 1 * this->equipment_size();
  for (int i = 0; i < this->equipment_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipment(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyChangeEquipment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyChangeEquipment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyChangeEquipment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyChangeEquipment::MergeFrom(const ReplyChangeEquipment& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipment_.MergeFrom(from.equipment_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyChangeEquipment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyChangeEquipment::CopyFrom(const ReplyChangeEquipment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyChangeEquipment::IsInitialized() const {
  
  for (int i = 0; i < equipment_size(); i++) {
    if (!this->equipment(i).IsInitialized()) return false;
  }
  return true;
}

void ReplyChangeEquipment::Swap(ReplyChangeEquipment* other) {
  if (other != this) {
    equipment_.Swap(&other->equipment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyChangeEquipment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyChangeEquipment_descriptor_;
  metadata.reflection = ReplyChangeEquipment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChEquipment::kHeroFieldNumber;
const int ChEquipment::kItemsFieldNumber;
#endif  // !_MSC_VER

ChEquipment::ChEquipment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChEquipment::InitAsDefaultInstance() {
  hero_ = const_cast< ::protobuf::common::Hero*>(&::protobuf::common::Hero::default_instance());
}

ChEquipment::ChEquipment(const ChEquipment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChEquipment::SharedCtor() {
  _cached_size_ = 0;
  hero_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChEquipment::~ChEquipment() {
  SharedDtor();
}

void ChEquipment::SharedDtor() {
  if (this != default_instance_) {
    delete hero_;
  }
}

void ChEquipment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChEquipment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChEquipment_descriptor_;
}

const ChEquipment& ChEquipment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();  return *default_instance_;
}

ChEquipment* ChEquipment::default_instance_ = NULL;

ChEquipment* ChEquipment::New() const {
  return new ChEquipment;
}

void ChEquipment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_hero()) {
      if (hero_ != NULL) hero_->::protobuf::common::Hero::Clear();
    }
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChEquipment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protobuf.common.Hero hero = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hero()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }
      
      // repeated .protobuf.common.KVint3232 items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChEquipment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protobuf.common.Hero hero = 1;
  if (has_hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hero(), output);
  }
  
  // repeated .protobuf.common.KVint3232 items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChEquipment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protobuf.common.Hero hero = 1;
  if (has_hero()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hero(), target);
  }
  
  // repeated .protobuf.common.KVint3232 items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChEquipment::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protobuf.common.Hero hero = 1;
    if (has_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hero());
    }
    
  }
  // repeated .protobuf.common.KVint3232 items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChEquipment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChEquipment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChEquipment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChEquipment::MergeFrom(const ChEquipment& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero()) {
      mutable_hero()->::protobuf::common::Hero::MergeFrom(from.hero());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChEquipment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChEquipment::CopyFrom(const ChEquipment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChEquipment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_hero()) {
    if (!this->hero().IsInitialized()) return false;
  }
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void ChEquipment::Swap(ChEquipment* other) {
  if (other != this) {
    std::swap(hero_, other->hero_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChEquipment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChEquipment_descriptor_;
  metadata.reflection = ChEquipment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroStarUpAll::kHeroDataFieldNumber;
#endif  // !_MSC_VER

HeroStarUpAll::HeroStarUpAll()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeroStarUpAll::InitAsDefaultInstance() {
}

HeroStarUpAll::HeroStarUpAll(const HeroStarUpAll& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeroStarUpAll::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroStarUpAll::~HeroStarUpAll() {
  SharedDtor();
}

void HeroStarUpAll::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeroStarUpAll::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroStarUpAll::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroStarUpAll_descriptor_;
}

const HeroStarUpAll& HeroStarUpAll::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();  return *default_instance_;
}

HeroStarUpAll* HeroStarUpAll::default_instance_ = NULL;

HeroStarUpAll* HeroStarUpAll::New() const {
  return new HeroStarUpAll;
}

void HeroStarUpAll::Clear() {
  herodata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroStarUpAll::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.hero.HeroStarUp heroData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heroData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_herodata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_heroData;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeroStarUpAll::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.hero.HeroStarUp heroData = 1;
  for (int i = 0; i < this->herodata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->herodata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeroStarUpAll::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.hero.HeroStarUp heroData = 1;
  for (int i = 0; i < this->herodata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->herodata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeroStarUpAll::ByteSize() const {
  int total_size = 0;
  
  // repeated .protobuf.hero.HeroStarUp heroData = 1;
  total_size += 1 * this->herodata_size();
  for (int i = 0; i < this->herodata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->herodata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroStarUpAll::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroStarUpAll* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroStarUpAll*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroStarUpAll::MergeFrom(const HeroStarUpAll& from) {
  GOOGLE_CHECK_NE(&from, this);
  herodata_.MergeFrom(from.herodata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroStarUpAll::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroStarUpAll::CopyFrom(const HeroStarUpAll& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroStarUpAll::IsInitialized() const {
  
  for (int i = 0; i < herodata_size(); i++) {
    if (!this->herodata(i).IsInitialized()) return false;
  }
  return true;
}

void HeroStarUpAll::Swap(HeroStarUpAll* other) {
  if (other != this) {
    herodata_.Swap(&other->herodata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroStarUpAll::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroStarUpAll_descriptor_;
  metadata.reflection = HeroStarUpAll_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyHeroStarUpAll::kHeroDataFieldNumber;
#endif  // !_MSC_VER

ReplyHeroStarUpAll::ReplyHeroStarUpAll()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReplyHeroStarUpAll::InitAsDefaultInstance() {
}

ReplyHeroStarUpAll::ReplyHeroStarUpAll(const ReplyHeroStarUpAll& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReplyHeroStarUpAll::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyHeroStarUpAll::~ReplyHeroStarUpAll() {
  SharedDtor();
}

void ReplyHeroStarUpAll::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReplyHeroStarUpAll::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyHeroStarUpAll::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyHeroStarUpAll_descriptor_;
}

const ReplyHeroStarUpAll& ReplyHeroStarUpAll::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();  return *default_instance_;
}

ReplyHeroStarUpAll* ReplyHeroStarUpAll::default_instance_ = NULL;

ReplyHeroStarUpAll* ReplyHeroStarUpAll::New() const {
  return new ReplyHeroStarUpAll;
}

void ReplyHeroStarUpAll::Clear() {
  herodata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyHeroStarUpAll::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.hero.ReplyHeroStarUp heroData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heroData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_herodata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_heroData;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReplyHeroStarUpAll::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.hero.ReplyHeroStarUp heroData = 1;
  for (int i = 0; i < this->herodata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->herodata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReplyHeroStarUpAll::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.hero.ReplyHeroStarUp heroData = 1;
  for (int i = 0; i < this->herodata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->herodata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReplyHeroStarUpAll::ByteSize() const {
  int total_size = 0;
  
  // repeated .protobuf.hero.ReplyHeroStarUp heroData = 1;
  total_size += 1 * this->herodata_size();
  for (int i = 0; i < this->herodata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->herodata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyHeroStarUpAll::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyHeroStarUpAll* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyHeroStarUpAll*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyHeroStarUpAll::MergeFrom(const ReplyHeroStarUpAll& from) {
  GOOGLE_CHECK_NE(&from, this);
  herodata_.MergeFrom(from.herodata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyHeroStarUpAll::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyHeroStarUpAll::CopyFrom(const ReplyHeroStarUpAll& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyHeroStarUpAll::IsInitialized() const {
  
  for (int i = 0; i < herodata_size(); i++) {
    if (!this->herodata(i).IsInitialized()) return false;
  }
  return true;
}

void ReplyHeroStarUpAll::Swap(ReplyHeroStarUpAll* other) {
  if (other != this) {
    herodata_.Swap(&other->herodata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyHeroStarUpAll::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyHeroStarUpAll_descriptor_;
  metadata.reflection = ReplyHeroStarUpAll_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroStarUp::kIdFieldNumber;
const int HeroStarUp::kIdsFieldNumber;
#endif  // !_MSC_VER

HeroStarUp::HeroStarUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeroStarUp::InitAsDefaultInstance() {
  ids_ = const_cast< ::protobuf::common::ListId32*>(&::protobuf::common::ListId32::default_instance());
}

HeroStarUp::HeroStarUp(const HeroStarUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeroStarUp::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ids_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroStarUp::~HeroStarUp() {
  SharedDtor();
}

void HeroStarUp::SharedDtor() {
  if (this != default_instance_) {
    delete ids_;
  }
}

void HeroStarUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroStarUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroStarUp_descriptor_;
}

const HeroStarUp& HeroStarUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();  return *default_instance_;
}

HeroStarUp* HeroStarUp::default_instance_ = NULL;

HeroStarUp* HeroStarUp::New() const {
  return new HeroStarUp;
}

void HeroStarUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_ids()) {
      if (ids_ != NULL) ids_->::protobuf::common::ListId32::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroStarUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ids;
        break;
      }
      
      // required .protobuf.common.ListId32 ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeroStarUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // required .protobuf.common.ListId32 ids = 2;
  if (has_ids()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ids(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeroStarUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // required .protobuf.common.ListId32 ids = 2;
  if (has_ids()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ids(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeroStarUp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required .protobuf.common.ListId32 ids = 2;
    if (has_ids()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ids());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroStarUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroStarUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroStarUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroStarUp::MergeFrom(const HeroStarUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ids()) {
      mutable_ids()->::protobuf::common::ListId32::MergeFrom(from.ids());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroStarUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroStarUp::CopyFrom(const HeroStarUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroStarUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void HeroStarUp::Swap(HeroStarUp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ids_, other->ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroStarUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroStarUp_descriptor_;
  metadata.reflection = HeroStarUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyHeroStarUp::kHeroFieldNumber;
const int ReplyHeroStarUp::kIdsFieldNumber;
const int ReplyHeroStarUp::kItemsFieldNumber;
#endif  // !_MSC_VER

ReplyHeroStarUp::ReplyHeroStarUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReplyHeroStarUp::InitAsDefaultInstance() {
  hero_ = const_cast< ::protobuf::common::Hero*>(&::protobuf::common::Hero::default_instance());
  ids_ = const_cast< ::protobuf::common::ListId32*>(&::protobuf::common::ListId32::default_instance());
}

ReplyHeroStarUp::ReplyHeroStarUp(const ReplyHeroStarUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReplyHeroStarUp::SharedCtor() {
  _cached_size_ = 0;
  hero_ = NULL;
  ids_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyHeroStarUp::~ReplyHeroStarUp() {
  SharedDtor();
}

void ReplyHeroStarUp::SharedDtor() {
  if (this != default_instance_) {
    delete hero_;
    delete ids_;
  }
}

void ReplyHeroStarUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyHeroStarUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyHeroStarUp_descriptor_;
}

const ReplyHeroStarUp& ReplyHeroStarUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();  return *default_instance_;
}

ReplyHeroStarUp* ReplyHeroStarUp::default_instance_ = NULL;

ReplyHeroStarUp* ReplyHeroStarUp::New() const {
  return new ReplyHeroStarUp;
}

void ReplyHeroStarUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_hero()) {
      if (hero_ != NULL) hero_->::protobuf::common::Hero::Clear();
    }
    if (has_ids()) {
      if (ids_ != NULL) ids_->::protobuf::common::ListId32::Clear();
    }
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyHeroStarUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protobuf.common.Hero hero = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hero()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ids;
        break;
      }
      
      // required .protobuf.common.ListId32 ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }
      
      // repeated .protobuf.common.KVint3264 items = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReplyHeroStarUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protobuf.common.Hero hero = 1;
  if (has_hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hero(), output);
  }
  
  // required .protobuf.common.ListId32 ids = 2;
  if (has_ids()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ids(), output);
  }
  
  // repeated .protobuf.common.KVint3264 items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReplyHeroStarUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protobuf.common.Hero hero = 1;
  if (has_hero()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hero(), target);
  }
  
  // required .protobuf.common.ListId32 ids = 2;
  if (has_ids()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ids(), target);
  }
  
  // repeated .protobuf.common.KVint3264 items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReplyHeroStarUp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protobuf.common.Hero hero = 1;
    if (has_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hero());
    }
    
    // required .protobuf.common.ListId32 ids = 2;
    if (has_ids()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ids());
    }
    
  }
  // repeated .protobuf.common.KVint3264 items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyHeroStarUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyHeroStarUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyHeroStarUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyHeroStarUp::MergeFrom(const ReplyHeroStarUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero()) {
      mutable_hero()->::protobuf::common::Hero::MergeFrom(from.hero());
    }
    if (from.has_ids()) {
      mutable_ids()->::protobuf::common::ListId32::MergeFrom(from.ids());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyHeroStarUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyHeroStarUp::CopyFrom(const ReplyHeroStarUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyHeroStarUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_hero()) {
    if (!this->hero().IsInitialized()) return false;
  }
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void ReplyHeroStarUp::Swap(ReplyHeroStarUp* other) {
  if (other != this) {
    std::swap(hero_, other->hero_);
    std::swap(ids_, other->ids_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyHeroStarUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyHeroStarUp_descriptor_;
  metadata.reflection = ReplyHeroStarUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyAddHeros::kHeroFieldNumber;
#endif  // !_MSC_VER

ReplyAddHeros::ReplyAddHeros()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReplyAddHeros::InitAsDefaultInstance() {
}

ReplyAddHeros::ReplyAddHeros(const ReplyAddHeros& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReplyAddHeros::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyAddHeros::~ReplyAddHeros() {
  SharedDtor();
}

void ReplyAddHeros::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReplyAddHeros::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyAddHeros::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyAddHeros_descriptor_;
}

const ReplyAddHeros& ReplyAddHeros::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();  return *default_instance_;
}

ReplyAddHeros* ReplyAddHeros::default_instance_ = NULL;

ReplyAddHeros* ReplyAddHeros::New() const {
  return new ReplyAddHeros;
}

void ReplyAddHeros::Clear() {
  hero_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyAddHeros::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.common.Hero hero = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hero()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_hero;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReplyAddHeros::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.common.Hero hero = 1;
  for (int i = 0; i < this->hero_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hero(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReplyAddHeros::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.common.Hero hero = 1;
  for (int i = 0; i < this->hero_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hero(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReplyAddHeros::ByteSize() const {
  int total_size = 0;
  
  // repeated .protobuf.common.Hero hero = 1;
  total_size += 1 * this->hero_size();
  for (int i = 0; i < this->hero_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hero(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyAddHeros::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyAddHeros* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyAddHeros*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyAddHeros::MergeFrom(const ReplyAddHeros& from) {
  GOOGLE_CHECK_NE(&from, this);
  hero_.MergeFrom(from.hero_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyAddHeros::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyAddHeros::CopyFrom(const ReplyAddHeros& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyAddHeros::IsInitialized() const {
  
  for (int i = 0; i < hero_size(); i++) {
    if (!this->hero(i).IsInitialized()) return false;
  }
  return true;
}

void ReplyAddHeros::Swap(ReplyAddHeros* other) {
  if (other != this) {
    hero_.Swap(&other->hero_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyAddHeros::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyAddHeros_descriptor_;
  metadata.reflection = ReplyAddHeros_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PictureInfo::kTypeFieldNumber;
const int PictureInfo::kPictureIdFieldNumber;
#endif  // !_MSC_VER

PictureInfo::PictureInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PictureInfo::InitAsDefaultInstance() {
}

PictureInfo::PictureInfo(const PictureInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PictureInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  pictureid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PictureInfo::~PictureInfo() {
  SharedDtor();
}

void PictureInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PictureInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PictureInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PictureInfo_descriptor_;
}

const PictureInfo& PictureInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();  return *default_instance_;
}

PictureInfo* PictureInfo::default_instance_ = NULL;

PictureInfo* PictureInfo::New() const {
  return new PictureInfo;
}

void PictureInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    pictureid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PictureInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pictureId;
        break;
      }
      
      // optional int32 pictureId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pictureId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pictureid_)));
          set_has_pictureid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PictureInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // optional int32 pictureId = 2;
  if (has_pictureid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pictureid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PictureInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // optional int32 pictureId = 2;
  if (has_pictureid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pictureid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PictureInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int32 pictureId = 2;
    if (has_pictureid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pictureid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PictureInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PictureInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PictureInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PictureInfo::MergeFrom(const PictureInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_pictureid()) {
      set_pictureid(from.pictureid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PictureInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PictureInfo::CopyFrom(const PictureInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PictureInfo::IsInitialized() const {
  
  return true;
}

void PictureInfo::Swap(PictureInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(pictureid_, other->pictureid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PictureInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PictureInfo_descriptor_;
  metadata.reflection = PictureInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroPictureInfo::kInfosFieldNumber;
#endif  // !_MSC_VER

HeroPictureInfo::HeroPictureInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeroPictureInfo::InitAsDefaultInstance() {
}

HeroPictureInfo::HeroPictureInfo(const HeroPictureInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeroPictureInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroPictureInfo::~HeroPictureInfo() {
  SharedDtor();
}

void HeroPictureInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeroPictureInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroPictureInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroPictureInfo_descriptor_;
}

const HeroPictureInfo& HeroPictureInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();  return *default_instance_;
}

HeroPictureInfo* HeroPictureInfo::default_instance_ = NULL;

HeroPictureInfo* HeroPictureInfo::New() const {
  return new HeroPictureInfo;
}

void HeroPictureInfo::Clear() {
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroPictureInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.hero.PictureInfo infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeroPictureInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.hero.PictureInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeroPictureInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.hero.PictureInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeroPictureInfo::ByteSize() const {
  int total_size = 0;
  
  // repeated .protobuf.hero.PictureInfo infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroPictureInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroPictureInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroPictureInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroPictureInfo::MergeFrom(const HeroPictureInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroPictureInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroPictureInfo::CopyFrom(const HeroPictureInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroPictureInfo::IsInitialized() const {
  
  return true;
}

void HeroPictureInfo::Swap(HeroPictureInfo* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroPictureInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroPictureInfo_descriptor_;
  metadata.reflection = HeroPictureInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PictureAward::kTypeFieldNumber;
const int PictureAward::kPictureIdFieldNumber;
const int PictureAward::kStatusFieldNumber;
const int PictureAward::kAwardFieldNumber;
#endif  // !_MSC_VER

PictureAward::PictureAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PictureAward::InitAsDefaultInstance() {
}

PictureAward::PictureAward(const PictureAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PictureAward::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  pictureid_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PictureAward::~PictureAward() {
  SharedDtor();
}

void PictureAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PictureAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PictureAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PictureAward_descriptor_;
}

const PictureAward& PictureAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();  return *default_instance_;
}

PictureAward* PictureAward::default_instance_ = NULL;

PictureAward* PictureAward::New() const {
  return new PictureAward;
}

void PictureAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    pictureid_ = 0;
    status_ = 0;
  }
  award_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PictureAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pictureId;
        break;
      }
      
      // optional int32 pictureId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pictureId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pictureid_)));
          set_has_pictureid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }
      
      // optional int32 status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_award;
        break;
      }
      
      // repeated .protobuf.common.KVint3264 award = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_award:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_award()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_award;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PictureAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // optional int32 pictureId = 2;
  if (has_pictureid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pictureid(), output);
  }
  
  // optional int32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->status(), output);
  }
  
  // repeated .protobuf.common.KVint3264 award = 4;
  for (int i = 0; i < this->award_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->award(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PictureAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // optional int32 pictureId = 2;
  if (has_pictureid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pictureid(), target);
  }
  
  // optional int32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->status(), target);
  }
  
  // repeated .protobuf.common.KVint3264 award = 4;
  for (int i = 0; i < this->award_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->award(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PictureAward::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int32 pictureId = 2;
    if (has_pictureid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pictureid());
    }
    
    // optional int32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
  }
  // repeated .protobuf.common.KVint3264 award = 4;
  total_size += 1 * this->award_size();
  for (int i = 0; i < this->award_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->award(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PictureAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PictureAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PictureAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PictureAward::MergeFrom(const PictureAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  award_.MergeFrom(from.award_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_pictureid()) {
      set_pictureid(from.pictureid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PictureAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PictureAward::CopyFrom(const PictureAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PictureAward::IsInitialized() const {
  
  for (int i = 0; i < award_size(); i++) {
    if (!this->award(i).IsInitialized()) return false;
  }
  return true;
}

void PictureAward::Swap(PictureAward* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(pictureid_, other->pictureid_);
    std::swap(status_, other->status_);
    award_.Swap(&other->award_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PictureAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PictureAward_descriptor_;
  metadata.reflection = PictureAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroPictureAward::kAwardsFieldNumber;
#endif  // !_MSC_VER

HeroPictureAward::HeroPictureAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeroPictureAward::InitAsDefaultInstance() {
}

HeroPictureAward::HeroPictureAward(const HeroPictureAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeroPictureAward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroPictureAward::~HeroPictureAward() {
  SharedDtor();
}

void HeroPictureAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeroPictureAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroPictureAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroPictureAward_descriptor_;
}

const HeroPictureAward& HeroPictureAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hero_2eproto();  return *default_instance_;
}

HeroPictureAward* HeroPictureAward::default_instance_ = NULL;

HeroPictureAward* HeroPictureAward::New() const {
  return new HeroPictureAward;
}

void HeroPictureAward::Clear() {
  awards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroPictureAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.hero.PictureAward awards = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_awards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_awards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_awards;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeroPictureAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.hero.PictureAward awards = 1;
  for (int i = 0; i < this->awards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->awards(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeroPictureAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.hero.PictureAward awards = 1;
  for (int i = 0; i < this->awards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->awards(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeroPictureAward::ByteSize() const {
  int total_size = 0;
  
  // repeated .protobuf.hero.PictureAward awards = 1;
  total_size += 1 * this->awards_size();
  for (int i = 0; i < this->awards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->awards(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroPictureAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroPictureAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroPictureAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroPictureAward::MergeFrom(const HeroPictureAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  awards_.MergeFrom(from.awards_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroPictureAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroPictureAward::CopyFrom(const HeroPictureAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroPictureAward::IsInitialized() const {
  
  for (int i = 0; i < awards_size(); i++) {
    if (!this->awards(i).IsInitialized()) return false;
  }
  return true;
}

void HeroPictureAward::Swap(HeroPictureAward* other) {
  if (other != this) {
    awards_.Swap(&other->awards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroPictureAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroPictureAward_descriptor_;
  metadata.reflection = HeroPictureAward_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace hero
}  // namespace protobuf

// @@protoc_insertion_point(global_scope)
