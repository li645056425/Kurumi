// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "newBattle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protobuf {
namespace newBattle {

namespace {

const ::google::protobuf::Descriptor* FreshReplyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FreshReplyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* iconinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  iconinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetLineupTemplate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetLineupTemplate_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleStatistics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleStatistics_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleResults_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleResults_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleStart_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleVideo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleVideo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleData_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewBattleStartM_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewBattleStartM_reflection_ = NULL;
const ::google::protobuf::Descriptor* OneBattleData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OneBattleData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_newBattle_2eproto() {
  protobuf_AddDesc_newBattle_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "newBattle.proto");
  GOOGLE_CHECK(file != NULL);
  FreshReplyInfo_descriptor_ = file->message_type(0);
  static const int FreshReplyInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreshReplyInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreshReplyInfo, carbondaycnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreshReplyInfo, isopenbrave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreshReplyInfo, nextfreshtime_),
  };
  FreshReplyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FreshReplyInfo_descriptor_,
      FreshReplyInfo::default_instance_,
      FreshReplyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreshReplyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreshReplyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FreshReplyInfo));
  iconinfo_descriptor_ = file->message_type(1);
  static const int iconinfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, servername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, headframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, isenemy_),
  };
  iconinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      iconinfo_descriptor_,
      iconinfo::default_instance_,
      iconinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(iconinfo));
  SetLineupTemplate_descriptor_ = file->message_type(2);
  static const int SetLineupTemplate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetLineupTemplate, lineup_),
  };
  SetLineupTemplate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetLineupTemplate_descriptor_,
      SetLineupTemplate::default_instance_,
      SetLineupTemplate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetLineupTemplate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetLineupTemplate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetLineupTemplate));
  BattleStatistics_descriptor_ = file->message_type(3);
  static const int BattleStatistics_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleStatistics, data_),
  };
  BattleStatistics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleStatistics_descriptor_,
      BattleStatistics::default_instance_,
      BattleStatistics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleStatistics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleStatistics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleStatistics));
  ArenaRecord_descriptor_ = file->message_type(4);
  static const int ArenaRecord_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRecord, battledata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRecord, selflineup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRecord, enemylineup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRecord, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRecord, recordtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRecord, playerinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRecord, recordnumber_),
  };
  ArenaRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaRecord_descriptor_,
      ArenaRecord::default_instance_,
      ArenaRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaRecord));
  BattleResults_descriptor_ = file->message_type(5);
  static const int BattleResults_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleResults, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleResults, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleResults, battledata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleResults, arenaplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleResults, selflineup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleResults, enemylineup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleResults, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleResults, isrevenge_),
  };
  BattleResults_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleResults_descriptor_,
      BattleResults::default_instance_,
      BattleResults_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleResults, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleResults, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleResults));
  BattleRequest_descriptor_ = file->message_type(6);
  static const int BattleRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleRequest, beattackid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleRequest, needlineup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleRequest, mapid_),
  };
  BattleRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleRequest_descriptor_,
      BattleRequest::default_instance_,
      BattleRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleRequest));
  BattleInfo_descriptor_ = file->message_type(7);
  static const int BattleInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, enemyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, teamname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, enemylinup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, showinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, enemyblood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, lineuptemplate_),
  };
  BattleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleInfo_descriptor_,
      BattleInfo::default_instance_,
      BattleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleInfo));
  BattleStart_descriptor_ = file->message_type(8);
  static const int BattleStart_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleStart, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleStart, enemyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleStart, lineupindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleStart, lineupids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleStart, lineuppet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleStart, attackcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleStart, isskip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleStart, suspectislandid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleStart, guidev_),
  };
  BattleStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleStart_descriptor_,
      BattleStart::default_instance_,
      BattleStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleStart));
  BattleEnd_descriptor_ = file->message_type(9);
  static const int BattleEnd_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleEnd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleEnd, enemyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleEnd, victory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleEnd, rewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleEnd, points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleEnd, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleEnd, len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleEnd, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleEnd, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleEnd, suspectislandid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleEnd, issp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleEnd, sprewards_),
  };
  BattleEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleEnd_descriptor_,
      BattleEnd::default_instance_,
      BattleEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleEnd));
  BattleRecord_descriptor_ = file->message_type(10);
  static const int BattleRecord_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleRecord, record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleRecord, len_),
  };
  BattleRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleRecord_descriptor_,
      BattleRecord::default_instance_,
      BattleRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleRecord));
  BattleVideo_descriptor_ = file->message_type(11);
  static const int BattleVideo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleVideo, atpetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleVideo, atpet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleVideo, depetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleVideo, depet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleVideo, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleVideo, len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleVideo, victory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleVideo, type_),
  };
  BattleVideo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleVideo_descriptor_,
      BattleVideo::default_instance_,
      BattleVideo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleVideo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleVideo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleVideo));
  BattleData_descriptor_ = file->message_type(12);
  static const int BattleData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleData, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleData, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleData, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleData, heal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleData, receivedamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleData, playerid_),
  };
  BattleData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleData_descriptor_,
      BattleData::default_instance_,
      BattleData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleData));
  NewBattleStartM_descriptor_ = file->message_type(13);
  static const int NewBattleStartM_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewBattleStartM, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewBattleStartM, enemyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewBattleStartM, perlineup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewBattleStartM, lineupids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewBattleStartM, attackcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewBattleStartM, isskip_),
  };
  NewBattleStartM_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewBattleStartM_descriptor_,
      NewBattleStartM::default_instance_,
      NewBattleStartM_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewBattleStartM, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewBattleStartM, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewBattleStartM));
  OneBattleData_descriptor_ = file->message_type(14);
  static const int OneBattleData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneBattleData, data_),
  };
  OneBattleData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OneBattleData_descriptor_,
      OneBattleData::default_instance_,
      OneBattleData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneBattleData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneBattleData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OneBattleData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_newBattle_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FreshReplyInfo_descriptor_, &FreshReplyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    iconinfo_descriptor_, &iconinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetLineupTemplate_descriptor_, &SetLineupTemplate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleStatistics_descriptor_, &BattleStatistics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaRecord_descriptor_, &ArenaRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleResults_descriptor_, &BattleResults::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleRequest_descriptor_, &BattleRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleInfo_descriptor_, &BattleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleStart_descriptor_, &BattleStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleEnd_descriptor_, &BattleEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleRecord_descriptor_, &BattleRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleVideo_descriptor_, &BattleVideo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleData_descriptor_, &BattleData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewBattleStartM_descriptor_, &NewBattleStartM::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OneBattleData_descriptor_, &OneBattleData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_newBattle_2eproto() {
  delete FreshReplyInfo::default_instance_;
  delete FreshReplyInfo_reflection_;
  delete iconinfo::default_instance_;
  delete iconinfo_reflection_;
  delete SetLineupTemplate::default_instance_;
  delete SetLineupTemplate_reflection_;
  delete BattleStatistics::default_instance_;
  delete BattleStatistics_reflection_;
  delete ArenaRecord::default_instance_;
  delete ArenaRecord_reflection_;
  delete BattleResults::default_instance_;
  delete BattleResults_reflection_;
  delete BattleRequest::default_instance_;
  delete BattleRequest_reflection_;
  delete BattleInfo::default_instance_;
  delete BattleInfo_reflection_;
  delete BattleStart::default_instance_;
  delete BattleStart_reflection_;
  delete BattleEnd::default_instance_;
  delete BattleEnd_reflection_;
  delete BattleRecord::default_instance_;
  delete BattleRecord_reflection_;
  delete BattleVideo::default_instance_;
  delete BattleVideo_reflection_;
  delete BattleData::default_instance_;
  delete BattleData_reflection_;
  delete NewBattleStartM::default_instance_;
  delete NewBattleStartM_reflection_;
  delete OneBattleData::default_instance_;
  delete OneBattleData_reflection_;
}

void protobuf_AddDesc_newBattle_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf::common::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017newBattle.proto\022\022protobuf.newBattle\032\014c"
    "ommon.proto\"|\n\016FreshReplyInfo\022\014\n\004type\030\001 "
    "\002(\005\0220\n\014carbonDayCnt\030\002 \003(\0132\032.protobuf.com"
    "mon.KVint3232\022\023\n\013isOpenBrave\030\003 \001(\010\022\025\n\rne"
    "xtFreshTime\030\004 \001(\003\"\241\001\n\010iconinfo\022\r\n\005level\030"
    "\001 \002(\005\022\014\n\004name\030\002 \002(\t\022\014\n\004head\030\003 \002(\t\022\021\n\tgui"
    "ldName\030\004 \001(\t\022\022\n\nserverName\030\005 \001(\t\022\020\n\010play"
    "erid\030\006 \001(\t\022\r\n\005power\030\007 \001(\005\022\021\n\theadFrame\030\010"
    " \001(\005\022\017\n\007isEnemy\030\t \001(\010\"D\n\021SetLineupTempla"
    "te\022/\n\006lineup\030\001 \003(\0132\037.protobuf.common.Lin"
    "eupTemplate\"A\n\020BattleStatistics\022-\n\004data\030"
    "\001 \003(\0132\037.protobuf.newBattle.ArenaRecord\"\223"
    "\002\n\013ArenaRecord\0222\n\nbattleData\030\001 \003(\0132\036.pro"
    "tobuf.newBattle.BattleData\0221\n\nselfLineup"
    "\030\002 \003(\0132\035.protobuf.common.LineupDetail\0222\n"
    "\013enemyLineup\030\003 \003(\0132\035.protobuf.common.Lin"
    "eupDetail\022\r\n\005score\030\004 \001(\005\022\022\n\nrecordTime\030\005"
    " \001(\003\0220\n\nplayerInfo\030\006 \003(\0132\034.protobuf.newB"
    "attle.iconinfo\022\024\n\014recordNumber\030\007 \001(\005\"\201\002\n"
    "\rBattleResults\022\014\n\004type\030\001 \001(\005\022\016\n\006result\030\002"
    " \001(\010\0222\n\nbattleData\030\003 \003(\0132\036.protobuf.newB"
    "attle.BattleData\022\025\n\rarenaPlayerId\030\004 \001(\t\022"
    "1\n\nselfLineup\030\005 \003(\0132\035.protobuf.common.Li"
    "neupDetail\0222\n\013enemyLineup\030\006 \003(\0132\035.protob"
    "uf.common.LineupDetail\022\r\n\005mapId\030\007 \001(\005\022\021\n"
    "\tisRevenge\030\010 \001(\010\"T\n\rBattleRequest\022\014\n\004typ"
    "e\030\001 \002(\005\022\022\n\nbeAttackId\030\002 \001(\t\022\022\n\nneedLineu"
    "p\030\003 \001(\010\022\r\n\005mapId\030\004 \001(\005\"\211\002\n\nBattleInfo\022\014\n"
    "\004type\030\001 \002(\005\022\017\n\007enemyid\030\003 \001(\t\022\020\n\010teamName"
    "\030\004 \001(\t\0221\n\nenemylinup\030\005 \003(\0132\035.protobuf.co"
    "mmon.LineupDetail\022.\n\010showinfo\030\006 \003(\0132\034.pr"
    "otobuf.newBattle.iconinfo\022.\n\nenemyblood\030"
    "\007 \003(\0132\032.protobuf.common.KVint3264\0227\n\016lin"
    "eupTemplate\030\010 \003(\0132\037.protobuf.common.Line"
    "upTemplate\"\312\001\n\013BattleStart\022\014\n\004type\030\001 \002(\005"
    "\022\017\n\007enemyId\030\002 \002(\t\022\023\n\013lineupindex\030\003 \001(\005\022("
    "\n\tlineupIds\030\004 \003(\0132\025.protobuf.common.Id32"
    "\022\021\n\tlineuppet\030\005 \001(\005\022\021\n\tattackCnt\030\006 \001(\005\022\016"
    "\n\006isSkip\030\007 \001(\010\022\027\n\017suspectIslandId\030\010 \001(\005\022"
    "\016\n\006guidev\030\n \001(\t\"\247\002\n\tBattleEnd\022\014\n\004type\030\001 "
    "\002(\005\022\017\n\007enemyId\030\002 \002(\t\022\017\n\007victory\030\003 \003(\010\022+\n"
    "\007rewards\030\004 \003(\0132\032.protobuf.common.KVint32"
    "32\022\016\n\006points\030\005 \003(\t\022\014\n\004sign\030\006 \002(\t\022\013\n\003len\030"
    "\007 \002(\005\022,\n\004data\030\010 \003(\0132\036.protobuf.newBattle"
    ".BattleData\022\016\n\006damage\030\t \001(\003\022\027\n\017suspectIs"
    "landId\030\n \001(\005\022\014\n\004isSp\030\013 \001(\005\022-\n\tspRewards\030"
    "\014 \003(\0132\032.protobuf.common.KVint3232\"+\n\014Bat"
    "tleRecord\022\016\n\006record\030\001 \002(\t\022\013\n\003len\030\002 \002(\005\"\263"
    "\001\n\013BattleVideo\022\017\n\007atPetId\030\001 \002(\005\022#\n\005atPet"
    "\030\002 \003(\0132\024.protobuf.common.Pet\022\017\n\007dePetId\030"
    "\003 \002(\005\022#\n\005dePet\030\004 \003(\0132\024.protobuf.common.P"
    "et\022\014\n\004sign\030\005 \002(\t\022\013\n\003len\030\006 \002(\005\022\017\n\007victory"
    "\030\007 \003(\010\022\014\n\004type\030\010 \002(\005\"z\n\nBattleData\022\r\n\005in"
    "dex\030\001 \002(\005\022\n\n\002id\030\002 \002(\005\022\n\n\002lv\030\003 \002(\005\022\016\n\006dam"
    "age\030\004 \002(\005\022\014\n\004heal\030\005 \002(\005\022\025\n\rreceiveDamage"
    "\030\006 \002(\005\022\020\n\010playerId\030\007 \001(\t\"\261\001\n\017NewBattleSt"
    "artM\022\014\n\004type\030\001 \002(\005\022\017\n\007enemyId\030\002 \002(\t\0222\n\tp"
    "erLineup\030\003 \003(\0132\037.protobuf.common.LineupT"
    "emplate\022(\n\tlineupIds\030\004 \003(\0132\025.protobuf.co"
    "mmon.Id32\022\021\n\tattackCnt\030\005 \001(\005\022\016\n\006isSkip\030\006"
    " \001(\010\"=\n\rOneBattleData\022,\n\004data\030\001 \003(\0132\036.pr"
    "otobuf.newBattle.BattleDataB%\n\023xag.idgo."
    "core.protoB\016NewBattleProto", 2506);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "newBattle.proto", &protobuf_RegisterTypes);
  FreshReplyInfo::default_instance_ = new FreshReplyInfo();
  iconinfo::default_instance_ = new iconinfo();
  SetLineupTemplate::default_instance_ = new SetLineupTemplate();
  BattleStatistics::default_instance_ = new BattleStatistics();
  ArenaRecord::default_instance_ = new ArenaRecord();
  BattleResults::default_instance_ = new BattleResults();
  BattleRequest::default_instance_ = new BattleRequest();
  BattleInfo::default_instance_ = new BattleInfo();
  BattleStart::default_instance_ = new BattleStart();
  BattleEnd::default_instance_ = new BattleEnd();
  BattleRecord::default_instance_ = new BattleRecord();
  BattleVideo::default_instance_ = new BattleVideo();
  BattleData::default_instance_ = new BattleData();
  NewBattleStartM::default_instance_ = new NewBattleStartM();
  OneBattleData::default_instance_ = new OneBattleData();
  FreshReplyInfo::default_instance_->InitAsDefaultInstance();
  iconinfo::default_instance_->InitAsDefaultInstance();
  SetLineupTemplate::default_instance_->InitAsDefaultInstance();
  BattleStatistics::default_instance_->InitAsDefaultInstance();
  ArenaRecord::default_instance_->InitAsDefaultInstance();
  BattleResults::default_instance_->InitAsDefaultInstance();
  BattleRequest::default_instance_->InitAsDefaultInstance();
  BattleInfo::default_instance_->InitAsDefaultInstance();
  BattleStart::default_instance_->InitAsDefaultInstance();
  BattleEnd::default_instance_->InitAsDefaultInstance();
  BattleRecord::default_instance_->InitAsDefaultInstance();
  BattleVideo::default_instance_->InitAsDefaultInstance();
  BattleData::default_instance_->InitAsDefaultInstance();
  NewBattleStartM::default_instance_->InitAsDefaultInstance();
  OneBattleData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_newBattle_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_newBattle_2eproto {
  StaticDescriptorInitializer_newBattle_2eproto() {
    protobuf_AddDesc_newBattle_2eproto();
  }
} static_descriptor_initializer_newBattle_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int FreshReplyInfo::kTypeFieldNumber;
const int FreshReplyInfo::kCarbonDayCntFieldNumber;
const int FreshReplyInfo::kIsOpenBraveFieldNumber;
const int FreshReplyInfo::kNextFreshTimeFieldNumber;
#endif  // !_MSC_VER

FreshReplyInfo::FreshReplyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FreshReplyInfo::InitAsDefaultInstance() {
}

FreshReplyInfo::FreshReplyInfo(const FreshReplyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FreshReplyInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  isopenbrave_ = false;
  nextfreshtime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FreshReplyInfo::~FreshReplyInfo() {
  SharedDtor();
}

void FreshReplyInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FreshReplyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FreshReplyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FreshReplyInfo_descriptor_;
}

const FreshReplyInfo& FreshReplyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_newBattle_2eproto();  return *default_instance_;
}

FreshReplyInfo* FreshReplyInfo::default_instance_ = NULL;

FreshReplyInfo* FreshReplyInfo::New() const {
  return new FreshReplyInfo;
}

void FreshReplyInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    isopenbrave_ = false;
    nextfreshtime_ = GOOGLE_LONGLONG(0);
  }
  carbondaycnt_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FreshReplyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_carbonDayCnt;
        break;
      }
      
      // repeated .protobuf.common.KVint3232 carbonDayCnt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_carbonDayCnt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_carbondaycnt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_carbonDayCnt;
        if (input->ExpectTag(24)) goto parse_isOpenBrave;
        break;
      }
      
      // optional bool isOpenBrave = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isOpenBrave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isopenbrave_)));
          set_has_isopenbrave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nextFreshTime;
        break;
      }
      
      // optional int64 nextFreshTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextFreshTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nextfreshtime_)));
          set_has_nextfreshtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FreshReplyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // repeated .protobuf.common.KVint3232 carbonDayCnt = 2;
  for (int i = 0; i < this->carbondaycnt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->carbondaycnt(i), output);
  }
  
  // optional bool isOpenBrave = 3;
  if (has_isopenbrave()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isopenbrave(), output);
  }
  
  // optional int64 nextFreshTime = 4;
  if (has_nextfreshtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->nextfreshtime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FreshReplyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // repeated .protobuf.common.KVint3232 carbonDayCnt = 2;
  for (int i = 0; i < this->carbondaycnt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->carbondaycnt(i), target);
  }
  
  // optional bool isOpenBrave = 3;
  if (has_isopenbrave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isopenbrave(), target);
  }
  
  // optional int64 nextFreshTime = 4;
  if (has_nextfreshtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->nextfreshtime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FreshReplyInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional bool isOpenBrave = 3;
    if (has_isopenbrave()) {
      total_size += 1 + 1;
    }
    
    // optional int64 nextFreshTime = 4;
    if (has_nextfreshtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->nextfreshtime());
    }
    
  }
  // repeated .protobuf.common.KVint3232 carbonDayCnt = 2;
  total_size += 1 * this->carbondaycnt_size();
  for (int i = 0; i < this->carbondaycnt_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->carbondaycnt(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FreshReplyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FreshReplyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FreshReplyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FreshReplyInfo::MergeFrom(const FreshReplyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  carbondaycnt_.MergeFrom(from.carbondaycnt_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_isopenbrave()) {
      set_isopenbrave(from.isopenbrave());
    }
    if (from.has_nextfreshtime()) {
      set_nextfreshtime(from.nextfreshtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FreshReplyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FreshReplyInfo::CopyFrom(const FreshReplyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FreshReplyInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < carbondaycnt_size(); i++) {
    if (!this->carbondaycnt(i).IsInitialized()) return false;
  }
  return true;
}

void FreshReplyInfo::Swap(FreshReplyInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    carbondaycnt_.Swap(&other->carbondaycnt_);
    std::swap(isopenbrave_, other->isopenbrave_);
    std::swap(nextfreshtime_, other->nextfreshtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FreshReplyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FreshReplyInfo_descriptor_;
  metadata.reflection = FreshReplyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int iconinfo::kLevelFieldNumber;
const int iconinfo::kNameFieldNumber;
const int iconinfo::kHeadFieldNumber;
const int iconinfo::kGuildNameFieldNumber;
const int iconinfo::kServerNameFieldNumber;
const int iconinfo::kPlayeridFieldNumber;
const int iconinfo::kPowerFieldNumber;
const int iconinfo::kHeadFrameFieldNumber;
const int iconinfo::kIsEnemyFieldNumber;
#endif  // !_MSC_VER

iconinfo::iconinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void iconinfo::InitAsDefaultInstance() {
}

iconinfo::iconinfo(const iconinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void iconinfo::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  power_ = 0;
  headframe_ = 0;
  isenemy_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

iconinfo::~iconinfo() {
  SharedDtor();
}

void iconinfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    delete head_;
  }
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    delete servername_;
  }
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (this != default_instance_) {
  }
}

void iconinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* iconinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return iconinfo_descriptor_;
}

const iconinfo& iconinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_newBattle_2eproto();  return *default_instance_;
}

iconinfo* iconinfo::default_instance_ = NULL;

iconinfo* iconinfo::New() const {
  return new iconinfo;
}

void iconinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_head()) {
      if (head_ != &::google::protobuf::internal::kEmptyString) {
        head_->clear();
      }
    }
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
    if (has_servername()) {
      if (servername_ != &::google::protobuf::internal::kEmptyString) {
        servername_->clear();
      }
    }
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    power_ = 0;
    headframe_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    isenemy_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool iconinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_head;
        break;
      }
      
      // required string head = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_head()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->head().data(), this->head().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_guildName;
        break;
      }
      
      // optional string guildName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_serverName;
        break;
      }
      
      // optional string serverName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serverName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->servername().data(), this->servername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_playerid;
        break;
      }
      
      // optional string playerid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_power;
        break;
      }
      
      // optional int32 power = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_headFrame;
        break;
      }
      
      // optional int32 headFrame = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headFrame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headframe_)));
          set_has_headframe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_isEnemy;
        break;
      }
      
      // optional bool isEnemy = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isEnemy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isenemy_)));
          set_has_isenemy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void iconinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // required string head = 3;
  if (has_head()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head().data(), this->head().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->head(), output);
  }
  
  // optional string guildName = 4;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->guildname(), output);
  }
  
  // optional string serverName = 5;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->servername(), output);
  }
  
  // optional string playerid = 6;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->playerid(), output);
  }
  
  // optional int32 power = 7;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->power(), output);
  }
  
  // optional int32 headFrame = 8;
  if (has_headframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->headframe(), output);
  }
  
  // optional bool isEnemy = 9;
  if (has_isenemy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->isenemy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* iconinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // required string head = 3;
  if (has_head()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head().data(), this->head().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->head(), target);
  }
  
  // optional string guildName = 4;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->guildname(), target);
  }
  
  // optional string serverName = 5;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->servername(), target);
  }
  
  // optional string playerid = 6;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->playerid(), target);
  }
  
  // optional int32 power = 7;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->power(), target);
  }
  
  // optional int32 headFrame = 8;
  if (has_headframe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->headframe(), target);
  }
  
  // optional bool isEnemy = 9;
  if (has_isenemy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->isenemy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int iconinfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string head = 3;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->head());
    }
    
    // optional string guildName = 4;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }
    
    // optional string serverName = 5;
    if (has_servername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servername());
    }
    
    // optional string playerid = 6;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }
    
    // optional int32 power = 7;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }
    
    // optional int32 headFrame = 8;
    if (has_headframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headframe());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool isEnemy = 9;
    if (has_isenemy()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void iconinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const iconinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const iconinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void iconinfo::MergeFrom(const iconinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_head()) {
      set_head(from.head());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_servername()) {
      set_servername(from.servername());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_headframe()) {
      set_headframe(from.headframe());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isenemy()) {
      set_isenemy(from.isenemy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void iconinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void iconinfo::CopyFrom(const iconinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool iconinfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void iconinfo::Swap(iconinfo* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(name_, other->name_);
    std::swap(head_, other->head_);
    std::swap(guildname_, other->guildname_);
    std::swap(servername_, other->servername_);
    std::swap(playerid_, other->playerid_);
    std::swap(power_, other->power_);
    std::swap(headframe_, other->headframe_);
    std::swap(isenemy_, other->isenemy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata iconinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = iconinfo_descriptor_;
  metadata.reflection = iconinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetLineupTemplate::kLineupFieldNumber;
#endif  // !_MSC_VER

SetLineupTemplate::SetLineupTemplate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetLineupTemplate::InitAsDefaultInstance() {
}

SetLineupTemplate::SetLineupTemplate(const SetLineupTemplate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetLineupTemplate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetLineupTemplate::~SetLineupTemplate() {
  SharedDtor();
}

void SetLineupTemplate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetLineupTemplate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetLineupTemplate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetLineupTemplate_descriptor_;
}

const SetLineupTemplate& SetLineupTemplate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_newBattle_2eproto();  return *default_instance_;
}

SetLineupTemplate* SetLineupTemplate::default_instance_ = NULL;

SetLineupTemplate* SetLineupTemplate::New() const {
  return new SetLineupTemplate;
}

void SetLineupTemplate::Clear() {
  lineup_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetLineupTemplate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.common.LineupTemplate lineup = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lineup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lineup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_lineup;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetLineupTemplate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.common.LineupTemplate lineup = 1;
  for (int i = 0; i < this->lineup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lineup(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetLineupTemplate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.common.LineupTemplate lineup = 1;
  for (int i = 0; i < this->lineup_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->lineup(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetLineupTemplate::ByteSize() const {
  int total_size = 0;
  
  // repeated .protobuf.common.LineupTemplate lineup = 1;
  total_size += 1 * this->lineup_size();
  for (int i = 0; i < this->lineup_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lineup(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetLineupTemplate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetLineupTemplate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetLineupTemplate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetLineupTemplate::MergeFrom(const SetLineupTemplate& from) {
  GOOGLE_CHECK_NE(&from, this);
  lineup_.MergeFrom(from.lineup_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetLineupTemplate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetLineupTemplate::CopyFrom(const SetLineupTemplate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetLineupTemplate::IsInitialized() const {
  
  for (int i = 0; i < lineup_size(); i++) {
    if (!this->lineup(i).IsInitialized()) return false;
  }
  return true;
}

void SetLineupTemplate::Swap(SetLineupTemplate* other) {
  if (other != this) {
    lineup_.Swap(&other->lineup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetLineupTemplate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetLineupTemplate_descriptor_;
  metadata.reflection = SetLineupTemplate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleStatistics::kDataFieldNumber;
#endif  // !_MSC_VER

BattleStatistics::BattleStatistics()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleStatistics::InitAsDefaultInstance() {
}

BattleStatistics::BattleStatistics(const BattleStatistics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleStatistics::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleStatistics::~BattleStatistics() {
  SharedDtor();
}

void BattleStatistics::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleStatistics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleStatistics_descriptor_;
}

const BattleStatistics& BattleStatistics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_newBattle_2eproto();  return *default_instance_;
}

BattleStatistics* BattleStatistics::default_instance_ = NULL;

BattleStatistics* BattleStatistics::New() const {
  return new BattleStatistics;
}

void BattleStatistics::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.newBattle.ArenaRecord data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.newBattle.ArenaRecord data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleStatistics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.newBattle.ArenaRecord data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleStatistics::ByteSize() const {
  int total_size = 0;
  
  // repeated .protobuf.newBattle.ArenaRecord data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleStatistics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleStatistics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleStatistics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleStatistics::MergeFrom(const BattleStatistics& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleStatistics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleStatistics::CopyFrom(const BattleStatistics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleStatistics::IsInitialized() const {
  
  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void BattleStatistics::Swap(BattleStatistics* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleStatistics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleStatistics_descriptor_;
  metadata.reflection = BattleStatistics_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaRecord::kBattleDataFieldNumber;
const int ArenaRecord::kSelfLineupFieldNumber;
const int ArenaRecord::kEnemyLineupFieldNumber;
const int ArenaRecord::kScoreFieldNumber;
const int ArenaRecord::kRecordTimeFieldNumber;
const int ArenaRecord::kPlayerInfoFieldNumber;
const int ArenaRecord::kRecordNumberFieldNumber;
#endif  // !_MSC_VER

ArenaRecord::ArenaRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaRecord::InitAsDefaultInstance() {
}

ArenaRecord::ArenaRecord(const ArenaRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaRecord::SharedCtor() {
  _cached_size_ = 0;
  score_ = 0;
  recordtime_ = GOOGLE_LONGLONG(0);
  recordnumber_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaRecord::~ArenaRecord() {
  SharedDtor();
}

void ArenaRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArenaRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaRecord_descriptor_;
}

const ArenaRecord& ArenaRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_newBattle_2eproto();  return *default_instance_;
}

ArenaRecord* ArenaRecord::default_instance_ = NULL;

ArenaRecord* ArenaRecord::New() const {
  return new ArenaRecord;
}

void ArenaRecord::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    score_ = 0;
    recordtime_ = GOOGLE_LONGLONG(0);
    recordnumber_ = 0;
  }
  battledata_.Clear();
  selflineup_.Clear();
  enemylineup_.Clear();
  playerinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.newBattle.BattleData battleData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battleData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battledata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_battleData;
        if (input->ExpectTag(18)) goto parse_selfLineup;
        break;
      }
      
      // repeated .protobuf.common.LineupDetail selfLineup = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selfLineup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_selflineup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_selfLineup;
        if (input->ExpectTag(26)) goto parse_enemyLineup;
        break;
      }
      
      // repeated .protobuf.common.LineupDetail enemyLineup = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enemyLineup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_enemylineup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_enemyLineup;
        if (input->ExpectTag(32)) goto parse_score;
        break;
      }
      
      // optional int32 score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_recordTime;
        break;
      }
      
      // optional int64 recordTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recordTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &recordtime_)));
          set_has_recordtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_playerInfo;
        break;
      }
      
      // repeated .protobuf.newBattle.iconinfo playerInfo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playerinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_playerInfo;
        if (input->ExpectTag(56)) goto parse_recordNumber;
        break;
      }
      
      // optional int32 recordNumber = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recordNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recordnumber_)));
          set_has_recordnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.newBattle.BattleData battleData = 1;
  for (int i = 0; i < this->battledata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->battledata(i), output);
  }
  
  // repeated .protobuf.common.LineupDetail selfLineup = 2;
  for (int i = 0; i < this->selflineup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->selflineup(i), output);
  }
  
  // repeated .protobuf.common.LineupDetail enemyLineup = 3;
  for (int i = 0; i < this->enemylineup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->enemylineup(i), output);
  }
  
  // optional int32 score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->score(), output);
  }
  
  // optional int64 recordTime = 5;
  if (has_recordtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->recordtime(), output);
  }
  
  // repeated .protobuf.newBattle.iconinfo playerInfo = 6;
  for (int i = 0; i < this->playerinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->playerinfo(i), output);
  }
  
  // optional int32 recordNumber = 7;
  if (has_recordnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->recordnumber(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.newBattle.BattleData battleData = 1;
  for (int i = 0; i < this->battledata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->battledata(i), target);
  }
  
  // repeated .protobuf.common.LineupDetail selfLineup = 2;
  for (int i = 0; i < this->selflineup_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->selflineup(i), target);
  }
  
  // repeated .protobuf.common.LineupDetail enemyLineup = 3;
  for (int i = 0; i < this->enemylineup_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->enemylineup(i), target);
  }
  
  // optional int32 score = 4;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->score(), target);
  }
  
  // optional int64 recordTime = 5;
  if (has_recordtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->recordtime(), target);
  }
  
  // repeated .protobuf.newBattle.iconinfo playerInfo = 6;
  for (int i = 0; i < this->playerinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->playerinfo(i), target);
  }
  
  // optional int32 recordNumber = 7;
  if (has_recordnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->recordnumber(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaRecord::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional int32 score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }
    
    // optional int64 recordTime = 5;
    if (has_recordtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->recordtime());
    }
    
    // optional int32 recordNumber = 7;
    if (has_recordnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recordnumber());
    }
    
  }
  // repeated .protobuf.newBattle.BattleData battleData = 1;
  total_size += 1 * this->battledata_size();
  for (int i = 0; i < this->battledata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battledata(i));
  }
  
  // repeated .protobuf.common.LineupDetail selfLineup = 2;
  total_size += 1 * this->selflineup_size();
  for (int i = 0; i < this->selflineup_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->selflineup(i));
  }
  
  // repeated .protobuf.common.LineupDetail enemyLineup = 3;
  total_size += 1 * this->enemylineup_size();
  for (int i = 0; i < this->enemylineup_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->enemylineup(i));
  }
  
  // repeated .protobuf.newBattle.iconinfo playerInfo = 6;
  total_size += 1 * this->playerinfo_size();
  for (int i = 0; i < this->playerinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaRecord::MergeFrom(const ArenaRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  battledata_.MergeFrom(from.battledata_);
  selflineup_.MergeFrom(from.selflineup_);
  enemylineup_.MergeFrom(from.enemylineup_);
  playerinfo_.MergeFrom(from.playerinfo_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_recordtime()) {
      set_recordtime(from.recordtime());
    }
    if (from.has_recordnumber()) {
      set_recordnumber(from.recordnumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaRecord::CopyFrom(const ArenaRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaRecord::IsInitialized() const {
  
  for (int i = 0; i < battledata_size(); i++) {
    if (!this->battledata(i).IsInitialized()) return false;
  }
  for (int i = 0; i < selflineup_size(); i++) {
    if (!this->selflineup(i).IsInitialized()) return false;
  }
  for (int i = 0; i < enemylineup_size(); i++) {
    if (!this->enemylineup(i).IsInitialized()) return false;
  }
  for (int i = 0; i < playerinfo_size(); i++) {
    if (!this->playerinfo(i).IsInitialized()) return false;
  }
  return true;
}

void ArenaRecord::Swap(ArenaRecord* other) {
  if (other != this) {
    battledata_.Swap(&other->battledata_);
    selflineup_.Swap(&other->selflineup_);
    enemylineup_.Swap(&other->enemylineup_);
    std::swap(score_, other->score_);
    std::swap(recordtime_, other->recordtime_);
    playerinfo_.Swap(&other->playerinfo_);
    std::swap(recordnumber_, other->recordnumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaRecord_descriptor_;
  metadata.reflection = ArenaRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleResults::kTypeFieldNumber;
const int BattleResults::kResultFieldNumber;
const int BattleResults::kBattleDataFieldNumber;
const int BattleResults::kArenaPlayerIdFieldNumber;
const int BattleResults::kSelfLineupFieldNumber;
const int BattleResults::kEnemyLineupFieldNumber;
const int BattleResults::kMapIdFieldNumber;
const int BattleResults::kIsRevengeFieldNumber;
#endif  // !_MSC_VER

BattleResults::BattleResults()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleResults::InitAsDefaultInstance() {
}

BattleResults::BattleResults(const BattleResults& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleResults::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  result_ = false;
  arenaplayerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mapid_ = 0;
  isrevenge_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleResults::~BattleResults() {
  SharedDtor();
}

void BattleResults::SharedDtor() {
  if (arenaplayerid_ != &::google::protobuf::internal::kEmptyString) {
    delete arenaplayerid_;
  }
  if (this != default_instance_) {
  }
}

void BattleResults::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleResults::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleResults_descriptor_;
}

const BattleResults& BattleResults::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_newBattle_2eproto();  return *default_instance_;
}

BattleResults* BattleResults::default_instance_ = NULL;

BattleResults* BattleResults::New() const {
  return new BattleResults;
}

void BattleResults::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    result_ = false;
    if (has_arenaplayerid()) {
      if (arenaplayerid_ != &::google::protobuf::internal::kEmptyString) {
        arenaplayerid_->clear();
      }
    }
    mapid_ = 0;
    isrevenge_ = false;
  }
  battledata_.Clear();
  selflineup_.Clear();
  enemylineup_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleResults::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }
      
      // optional bool result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_battleData;
        break;
      }
      
      // repeated .protobuf.newBattle.BattleData battleData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battleData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battledata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_battleData;
        if (input->ExpectTag(34)) goto parse_arenaPlayerId;
        break;
      }
      
      // optional string arenaPlayerId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arenaPlayerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_arenaplayerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->arenaplayerid().data(), this->arenaplayerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_selfLineup;
        break;
      }
      
      // repeated .protobuf.common.LineupDetail selfLineup = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selfLineup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_selflineup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_selfLineup;
        if (input->ExpectTag(50)) goto parse_enemyLineup;
        break;
      }
      
      // repeated .protobuf.common.LineupDetail enemyLineup = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enemyLineup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_enemylineup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_enemyLineup;
        if (input->ExpectTag(56)) goto parse_mapId;
        break;
      }
      
      // optional int32 mapId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_isRevenge;
        break;
      }
      
      // optional bool isRevenge = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isRevenge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isrevenge_)));
          set_has_isrevenge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleResults::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // optional bool result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->result(), output);
  }
  
  // repeated .protobuf.newBattle.BattleData battleData = 3;
  for (int i = 0; i < this->battledata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->battledata(i), output);
  }
  
  // optional string arenaPlayerId = 4;
  if (has_arenaplayerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->arenaplayerid().data(), this->arenaplayerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->arenaplayerid(), output);
  }
  
  // repeated .protobuf.common.LineupDetail selfLineup = 5;
  for (int i = 0; i < this->selflineup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->selflineup(i), output);
  }
  
  // repeated .protobuf.common.LineupDetail enemyLineup = 6;
  for (int i = 0; i < this->enemylineup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->enemylineup(i), output);
  }
  
  // optional int32 mapId = 7;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->mapid(), output);
  }
  
  // optional bool isRevenge = 8;
  if (has_isrevenge()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->isrevenge(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleResults::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // optional bool result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->result(), target);
  }
  
  // repeated .protobuf.newBattle.BattleData battleData = 3;
  for (int i = 0; i < this->battledata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->battledata(i), target);
  }
  
  // optional string arenaPlayerId = 4;
  if (has_arenaplayerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->arenaplayerid().data(), this->arenaplayerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->arenaplayerid(), target);
  }
  
  // repeated .protobuf.common.LineupDetail selfLineup = 5;
  for (int i = 0; i < this->selflineup_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->selflineup(i), target);
  }
  
  // repeated .protobuf.common.LineupDetail enemyLineup = 6;
  for (int i = 0; i < this->enemylineup_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->enemylineup(i), target);
  }
  
  // optional int32 mapId = 7;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->mapid(), target);
  }
  
  // optional bool isRevenge = 8;
  if (has_isrevenge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->isrevenge(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleResults::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional bool result = 2;
    if (has_result()) {
      total_size += 1 + 1;
    }
    
    // optional string arenaPlayerId = 4;
    if (has_arenaplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->arenaplayerid());
    }
    
    // optional int32 mapId = 7;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }
    
    // optional bool isRevenge = 8;
    if (has_isrevenge()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .protobuf.newBattle.BattleData battleData = 3;
  total_size += 1 * this->battledata_size();
  for (int i = 0; i < this->battledata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battledata(i));
  }
  
  // repeated .protobuf.common.LineupDetail selfLineup = 5;
  total_size += 1 * this->selflineup_size();
  for (int i = 0; i < this->selflineup_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->selflineup(i));
  }
  
  // repeated .protobuf.common.LineupDetail enemyLineup = 6;
  total_size += 1 * this->enemylineup_size();
  for (int i = 0; i < this->enemylineup_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->enemylineup(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleResults::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleResults* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleResults*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleResults::MergeFrom(const BattleResults& from) {
  GOOGLE_CHECK_NE(&from, this);
  battledata_.MergeFrom(from.battledata_);
  selflineup_.MergeFrom(from.selflineup_);
  enemylineup_.MergeFrom(from.enemylineup_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_arenaplayerid()) {
      set_arenaplayerid(from.arenaplayerid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_isrevenge()) {
      set_isrevenge(from.isrevenge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleResults::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleResults::CopyFrom(const BattleResults& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleResults::IsInitialized() const {
  
  for (int i = 0; i < battledata_size(); i++) {
    if (!this->battledata(i).IsInitialized()) return false;
  }
  for (int i = 0; i < selflineup_size(); i++) {
    if (!this->selflineup(i).IsInitialized()) return false;
  }
  for (int i = 0; i < enemylineup_size(); i++) {
    if (!this->enemylineup(i).IsInitialized()) return false;
  }
  return true;
}

void BattleResults::Swap(BattleResults* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(result_, other->result_);
    battledata_.Swap(&other->battledata_);
    std::swap(arenaplayerid_, other->arenaplayerid_);
    selflineup_.Swap(&other->selflineup_);
    enemylineup_.Swap(&other->enemylineup_);
    std::swap(mapid_, other->mapid_);
    std::swap(isrevenge_, other->isrevenge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleResults::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleResults_descriptor_;
  metadata.reflection = BattleResults_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleRequest::kTypeFieldNumber;
const int BattleRequest::kBeAttackIdFieldNumber;
const int BattleRequest::kNeedLineupFieldNumber;
const int BattleRequest::kMapIdFieldNumber;
#endif  // !_MSC_VER

BattleRequest::BattleRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleRequest::InitAsDefaultInstance() {
}

BattleRequest::BattleRequest(const BattleRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  beattackid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  needlineup_ = false;
  mapid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleRequest::~BattleRequest() {
  SharedDtor();
}

void BattleRequest::SharedDtor() {
  if (beattackid_ != &::google::protobuf::internal::kEmptyString) {
    delete beattackid_;
  }
  if (this != default_instance_) {
  }
}

void BattleRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleRequest_descriptor_;
}

const BattleRequest& BattleRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_newBattle_2eproto();  return *default_instance_;
}

BattleRequest* BattleRequest::default_instance_ = NULL;

BattleRequest* BattleRequest::New() const {
  return new BattleRequest;
}

void BattleRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_beattackid()) {
      if (beattackid_ != &::google::protobuf::internal::kEmptyString) {
        beattackid_->clear();
      }
    }
    needlineup_ = false;
    mapid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_beAttackId;
        break;
      }
      
      // optional string beAttackId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_beAttackId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_beattackid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->beattackid().data(), this->beattackid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_needLineup;
        break;
      }
      
      // optional bool needLineup = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needLineup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needlineup_)));
          set_has_needlineup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mapId;
        break;
      }
      
      // optional int32 mapId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // optional string beAttackId = 2;
  if (has_beattackid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beattackid().data(), this->beattackid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->beattackid(), output);
  }
  
  // optional bool needLineup = 3;
  if (has_needlineup()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->needlineup(), output);
  }
  
  // optional int32 mapId = 4;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mapid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // optional string beAttackId = 2;
  if (has_beattackid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beattackid().data(), this->beattackid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->beattackid(), target);
  }
  
  // optional bool needLineup = 3;
  if (has_needlineup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->needlineup(), target);
  }
  
  // optional int32 mapId = 4;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mapid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional string beAttackId = 2;
    if (has_beattackid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->beattackid());
    }
    
    // optional bool needLineup = 3;
    if (has_needlineup()) {
      total_size += 1 + 1;
    }
    
    // optional int32 mapId = 4;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleRequest::MergeFrom(const BattleRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_beattackid()) {
      set_beattackid(from.beattackid());
    }
    if (from.has_needlineup()) {
      set_needlineup(from.needlineup());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleRequest::CopyFrom(const BattleRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void BattleRequest::Swap(BattleRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(beattackid_, other->beattackid_);
    std::swap(needlineup_, other->needlineup_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleRequest_descriptor_;
  metadata.reflection = BattleRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleInfo::kTypeFieldNumber;
const int BattleInfo::kEnemyidFieldNumber;
const int BattleInfo::kTeamNameFieldNumber;
const int BattleInfo::kEnemylinupFieldNumber;
const int BattleInfo::kShowinfoFieldNumber;
const int BattleInfo::kEnemybloodFieldNumber;
const int BattleInfo::kLineupTemplateFieldNumber;
#endif  // !_MSC_VER

BattleInfo::BattleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleInfo::InitAsDefaultInstance() {
}

BattleInfo::BattleInfo(const BattleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  enemyid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  teamname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleInfo::~BattleInfo() {
  SharedDtor();
}

void BattleInfo::SharedDtor() {
  if (enemyid_ != &::google::protobuf::internal::kEmptyString) {
    delete enemyid_;
  }
  if (teamname_ != &::google::protobuf::internal::kEmptyString) {
    delete teamname_;
  }
  if (this != default_instance_) {
  }
}

void BattleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleInfo_descriptor_;
}

const BattleInfo& BattleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_newBattle_2eproto();  return *default_instance_;
}

BattleInfo* BattleInfo::default_instance_ = NULL;

BattleInfo* BattleInfo::New() const {
  return new BattleInfo;
}

void BattleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_enemyid()) {
      if (enemyid_ != &::google::protobuf::internal::kEmptyString) {
        enemyid_->clear();
      }
    }
    if (has_teamname()) {
      if (teamname_ != &::google::protobuf::internal::kEmptyString) {
        teamname_->clear();
      }
    }
  }
  enemylinup_.Clear();
  showinfo_.Clear();
  enemyblood_.Clear();
  lineuptemplate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_enemyid;
        break;
      }
      
      // optional string enemyid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enemyid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_enemyid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->enemyid().data(), this->enemyid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_teamName;
        break;
      }
      
      // optional string teamName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_teamName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_teamname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->teamname().data(), this->teamname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_enemylinup;
        break;
      }
      
      // repeated .protobuf.common.LineupDetail enemylinup = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enemylinup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_enemylinup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_enemylinup;
        if (input->ExpectTag(50)) goto parse_showinfo;
        break;
      }
      
      // repeated .protobuf.newBattle.iconinfo showinfo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_showinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_showinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_showinfo;
        if (input->ExpectTag(58)) goto parse_enemyblood;
        break;
      }
      
      // repeated .protobuf.common.KVint3264 enemyblood = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enemyblood:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_enemyblood()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_enemyblood;
        if (input->ExpectTag(66)) goto parse_lineupTemplate;
        break;
      }
      
      // repeated .protobuf.common.LineupTemplate lineupTemplate = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lineupTemplate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lineuptemplate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_lineupTemplate;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // optional string enemyid = 3;
  if (has_enemyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->enemyid().data(), this->enemyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->enemyid(), output);
  }
  
  // optional string teamName = 4;
  if (has_teamname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->teamname().data(), this->teamname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->teamname(), output);
  }
  
  // repeated .protobuf.common.LineupDetail enemylinup = 5;
  for (int i = 0; i < this->enemylinup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->enemylinup(i), output);
  }
  
  // repeated .protobuf.newBattle.iconinfo showinfo = 6;
  for (int i = 0; i < this->showinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->showinfo(i), output);
  }
  
  // repeated .protobuf.common.KVint3264 enemyblood = 7;
  for (int i = 0; i < this->enemyblood_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->enemyblood(i), output);
  }
  
  // repeated .protobuf.common.LineupTemplate lineupTemplate = 8;
  for (int i = 0; i < this->lineuptemplate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->lineuptemplate(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // optional string enemyid = 3;
  if (has_enemyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->enemyid().data(), this->enemyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->enemyid(), target);
  }
  
  // optional string teamName = 4;
  if (has_teamname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->teamname().data(), this->teamname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->teamname(), target);
  }
  
  // repeated .protobuf.common.LineupDetail enemylinup = 5;
  for (int i = 0; i < this->enemylinup_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->enemylinup(i), target);
  }
  
  // repeated .protobuf.newBattle.iconinfo showinfo = 6;
  for (int i = 0; i < this->showinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->showinfo(i), target);
  }
  
  // repeated .protobuf.common.KVint3264 enemyblood = 7;
  for (int i = 0; i < this->enemyblood_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->enemyblood(i), target);
  }
  
  // repeated .protobuf.common.LineupTemplate lineupTemplate = 8;
  for (int i = 0; i < this->lineuptemplate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->lineuptemplate(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional string enemyid = 3;
    if (has_enemyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->enemyid());
    }
    
    // optional string teamName = 4;
    if (has_teamname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->teamname());
    }
    
  }
  // repeated .protobuf.common.LineupDetail enemylinup = 5;
  total_size += 1 * this->enemylinup_size();
  for (int i = 0; i < this->enemylinup_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->enemylinup(i));
  }
  
  // repeated .protobuf.newBattle.iconinfo showinfo = 6;
  total_size += 1 * this->showinfo_size();
  for (int i = 0; i < this->showinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->showinfo(i));
  }
  
  // repeated .protobuf.common.KVint3264 enemyblood = 7;
  total_size += 1 * this->enemyblood_size();
  for (int i = 0; i < this->enemyblood_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->enemyblood(i));
  }
  
  // repeated .protobuf.common.LineupTemplate lineupTemplate = 8;
  total_size += 1 * this->lineuptemplate_size();
  for (int i = 0; i < this->lineuptemplate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lineuptemplate(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleInfo::MergeFrom(const BattleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  enemylinup_.MergeFrom(from.enemylinup_);
  showinfo_.MergeFrom(from.showinfo_);
  enemyblood_.MergeFrom(from.enemyblood_);
  lineuptemplate_.MergeFrom(from.lineuptemplate_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_enemyid()) {
      set_enemyid(from.enemyid());
    }
    if (from.has_teamname()) {
      set_teamname(from.teamname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleInfo::CopyFrom(const BattleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < enemylinup_size(); i++) {
    if (!this->enemylinup(i).IsInitialized()) return false;
  }
  for (int i = 0; i < showinfo_size(); i++) {
    if (!this->showinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < enemyblood_size(); i++) {
    if (!this->enemyblood(i).IsInitialized()) return false;
  }
  for (int i = 0; i < lineuptemplate_size(); i++) {
    if (!this->lineuptemplate(i).IsInitialized()) return false;
  }
  return true;
}

void BattleInfo::Swap(BattleInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(enemyid_, other->enemyid_);
    std::swap(teamname_, other->teamname_);
    enemylinup_.Swap(&other->enemylinup_);
    showinfo_.Swap(&other->showinfo_);
    enemyblood_.Swap(&other->enemyblood_);
    lineuptemplate_.Swap(&other->lineuptemplate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleInfo_descriptor_;
  metadata.reflection = BattleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleStart::kTypeFieldNumber;
const int BattleStart::kEnemyIdFieldNumber;
const int BattleStart::kLineupindexFieldNumber;
const int BattleStart::kLineupIdsFieldNumber;
const int BattleStart::kLineuppetFieldNumber;
const int BattleStart::kAttackCntFieldNumber;
const int BattleStart::kIsSkipFieldNumber;
const int BattleStart::kSuspectIslandIdFieldNumber;
const int BattleStart::kGuidevFieldNumber;
#endif  // !_MSC_VER

BattleStart::BattleStart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleStart::InitAsDefaultInstance() {
}

BattleStart::BattleStart(const BattleStart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleStart::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  enemyid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lineupindex_ = 0;
  lineuppet_ = 0;
  attackcnt_ = 0;
  isskip_ = false;
  suspectislandid_ = 0;
  guidev_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleStart::~BattleStart() {
  SharedDtor();
}

void BattleStart::SharedDtor() {
  if (enemyid_ != &::google::protobuf::internal::kEmptyString) {
    delete enemyid_;
  }
  if (guidev_ != &::google::protobuf::internal::kEmptyString) {
    delete guidev_;
  }
  if (this != default_instance_) {
  }
}

void BattleStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleStart_descriptor_;
}

const BattleStart& BattleStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_newBattle_2eproto();  return *default_instance_;
}

BattleStart* BattleStart::default_instance_ = NULL;

BattleStart* BattleStart::New() const {
  return new BattleStart;
}

void BattleStart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_enemyid()) {
      if (enemyid_ != &::google::protobuf::internal::kEmptyString) {
        enemyid_->clear();
      }
    }
    lineupindex_ = 0;
    lineuppet_ = 0;
    attackcnt_ = 0;
    isskip_ = false;
    suspectislandid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_guidev()) {
      if (guidev_ != &::google::protobuf::internal::kEmptyString) {
        guidev_->clear();
      }
    }
  }
  lineupids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_enemyId;
        break;
      }
      
      // required string enemyId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enemyId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_enemyid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->enemyid().data(), this->enemyid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lineupindex;
        break;
      }
      
      // optional int32 lineupindex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lineupindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lineupindex_)));
          set_has_lineupindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_lineupIds;
        break;
      }
      
      // repeated .protobuf.common.Id32 lineupIds = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lineupIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lineupids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_lineupIds;
        if (input->ExpectTag(40)) goto parse_lineuppet;
        break;
      }
      
      // optional int32 lineuppet = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lineuppet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lineuppet_)));
          set_has_lineuppet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_attackCnt;
        break;
      }
      
      // optional int32 attackCnt = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attackCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attackcnt_)));
          set_has_attackcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_isSkip;
        break;
      }
      
      // optional bool isSkip = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isSkip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isskip_)));
          set_has_isskip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_suspectIslandId;
        break;
      }
      
      // optional int32 suspectIslandId = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suspectIslandId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &suspectislandid_)));
          set_has_suspectislandid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_guidev;
        break;
      }
      
      // optional string guidev = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guidev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guidev()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guidev().data(), this->guidev().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // required string enemyId = 2;
  if (has_enemyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->enemyid().data(), this->enemyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->enemyid(), output);
  }
  
  // optional int32 lineupindex = 3;
  if (has_lineupindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lineupindex(), output);
  }
  
  // repeated .protobuf.common.Id32 lineupIds = 4;
  for (int i = 0; i < this->lineupids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->lineupids(i), output);
  }
  
  // optional int32 lineuppet = 5;
  if (has_lineuppet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->lineuppet(), output);
  }
  
  // optional int32 attackCnt = 6;
  if (has_attackcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->attackcnt(), output);
  }
  
  // optional bool isSkip = 7;
  if (has_isskip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isskip(), output);
  }
  
  // optional int32 suspectIslandId = 8;
  if (has_suspectislandid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->suspectislandid(), output);
  }
  
  // optional string guidev = 10;
  if (has_guidev()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guidev().data(), this->guidev().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->guidev(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // required string enemyId = 2;
  if (has_enemyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->enemyid().data(), this->enemyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->enemyid(), target);
  }
  
  // optional int32 lineupindex = 3;
  if (has_lineupindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lineupindex(), target);
  }
  
  // repeated .protobuf.common.Id32 lineupIds = 4;
  for (int i = 0; i < this->lineupids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->lineupids(i), target);
  }
  
  // optional int32 lineuppet = 5;
  if (has_lineuppet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->lineuppet(), target);
  }
  
  // optional int32 attackCnt = 6;
  if (has_attackcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->attackcnt(), target);
  }
  
  // optional bool isSkip = 7;
  if (has_isskip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isskip(), target);
  }
  
  // optional int32 suspectIslandId = 8;
  if (has_suspectislandid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->suspectislandid(), target);
  }
  
  // optional string guidev = 10;
  if (has_guidev()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guidev().data(), this->guidev().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->guidev(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleStart::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required string enemyId = 2;
    if (has_enemyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->enemyid());
    }
    
    // optional int32 lineupindex = 3;
    if (has_lineupindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lineupindex());
    }
    
    // optional int32 lineuppet = 5;
    if (has_lineuppet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lineuppet());
    }
    
    // optional int32 attackCnt = 6;
    if (has_attackcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attackcnt());
    }
    
    // optional bool isSkip = 7;
    if (has_isskip()) {
      total_size += 1 + 1;
    }
    
    // optional int32 suspectIslandId = 8;
    if (has_suspectislandid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->suspectislandid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string guidev = 10;
    if (has_guidev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guidev());
    }
    
  }
  // repeated .protobuf.common.Id32 lineupIds = 4;
  total_size += 1 * this->lineupids_size();
  for (int i = 0; i < this->lineupids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lineupids(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleStart::MergeFrom(const BattleStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  lineupids_.MergeFrom(from.lineupids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_enemyid()) {
      set_enemyid(from.enemyid());
    }
    if (from.has_lineupindex()) {
      set_lineupindex(from.lineupindex());
    }
    if (from.has_lineuppet()) {
      set_lineuppet(from.lineuppet());
    }
    if (from.has_attackcnt()) {
      set_attackcnt(from.attackcnt());
    }
    if (from.has_isskip()) {
      set_isskip(from.isskip());
    }
    if (from.has_suspectislandid()) {
      set_suspectislandid(from.suspectislandid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_guidev()) {
      set_guidev(from.guidev());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleStart::CopyFrom(const BattleStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleStart::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < lineupids_size(); i++) {
    if (!this->lineupids(i).IsInitialized()) return false;
  }
  return true;
}

void BattleStart::Swap(BattleStart* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(enemyid_, other->enemyid_);
    std::swap(lineupindex_, other->lineupindex_);
    lineupids_.Swap(&other->lineupids_);
    std::swap(lineuppet_, other->lineuppet_);
    std::swap(attackcnt_, other->attackcnt_);
    std::swap(isskip_, other->isskip_);
    std::swap(suspectislandid_, other->suspectislandid_);
    std::swap(guidev_, other->guidev_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleStart_descriptor_;
  metadata.reflection = BattleStart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleEnd::kTypeFieldNumber;
const int BattleEnd::kEnemyIdFieldNumber;
const int BattleEnd::kVictoryFieldNumber;
const int BattleEnd::kRewardsFieldNumber;
const int BattleEnd::kPointsFieldNumber;
const int BattleEnd::kSignFieldNumber;
const int BattleEnd::kLenFieldNumber;
const int BattleEnd::kDataFieldNumber;
const int BattleEnd::kDamageFieldNumber;
const int BattleEnd::kSuspectIslandIdFieldNumber;
const int BattleEnd::kIsSpFieldNumber;
const int BattleEnd::kSpRewardsFieldNumber;
#endif  // !_MSC_VER

BattleEnd::BattleEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleEnd::InitAsDefaultInstance() {
}

BattleEnd::BattleEnd(const BattleEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleEnd::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  enemyid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  len_ = 0;
  damage_ = GOOGLE_LONGLONG(0);
  suspectislandid_ = 0;
  issp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleEnd::~BattleEnd() {
  SharedDtor();
}

void BattleEnd::SharedDtor() {
  if (enemyid_ != &::google::protobuf::internal::kEmptyString) {
    delete enemyid_;
  }
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (this != default_instance_) {
  }
}

void BattleEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleEnd_descriptor_;
}

const BattleEnd& BattleEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_newBattle_2eproto();  return *default_instance_;
}

BattleEnd* BattleEnd::default_instance_ = NULL;

BattleEnd* BattleEnd::New() const {
  return new BattleEnd;
}

void BattleEnd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_enemyid()) {
      if (enemyid_ != &::google::protobuf::internal::kEmptyString) {
        enemyid_->clear();
      }
    }
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::kEmptyString) {
        sign_->clear();
      }
    }
    len_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    damage_ = GOOGLE_LONGLONG(0);
    suspectislandid_ = 0;
    issp_ = 0;
  }
  victory_.Clear();
  rewards_.Clear();
  points_.Clear();
  data_.Clear();
  sprewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_enemyId;
        break;
      }
      
      // required string enemyId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enemyId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_enemyid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->enemyid().data(), this->enemyid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_victory;
        break;
      }
      
      // repeated bool victory = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_victory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 24, input, this->mutable_victory())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_victory())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_victory;
        if (input->ExpectTag(34)) goto parse_rewards;
        break;
      }
      
      // repeated .protobuf.common.KVint3232 rewards = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_rewards;
        if (input->ExpectTag(42)) goto parse_points;
        break;
      }
      
      // repeated string points = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_points()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->points(0).data(), this->points(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_points;
        if (input->ExpectTag(50)) goto parse_sign;
        break;
      }
      
      // required string sign = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_len;
        break;
      }
      
      // required int32 len = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_data;
        break;
      }
      
      // repeated .protobuf.newBattle.BattleData data = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_data;
        if (input->ExpectTag(72)) goto parse_damage;
        break;
      }
      
      // optional int64 damage = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_suspectIslandId;
        break;
      }
      
      // optional int32 suspectIslandId = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suspectIslandId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &suspectislandid_)));
          set_has_suspectislandid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_isSp;
        break;
      }
      
      // optional int32 isSp = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isSp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &issp_)));
          set_has_issp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_spRewards;
        break;
      }
      
      // repeated .protobuf.common.KVint3232 spRewards = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spRewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sprewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_spRewards;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // required string enemyId = 2;
  if (has_enemyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->enemyid().data(), this->enemyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->enemyid(), output);
  }
  
  // repeated bool victory = 3;
  for (int i = 0; i < this->victory_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      3, this->victory(i), output);
  }
  
  // repeated .protobuf.common.KVint3232 rewards = 4;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rewards(i), output);
  }
  
  // repeated string points = 5;
  for (int i = 0; i < this->points_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->points(i).data(), this->points(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->points(i), output);
  }
  
  // required string sign = 6;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->sign(), output);
  }
  
  // required int32 len = 7;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->len(), output);
  }
  
  // repeated .protobuf.newBattle.BattleData data = 8;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->data(i), output);
  }
  
  // optional int64 damage = 9;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->damage(), output);
  }
  
  // optional int32 suspectIslandId = 10;
  if (has_suspectislandid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->suspectislandid(), output);
  }
  
  // optional int32 isSp = 11;
  if (has_issp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->issp(), output);
  }
  
  // repeated .protobuf.common.KVint3232 spRewards = 12;
  for (int i = 0; i < this->sprewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->sprewards(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // required string enemyId = 2;
  if (has_enemyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->enemyid().data(), this->enemyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->enemyid(), target);
  }
  
  // repeated bool victory = 3;
  for (int i = 0; i < this->victory_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(3, this->victory(i), target);
  }
  
  // repeated .protobuf.common.KVint3232 rewards = 4;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rewards(i), target);
  }
  
  // repeated string points = 5;
  for (int i = 0; i < this->points_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->points(i).data(), this->points(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->points(i), target);
  }
  
  // required string sign = 6;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->sign(), target);
  }
  
  // required int32 len = 7;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->len(), target);
  }
  
  // repeated .protobuf.newBattle.BattleData data = 8;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->data(i), target);
  }
  
  // optional int64 damage = 9;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->damage(), target);
  }
  
  // optional int32 suspectIslandId = 10;
  if (has_suspectislandid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->suspectislandid(), target);
  }
  
  // optional int32 isSp = 11;
  if (has_issp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->issp(), target);
  }
  
  // repeated .protobuf.common.KVint3232 spRewards = 12;
  for (int i = 0; i < this->sprewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->sprewards(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleEnd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required string enemyId = 2;
    if (has_enemyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->enemyid());
    }
    
    // required string sign = 6;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign());
    }
    
    // required int32 len = 7;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->len());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 damage = 9;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->damage());
    }
    
    // optional int32 suspectIslandId = 10;
    if (has_suspectislandid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->suspectislandid());
    }
    
    // optional int32 isSp = 11;
    if (has_issp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->issp());
    }
    
  }
  // repeated bool victory = 3;
  {
    int data_size = 0;
    data_size = 1 * this->victory_size();
    total_size += 1 * this->victory_size() + data_size;
  }
  
  // repeated .protobuf.common.KVint3232 rewards = 4;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }
  
  // repeated string points = 5;
  total_size += 1 * this->points_size();
  for (int i = 0; i < this->points_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->points(i));
  }
  
  // repeated .protobuf.newBattle.BattleData data = 8;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }
  
  // repeated .protobuf.common.KVint3232 spRewards = 12;
  total_size += 1 * this->sprewards_size();
  for (int i = 0; i < this->sprewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sprewards(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleEnd::MergeFrom(const BattleEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  victory_.MergeFrom(from.victory_);
  rewards_.MergeFrom(from.rewards_);
  points_.MergeFrom(from.points_);
  data_.MergeFrom(from.data_);
  sprewards_.MergeFrom(from.sprewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_enemyid()) {
      set_enemyid(from.enemyid());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_suspectislandid()) {
      set_suspectislandid(from.suspectislandid());
    }
    if (from.has_issp()) {
      set_issp(from.issp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleEnd::CopyFrom(const BattleEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleEnd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000063) != 0x00000063) return false;
  
  for (int i = 0; i < rewards_size(); i++) {
    if (!this->rewards(i).IsInitialized()) return false;
  }
  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  for (int i = 0; i < sprewards_size(); i++) {
    if (!this->sprewards(i).IsInitialized()) return false;
  }
  return true;
}

void BattleEnd::Swap(BattleEnd* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(enemyid_, other->enemyid_);
    victory_.Swap(&other->victory_);
    rewards_.Swap(&other->rewards_);
    points_.Swap(&other->points_);
    std::swap(sign_, other->sign_);
    std::swap(len_, other->len_);
    data_.Swap(&other->data_);
    std::swap(damage_, other->damage_);
    std::swap(suspectislandid_, other->suspectislandid_);
    std::swap(issp_, other->issp_);
    sprewards_.Swap(&other->sprewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleEnd_descriptor_;
  metadata.reflection = BattleEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleRecord::kRecordFieldNumber;
const int BattleRecord::kLenFieldNumber;
#endif  // !_MSC_VER

BattleRecord::BattleRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleRecord::InitAsDefaultInstance() {
}

BattleRecord::BattleRecord(const BattleRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleRecord::SharedCtor() {
  _cached_size_ = 0;
  record_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  len_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleRecord::~BattleRecord() {
  SharedDtor();
}

void BattleRecord::SharedDtor() {
  if (record_ != &::google::protobuf::internal::kEmptyString) {
    delete record_;
  }
  if (this != default_instance_) {
  }
}

void BattleRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleRecord_descriptor_;
}

const BattleRecord& BattleRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_newBattle_2eproto();  return *default_instance_;
}

BattleRecord* BattleRecord::default_instance_ = NULL;

BattleRecord* BattleRecord::New() const {
  return new BattleRecord;
}

void BattleRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_record()) {
      if (record_ != &::google::protobuf::internal::kEmptyString) {
        record_->clear();
      }
    }
    len_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string record = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_record()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->record().data(), this->record().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_len;
        break;
      }
      
      // required int32 len = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string record = 1;
  if (has_record()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->record().data(), this->record().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->record(), output);
  }
  
  // required int32 len = 2;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->len(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string record = 1;
  if (has_record()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->record().data(), this->record().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->record(), target);
  }
  
  // required int32 len = 2;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->len(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleRecord::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string record = 1;
    if (has_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->record());
    }
    
    // required int32 len = 2;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->len());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleRecord::MergeFrom(const BattleRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_record()) {
      set_record(from.record());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleRecord::CopyFrom(const BattleRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void BattleRecord::Swap(BattleRecord* other) {
  if (other != this) {
    std::swap(record_, other->record_);
    std::swap(len_, other->len_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleRecord_descriptor_;
  metadata.reflection = BattleRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleVideo::kAtPetIdFieldNumber;
const int BattleVideo::kAtPetFieldNumber;
const int BattleVideo::kDePetIdFieldNumber;
const int BattleVideo::kDePetFieldNumber;
const int BattleVideo::kSignFieldNumber;
const int BattleVideo::kLenFieldNumber;
const int BattleVideo::kVictoryFieldNumber;
const int BattleVideo::kTypeFieldNumber;
#endif  // !_MSC_VER

BattleVideo::BattleVideo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleVideo::InitAsDefaultInstance() {
}

BattleVideo::BattleVideo(const BattleVideo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleVideo::SharedCtor() {
  _cached_size_ = 0;
  atpetid_ = 0;
  depetid_ = 0;
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  len_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleVideo::~BattleVideo() {
  SharedDtor();
}

void BattleVideo::SharedDtor() {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (this != default_instance_) {
  }
}

void BattleVideo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleVideo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleVideo_descriptor_;
}

const BattleVideo& BattleVideo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_newBattle_2eproto();  return *default_instance_;
}

BattleVideo* BattleVideo::default_instance_ = NULL;

BattleVideo* BattleVideo::New() const {
  return new BattleVideo;
}

void BattleVideo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    atpetid_ = 0;
    depetid_ = 0;
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::kEmptyString) {
        sign_->clear();
      }
    }
    len_ = 0;
    type_ = 0;
  }
  atpet_.Clear();
  depet_.Clear();
  victory_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleVideo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 atPetId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &atpetid_)));
          set_has_atpetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_atPet;
        break;
      }
      
      // repeated .protobuf.common.Pet atPet = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_atPet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_atpet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_atPet;
        if (input->ExpectTag(24)) goto parse_dePetId;
        break;
      }
      
      // required int32 dePetId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dePetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &depetid_)));
          set_has_depetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_dePet;
        break;
      }
      
      // repeated .protobuf.common.Pet dePet = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dePet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_depet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_dePet;
        if (input->ExpectTag(42)) goto parse_sign;
        break;
      }
      
      // required string sign = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_len;
        break;
      }
      
      // required int32 len = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_victory;
        break;
      }
      
      // repeated bool victory = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_victory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 56, input, this->mutable_victory())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_victory())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_victory;
        if (input->ExpectTag(64)) goto parse_type;
        break;
      }
      
      // required int32 type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleVideo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 atPetId = 1;
  if (has_atpetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->atpetid(), output);
  }
  
  // repeated .protobuf.common.Pet atPet = 2;
  for (int i = 0; i < this->atpet_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->atpet(i), output);
  }
  
  // required int32 dePetId = 3;
  if (has_depetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->depetid(), output);
  }
  
  // repeated .protobuf.common.Pet dePet = 4;
  for (int i = 0; i < this->depet_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->depet(i), output);
  }
  
  // required string sign = 5;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->sign(), output);
  }
  
  // required int32 len = 6;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->len(), output);
  }
  
  // repeated bool victory = 7;
  for (int i = 0; i < this->victory_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      7, this->victory(i), output);
  }
  
  // required int32 type = 8;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleVideo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 atPetId = 1;
  if (has_atpetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->atpetid(), target);
  }
  
  // repeated .protobuf.common.Pet atPet = 2;
  for (int i = 0; i < this->atpet_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->atpet(i), target);
  }
  
  // required int32 dePetId = 3;
  if (has_depetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->depetid(), target);
  }
  
  // repeated .protobuf.common.Pet dePet = 4;
  for (int i = 0; i < this->depet_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->depet(i), target);
  }
  
  // required string sign = 5;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sign(), target);
  }
  
  // required int32 len = 6;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->len(), target);
  }
  
  // repeated bool victory = 7;
  for (int i = 0; i < this->victory_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(7, this->victory(i), target);
  }
  
  // required int32 type = 8;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleVideo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 atPetId = 1;
    if (has_atpetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->atpetid());
    }
    
    // required int32 dePetId = 3;
    if (has_depetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->depetid());
    }
    
    // required string sign = 5;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign());
    }
    
    // required int32 len = 6;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->len());
    }
    
    // required int32 type = 8;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
  }
  // repeated .protobuf.common.Pet atPet = 2;
  total_size += 1 * this->atpet_size();
  for (int i = 0; i < this->atpet_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->atpet(i));
  }
  
  // repeated .protobuf.common.Pet dePet = 4;
  total_size += 1 * this->depet_size();
  for (int i = 0; i < this->depet_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->depet(i));
  }
  
  // repeated bool victory = 7;
  {
    int data_size = 0;
    data_size = 1 * this->victory_size();
    total_size += 1 * this->victory_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleVideo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleVideo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleVideo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleVideo::MergeFrom(const BattleVideo& from) {
  GOOGLE_CHECK_NE(&from, this);
  atpet_.MergeFrom(from.atpet_);
  depet_.MergeFrom(from.depet_);
  victory_.MergeFrom(from.victory_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_atpetid()) {
      set_atpetid(from.atpetid());
    }
    if (from.has_depetid()) {
      set_depetid(from.depetid());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleVideo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleVideo::CopyFrom(const BattleVideo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleVideo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000b5) != 0x000000b5) return false;
  
  for (int i = 0; i < atpet_size(); i++) {
    if (!this->atpet(i).IsInitialized()) return false;
  }
  for (int i = 0; i < depet_size(); i++) {
    if (!this->depet(i).IsInitialized()) return false;
  }
  return true;
}

void BattleVideo::Swap(BattleVideo* other) {
  if (other != this) {
    std::swap(atpetid_, other->atpetid_);
    atpet_.Swap(&other->atpet_);
    std::swap(depetid_, other->depetid_);
    depet_.Swap(&other->depet_);
    std::swap(sign_, other->sign_);
    std::swap(len_, other->len_);
    victory_.Swap(&other->victory_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleVideo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleVideo_descriptor_;
  metadata.reflection = BattleVideo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleData::kIndexFieldNumber;
const int BattleData::kIdFieldNumber;
const int BattleData::kLvFieldNumber;
const int BattleData::kDamageFieldNumber;
const int BattleData::kHealFieldNumber;
const int BattleData::kReceiveDamageFieldNumber;
const int BattleData::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

BattleData::BattleData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleData::InitAsDefaultInstance() {
}

BattleData::BattleData(const BattleData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleData::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  id_ = 0;
  lv_ = 0;
  damage_ = 0;
  heal_ = 0;
  receivedamage_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleData::~BattleData() {
  SharedDtor();
}

void BattleData::SharedDtor() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (this != default_instance_) {
  }
}

void BattleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleData_descriptor_;
}

const BattleData& BattleData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_newBattle_2eproto();  return *default_instance_;
}

BattleData* BattleData::default_instance_ = NULL;

BattleData* BattleData::New() const {
  return new BattleData;
}

void BattleData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    id_ = 0;
    lv_ = 0;
    damage_ = 0;
    heal_ = 0;
    receivedamage_ = 0;
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // required int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lv;
        break;
      }
      
      // required int32 lv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_damage;
        break;
      }
      
      // required int32 damage = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_heal;
        break;
      }
      
      // required int32 heal = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &heal_)));
          set_has_heal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_receiveDamage;
        break;
      }
      
      // required int32 receiveDamage = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_receiveDamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &receivedamage_)));
          set_has_receivedamage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_playerId;
        break;
      }
      
      // optional string playerId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }
  
  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  // required int32 lv = 3;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lv(), output);
  }
  
  // required int32 damage = 4;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->damage(), output);
  }
  
  // required int32 heal = 5;
  if (has_heal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->heal(), output);
  }
  
  // required int32 receiveDamage = 6;
  if (has_receivedamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->receivedamage(), output);
  }
  
  // optional string playerId = 7;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }
  
  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  // required int32 lv = 3;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lv(), target);
  }
  
  // required int32 damage = 4;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->damage(), target);
  }
  
  // required int32 heal = 5;
  if (has_heal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->heal(), target);
  }
  
  // required int32 receiveDamage = 6;
  if (has_receivedamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->receivedamage(), target);
  }
  
  // optional string playerId = 7;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required int32 lv = 3;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }
    
    // required int32 damage = 4;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage());
    }
    
    // required int32 heal = 5;
    if (has_heal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->heal());
    }
    
    // required int32 receiveDamage = 6;
    if (has_receivedamage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->receivedamage());
    }
    
    // optional string playerId = 7;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleData::MergeFrom(const BattleData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_heal()) {
      set_heal(from.heal());
    }
    if (from.has_receivedamage()) {
      set_receivedamage(from.receivedamage());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleData::CopyFrom(const BattleData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void BattleData::Swap(BattleData* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(id_, other->id_);
    std::swap(lv_, other->lv_);
    std::swap(damage_, other->damage_);
    std::swap(heal_, other->heal_);
    std::swap(receivedamage_, other->receivedamage_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleData_descriptor_;
  metadata.reflection = BattleData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewBattleStartM::kTypeFieldNumber;
const int NewBattleStartM::kEnemyIdFieldNumber;
const int NewBattleStartM::kPerLineupFieldNumber;
const int NewBattleStartM::kLineupIdsFieldNumber;
const int NewBattleStartM::kAttackCntFieldNumber;
const int NewBattleStartM::kIsSkipFieldNumber;
#endif  // !_MSC_VER

NewBattleStartM::NewBattleStartM()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NewBattleStartM::InitAsDefaultInstance() {
}

NewBattleStartM::NewBattleStartM(const NewBattleStartM& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NewBattleStartM::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  enemyid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  attackcnt_ = 0;
  isskip_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewBattleStartM::~NewBattleStartM() {
  SharedDtor();
}

void NewBattleStartM::SharedDtor() {
  if (enemyid_ != &::google::protobuf::internal::kEmptyString) {
    delete enemyid_;
  }
  if (this != default_instance_) {
  }
}

void NewBattleStartM::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewBattleStartM::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewBattleStartM_descriptor_;
}

const NewBattleStartM& NewBattleStartM::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_newBattle_2eproto();  return *default_instance_;
}

NewBattleStartM* NewBattleStartM::default_instance_ = NULL;

NewBattleStartM* NewBattleStartM::New() const {
  return new NewBattleStartM;
}

void NewBattleStartM::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_enemyid()) {
      if (enemyid_ != &::google::protobuf::internal::kEmptyString) {
        enemyid_->clear();
      }
    }
    attackcnt_ = 0;
    isskip_ = false;
  }
  perlineup_.Clear();
  lineupids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewBattleStartM::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_enemyId;
        break;
      }
      
      // required string enemyId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enemyId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_enemyid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->enemyid().data(), this->enemyid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_perLineup;
        break;
      }
      
      // repeated .protobuf.common.LineupTemplate perLineup = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_perLineup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_perlineup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_perLineup;
        if (input->ExpectTag(34)) goto parse_lineupIds;
        break;
      }
      
      // repeated .protobuf.common.Id32 lineupIds = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lineupIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lineupids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_lineupIds;
        if (input->ExpectTag(40)) goto parse_attackCnt;
        break;
      }
      
      // optional int32 attackCnt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attackCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attackcnt_)));
          set_has_attackcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_isSkip;
        break;
      }
      
      // optional bool isSkip = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isSkip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isskip_)));
          set_has_isskip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NewBattleStartM::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // required string enemyId = 2;
  if (has_enemyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->enemyid().data(), this->enemyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->enemyid(), output);
  }
  
  // repeated .protobuf.common.LineupTemplate perLineup = 3;
  for (int i = 0; i < this->perlineup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->perlineup(i), output);
  }
  
  // repeated .protobuf.common.Id32 lineupIds = 4;
  for (int i = 0; i < this->lineupids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->lineupids(i), output);
  }
  
  // optional int32 attackCnt = 5;
  if (has_attackcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->attackcnt(), output);
  }
  
  // optional bool isSkip = 6;
  if (has_isskip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isskip(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NewBattleStartM::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // required string enemyId = 2;
  if (has_enemyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->enemyid().data(), this->enemyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->enemyid(), target);
  }
  
  // repeated .protobuf.common.LineupTemplate perLineup = 3;
  for (int i = 0; i < this->perlineup_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->perlineup(i), target);
  }
  
  // repeated .protobuf.common.Id32 lineupIds = 4;
  for (int i = 0; i < this->lineupids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->lineupids(i), target);
  }
  
  // optional int32 attackCnt = 5;
  if (has_attackcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->attackcnt(), target);
  }
  
  // optional bool isSkip = 6;
  if (has_isskip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isskip(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NewBattleStartM::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required string enemyId = 2;
    if (has_enemyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->enemyid());
    }
    
    // optional int32 attackCnt = 5;
    if (has_attackcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attackcnt());
    }
    
    // optional bool isSkip = 6;
    if (has_isskip()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .protobuf.common.LineupTemplate perLineup = 3;
  total_size += 1 * this->perlineup_size();
  for (int i = 0; i < this->perlineup_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->perlineup(i));
  }
  
  // repeated .protobuf.common.Id32 lineupIds = 4;
  total_size += 1 * this->lineupids_size();
  for (int i = 0; i < this->lineupids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lineupids(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewBattleStartM::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewBattleStartM* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewBattleStartM*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewBattleStartM::MergeFrom(const NewBattleStartM& from) {
  GOOGLE_CHECK_NE(&from, this);
  perlineup_.MergeFrom(from.perlineup_);
  lineupids_.MergeFrom(from.lineupids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_enemyid()) {
      set_enemyid(from.enemyid());
    }
    if (from.has_attackcnt()) {
      set_attackcnt(from.attackcnt());
    }
    if (from.has_isskip()) {
      set_isskip(from.isskip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewBattleStartM::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewBattleStartM::CopyFrom(const NewBattleStartM& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewBattleStartM::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < perlineup_size(); i++) {
    if (!this->perlineup(i).IsInitialized()) return false;
  }
  for (int i = 0; i < lineupids_size(); i++) {
    if (!this->lineupids(i).IsInitialized()) return false;
  }
  return true;
}

void NewBattleStartM::Swap(NewBattleStartM* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(enemyid_, other->enemyid_);
    perlineup_.Swap(&other->perlineup_);
    lineupids_.Swap(&other->lineupids_);
    std::swap(attackcnt_, other->attackcnt_);
    std::swap(isskip_, other->isskip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewBattleStartM::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewBattleStartM_descriptor_;
  metadata.reflection = NewBattleStartM_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OneBattleData::kDataFieldNumber;
#endif  // !_MSC_VER

OneBattleData::OneBattleData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OneBattleData::InitAsDefaultInstance() {
}

OneBattleData::OneBattleData(const OneBattleData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OneBattleData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OneBattleData::~OneBattleData() {
  SharedDtor();
}

void OneBattleData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OneBattleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneBattleData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OneBattleData_descriptor_;
}

const OneBattleData& OneBattleData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_newBattle_2eproto();  return *default_instance_;
}

OneBattleData* OneBattleData::default_instance_ = NULL;

OneBattleData* OneBattleData::New() const {
  return new OneBattleData;
}

void OneBattleData::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OneBattleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.newBattle.BattleData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OneBattleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.newBattle.BattleData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OneBattleData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.newBattle.BattleData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OneBattleData::ByteSize() const {
  int total_size = 0;
  
  // repeated .protobuf.newBattle.BattleData data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneBattleData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OneBattleData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OneBattleData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OneBattleData::MergeFrom(const OneBattleData& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OneBattleData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneBattleData::CopyFrom(const OneBattleData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneBattleData::IsInitialized() const {
  
  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void OneBattleData::Swap(OneBattleData* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OneBattleData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OneBattleData_descriptor_;
  metadata.reflection = OneBattleData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace newBattle
}  // namespace protobuf

// @@protoc_insertion_point(global_scope)
