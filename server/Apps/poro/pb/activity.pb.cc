// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "activity.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protobuf {
namespace activity {

namespace {

const ::google::protobuf::Descriptor* Wonderful_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Wonderful_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChargePage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChargePage_reflection_ = NULL;
const ::google::protobuf::Descriptor* LimitActivity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LimitActivity_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityGood_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityGood_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyChargeGoods_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyChargeGoods_reflection_ = NULL;
const ::google::protobuf::Descriptor* VideoSeeReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VideoSeeReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* iconinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  iconinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleGuess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleGuess_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyEntryGuess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyEntryGuess_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetLineup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetLineup_reflection_ = NULL;
const ::google::protobuf::Descriptor* Record_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Record_reflection_ = NULL;
const ::google::protobuf::Descriptor* OneRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OneRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityExchange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityExchange_reflection_ = NULL;
const ::google::protobuf::Descriptor* KingEventRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KingEventRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SigninToTal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SigninToTal_reflection_ = NULL;
const ::google::protobuf::Descriptor* KingEventReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KingEventReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* FirstChargeMsgReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FirstChargeMsgReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_activity_2eproto() {
  protobuf_AddDesc_activity_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "activity.proto");
  GOOGLE_CHECK(file != NULL);
  Wonderful_descriptor_ = file->message_type(0);
  static const int Wonderful_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wonderful, checkinid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wonderful, checkinidlogin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wonderful, checkinidgot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wonderful, checkinnexttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wonderful, monthlastdays_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wonderful, month1lastdays_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wonderful, giftweekmonth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wonderful, checkinitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wonderful, vipextraaward_),
  };
  Wonderful_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Wonderful_descriptor_,
      Wonderful::default_instance_,
      Wonderful_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wonderful, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wonderful, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Wonderful));
  ChargePage_descriptor_ = file->message_type(1);
  static const int ChargePage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePage, monthlastdays_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePage, month1lastdays_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePage, isbuyed_),
  };
  ChargePage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChargePage_descriptor_,
      ChargePage::default_instance_,
      ChargePage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChargePage));
  LimitActivity_descriptor_ = file->message_type(2);
  static const int LimitActivity_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitActivity, activitys_),
  };
  LimitActivity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LimitActivity_descriptor_,
      LimitActivity::default_instance_,
      LimitActivity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitActivity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitActivity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LimitActivity));
  Activity_descriptor_ = file->message_type(3);
  static const int Activity_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, goods_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, rewardendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, img_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, limitgoods_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, extradropid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, guess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, curround_),
  };
  Activity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_descriptor_,
      Activity::default_instance_,
      Activity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity));
  ActivityGood_descriptor_ = file->message_type(4);
  static const int ActivityGood_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityGood, goodid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityGood, finish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityGood, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityGood, taskvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityGood, goods_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityGood, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityGood, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityGood, taskvice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityGood, chargeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityGood, lastdays_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityGood, goactive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityGood, gosystem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityGood, pricermb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityGood, pricedol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityGood, spegoods_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityGood, taskevent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityGood, firstchargemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityGood, firstchargenext_),
  };
  ActivityGood_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityGood_descriptor_,
      ActivityGood::default_instance_,
      ActivityGood_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityGood, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityGood, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityGood));
  ReplyChargeGoods_descriptor_ = file->message_type(5);
  static const int ReplyChargeGoods_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyChargeGoods, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyChargeGoods, items_),
  };
  ReplyChargeGoods_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyChargeGoods_descriptor_,
      ReplyChargeGoods::default_instance_,
      ReplyChargeGoods_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyChargeGoods, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyChargeGoods, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyChargeGoods));
  VideoSeeReply_descriptor_ = file->message_type(6);
  static const int VideoSeeReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoSeeReply, cansee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoSeeReply, items_),
  };
  VideoSeeReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VideoSeeReply_descriptor_,
      VideoSeeReply::default_instance_,
      VideoSeeReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoSeeReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoSeeReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VideoSeeReply));
  iconinfo_descriptor_ = file->message_type(7);
  static const int iconinfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, servername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, headframe_),
  };
  iconinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      iconinfo_descriptor_,
      iconinfo::default_instance_,
      iconinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(iconinfo));
  BattleGuess_descriptor_ = file->message_type(8);
  static const int BattleGuess_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleGuess, isjoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleGuess, wheel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleGuess, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleGuess, player_),
  };
  BattleGuess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleGuess_descriptor_,
      BattleGuess::default_instance_,
      BattleGuess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleGuess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleGuess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleGuess));
  ReplyEntryGuess_descriptor_ = file->message_type(9);
  static const int ReplyEntryGuess_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyEntryGuess, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyEntryGuess, isend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyEntryGuess, endtime_),
  };
  ReplyEntryGuess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyEntryGuess_descriptor_,
      ReplyEntryGuess::default_instance_,
      ReplyEntryGuess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyEntryGuess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyEntryGuess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyEntryGuess));
  SetLineup_descriptor_ = file->message_type(10);
  static const int SetLineup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetLineup, lineup_),
  };
  SetLineup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetLineup_descriptor_,
      SetLineup::default_instance_,
      SetLineup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetLineup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetLineup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetLineup));
  Record_descriptor_ = file->message_type(11);
  static const int Record_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, wheel_),
  };
  Record_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Record_descriptor_,
      Record::default_instance_,
      Record_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Record));
  OneRecord_descriptor_ = file->message_type(12);
  static const int OneRecord_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneRecord, attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneRecord, defense_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneRecord, onevictory_),
  };
  OneRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OneRecord_descriptor_,
      OneRecord::default_instance_,
      OneRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OneRecord));
  ActivityExchange_descriptor_ = file->message_type(13);
  static const int ActivityExchange_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityExchange, goodid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityExchange, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityExchange, hero_),
  };
  ActivityExchange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityExchange_descriptor_,
      ActivityExchange::default_instance_,
      ActivityExchange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityExchange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityExchange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityExchange));
  KingEventRequest_descriptor_ = file->message_type(14);
  static const int KingEventRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KingEventRequest, goodid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KingEventRequest, heros_),
  };
  KingEventRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KingEventRequest_descriptor_,
      KingEventRequest::default_instance_,
      KingEventRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KingEventRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KingEventRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KingEventRequest));
  SigninToTal_descriptor_ = file->message_type(15);
  static const int SigninToTal_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigninToTal, alreadyreceivedid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigninToTal, alreadyreceivednumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigninToTal, number_),
  };
  SigninToTal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SigninToTal_descriptor_,
      SigninToTal::default_instance_,
      SigninToTal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigninToTal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigninToTal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SigninToTal));
  KingEventReply_descriptor_ = file->message_type(16);
  static const int KingEventReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KingEventReply, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KingEventReply, heroitems_),
  };
  KingEventReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KingEventReply_descriptor_,
      KingEventReply::default_instance_,
      KingEventReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KingEventReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KingEventReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KingEventReply));
  FirstChargeMsgReply_descriptor_ = file->message_type(17);
  static const int FirstChargeMsgReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FirstChargeMsgReply, goodid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FirstChargeMsgReply, havechargeprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FirstChargeMsgReply, items_),
  };
  FirstChargeMsgReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FirstChargeMsgReply_descriptor_,
      FirstChargeMsgReply::default_instance_,
      FirstChargeMsgReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FirstChargeMsgReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FirstChargeMsgReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FirstChargeMsgReply));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_activity_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Wonderful_descriptor_, &Wonderful::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChargePage_descriptor_, &ChargePage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LimitActivity_descriptor_, &LimitActivity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_descriptor_, &Activity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityGood_descriptor_, &ActivityGood::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyChargeGoods_descriptor_, &ReplyChargeGoods::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VideoSeeReply_descriptor_, &VideoSeeReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    iconinfo_descriptor_, &iconinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleGuess_descriptor_, &BattleGuess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyEntryGuess_descriptor_, &ReplyEntryGuess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetLineup_descriptor_, &SetLineup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Record_descriptor_, &Record::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OneRecord_descriptor_, &OneRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityExchange_descriptor_, &ActivityExchange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KingEventRequest_descriptor_, &KingEventRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SigninToTal_descriptor_, &SigninToTal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KingEventReply_descriptor_, &KingEventReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FirstChargeMsgReply_descriptor_, &FirstChargeMsgReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_activity_2eproto() {
  delete Wonderful::default_instance_;
  delete Wonderful_reflection_;
  delete ChargePage::default_instance_;
  delete ChargePage_reflection_;
  delete LimitActivity::default_instance_;
  delete LimitActivity_reflection_;
  delete Activity::default_instance_;
  delete Activity_reflection_;
  delete ActivityGood::default_instance_;
  delete ActivityGood_reflection_;
  delete ReplyChargeGoods::default_instance_;
  delete ReplyChargeGoods_reflection_;
  delete VideoSeeReply::default_instance_;
  delete VideoSeeReply_reflection_;
  delete iconinfo::default_instance_;
  delete iconinfo_reflection_;
  delete BattleGuess::default_instance_;
  delete BattleGuess_reflection_;
  delete ReplyEntryGuess::default_instance_;
  delete ReplyEntryGuess_reflection_;
  delete SetLineup::default_instance_;
  delete SetLineup_reflection_;
  delete Record::default_instance_;
  delete Record_reflection_;
  delete OneRecord::default_instance_;
  delete OneRecord_reflection_;
  delete ActivityExchange::default_instance_;
  delete ActivityExchange_reflection_;
  delete KingEventRequest::default_instance_;
  delete KingEventRequest_reflection_;
  delete SigninToTal::default_instance_;
  delete SigninToTal_reflection_;
  delete KingEventReply::default_instance_;
  delete KingEventReply_reflection_;
  delete FirstChargeMsgReply::default_instance_;
  delete FirstChargeMsgReply_reflection_;
}

void protobuf_AddDesc_activity_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf::common::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016activity.proto\022\021protobuf.activity\032\014com"
    "mon.proto\"\225\002\n\tWonderful\022\021\n\tcheckinid\030\001 \001"
    "(\005\022\026\n\016checkinidLogin\030\002 \001(\005\022\024\n\014checkinidG"
    "ot\030\003 \001(\005\022\027\n\017checkinNexttime\030\004 \001(\003\022\025\n\rmon"
    "thlastdays\030\005 \001(\005\022\026\n\016month1lastdays\030\006 \001(\005"
    "\0227\n\rgiftweekmonth\030\007 \001(\0132 .protobuf.activ"
    "ity.LimitActivity\022/\n\013checkinItem\030\010 \001(\0132\032"
    ".protobuf.common.KVint3232\022\025\n\rvipExtraAw"
    "ard\030\t \001(\005\"L\n\nChargePage\022\025\n\rmonthlastdays"
    "\030\001 \001(\005\022\026\n\016month1lastdays\030\002 \001(\005\022\017\n\007isBuye"
    "d\030\003 \003(\005\"\?\n\rLimitActivity\022.\n\tactivitys\030\001 "
    "\003(\0132\033.protobuf.activity.Activity\"\325\002\n\010Act"
    "ivity\022\n\n\002id\030\001 \002(\005\022\014\n\004time\030\002 \002(\003\022.\n\005goods"
    "\030\003 \003(\0132\037.protobuf.activity.ActivityGood\022"
    "\025\n\rrewardendtime\030\004 \001(\003\022\014\n\004name\030\n \002(\005\022\014\n\004"
    "desc\030\013 \002(\005\022\014\n\004icon\030\014 \002(\t\022\013\n\003img\030\r \002(\t\022.\n"
    "\nlimitGoods\030\016 \003(\0132\032.protobuf.common.KVin"
    "t3232\022\014\n\004type\030\017 \002(\005\022\023\n\013extraDropid\030\020 \002(\005"
    "\022\016\n\006bossId\030\021 \001(\005\022-\n\005guess\030\022 \001(\0132\036.protob"
    "uf.activity.BattleGuess\022\r\n\005round\030\023 \001(\005\022\020"
    "\n\010curRound\030\024 \001(\005\"\356\002\n\014ActivityGood\022\016\n\006goo"
    "dId\030\001 \002(\005\022\016\n\006finish\030\002 \002(\005\022\r\n\005value\030\003 \001(\005"
    "\022\021\n\ttaskValue\030\n \002(\005\022)\n\005goods\030\013 \003(\0132\032.pro"
    "tobuf.common.KVint3232\022\014\n\004name\030\014 \002(\005\022\r\n\005"
    "limit\030\r \002(\005\022\020\n\010taskvice\030\016 \002(\005\022\020\n\010chargei"
    "d\030\017 \002(\005\022\020\n\010lastdays\030\020 \002(\005\022\020\n\010goActive\030\021 "
    "\002(\005\022\020\n\010goSystem\030\022 \002(\005\022\020\n\010priceRMB\030\023 \001(\t\022"
    "\020\n\010priceDol\030\024 \001(\t\022\020\n\010speGoods\030\025 \001(\t\022\021\n\tt"
    "askEvent\030\026 \001(\005\022\030\n\020firstChargeMoney\030\027 \001(\005"
    "\022\027\n\017firstChargeNext\030\030 \001(\005\"N\n\020ReplyCharge"
    "Goods\022\017\n\007orderId\030\001 \002(\t\022)\n\005items\030\002 \003(\0132\032."
    "protobuf.common.KVint3264\"J\n\rVideoSeeRep"
    "ly\022\016\n\006canSee\030\001 \002(\005\022)\n\005items\030\002 \003(\0132\032.prot"
    "obuf.common.KVint3264\"n\n\010iconinfo\022\r\n\005lev"
    "el\030\001 \002(\005\022\014\n\004name\030\002 \002(\t\022\014\n\004head\030\003 \002(\t\022\022\n\n"
    "serverName\030\004 \001(\t\022\020\n\010playerid\030\005 \001(\t\022\021\n\the"
    "adFrame\030\006 \001(\005\"j\n\013BattleGuess\022\016\n\006isJoin\030\001"
    " \002(\010\022\r\n\005wheel\030\002 \002(\005\022\017\n\007endTime\030\003 \002(\003\022+\n\006"
    "player\030\004 \003(\0132\033.protobuf.activity.iconinf"
    "o\"@\n\017ReplyEntryGuess\022\r\n\005state\030\001 \002(\005\022\r\n\005i"
    "sEnd\030\002 \002(\010\022\017\n\007endTime\030\003 \002(\003\"<\n\tSetLineup"
    "\022/\n\006lineup\030\001 \003(\0132\037.protobuf.common.Lineu"
    "pTemplate\"T\n\006Record\022\r\n\005state\030\001 \002(\005\022,\n\006pl"
    "ayer\030\002 \003(\0132\034.protobuf.activity.OneRecord"
    "\022\r\n\005wheel\030\003 \002(\005\"z\n\tOneRecord\022+\n\006attack\030\001"
    " \002(\0132\033.protobuf.activity.iconinfo\022,\n\007def"
    "ense\030\002 \002(\0132\033.protobuf.activity.iconinfo\022"
    "\022\n\noneVictory\030\003 \003(\010\"r\n\020ActivityExchange\022"
    "\016\n\006goodId\030\001 \002(\005\022)\n\005items\030\002 \003(\0132\032.protobu"
    "f.common.KVint3232\022#\n\004hero\030\003 \001(\0132\025.proto"
    "buf.common.Hero\"1\n\020KingEventRequest\022\016\n\006g"
    "oodId\030\001 \002(\005\022\r\n\005heros\030\002 \003(\005\"W\n\013SigninToTa"
    "l\022\031\n\021alreadyReceivedId\030\001 \001(\005\022\035\n\025alreadyR"
    "eceivedNumber\030\002 \001(\005\022\016\n\006number\030\003 \001(\005\"j\n\016K"
    "ingEventReply\022)\n\005items\030\001 \003(\0132\032.protobuf."
    "common.KVint3264\022-\n\theroItems\030\002 \003(\0132\032.pr"
    "otobuf.common.KVint3264\"i\n\023FirstChargeMs"
    "gReply\022\016\n\006goodId\030\001 \001(\005\022\027\n\017haveChargePric"
    "e\030\002 \001(\005\022)\n\005items\030\003 \003(\0132\032.protobuf.common"
    ".KVint3264B$\n\023xag.idgo.core.protoB\rActiv"
    "ityProto", 2408);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "activity.proto", &protobuf_RegisterTypes);
  Wonderful::default_instance_ = new Wonderful();
  ChargePage::default_instance_ = new ChargePage();
  LimitActivity::default_instance_ = new LimitActivity();
  Activity::default_instance_ = new Activity();
  ActivityGood::default_instance_ = new ActivityGood();
  ReplyChargeGoods::default_instance_ = new ReplyChargeGoods();
  VideoSeeReply::default_instance_ = new VideoSeeReply();
  iconinfo::default_instance_ = new iconinfo();
  BattleGuess::default_instance_ = new BattleGuess();
  ReplyEntryGuess::default_instance_ = new ReplyEntryGuess();
  SetLineup::default_instance_ = new SetLineup();
  Record::default_instance_ = new Record();
  OneRecord::default_instance_ = new OneRecord();
  ActivityExchange::default_instance_ = new ActivityExchange();
  KingEventRequest::default_instance_ = new KingEventRequest();
  SigninToTal::default_instance_ = new SigninToTal();
  KingEventReply::default_instance_ = new KingEventReply();
  FirstChargeMsgReply::default_instance_ = new FirstChargeMsgReply();
  Wonderful::default_instance_->InitAsDefaultInstance();
  ChargePage::default_instance_->InitAsDefaultInstance();
  LimitActivity::default_instance_->InitAsDefaultInstance();
  Activity::default_instance_->InitAsDefaultInstance();
  ActivityGood::default_instance_->InitAsDefaultInstance();
  ReplyChargeGoods::default_instance_->InitAsDefaultInstance();
  VideoSeeReply::default_instance_->InitAsDefaultInstance();
  iconinfo::default_instance_->InitAsDefaultInstance();
  BattleGuess::default_instance_->InitAsDefaultInstance();
  ReplyEntryGuess::default_instance_->InitAsDefaultInstance();
  SetLineup::default_instance_->InitAsDefaultInstance();
  Record::default_instance_->InitAsDefaultInstance();
  OneRecord::default_instance_->InitAsDefaultInstance();
  ActivityExchange::default_instance_->InitAsDefaultInstance();
  KingEventRequest::default_instance_->InitAsDefaultInstance();
  SigninToTal::default_instance_->InitAsDefaultInstance();
  KingEventReply::default_instance_->InitAsDefaultInstance();
  FirstChargeMsgReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_activity_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_activity_2eproto {
  StaticDescriptorInitializer_activity_2eproto() {
    protobuf_AddDesc_activity_2eproto();
  }
} static_descriptor_initializer_activity_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Wonderful::kCheckinidFieldNumber;
const int Wonderful::kCheckinidLoginFieldNumber;
const int Wonderful::kCheckinidGotFieldNumber;
const int Wonderful::kCheckinNexttimeFieldNumber;
const int Wonderful::kMonthlastdaysFieldNumber;
const int Wonderful::kMonth1LastdaysFieldNumber;
const int Wonderful::kGiftweekmonthFieldNumber;
const int Wonderful::kCheckinItemFieldNumber;
const int Wonderful::kVipExtraAwardFieldNumber;
#endif  // !_MSC_VER

Wonderful::Wonderful()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Wonderful::InitAsDefaultInstance() {
  giftweekmonth_ = const_cast< ::protobuf::activity::LimitActivity*>(&::protobuf::activity::LimitActivity::default_instance());
  checkinitem_ = const_cast< ::protobuf::common::KVint3232*>(&::protobuf::common::KVint3232::default_instance());
}

Wonderful::Wonderful(const Wonderful& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Wonderful::SharedCtor() {
  _cached_size_ = 0;
  checkinid_ = 0;
  checkinidlogin_ = 0;
  checkinidgot_ = 0;
  checkinnexttime_ = GOOGLE_LONGLONG(0);
  monthlastdays_ = 0;
  month1lastdays_ = 0;
  giftweekmonth_ = NULL;
  checkinitem_ = NULL;
  vipextraaward_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Wonderful::~Wonderful() {
  SharedDtor();
}

void Wonderful::SharedDtor() {
  if (this != default_instance_) {
    delete giftweekmonth_;
    delete checkinitem_;
  }
}

void Wonderful::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Wonderful::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Wonderful_descriptor_;
}

const Wonderful& Wonderful::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();  return *default_instance_;
}

Wonderful* Wonderful::default_instance_ = NULL;

Wonderful* Wonderful::New() const {
  return new Wonderful;
}

void Wonderful::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    checkinid_ = 0;
    checkinidlogin_ = 0;
    checkinidgot_ = 0;
    checkinnexttime_ = GOOGLE_LONGLONG(0);
    monthlastdays_ = 0;
    month1lastdays_ = 0;
    if (has_giftweekmonth()) {
      if (giftweekmonth_ != NULL) giftweekmonth_->::protobuf::activity::LimitActivity::Clear();
    }
    if (has_checkinitem()) {
      if (checkinitem_ != NULL) checkinitem_->::protobuf::common::KVint3232::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    vipextraaward_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Wonderful::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 checkinid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checkinid_)));
          set_has_checkinid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_checkinidLogin;
        break;
      }
      
      // optional int32 checkinidLogin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_checkinidLogin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checkinidlogin_)));
          set_has_checkinidlogin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_checkinidGot;
        break;
      }
      
      // optional int32 checkinidGot = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_checkinidGot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checkinidgot_)));
          set_has_checkinidgot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_checkinNexttime;
        break;
      }
      
      // optional int64 checkinNexttime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_checkinNexttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &checkinnexttime_)));
          set_has_checkinnexttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_monthlastdays;
        break;
      }
      
      // optional int32 monthlastdays = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monthlastdays:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monthlastdays_)));
          set_has_monthlastdays();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_month1lastdays;
        break;
      }
      
      // optional int32 month1lastdays = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_month1lastdays:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &month1lastdays_)));
          set_has_month1lastdays();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_giftweekmonth;
        break;
      }
      
      // optional .protobuf.activity.LimitActivity giftweekmonth = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_giftweekmonth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_giftweekmonth()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_checkinItem;
        break;
      }
      
      // optional .protobuf.common.KVint3232 checkinItem = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_checkinItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_checkinitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_vipExtraAward;
        break;
      }
      
      // optional int32 vipExtraAward = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipExtraAward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vipextraaward_)));
          set_has_vipextraaward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Wonderful::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 checkinid = 1;
  if (has_checkinid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->checkinid(), output);
  }
  
  // optional int32 checkinidLogin = 2;
  if (has_checkinidlogin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->checkinidlogin(), output);
  }
  
  // optional int32 checkinidGot = 3;
  if (has_checkinidgot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->checkinidgot(), output);
  }
  
  // optional int64 checkinNexttime = 4;
  if (has_checkinnexttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->checkinnexttime(), output);
  }
  
  // optional int32 monthlastdays = 5;
  if (has_monthlastdays()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->monthlastdays(), output);
  }
  
  // optional int32 month1lastdays = 6;
  if (has_month1lastdays()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->month1lastdays(), output);
  }
  
  // optional .protobuf.activity.LimitActivity giftweekmonth = 7;
  if (has_giftweekmonth()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->giftweekmonth(), output);
  }
  
  // optional .protobuf.common.KVint3232 checkinItem = 8;
  if (has_checkinitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->checkinitem(), output);
  }
  
  // optional int32 vipExtraAward = 9;
  if (has_vipextraaward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->vipextraaward(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Wonderful::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 checkinid = 1;
  if (has_checkinid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->checkinid(), target);
  }
  
  // optional int32 checkinidLogin = 2;
  if (has_checkinidlogin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->checkinidlogin(), target);
  }
  
  // optional int32 checkinidGot = 3;
  if (has_checkinidgot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->checkinidgot(), target);
  }
  
  // optional int64 checkinNexttime = 4;
  if (has_checkinnexttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->checkinnexttime(), target);
  }
  
  // optional int32 monthlastdays = 5;
  if (has_monthlastdays()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->monthlastdays(), target);
  }
  
  // optional int32 month1lastdays = 6;
  if (has_month1lastdays()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->month1lastdays(), target);
  }
  
  // optional .protobuf.activity.LimitActivity giftweekmonth = 7;
  if (has_giftweekmonth()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->giftweekmonth(), target);
  }
  
  // optional .protobuf.common.KVint3232 checkinItem = 8;
  if (has_checkinitem()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->checkinitem(), target);
  }
  
  // optional int32 vipExtraAward = 9;
  if (has_vipextraaward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->vipextraaward(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Wonderful::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 checkinid = 1;
    if (has_checkinid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checkinid());
    }
    
    // optional int32 checkinidLogin = 2;
    if (has_checkinidlogin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checkinidlogin());
    }
    
    // optional int32 checkinidGot = 3;
    if (has_checkinidgot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checkinidgot());
    }
    
    // optional int64 checkinNexttime = 4;
    if (has_checkinnexttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->checkinnexttime());
    }
    
    // optional int32 monthlastdays = 5;
    if (has_monthlastdays()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monthlastdays());
    }
    
    // optional int32 month1lastdays = 6;
    if (has_month1lastdays()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->month1lastdays());
    }
    
    // optional .protobuf.activity.LimitActivity giftweekmonth = 7;
    if (has_giftweekmonth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->giftweekmonth());
    }
    
    // optional .protobuf.common.KVint3232 checkinItem = 8;
    if (has_checkinitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->checkinitem());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 vipExtraAward = 9;
    if (has_vipextraaward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vipextraaward());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Wonderful::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Wonderful* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Wonderful*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Wonderful::MergeFrom(const Wonderful& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_checkinid()) {
      set_checkinid(from.checkinid());
    }
    if (from.has_checkinidlogin()) {
      set_checkinidlogin(from.checkinidlogin());
    }
    if (from.has_checkinidgot()) {
      set_checkinidgot(from.checkinidgot());
    }
    if (from.has_checkinnexttime()) {
      set_checkinnexttime(from.checkinnexttime());
    }
    if (from.has_monthlastdays()) {
      set_monthlastdays(from.monthlastdays());
    }
    if (from.has_month1lastdays()) {
      set_month1lastdays(from.month1lastdays());
    }
    if (from.has_giftweekmonth()) {
      mutable_giftweekmonth()->::protobuf::activity::LimitActivity::MergeFrom(from.giftweekmonth());
    }
    if (from.has_checkinitem()) {
      mutable_checkinitem()->::protobuf::common::KVint3232::MergeFrom(from.checkinitem());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_vipextraaward()) {
      set_vipextraaward(from.vipextraaward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Wonderful::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Wonderful::CopyFrom(const Wonderful& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Wonderful::IsInitialized() const {
  
  if (has_giftweekmonth()) {
    if (!this->giftweekmonth().IsInitialized()) return false;
  }
  if (has_checkinitem()) {
    if (!this->checkinitem().IsInitialized()) return false;
  }
  return true;
}

void Wonderful::Swap(Wonderful* other) {
  if (other != this) {
    std::swap(checkinid_, other->checkinid_);
    std::swap(checkinidlogin_, other->checkinidlogin_);
    std::swap(checkinidgot_, other->checkinidgot_);
    std::swap(checkinnexttime_, other->checkinnexttime_);
    std::swap(monthlastdays_, other->monthlastdays_);
    std::swap(month1lastdays_, other->month1lastdays_);
    std::swap(giftweekmonth_, other->giftweekmonth_);
    std::swap(checkinitem_, other->checkinitem_);
    std::swap(vipextraaward_, other->vipextraaward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Wonderful::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Wonderful_descriptor_;
  metadata.reflection = Wonderful_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChargePage::kMonthlastdaysFieldNumber;
const int ChargePage::kMonth1LastdaysFieldNumber;
const int ChargePage::kIsBuyedFieldNumber;
#endif  // !_MSC_VER

ChargePage::ChargePage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChargePage::InitAsDefaultInstance() {
}

ChargePage::ChargePage(const ChargePage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChargePage::SharedCtor() {
  _cached_size_ = 0;
  monthlastdays_ = 0;
  month1lastdays_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChargePage::~ChargePage() {
  SharedDtor();
}

void ChargePage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChargePage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChargePage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChargePage_descriptor_;
}

const ChargePage& ChargePage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();  return *default_instance_;
}

ChargePage* ChargePage::default_instance_ = NULL;

ChargePage* ChargePage::New() const {
  return new ChargePage;
}

void ChargePage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    monthlastdays_ = 0;
    month1lastdays_ = 0;
  }
  isbuyed_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChargePage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 monthlastdays = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monthlastdays_)));
          set_has_monthlastdays();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_month1lastdays;
        break;
      }
      
      // optional int32 month1lastdays = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_month1lastdays:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &month1lastdays_)));
          set_has_month1lastdays();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isBuyed;
        break;
      }
      
      // repeated int32 isBuyed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isBuyed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_isbuyed())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_isbuyed())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isBuyed;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChargePage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 monthlastdays = 1;
  if (has_monthlastdays()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->monthlastdays(), output);
  }
  
  // optional int32 month1lastdays = 2;
  if (has_month1lastdays()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->month1lastdays(), output);
  }
  
  // repeated int32 isBuyed = 3;
  for (int i = 0; i < this->isbuyed_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->isbuyed(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChargePage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 monthlastdays = 1;
  if (has_monthlastdays()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->monthlastdays(), target);
  }
  
  // optional int32 month1lastdays = 2;
  if (has_month1lastdays()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->month1lastdays(), target);
  }
  
  // repeated int32 isBuyed = 3;
  for (int i = 0; i < this->isbuyed_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->isbuyed(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChargePage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 monthlastdays = 1;
    if (has_monthlastdays()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monthlastdays());
    }
    
    // optional int32 month1lastdays = 2;
    if (has_month1lastdays()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->month1lastdays());
    }
    
  }
  // repeated int32 isBuyed = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->isbuyed_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->isbuyed(i));
    }
    total_size += 1 * this->isbuyed_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChargePage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChargePage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChargePage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChargePage::MergeFrom(const ChargePage& from) {
  GOOGLE_CHECK_NE(&from, this);
  isbuyed_.MergeFrom(from.isbuyed_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monthlastdays()) {
      set_monthlastdays(from.monthlastdays());
    }
    if (from.has_month1lastdays()) {
      set_month1lastdays(from.month1lastdays());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChargePage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChargePage::CopyFrom(const ChargePage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChargePage::IsInitialized() const {
  
  return true;
}

void ChargePage::Swap(ChargePage* other) {
  if (other != this) {
    std::swap(monthlastdays_, other->monthlastdays_);
    std::swap(month1lastdays_, other->month1lastdays_);
    isbuyed_.Swap(&other->isbuyed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChargePage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChargePage_descriptor_;
  metadata.reflection = ChargePage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LimitActivity::kActivitysFieldNumber;
#endif  // !_MSC_VER

LimitActivity::LimitActivity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LimitActivity::InitAsDefaultInstance() {
}

LimitActivity::LimitActivity(const LimitActivity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LimitActivity::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LimitActivity::~LimitActivity() {
  SharedDtor();
}

void LimitActivity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LimitActivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LimitActivity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LimitActivity_descriptor_;
}

const LimitActivity& LimitActivity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();  return *default_instance_;
}

LimitActivity* LimitActivity::default_instance_ = NULL;

LimitActivity* LimitActivity::New() const {
  return new LimitActivity;
}

void LimitActivity::Clear() {
  activitys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LimitActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.activity.Activity activitys = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activitys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activitys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_activitys;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LimitActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.activity.Activity activitys = 1;
  for (int i = 0; i < this->activitys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->activitys(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LimitActivity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.activity.Activity activitys = 1;
  for (int i = 0; i < this->activitys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->activitys(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LimitActivity::ByteSize() const {
  int total_size = 0;
  
  // repeated .protobuf.activity.Activity activitys = 1;
  total_size += 1 * this->activitys_size();
  for (int i = 0; i < this->activitys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activitys(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LimitActivity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LimitActivity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LimitActivity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LimitActivity::MergeFrom(const LimitActivity& from) {
  GOOGLE_CHECK_NE(&from, this);
  activitys_.MergeFrom(from.activitys_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LimitActivity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LimitActivity::CopyFrom(const LimitActivity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LimitActivity::IsInitialized() const {
  
  for (int i = 0; i < activitys_size(); i++) {
    if (!this->activitys(i).IsInitialized()) return false;
  }
  return true;
}

void LimitActivity::Swap(LimitActivity* other) {
  if (other != this) {
    activitys_.Swap(&other->activitys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LimitActivity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LimitActivity_descriptor_;
  metadata.reflection = LimitActivity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity::kIdFieldNumber;
const int Activity::kTimeFieldNumber;
const int Activity::kGoodsFieldNumber;
const int Activity::kRewardendtimeFieldNumber;
const int Activity::kNameFieldNumber;
const int Activity::kDescFieldNumber;
const int Activity::kIconFieldNumber;
const int Activity::kImgFieldNumber;
const int Activity::kLimitGoodsFieldNumber;
const int Activity::kTypeFieldNumber;
const int Activity::kExtraDropidFieldNumber;
const int Activity::kBossIdFieldNumber;
const int Activity::kGuessFieldNumber;
const int Activity::kRoundFieldNumber;
const int Activity::kCurRoundFieldNumber;
#endif  // !_MSC_VER

Activity::Activity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity::InitAsDefaultInstance() {
  guess_ = const_cast< ::protobuf::activity::BattleGuess*>(&::protobuf::activity::BattleGuess::default_instance());
}

Activity::Activity(const Activity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  rewardendtime_ = GOOGLE_LONGLONG(0);
  name_ = 0;
  desc_ = 0;
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  img_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  extradropid_ = 0;
  bossid_ = 0;
  guess_ = NULL;
  round_ = 0;
  curround_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity::~Activity() {
  SharedDtor();
}

void Activity::SharedDtor() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (img_ != &::google::protobuf::internal::kEmptyString) {
    delete img_;
  }
  if (this != default_instance_) {
    delete guess_;
  }
}

void Activity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_descriptor_;
}

const Activity& Activity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();  return *default_instance_;
}

Activity* Activity::default_instance_ = NULL;

Activity* Activity::New() const {
  return new Activity;
}

void Activity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    time_ = GOOGLE_LONGLONG(0);
    rewardendtime_ = GOOGLE_LONGLONG(0);
    name_ = 0;
    desc_ = 0;
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
    if (has_img()) {
      if (img_ != &::google::protobuf::internal::kEmptyString) {
        img_->clear();
      }
    }
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    type_ = 0;
    extradropid_ = 0;
    bossid_ = 0;
    if (has_guess()) {
      if (guess_ != NULL) guess_->::protobuf::activity::BattleGuess::Clear();
    }
    round_ = 0;
    curround_ = 0;
  }
  goods_.Clear();
  limitgoods_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }
      
      // required int64 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_goods;
        break;
      }
      
      // repeated .protobuf.activity.ActivityGood goods = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goods()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_goods;
        if (input->ExpectTag(32)) goto parse_rewardendtime;
        break;
      }
      
      // optional int64 rewardendtime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardendtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rewardendtime_)));
          set_has_rewardendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_name;
        break;
      }
      
      // required int32 name = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_name:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &name_)));
          set_has_name();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_desc;
        break;
      }
      
      // required int32 desc = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_desc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &desc_)));
          set_has_desc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_icon;
        break;
      }
      
      // required string icon = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_img;
        break;
      }
      
      // required string img = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_img:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_img()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->img().data(), this->img().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_limitGoods;
        break;
      }
      
      // repeated .protobuf.common.KVint3232 limitGoods = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_limitGoods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_limitgoods()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_limitGoods;
        if (input->ExpectTag(120)) goto parse_type;
        break;
      }
      
      // required int32 type = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_extraDropid;
        break;
      }
      
      // required int32 extraDropid = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_extraDropid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &extradropid_)));
          set_has_extradropid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_bossId;
        break;
      }
      
      // optional int32 bossId = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_guess;
        break;
      }
      
      // optional .protobuf.activity.BattleGuess guess = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guess:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guess()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_round;
        break;
      }
      
      // optional int32 round = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_)));
          set_has_round();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_curRound;
        break;
      }
      
      // optional int32 curRound = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curRound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curround_)));
          set_has_curround();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // required int64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time(), output);
  }
  
  // repeated .protobuf.activity.ActivityGood goods = 3;
  for (int i = 0; i < this->goods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->goods(i), output);
  }
  
  // optional int64 rewardendtime = 4;
  if (has_rewardendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->rewardendtime(), output);
  }
  
  // required int32 name = 10;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->name(), output);
  }
  
  // required int32 desc = 11;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->desc(), output);
  }
  
  // required string icon = 12;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->icon(), output);
  }
  
  // required string img = 13;
  if (has_img()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->img().data(), this->img().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->img(), output);
  }
  
  // repeated .protobuf.common.KVint3232 limitGoods = 14;
  for (int i = 0; i < this->limitgoods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->limitgoods(i), output);
  }
  
  // required int32 type = 15;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->type(), output);
  }
  
  // required int32 extraDropid = 16;
  if (has_extradropid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->extradropid(), output);
  }
  
  // optional int32 bossId = 17;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->bossid(), output);
  }
  
  // optional .protobuf.activity.BattleGuess guess = 18;
  if (has_guess()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->guess(), output);
  }
  
  // optional int32 round = 19;
  if (has_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->round(), output);
  }
  
  // optional int32 curRound = 20;
  if (has_curround()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->curround(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // required int64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time(), target);
  }
  
  // repeated .protobuf.activity.ActivityGood goods = 3;
  for (int i = 0; i < this->goods_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->goods(i), target);
  }
  
  // optional int64 rewardendtime = 4;
  if (has_rewardendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->rewardendtime(), target);
  }
  
  // required int32 name = 10;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->name(), target);
  }
  
  // required int32 desc = 11;
  if (has_desc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->desc(), target);
  }
  
  // required string icon = 12;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->icon(), target);
  }
  
  // required string img = 13;
  if (has_img()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->img().data(), this->img().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->img(), target);
  }
  
  // repeated .protobuf.common.KVint3232 limitGoods = 14;
  for (int i = 0; i < this->limitgoods_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->limitgoods(i), target);
  }
  
  // required int32 type = 15;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->type(), target);
  }
  
  // required int32 extraDropid = 16;
  if (has_extradropid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->extradropid(), target);
  }
  
  // optional int32 bossId = 17;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->bossid(), target);
  }
  
  // optional .protobuf.activity.BattleGuess guess = 18;
  if (has_guess()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->guess(), target);
  }
  
  // optional int32 round = 19;
  if (has_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->round(), target);
  }
  
  // optional int32 curRound = 20;
  if (has_curround()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->curround(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required int64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }
    
    // optional int64 rewardendtime = 4;
    if (has_rewardendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rewardendtime());
    }
    
    // required int32 name = 10;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->name());
    }
    
    // required int32 desc = 11;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->desc());
    }
    
    // required string icon = 12;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }
    
    // required string img = 13;
    if (has_img()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->img());
    }
    
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // required int32 type = 15;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required int32 extraDropid = 16;
    if (has_extradropid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->extradropid());
    }
    
    // optional int32 bossId = 17;
    if (has_bossid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bossid());
    }
    
    // optional .protobuf.activity.BattleGuess guess = 18;
    if (has_guess()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guess());
    }
    
    // optional int32 round = 19;
    if (has_round()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round());
    }
    
    // optional int32 curRound = 20;
    if (has_curround()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curround());
    }
    
  }
  // repeated .protobuf.activity.ActivityGood goods = 3;
  total_size += 1 * this->goods_size();
  for (int i = 0; i < this->goods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goods(i));
  }
  
  // repeated .protobuf.common.KVint3232 limitGoods = 14;
  total_size += 1 * this->limitgoods_size();
  for (int i = 0; i < this->limitgoods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->limitgoods(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity::MergeFrom(const Activity& from) {
  GOOGLE_CHECK_NE(&from, this);
  goods_.MergeFrom(from.goods_);
  limitgoods_.MergeFrom(from.limitgoods_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_rewardendtime()) {
      set_rewardendtime(from.rewardendtime());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_img()) {
      set_img(from.img());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_extradropid()) {
      set_extradropid(from.extradropid());
    }
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_guess()) {
      mutable_guess()->::protobuf::activity::BattleGuess::MergeFrom(from.guess());
    }
    if (from.has_round()) {
      set_round(from.round());
    }
    if (from.has_curround()) {
      set_curround(from.curround());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity::CopyFrom(const Activity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity::IsInitialized() const {
  if ((_has_bits_[0] & 0x000006f3) != 0x000006f3) return false;
  
  for (int i = 0; i < goods_size(); i++) {
    if (!this->goods(i).IsInitialized()) return false;
  }
  for (int i = 0; i < limitgoods_size(); i++) {
    if (!this->limitgoods(i).IsInitialized()) return false;
  }
  if (has_guess()) {
    if (!this->guess().IsInitialized()) return false;
  }
  return true;
}

void Activity::Swap(Activity* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(time_, other->time_);
    goods_.Swap(&other->goods_);
    std::swap(rewardendtime_, other->rewardendtime_);
    std::swap(name_, other->name_);
    std::swap(desc_, other->desc_);
    std::swap(icon_, other->icon_);
    std::swap(img_, other->img_);
    limitgoods_.Swap(&other->limitgoods_);
    std::swap(type_, other->type_);
    std::swap(extradropid_, other->extradropid_);
    std::swap(bossid_, other->bossid_);
    std::swap(guess_, other->guess_);
    std::swap(round_, other->round_);
    std::swap(curround_, other->curround_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_descriptor_;
  metadata.reflection = Activity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityGood::kGoodIdFieldNumber;
const int ActivityGood::kFinishFieldNumber;
const int ActivityGood::kValueFieldNumber;
const int ActivityGood::kTaskValueFieldNumber;
const int ActivityGood::kGoodsFieldNumber;
const int ActivityGood::kNameFieldNumber;
const int ActivityGood::kLimitFieldNumber;
const int ActivityGood::kTaskviceFieldNumber;
const int ActivityGood::kChargeidFieldNumber;
const int ActivityGood::kLastdaysFieldNumber;
const int ActivityGood::kGoActiveFieldNumber;
const int ActivityGood::kGoSystemFieldNumber;
const int ActivityGood::kPriceRMBFieldNumber;
const int ActivityGood::kPriceDolFieldNumber;
const int ActivityGood::kSpeGoodsFieldNumber;
const int ActivityGood::kTaskEventFieldNumber;
const int ActivityGood::kFirstChargeMoneyFieldNumber;
const int ActivityGood::kFirstChargeNextFieldNumber;
#endif  // !_MSC_VER

ActivityGood::ActivityGood()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityGood::InitAsDefaultInstance() {
}

ActivityGood::ActivityGood(const ActivityGood& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityGood::SharedCtor() {
  _cached_size_ = 0;
  goodid_ = 0;
  finish_ = 0;
  value_ = 0;
  taskvalue_ = 0;
  name_ = 0;
  limit_ = 0;
  taskvice_ = 0;
  chargeid_ = 0;
  lastdays_ = 0;
  goactive_ = 0;
  gosystem_ = 0;
  pricermb_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pricedol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  spegoods_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  taskevent_ = 0;
  firstchargemoney_ = 0;
  firstchargenext_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityGood::~ActivityGood() {
  SharedDtor();
}

void ActivityGood::SharedDtor() {
  if (pricermb_ != &::google::protobuf::internal::kEmptyString) {
    delete pricermb_;
  }
  if (pricedol_ != &::google::protobuf::internal::kEmptyString) {
    delete pricedol_;
  }
  if (spegoods_ != &::google::protobuf::internal::kEmptyString) {
    delete spegoods_;
  }
  if (this != default_instance_) {
  }
}

void ActivityGood::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityGood::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityGood_descriptor_;
}

const ActivityGood& ActivityGood::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();  return *default_instance_;
}

ActivityGood* ActivityGood::default_instance_ = NULL;

ActivityGood* ActivityGood::New() const {
  return new ActivityGood;
}

void ActivityGood::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    goodid_ = 0;
    finish_ = 0;
    value_ = 0;
    taskvalue_ = 0;
    name_ = 0;
    limit_ = 0;
    taskvice_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    chargeid_ = 0;
    lastdays_ = 0;
    goactive_ = 0;
    gosystem_ = 0;
    if (has_pricermb()) {
      if (pricermb_ != &::google::protobuf::internal::kEmptyString) {
        pricermb_->clear();
      }
    }
    if (has_pricedol()) {
      if (pricedol_ != &::google::protobuf::internal::kEmptyString) {
        pricedol_->clear();
      }
    }
    if (has_spegoods()) {
      if (spegoods_ != &::google::protobuf::internal::kEmptyString) {
        spegoods_->clear();
      }
    }
    taskevent_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    firstchargemoney_ = 0;
    firstchargenext_ = 0;
  }
  goods_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityGood::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 goodId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goodid_)));
          set_has_goodid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_finish;
        break;
      }
      
      // required int32 finish = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &finish_)));
          set_has_finish();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }
      
      // optional int32 value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_taskValue;
        break;
      }
      
      // required int32 taskValue = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_taskValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taskvalue_)));
          set_has_taskvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_goods;
        break;
      }
      
      // repeated .protobuf.common.KVint3232 goods = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goods()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_goods;
        if (input->ExpectTag(96)) goto parse_name;
        break;
      }
      
      // required int32 name = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_name:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &name_)));
          set_has_name();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_limit;
        break;
      }
      
      // required int32 limit = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_taskvice;
        break;
      }
      
      // required int32 taskvice = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_taskvice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taskvice_)));
          set_has_taskvice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_chargeid;
        break;
      }
      
      // required int32 chargeid = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chargeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chargeid_)));
          set_has_chargeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_lastdays;
        break;
      }
      
      // required int32 lastdays = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastdays:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastdays_)));
          set_has_lastdays();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_goActive;
        break;
      }
      
      // required int32 goActive = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goActive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goactive_)));
          set_has_goactive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_goSystem;
        break;
      }
      
      // required int32 goSystem = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goSystem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gosystem_)));
          set_has_gosystem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_priceRMB;
        break;
      }
      
      // optional string priceRMB = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_priceRMB:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pricermb()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pricermb().data(), this->pricermb().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_priceDol;
        break;
      }
      
      // optional string priceDol = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_priceDol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pricedol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pricedol().data(), this->pricedol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_speGoods;
        break;
      }
      
      // optional string speGoods = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_speGoods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spegoods()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->spegoods().data(), this->spegoods().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_taskEvent;
        break;
      }
      
      // optional int32 taskEvent = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_taskEvent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taskevent_)));
          set_has_taskevent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_firstChargeMoney;
        break;
      }
      
      // optional int32 firstChargeMoney = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_firstChargeMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &firstchargemoney_)));
          set_has_firstchargemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_firstChargeNext;
        break;
      }
      
      // optional int32 firstChargeNext = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_firstChargeNext:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &firstchargenext_)));
          set_has_firstchargenext();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityGood::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 goodId = 1;
  if (has_goodid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->goodid(), output);
  }
  
  // required int32 finish = 2;
  if (has_finish()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->finish(), output);
  }
  
  // optional int32 value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->value(), output);
  }
  
  // required int32 taskValue = 10;
  if (has_taskvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->taskvalue(), output);
  }
  
  // repeated .protobuf.common.KVint3232 goods = 11;
  for (int i = 0; i < this->goods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->goods(i), output);
  }
  
  // required int32 name = 12;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->name(), output);
  }
  
  // required int32 limit = 13;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->limit(), output);
  }
  
  // required int32 taskvice = 14;
  if (has_taskvice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->taskvice(), output);
  }
  
  // required int32 chargeid = 15;
  if (has_chargeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->chargeid(), output);
  }
  
  // required int32 lastdays = 16;
  if (has_lastdays()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->lastdays(), output);
  }
  
  // required int32 goActive = 17;
  if (has_goactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->goactive(), output);
  }
  
  // required int32 goSystem = 18;
  if (has_gosystem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->gosystem(), output);
  }
  
  // optional string priceRMB = 19;
  if (has_pricermb()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pricermb().data(), this->pricermb().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->pricermb(), output);
  }
  
  // optional string priceDol = 20;
  if (has_pricedol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pricedol().data(), this->pricedol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->pricedol(), output);
  }
  
  // optional string speGoods = 21;
  if (has_spegoods()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spegoods().data(), this->spegoods().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->spegoods(), output);
  }
  
  // optional int32 taskEvent = 22;
  if (has_taskevent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->taskevent(), output);
  }
  
  // optional int32 firstChargeMoney = 23;
  if (has_firstchargemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->firstchargemoney(), output);
  }
  
  // optional int32 firstChargeNext = 24;
  if (has_firstchargenext()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->firstchargenext(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityGood::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 goodId = 1;
  if (has_goodid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->goodid(), target);
  }
  
  // required int32 finish = 2;
  if (has_finish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->finish(), target);
  }
  
  // optional int32 value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->value(), target);
  }
  
  // required int32 taskValue = 10;
  if (has_taskvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->taskvalue(), target);
  }
  
  // repeated .protobuf.common.KVint3232 goods = 11;
  for (int i = 0; i < this->goods_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->goods(i), target);
  }
  
  // required int32 name = 12;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->name(), target);
  }
  
  // required int32 limit = 13;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->limit(), target);
  }
  
  // required int32 taskvice = 14;
  if (has_taskvice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->taskvice(), target);
  }
  
  // required int32 chargeid = 15;
  if (has_chargeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->chargeid(), target);
  }
  
  // required int32 lastdays = 16;
  if (has_lastdays()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->lastdays(), target);
  }
  
  // required int32 goActive = 17;
  if (has_goactive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->goactive(), target);
  }
  
  // required int32 goSystem = 18;
  if (has_gosystem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->gosystem(), target);
  }
  
  // optional string priceRMB = 19;
  if (has_pricermb()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pricermb().data(), this->pricermb().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->pricermb(), target);
  }
  
  // optional string priceDol = 20;
  if (has_pricedol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pricedol().data(), this->pricedol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->pricedol(), target);
  }
  
  // optional string speGoods = 21;
  if (has_spegoods()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spegoods().data(), this->spegoods().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->spegoods(), target);
  }
  
  // optional int32 taskEvent = 22;
  if (has_taskevent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->taskevent(), target);
  }
  
  // optional int32 firstChargeMoney = 23;
  if (has_firstchargemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->firstchargemoney(), target);
  }
  
  // optional int32 firstChargeNext = 24;
  if (has_firstchargenext()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->firstchargenext(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityGood::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 goodId = 1;
    if (has_goodid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goodid());
    }
    
    // required int32 finish = 2;
    if (has_finish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->finish());
    }
    
    // optional int32 value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }
    
    // required int32 taskValue = 10;
    if (has_taskvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->taskvalue());
    }
    
    // required int32 name = 12;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->name());
    }
    
    // required int32 limit = 13;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit());
    }
    
    // required int32 taskvice = 14;
    if (has_taskvice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->taskvice());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 chargeid = 15;
    if (has_chargeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chargeid());
    }
    
    // required int32 lastdays = 16;
    if (has_lastdays()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastdays());
    }
    
    // required int32 goActive = 17;
    if (has_goactive()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goactive());
    }
    
    // required int32 goSystem = 18;
    if (has_gosystem()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gosystem());
    }
    
    // optional string priceRMB = 19;
    if (has_pricermb()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pricermb());
    }
    
    // optional string priceDol = 20;
    if (has_pricedol()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pricedol());
    }
    
    // optional string speGoods = 21;
    if (has_spegoods()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->spegoods());
    }
    
    // optional int32 taskEvent = 22;
    if (has_taskevent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->taskevent());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 firstChargeMoney = 23;
    if (has_firstchargemoney()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->firstchargemoney());
    }
    
    // optional int32 firstChargeNext = 24;
    if (has_firstchargenext()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->firstchargenext());
    }
    
  }
  // repeated .protobuf.common.KVint3232 goods = 11;
  total_size += 1 * this->goods_size();
  for (int i = 0; i < this->goods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goods(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityGood::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityGood* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityGood*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityGood::MergeFrom(const ActivityGood& from) {
  GOOGLE_CHECK_NE(&from, this);
  goods_.MergeFrom(from.goods_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_goodid()) {
      set_goodid(from.goodid());
    }
    if (from.has_finish()) {
      set_finish(from.finish());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_taskvalue()) {
      set_taskvalue(from.taskvalue());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
    if (from.has_taskvice()) {
      set_taskvice(from.taskvice());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_chargeid()) {
      set_chargeid(from.chargeid());
    }
    if (from.has_lastdays()) {
      set_lastdays(from.lastdays());
    }
    if (from.has_goactive()) {
      set_goactive(from.goactive());
    }
    if (from.has_gosystem()) {
      set_gosystem(from.gosystem());
    }
    if (from.has_pricermb()) {
      set_pricermb(from.pricermb());
    }
    if (from.has_pricedol()) {
      set_pricedol(from.pricedol());
    }
    if (from.has_spegoods()) {
      set_spegoods(from.spegoods());
    }
    if (from.has_taskevent()) {
      set_taskevent(from.taskevent());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_firstchargemoney()) {
      set_firstchargemoney(from.firstchargemoney());
    }
    if (from.has_firstchargenext()) {
      set_firstchargenext(from.firstchargenext());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityGood::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityGood::CopyFrom(const ActivityGood& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityGood::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000feb) != 0x00000feb) return false;
  
  for (int i = 0; i < goods_size(); i++) {
    if (!this->goods(i).IsInitialized()) return false;
  }
  return true;
}

void ActivityGood::Swap(ActivityGood* other) {
  if (other != this) {
    std::swap(goodid_, other->goodid_);
    std::swap(finish_, other->finish_);
    std::swap(value_, other->value_);
    std::swap(taskvalue_, other->taskvalue_);
    goods_.Swap(&other->goods_);
    std::swap(name_, other->name_);
    std::swap(limit_, other->limit_);
    std::swap(taskvice_, other->taskvice_);
    std::swap(chargeid_, other->chargeid_);
    std::swap(lastdays_, other->lastdays_);
    std::swap(goactive_, other->goactive_);
    std::swap(gosystem_, other->gosystem_);
    std::swap(pricermb_, other->pricermb_);
    std::swap(pricedol_, other->pricedol_);
    std::swap(spegoods_, other->spegoods_);
    std::swap(taskevent_, other->taskevent_);
    std::swap(firstchargemoney_, other->firstchargemoney_);
    std::swap(firstchargenext_, other->firstchargenext_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityGood::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityGood_descriptor_;
  metadata.reflection = ActivityGood_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyChargeGoods::kOrderIdFieldNumber;
const int ReplyChargeGoods::kItemsFieldNumber;
#endif  // !_MSC_VER

ReplyChargeGoods::ReplyChargeGoods()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReplyChargeGoods::InitAsDefaultInstance() {
}

ReplyChargeGoods::ReplyChargeGoods(const ReplyChargeGoods& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReplyChargeGoods::SharedCtor() {
  _cached_size_ = 0;
  orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyChargeGoods::~ReplyChargeGoods() {
  SharedDtor();
}

void ReplyChargeGoods::SharedDtor() {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    delete orderid_;
  }
  if (this != default_instance_) {
  }
}

void ReplyChargeGoods::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyChargeGoods::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyChargeGoods_descriptor_;
}

const ReplyChargeGoods& ReplyChargeGoods::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();  return *default_instance_;
}

ReplyChargeGoods* ReplyChargeGoods::default_instance_ = NULL;

ReplyChargeGoods* ReplyChargeGoods::New() const {
  return new ReplyChargeGoods;
}

void ReplyChargeGoods::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_orderid()) {
      if (orderid_ != &::google::protobuf::internal::kEmptyString) {
        orderid_->clear();
      }
    }
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyChargeGoods::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string orderId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orderid().data(), this->orderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }
      
      // repeated .protobuf.common.KVint3264 items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReplyChargeGoods::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string orderId = 1;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->orderid(), output);
  }
  
  // repeated .protobuf.common.KVint3264 items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReplyChargeGoods::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string orderId = 1;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->orderid(), target);
  }
  
  // repeated .protobuf.common.KVint3264 items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReplyChargeGoods::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string orderId = 1;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderid());
    }
    
  }
  // repeated .protobuf.common.KVint3264 items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyChargeGoods::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyChargeGoods* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyChargeGoods*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyChargeGoods::MergeFrom(const ReplyChargeGoods& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyChargeGoods::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyChargeGoods::CopyFrom(const ReplyChargeGoods& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyChargeGoods::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void ReplyChargeGoods::Swap(ReplyChargeGoods* other) {
  if (other != this) {
    std::swap(orderid_, other->orderid_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyChargeGoods::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyChargeGoods_descriptor_;
  metadata.reflection = ReplyChargeGoods_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VideoSeeReply::kCanSeeFieldNumber;
const int VideoSeeReply::kItemsFieldNumber;
#endif  // !_MSC_VER

VideoSeeReply::VideoSeeReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VideoSeeReply::InitAsDefaultInstance() {
}

VideoSeeReply::VideoSeeReply(const VideoSeeReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VideoSeeReply::SharedCtor() {
  _cached_size_ = 0;
  cansee_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VideoSeeReply::~VideoSeeReply() {
  SharedDtor();
}

void VideoSeeReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VideoSeeReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoSeeReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VideoSeeReply_descriptor_;
}

const VideoSeeReply& VideoSeeReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();  return *default_instance_;
}

VideoSeeReply* VideoSeeReply::default_instance_ = NULL;

VideoSeeReply* VideoSeeReply::New() const {
  return new VideoSeeReply;
}

void VideoSeeReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cansee_ = 0;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VideoSeeReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 canSee = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cansee_)));
          set_has_cansee();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }
      
      // repeated .protobuf.common.KVint3264 items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VideoSeeReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 canSee = 1;
  if (has_cansee()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cansee(), output);
  }
  
  // repeated .protobuf.common.KVint3264 items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VideoSeeReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 canSee = 1;
  if (has_cansee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cansee(), target);
  }
  
  // repeated .protobuf.common.KVint3264 items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VideoSeeReply::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 canSee = 1;
    if (has_cansee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cansee());
    }
    
  }
  // repeated .protobuf.common.KVint3264 items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoSeeReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VideoSeeReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VideoSeeReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VideoSeeReply::MergeFrom(const VideoSeeReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cansee()) {
      set_cansee(from.cansee());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VideoSeeReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoSeeReply::CopyFrom(const VideoSeeReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoSeeReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void VideoSeeReply::Swap(VideoSeeReply* other) {
  if (other != this) {
    std::swap(cansee_, other->cansee_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VideoSeeReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VideoSeeReply_descriptor_;
  metadata.reflection = VideoSeeReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int iconinfo::kLevelFieldNumber;
const int iconinfo::kNameFieldNumber;
const int iconinfo::kHeadFieldNumber;
const int iconinfo::kServerNameFieldNumber;
const int iconinfo::kPlayeridFieldNumber;
const int iconinfo::kHeadFrameFieldNumber;
#endif  // !_MSC_VER

iconinfo::iconinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void iconinfo::InitAsDefaultInstance() {
}

iconinfo::iconinfo(const iconinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void iconinfo::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  headframe_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

iconinfo::~iconinfo() {
  SharedDtor();
}

void iconinfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    delete head_;
  }
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    delete servername_;
  }
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (this != default_instance_) {
  }
}

void iconinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* iconinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return iconinfo_descriptor_;
}

const iconinfo& iconinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();  return *default_instance_;
}

iconinfo* iconinfo::default_instance_ = NULL;

iconinfo* iconinfo::New() const {
  return new iconinfo;
}

void iconinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_head()) {
      if (head_ != &::google::protobuf::internal::kEmptyString) {
        head_->clear();
      }
    }
    if (has_servername()) {
      if (servername_ != &::google::protobuf::internal::kEmptyString) {
        servername_->clear();
      }
    }
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    headframe_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool iconinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_head;
        break;
      }
      
      // required string head = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_head()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->head().data(), this->head().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_serverName;
        break;
      }
      
      // optional string serverName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serverName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->servername().data(), this->servername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_playerid;
        break;
      }
      
      // optional string playerid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_headFrame;
        break;
      }
      
      // optional int32 headFrame = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headFrame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headframe_)));
          set_has_headframe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void iconinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // required string head = 3;
  if (has_head()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head().data(), this->head().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->head(), output);
  }
  
  // optional string serverName = 4;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->servername(), output);
  }
  
  // optional string playerid = 5;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->playerid(), output);
  }
  
  // optional int32 headFrame = 6;
  if (has_headframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->headframe(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* iconinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // required string head = 3;
  if (has_head()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head().data(), this->head().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->head(), target);
  }
  
  // optional string serverName = 4;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->servername(), target);
  }
  
  // optional string playerid = 5;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->playerid(), target);
  }
  
  // optional int32 headFrame = 6;
  if (has_headframe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->headframe(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int iconinfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string head = 3;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->head());
    }
    
    // optional string serverName = 4;
    if (has_servername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servername());
    }
    
    // optional string playerid = 5;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }
    
    // optional int32 headFrame = 6;
    if (has_headframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headframe());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void iconinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const iconinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const iconinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void iconinfo::MergeFrom(const iconinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_head()) {
      set_head(from.head());
    }
    if (from.has_servername()) {
      set_servername(from.servername());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_headframe()) {
      set_headframe(from.headframe());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void iconinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void iconinfo::CopyFrom(const iconinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool iconinfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void iconinfo::Swap(iconinfo* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(name_, other->name_);
    std::swap(head_, other->head_);
    std::swap(servername_, other->servername_);
    std::swap(playerid_, other->playerid_);
    std::swap(headframe_, other->headframe_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata iconinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = iconinfo_descriptor_;
  metadata.reflection = iconinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleGuess::kIsJoinFieldNumber;
const int BattleGuess::kWheelFieldNumber;
const int BattleGuess::kEndTimeFieldNumber;
const int BattleGuess::kPlayerFieldNumber;
#endif  // !_MSC_VER

BattleGuess::BattleGuess()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleGuess::InitAsDefaultInstance() {
}

BattleGuess::BattleGuess(const BattleGuess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleGuess::SharedCtor() {
  _cached_size_ = 0;
  isjoin_ = false;
  wheel_ = 0;
  endtime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleGuess::~BattleGuess() {
  SharedDtor();
}

void BattleGuess::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleGuess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleGuess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleGuess_descriptor_;
}

const BattleGuess& BattleGuess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();  return *default_instance_;
}

BattleGuess* BattleGuess::default_instance_ = NULL;

BattleGuess* BattleGuess::New() const {
  return new BattleGuess;
}

void BattleGuess::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isjoin_ = false;
    wheel_ = 0;
    endtime_ = GOOGLE_LONGLONG(0);
  }
  player_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleGuess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isJoin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isjoin_)));
          set_has_isjoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_wheel;
        break;
      }
      
      // required int32 wheel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wheel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wheel_)));
          set_has_wheel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_endTime;
        break;
      }
      
      // required int64 endTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_player;
        break;
      }
      
      // repeated .protobuf.activity.iconinfo player = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_player;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleGuess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool isJoin = 1;
  if (has_isjoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isjoin(), output);
  }
  
  // required int32 wheel = 2;
  if (has_wheel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->wheel(), output);
  }
  
  // required int64 endTime = 3;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->endtime(), output);
  }
  
  // repeated .protobuf.activity.iconinfo player = 4;
  for (int i = 0; i < this->player_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->player(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleGuess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool isJoin = 1;
  if (has_isjoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isjoin(), target);
  }
  
  // required int32 wheel = 2;
  if (has_wheel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->wheel(), target);
  }
  
  // required int64 endTime = 3;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->endtime(), target);
  }
  
  // repeated .protobuf.activity.iconinfo player = 4;
  for (int i = 0; i < this->player_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->player(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleGuess::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isJoin = 1;
    if (has_isjoin()) {
      total_size += 1 + 1;
    }
    
    // required int32 wheel = 2;
    if (has_wheel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wheel());
    }
    
    // required int64 endTime = 3;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }
    
  }
  // repeated .protobuf.activity.iconinfo player = 4;
  total_size += 1 * this->player_size();
  for (int i = 0; i < this->player_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleGuess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleGuess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleGuess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleGuess::MergeFrom(const BattleGuess& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_.MergeFrom(from.player_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isjoin()) {
      set_isjoin(from.isjoin());
    }
    if (from.has_wheel()) {
      set_wheel(from.wheel());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleGuess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleGuess::CopyFrom(const BattleGuess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleGuess::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < player_size(); i++) {
    if (!this->player(i).IsInitialized()) return false;
  }
  return true;
}

void BattleGuess::Swap(BattleGuess* other) {
  if (other != this) {
    std::swap(isjoin_, other->isjoin_);
    std::swap(wheel_, other->wheel_);
    std::swap(endtime_, other->endtime_);
    player_.Swap(&other->player_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleGuess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleGuess_descriptor_;
  metadata.reflection = BattleGuess_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyEntryGuess::kStateFieldNumber;
const int ReplyEntryGuess::kIsEndFieldNumber;
const int ReplyEntryGuess::kEndTimeFieldNumber;
#endif  // !_MSC_VER

ReplyEntryGuess::ReplyEntryGuess()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReplyEntryGuess::InitAsDefaultInstance() {
}

ReplyEntryGuess::ReplyEntryGuess(const ReplyEntryGuess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReplyEntryGuess::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  isend_ = false;
  endtime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyEntryGuess::~ReplyEntryGuess() {
  SharedDtor();
}

void ReplyEntryGuess::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReplyEntryGuess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyEntryGuess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyEntryGuess_descriptor_;
}

const ReplyEntryGuess& ReplyEntryGuess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();  return *default_instance_;
}

ReplyEntryGuess* ReplyEntryGuess::default_instance_ = NULL;

ReplyEntryGuess* ReplyEntryGuess::New() const {
  return new ReplyEntryGuess;
}

void ReplyEntryGuess::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 0;
    isend_ = false;
    endtime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyEntryGuess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isEnd;
        break;
      }
      
      // required bool isEnd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isend_)));
          set_has_isend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_endTime;
        break;
      }
      
      // required int64 endTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReplyEntryGuess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }
  
  // required bool isEnd = 2;
  if (has_isend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isend(), output);
  }
  
  // required int64 endTime = 3;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->endtime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReplyEntryGuess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }
  
  // required bool isEnd = 2;
  if (has_isend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isend(), target);
  }
  
  // required int64 endTime = 3;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->endtime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReplyEntryGuess::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }
    
    // required bool isEnd = 2;
    if (has_isend()) {
      total_size += 1 + 1;
    }
    
    // required int64 endTime = 3;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyEntryGuess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyEntryGuess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyEntryGuess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyEntryGuess::MergeFrom(const ReplyEntryGuess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_isend()) {
      set_isend(from.isend());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyEntryGuess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyEntryGuess::CopyFrom(const ReplyEntryGuess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyEntryGuess::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void ReplyEntryGuess::Swap(ReplyEntryGuess* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(isend_, other->isend_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyEntryGuess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyEntryGuess_descriptor_;
  metadata.reflection = ReplyEntryGuess_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetLineup::kLineupFieldNumber;
#endif  // !_MSC_VER

SetLineup::SetLineup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetLineup::InitAsDefaultInstance() {
}

SetLineup::SetLineup(const SetLineup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetLineup::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetLineup::~SetLineup() {
  SharedDtor();
}

void SetLineup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetLineup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetLineup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetLineup_descriptor_;
}

const SetLineup& SetLineup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();  return *default_instance_;
}

SetLineup* SetLineup::default_instance_ = NULL;

SetLineup* SetLineup::New() const {
  return new SetLineup;
}

void SetLineup::Clear() {
  lineup_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetLineup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.common.LineupTemplate lineup = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lineup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lineup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_lineup;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetLineup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.common.LineupTemplate lineup = 1;
  for (int i = 0; i < this->lineup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lineup(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetLineup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.common.LineupTemplate lineup = 1;
  for (int i = 0; i < this->lineup_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->lineup(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetLineup::ByteSize() const {
  int total_size = 0;
  
  // repeated .protobuf.common.LineupTemplate lineup = 1;
  total_size += 1 * this->lineup_size();
  for (int i = 0; i < this->lineup_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lineup(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetLineup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetLineup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetLineup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetLineup::MergeFrom(const SetLineup& from) {
  GOOGLE_CHECK_NE(&from, this);
  lineup_.MergeFrom(from.lineup_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetLineup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetLineup::CopyFrom(const SetLineup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetLineup::IsInitialized() const {
  
  for (int i = 0; i < lineup_size(); i++) {
    if (!this->lineup(i).IsInitialized()) return false;
  }
  return true;
}

void SetLineup::Swap(SetLineup* other) {
  if (other != this) {
    lineup_.Swap(&other->lineup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetLineup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetLineup_descriptor_;
  metadata.reflection = SetLineup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Record::kStateFieldNumber;
const int Record::kPlayerFieldNumber;
const int Record::kWheelFieldNumber;
#endif  // !_MSC_VER

Record::Record()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Record::InitAsDefaultInstance() {
}

Record::Record(const Record& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Record::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  wheel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Record::~Record() {
  SharedDtor();
}

void Record::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Record::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Record::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Record_descriptor_;
}

const Record& Record::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();  return *default_instance_;
}

Record* Record::default_instance_ = NULL;

Record* Record::New() const {
  return new Record;
}

void Record::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 0;
    wheel_ = 0;
  }
  player_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player;
        break;
      }
      
      // repeated .protobuf.activity.OneRecord player = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player;
        if (input->ExpectTag(24)) goto parse_wheel;
        break;
      }
      
      // required int32 wheel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wheel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wheel_)));
          set_has_wheel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }
  
  // repeated .protobuf.activity.OneRecord player = 2;
  for (int i = 0; i < this->player_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->player(i), output);
  }
  
  // required int32 wheel = 3;
  if (has_wheel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wheel(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Record::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }
  
  // repeated .protobuf.activity.OneRecord player = 2;
  for (int i = 0; i < this->player_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->player(i), target);
  }
  
  // required int32 wheel = 3;
  if (has_wheel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wheel(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Record::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }
    
    // required int32 wheel = 3;
    if (has_wheel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wheel());
    }
    
  }
  // repeated .protobuf.activity.OneRecord player = 2;
  total_size += 1 * this->player_size();
  for (int i = 0; i < this->player_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Record::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Record* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Record*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Record::MergeFrom(const Record& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_.MergeFrom(from.player_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_wheel()) {
      set_wheel(from.wheel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Record::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Record::CopyFrom(const Record& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Record::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  for (int i = 0; i < player_size(); i++) {
    if (!this->player(i).IsInitialized()) return false;
  }
  return true;
}

void Record::Swap(Record* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    player_.Swap(&other->player_);
    std::swap(wheel_, other->wheel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Record::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Record_descriptor_;
  metadata.reflection = Record_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OneRecord::kAttackFieldNumber;
const int OneRecord::kDefenseFieldNumber;
const int OneRecord::kOneVictoryFieldNumber;
#endif  // !_MSC_VER

OneRecord::OneRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OneRecord::InitAsDefaultInstance() {
  attack_ = const_cast< ::protobuf::activity::iconinfo*>(&::protobuf::activity::iconinfo::default_instance());
  defense_ = const_cast< ::protobuf::activity::iconinfo*>(&::protobuf::activity::iconinfo::default_instance());
}

OneRecord::OneRecord(const OneRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OneRecord::SharedCtor() {
  _cached_size_ = 0;
  attack_ = NULL;
  defense_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OneRecord::~OneRecord() {
  SharedDtor();
}

void OneRecord::SharedDtor() {
  if (this != default_instance_) {
    delete attack_;
    delete defense_;
  }
}

void OneRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OneRecord_descriptor_;
}

const OneRecord& OneRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();  return *default_instance_;
}

OneRecord* OneRecord::default_instance_ = NULL;

OneRecord* OneRecord::New() const {
  return new OneRecord;
}

void OneRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_attack()) {
      if (attack_ != NULL) attack_->::protobuf::activity::iconinfo::Clear();
    }
    if (has_defense()) {
      if (defense_ != NULL) defense_->::protobuf::activity::iconinfo::Clear();
    }
  }
  onevictory_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OneRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protobuf.activity.iconinfo attack = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_defense;
        break;
      }
      
      // required .protobuf.activity.iconinfo defense = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defense:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_defense()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_oneVictory;
        break;
      }
      
      // repeated bool oneVictory = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oneVictory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 24, input, this->mutable_onevictory())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_onevictory())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_oneVictory;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OneRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protobuf.activity.iconinfo attack = 1;
  if (has_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attack(), output);
  }
  
  // required .protobuf.activity.iconinfo defense = 2;
  if (has_defense()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->defense(), output);
  }
  
  // repeated bool oneVictory = 3;
  for (int i = 0; i < this->onevictory_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      3, this->onevictory(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OneRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protobuf.activity.iconinfo attack = 1;
  if (has_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attack(), target);
  }
  
  // required .protobuf.activity.iconinfo defense = 2;
  if (has_defense()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->defense(), target);
  }
  
  // repeated bool oneVictory = 3;
  for (int i = 0; i < this->onevictory_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(3, this->onevictory(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OneRecord::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protobuf.activity.iconinfo attack = 1;
    if (has_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attack());
    }
    
    // required .protobuf.activity.iconinfo defense = 2;
    if (has_defense()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->defense());
    }
    
  }
  // repeated bool oneVictory = 3;
  {
    int data_size = 0;
    data_size = 1 * this->onevictory_size();
    total_size += 1 * this->onevictory_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OneRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OneRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OneRecord::MergeFrom(const OneRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  onevictory_.MergeFrom(from.onevictory_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attack()) {
      mutable_attack()->::protobuf::activity::iconinfo::MergeFrom(from.attack());
    }
    if (from.has_defense()) {
      mutable_defense()->::protobuf::activity::iconinfo::MergeFrom(from.defense());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OneRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneRecord::CopyFrom(const OneRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_attack()) {
    if (!this->attack().IsInitialized()) return false;
  }
  if (has_defense()) {
    if (!this->defense().IsInitialized()) return false;
  }
  return true;
}

void OneRecord::Swap(OneRecord* other) {
  if (other != this) {
    std::swap(attack_, other->attack_);
    std::swap(defense_, other->defense_);
    onevictory_.Swap(&other->onevictory_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OneRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OneRecord_descriptor_;
  metadata.reflection = OneRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityExchange::kGoodIdFieldNumber;
const int ActivityExchange::kItemsFieldNumber;
const int ActivityExchange::kHeroFieldNumber;
#endif  // !_MSC_VER

ActivityExchange::ActivityExchange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityExchange::InitAsDefaultInstance() {
  hero_ = const_cast< ::protobuf::common::Hero*>(&::protobuf::common::Hero::default_instance());
}

ActivityExchange::ActivityExchange(const ActivityExchange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityExchange::SharedCtor() {
  _cached_size_ = 0;
  goodid_ = 0;
  hero_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityExchange::~ActivityExchange() {
  SharedDtor();
}

void ActivityExchange::SharedDtor() {
  if (this != default_instance_) {
    delete hero_;
  }
}

void ActivityExchange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityExchange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityExchange_descriptor_;
}

const ActivityExchange& ActivityExchange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();  return *default_instance_;
}

ActivityExchange* ActivityExchange::default_instance_ = NULL;

ActivityExchange* ActivityExchange::New() const {
  return new ActivityExchange;
}

void ActivityExchange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    goodid_ = 0;
    if (has_hero()) {
      if (hero_ != NULL) hero_->::protobuf::common::Hero::Clear();
    }
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityExchange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 goodId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goodid_)));
          set_has_goodid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }
      
      // repeated .protobuf.common.KVint3232 items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectTag(26)) goto parse_hero;
        break;
      }
      
      // optional .protobuf.common.Hero hero = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hero()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityExchange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 goodId = 1;
  if (has_goodid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->goodid(), output);
  }
  
  // repeated .protobuf.common.KVint3232 items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }
  
  // optional .protobuf.common.Hero hero = 3;
  if (has_hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->hero(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityExchange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 goodId = 1;
  if (has_goodid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->goodid(), target);
  }
  
  // repeated .protobuf.common.KVint3232 items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }
  
  // optional .protobuf.common.Hero hero = 3;
  if (has_hero()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->hero(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityExchange::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 goodId = 1;
    if (has_goodid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goodid());
    }
    
    // optional .protobuf.common.Hero hero = 3;
    if (has_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hero());
    }
    
  }
  // repeated .protobuf.common.KVint3232 items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityExchange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityExchange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityExchange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityExchange::MergeFrom(const ActivityExchange& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_goodid()) {
      set_goodid(from.goodid());
    }
    if (from.has_hero()) {
      mutable_hero()->::protobuf::common::Hero::MergeFrom(from.hero());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityExchange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityExchange::CopyFrom(const ActivityExchange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityExchange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  if (has_hero()) {
    if (!this->hero().IsInitialized()) return false;
  }
  return true;
}

void ActivityExchange::Swap(ActivityExchange* other) {
  if (other != this) {
    std::swap(goodid_, other->goodid_);
    items_.Swap(&other->items_);
    std::swap(hero_, other->hero_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityExchange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityExchange_descriptor_;
  metadata.reflection = ActivityExchange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KingEventRequest::kGoodIdFieldNumber;
const int KingEventRequest::kHerosFieldNumber;
#endif  // !_MSC_VER

KingEventRequest::KingEventRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KingEventRequest::InitAsDefaultInstance() {
}

KingEventRequest::KingEventRequest(const KingEventRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KingEventRequest::SharedCtor() {
  _cached_size_ = 0;
  goodid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KingEventRequest::~KingEventRequest() {
  SharedDtor();
}

void KingEventRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KingEventRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KingEventRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KingEventRequest_descriptor_;
}

const KingEventRequest& KingEventRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();  return *default_instance_;
}

KingEventRequest* KingEventRequest::default_instance_ = NULL;

KingEventRequest* KingEventRequest::New() const {
  return new KingEventRequest;
}

void KingEventRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    goodid_ = 0;
  }
  heros_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KingEventRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 goodId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goodid_)));
          set_has_goodid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_heros;
        break;
      }
      
      // repeated int32 heros = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_heros())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_heros())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_heros;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KingEventRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 goodId = 1;
  if (has_goodid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->goodid(), output);
  }
  
  // repeated int32 heros = 2;
  for (int i = 0; i < this->heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->heros(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KingEventRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 goodId = 1;
  if (has_goodid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->goodid(), target);
  }
  
  // repeated int32 heros = 2;
  for (int i = 0; i < this->heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->heros(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KingEventRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 goodId = 1;
    if (has_goodid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goodid());
    }
    
  }
  // repeated int32 heros = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->heros_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->heros(i));
    }
    total_size += 1 * this->heros_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KingEventRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KingEventRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KingEventRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KingEventRequest::MergeFrom(const KingEventRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  heros_.MergeFrom(from.heros_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_goodid()) {
      set_goodid(from.goodid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KingEventRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KingEventRequest::CopyFrom(const KingEventRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KingEventRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void KingEventRequest::Swap(KingEventRequest* other) {
  if (other != this) {
    std::swap(goodid_, other->goodid_);
    heros_.Swap(&other->heros_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KingEventRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KingEventRequest_descriptor_;
  metadata.reflection = KingEventRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SigninToTal::kAlreadyReceivedIdFieldNumber;
const int SigninToTal::kAlreadyReceivedNumberFieldNumber;
const int SigninToTal::kNumberFieldNumber;
#endif  // !_MSC_VER

SigninToTal::SigninToTal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SigninToTal::InitAsDefaultInstance() {
}

SigninToTal::SigninToTal(const SigninToTal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SigninToTal::SharedCtor() {
  _cached_size_ = 0;
  alreadyreceivedid_ = 0;
  alreadyreceivednumber_ = 0;
  number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SigninToTal::~SigninToTal() {
  SharedDtor();
}

void SigninToTal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SigninToTal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SigninToTal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SigninToTal_descriptor_;
}

const SigninToTal& SigninToTal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();  return *default_instance_;
}

SigninToTal* SigninToTal::default_instance_ = NULL;

SigninToTal* SigninToTal::New() const {
  return new SigninToTal;
}

void SigninToTal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    alreadyreceivedid_ = 0;
    alreadyreceivednumber_ = 0;
    number_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SigninToTal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 alreadyReceivedId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alreadyreceivedid_)));
          set_has_alreadyreceivedid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_alreadyReceivedNumber;
        break;
      }
      
      // optional int32 alreadyReceivedNumber = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alreadyReceivedNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alreadyreceivednumber_)));
          set_has_alreadyreceivednumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_number;
        break;
      }
      
      // optional int32 number = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SigninToTal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 alreadyReceivedId = 1;
  if (has_alreadyreceivedid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->alreadyreceivedid(), output);
  }
  
  // optional int32 alreadyReceivedNumber = 2;
  if (has_alreadyreceivednumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->alreadyreceivednumber(), output);
  }
  
  // optional int32 number = 3;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->number(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SigninToTal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 alreadyReceivedId = 1;
  if (has_alreadyreceivedid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->alreadyreceivedid(), target);
  }
  
  // optional int32 alreadyReceivedNumber = 2;
  if (has_alreadyreceivednumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->alreadyreceivednumber(), target);
  }
  
  // optional int32 number = 3;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->number(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SigninToTal::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 alreadyReceivedId = 1;
    if (has_alreadyreceivedid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->alreadyreceivedid());
    }
    
    // optional int32 alreadyReceivedNumber = 2;
    if (has_alreadyreceivednumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->alreadyreceivednumber());
    }
    
    // optional int32 number = 3;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SigninToTal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SigninToTal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SigninToTal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SigninToTal::MergeFrom(const SigninToTal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alreadyreceivedid()) {
      set_alreadyreceivedid(from.alreadyreceivedid());
    }
    if (from.has_alreadyreceivednumber()) {
      set_alreadyreceivednumber(from.alreadyreceivednumber());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SigninToTal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SigninToTal::CopyFrom(const SigninToTal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigninToTal::IsInitialized() const {
  
  return true;
}

void SigninToTal::Swap(SigninToTal* other) {
  if (other != this) {
    std::swap(alreadyreceivedid_, other->alreadyreceivedid_);
    std::swap(alreadyreceivednumber_, other->alreadyreceivednumber_);
    std::swap(number_, other->number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SigninToTal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SigninToTal_descriptor_;
  metadata.reflection = SigninToTal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KingEventReply::kItemsFieldNumber;
const int KingEventReply::kHeroItemsFieldNumber;
#endif  // !_MSC_VER

KingEventReply::KingEventReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KingEventReply::InitAsDefaultInstance() {
}

KingEventReply::KingEventReply(const KingEventReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KingEventReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KingEventReply::~KingEventReply() {
  SharedDtor();
}

void KingEventReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KingEventReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KingEventReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KingEventReply_descriptor_;
}

const KingEventReply& KingEventReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();  return *default_instance_;
}

KingEventReply* KingEventReply::default_instance_ = NULL;

KingEventReply* KingEventReply::New() const {
  return new KingEventReply;
}

void KingEventReply::Clear() {
  items_.Clear();
  heroitems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KingEventReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.common.KVint3264 items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectTag(18)) goto parse_heroItems;
        break;
      }
      
      // repeated .protobuf.common.KVint3264 heroItems = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heroItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_heroitems()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_heroItems;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KingEventReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.common.KVint3264 items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }
  
  // repeated .protobuf.common.KVint3264 heroItems = 2;
  for (int i = 0; i < this->heroitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->heroitems(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KingEventReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.common.KVint3264 items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }
  
  // repeated .protobuf.common.KVint3264 heroItems = 2;
  for (int i = 0; i < this->heroitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->heroitems(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KingEventReply::ByteSize() const {
  int total_size = 0;
  
  // repeated .protobuf.common.KVint3264 items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  // repeated .protobuf.common.KVint3264 heroItems = 2;
  total_size += 1 * this->heroitems_size();
  for (int i = 0; i < this->heroitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heroitems(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KingEventReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KingEventReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KingEventReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KingEventReply::MergeFrom(const KingEventReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  heroitems_.MergeFrom(from.heroitems_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KingEventReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KingEventReply::CopyFrom(const KingEventReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KingEventReply::IsInitialized() const {
  
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  for (int i = 0; i < heroitems_size(); i++) {
    if (!this->heroitems(i).IsInitialized()) return false;
  }
  return true;
}

void KingEventReply::Swap(KingEventReply* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    heroitems_.Swap(&other->heroitems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KingEventReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KingEventReply_descriptor_;
  metadata.reflection = KingEventReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FirstChargeMsgReply::kGoodIdFieldNumber;
const int FirstChargeMsgReply::kHaveChargePriceFieldNumber;
const int FirstChargeMsgReply::kItemsFieldNumber;
#endif  // !_MSC_VER

FirstChargeMsgReply::FirstChargeMsgReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FirstChargeMsgReply::InitAsDefaultInstance() {
}

FirstChargeMsgReply::FirstChargeMsgReply(const FirstChargeMsgReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FirstChargeMsgReply::SharedCtor() {
  _cached_size_ = 0;
  goodid_ = 0;
  havechargeprice_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FirstChargeMsgReply::~FirstChargeMsgReply() {
  SharedDtor();
}

void FirstChargeMsgReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FirstChargeMsgReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FirstChargeMsgReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FirstChargeMsgReply_descriptor_;
}

const FirstChargeMsgReply& FirstChargeMsgReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_activity_2eproto();  return *default_instance_;
}

FirstChargeMsgReply* FirstChargeMsgReply::default_instance_ = NULL;

FirstChargeMsgReply* FirstChargeMsgReply::New() const {
  return new FirstChargeMsgReply;
}

void FirstChargeMsgReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    goodid_ = 0;
    havechargeprice_ = 0;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FirstChargeMsgReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 goodId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goodid_)));
          set_has_goodid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_haveChargePrice;
        break;
      }
      
      // optional int32 haveChargePrice = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_haveChargePrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &havechargeprice_)));
          set_has_havechargeprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }
      
      // repeated .protobuf.common.KVint3264 items = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FirstChargeMsgReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 goodId = 1;
  if (has_goodid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->goodid(), output);
  }
  
  // optional int32 haveChargePrice = 2;
  if (has_havechargeprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->havechargeprice(), output);
  }
  
  // repeated .protobuf.common.KVint3264 items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FirstChargeMsgReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 goodId = 1;
  if (has_goodid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->goodid(), target);
  }
  
  // optional int32 haveChargePrice = 2;
  if (has_havechargeprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->havechargeprice(), target);
  }
  
  // repeated .protobuf.common.KVint3264 items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FirstChargeMsgReply::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 goodId = 1;
    if (has_goodid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goodid());
    }
    
    // optional int32 haveChargePrice = 2;
    if (has_havechargeprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->havechargeprice());
    }
    
  }
  // repeated .protobuf.common.KVint3264 items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FirstChargeMsgReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FirstChargeMsgReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FirstChargeMsgReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FirstChargeMsgReply::MergeFrom(const FirstChargeMsgReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_goodid()) {
      set_goodid(from.goodid());
    }
    if (from.has_havechargeprice()) {
      set_havechargeprice(from.havechargeprice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FirstChargeMsgReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirstChargeMsgReply::CopyFrom(const FirstChargeMsgReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirstChargeMsgReply::IsInitialized() const {
  
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void FirstChargeMsgReply::Swap(FirstChargeMsgReply* other) {
  if (other != this) {
    std::swap(goodid_, other->goodid_);
    std::swap(havechargeprice_, other->havechargeprice_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FirstChargeMsgReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FirstChargeMsgReply_descriptor_;
  metadata.reflection = FirstChargeMsgReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace activity
}  // namespace protobuf

// @@protoc_insertion_point(global_scope)
