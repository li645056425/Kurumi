// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "artifact.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protobuf {
namespace artifact {

namespace {

const ::google::protobuf::Descriptor* ArtifactInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArtifactInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArtifactInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArtifactInfoList_reflection_ = NULL;
const ::google::protobuf::Descriptor* RunesInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RunesInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RunesInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RunesInfoList_reflection_ = NULL;
const ::google::protobuf::Descriptor* RunesCompoundInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RunesCompoundInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_artifact_2eproto() {
  protobuf_AddDesc_artifact_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "artifact.proto");
  GOOGLE_CHECK(file != NULL);
  ArtifactInfo_descriptor_ = file->message_type(0);
  static const int ArtifactInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactInfo, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactInfo, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactInfo, map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactInfo, heroid_),
  };
  ArtifactInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArtifactInfo_descriptor_,
      ArtifactInfo::default_instance_,
      ArtifactInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArtifactInfo));
  ArtifactInfoList_descriptor_ = file->message_type(1);
  static const int ArtifactInfoList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactInfoList, artifact_),
  };
  ArtifactInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArtifactInfoList_descriptor_,
      ArtifactInfoList::default_instance_,
      ArtifactInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArtifactInfoList));
  RunesInfo_descriptor_ = file->message_type(2);
  static const int RunesInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunesInfo, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunesInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunesInfo, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunesInfo, map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunesInfo, skills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunesInfo, tmpmap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunesInfo, tmpskills_),
  };
  RunesInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RunesInfo_descriptor_,
      RunesInfo::default_instance_,
      RunesInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunesInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunesInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RunesInfo));
  RunesInfoList_descriptor_ = file->message_type(3);
  static const int RunesInfoList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunesInfoList, runesinfo_),
  };
  RunesInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RunesInfoList_descriptor_,
      RunesInfoList::default_instance_,
      RunesInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunesInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunesInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RunesInfoList));
  RunesCompoundInfo_descriptor_ = file->message_type(4);
  static const int RunesCompoundInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunesCompoundInfo, runesinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunesCompoundInfo, delkey_),
  };
  RunesCompoundInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RunesCompoundInfo_descriptor_,
      RunesCompoundInfo::default_instance_,
      RunesCompoundInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunesCompoundInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunesCompoundInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RunesCompoundInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_artifact_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArtifactInfo_descriptor_, &ArtifactInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArtifactInfoList_descriptor_, &ArtifactInfoList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RunesInfo_descriptor_, &RunesInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RunesInfoList_descriptor_, &RunesInfoList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RunesCompoundInfo_descriptor_, &RunesCompoundInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_artifact_2eproto() {
  delete ArtifactInfo::default_instance_;
  delete ArtifactInfo_reflection_;
  delete ArtifactInfoList::default_instance_;
  delete ArtifactInfoList_reflection_;
  delete RunesInfo::default_instance_;
  delete RunesInfo_reflection_;
  delete RunesInfoList::default_instance_;
  delete RunesInfoList_reflection_;
  delete RunesCompoundInfo::default_instance_;
  delete RunesCompoundInfo_reflection_;
}

void protobuf_AddDesc_artifact_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf::common::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016artifact.proto\022\021protobuf.artifact\032\014com"
    "mon.proto\"p\n\014ArtifactInfo\022\013\n\003key\030\001 \002(\005\022\n"
    "\n\002id\030\002 \002(\005\022\n\n\002lv\030\003 \002(\005\022+\n\003map\030\004 \003(\0132\036.pr"
    "otobuf.common.KVint32string\022\016\n\006heroId\030\005 "
    "\002(\005\"E\n\020ArtifactInfoList\0221\n\010artifact\030\001 \003("
    "\0132\037.protobuf.artifact.ArtifactInfo\"\264\001\n\tR"
    "unesInfo\022\013\n\003key\030\001 \002(\005\022\n\n\002id\030\002 \002(\005\022\016\n\006her"
    "oId\030\003 \002(\005\022+\n\003map\030\004 \003(\0132\036.protobuf.common"
    ".KVint32string\022\016\n\006skills\030\005 \003(\005\022.\n\006tmpMap"
    "\030\006 \003(\0132\036.protobuf.common.KVint32string\022\021"
    "\n\ttmpSkills\030\007 \003(\005\"@\n\rRunesInfoList\022/\n\tru"
    "nesInfo\030\001 \003(\0132\034.protobuf.artifact.RunesI"
    "nfo\"T\n\021RunesCompoundInfo\022/\n\trunesInfo\030\001 "
    "\002(\0132\034.protobuf.artifact.RunesInfo\022\016\n\006del"
    "Key\030\002 \003(\005B$\n\023xag.idgo.core.protoB\rArtifa"
    "ctProto", 607);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "artifact.proto", &protobuf_RegisterTypes);
  ArtifactInfo::default_instance_ = new ArtifactInfo();
  ArtifactInfoList::default_instance_ = new ArtifactInfoList();
  RunesInfo::default_instance_ = new RunesInfo();
  RunesInfoList::default_instance_ = new RunesInfoList();
  RunesCompoundInfo::default_instance_ = new RunesCompoundInfo();
  ArtifactInfo::default_instance_->InitAsDefaultInstance();
  ArtifactInfoList::default_instance_->InitAsDefaultInstance();
  RunesInfo::default_instance_->InitAsDefaultInstance();
  RunesInfoList::default_instance_->InitAsDefaultInstance();
  RunesCompoundInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_artifact_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_artifact_2eproto {
  StaticDescriptorInitializer_artifact_2eproto() {
    protobuf_AddDesc_artifact_2eproto();
  }
} static_descriptor_initializer_artifact_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ArtifactInfo::kKeyFieldNumber;
const int ArtifactInfo::kIdFieldNumber;
const int ArtifactInfo::kLvFieldNumber;
const int ArtifactInfo::kMapFieldNumber;
const int ArtifactInfo::kHeroIdFieldNumber;
#endif  // !_MSC_VER

ArtifactInfo::ArtifactInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArtifactInfo::InitAsDefaultInstance() {
}

ArtifactInfo::ArtifactInfo(const ArtifactInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArtifactInfo::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  id_ = 0;
  lv_ = 0;
  heroid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArtifactInfo::~ArtifactInfo() {
  SharedDtor();
}

void ArtifactInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArtifactInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArtifactInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArtifactInfo_descriptor_;
}

const ArtifactInfo& ArtifactInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artifact_2eproto();  return *default_instance_;
}

ArtifactInfo* ArtifactInfo::default_instance_ = NULL;

ArtifactInfo* ArtifactInfo::New() const {
  return new ArtifactInfo;
}

void ArtifactInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0;
    id_ = 0;
    lv_ = 0;
    heroid_ = 0;
  }
  map_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArtifactInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // required int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lv;
        break;
      }
      
      // required int32 lv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_map;
        break;
      }
      
      // repeated .protobuf.common.KVint32string map = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_map;
        if (input->ExpectTag(40)) goto parse_heroId;
        break;
      }
      
      // required int32 heroId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArtifactInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }
  
  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  // required int32 lv = 3;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lv(), output);
  }
  
  // repeated .protobuf.common.KVint32string map = 4;
  for (int i = 0; i < this->map_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->map(i), output);
  }
  
  // required int32 heroId = 5;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->heroid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArtifactInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }
  
  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  // required int32 lv = 3;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lv(), target);
  }
  
  // repeated .protobuf.common.KVint32string map = 4;
  for (int i = 0; i < this->map_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->map(i), target);
  }
  
  // required int32 heroId = 5;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->heroid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArtifactInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }
    
    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required int32 lv = 3;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }
    
    // required int32 heroId = 5;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->heroid());
    }
    
  }
  // repeated .protobuf.common.KVint32string map = 4;
  total_size += 1 * this->map_size();
  for (int i = 0; i < this->map_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->map(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArtifactInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArtifactInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArtifactInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArtifactInfo::MergeFrom(const ArtifactInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  map_.MergeFrom(from.map_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArtifactInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArtifactInfo::CopyFrom(const ArtifactInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtifactInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;
  
  for (int i = 0; i < map_size(); i++) {
    if (!this->map(i).IsInitialized()) return false;
  }
  return true;
}

void ArtifactInfo::Swap(ArtifactInfo* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(id_, other->id_);
    std::swap(lv_, other->lv_);
    map_.Swap(&other->map_);
    std::swap(heroid_, other->heroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArtifactInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArtifactInfo_descriptor_;
  metadata.reflection = ArtifactInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArtifactInfoList::kArtifactFieldNumber;
#endif  // !_MSC_VER

ArtifactInfoList::ArtifactInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArtifactInfoList::InitAsDefaultInstance() {
}

ArtifactInfoList::ArtifactInfoList(const ArtifactInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArtifactInfoList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArtifactInfoList::~ArtifactInfoList() {
  SharedDtor();
}

void ArtifactInfoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArtifactInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArtifactInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArtifactInfoList_descriptor_;
}

const ArtifactInfoList& ArtifactInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artifact_2eproto();  return *default_instance_;
}

ArtifactInfoList* ArtifactInfoList::default_instance_ = NULL;

ArtifactInfoList* ArtifactInfoList::New() const {
  return new ArtifactInfoList;
}

void ArtifactInfoList::Clear() {
  artifact_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArtifactInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.artifact.ArtifactInfo artifact = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_artifact:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_artifact()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_artifact;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArtifactInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.artifact.ArtifactInfo artifact = 1;
  for (int i = 0; i < this->artifact_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->artifact(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArtifactInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.artifact.ArtifactInfo artifact = 1;
  for (int i = 0; i < this->artifact_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->artifact(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArtifactInfoList::ByteSize() const {
  int total_size = 0;
  
  // repeated .protobuf.artifact.ArtifactInfo artifact = 1;
  total_size += 1 * this->artifact_size();
  for (int i = 0; i < this->artifact_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->artifact(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArtifactInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArtifactInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArtifactInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArtifactInfoList::MergeFrom(const ArtifactInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  artifact_.MergeFrom(from.artifact_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArtifactInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArtifactInfoList::CopyFrom(const ArtifactInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtifactInfoList::IsInitialized() const {
  
  for (int i = 0; i < artifact_size(); i++) {
    if (!this->artifact(i).IsInitialized()) return false;
  }
  return true;
}

void ArtifactInfoList::Swap(ArtifactInfoList* other) {
  if (other != this) {
    artifact_.Swap(&other->artifact_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArtifactInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArtifactInfoList_descriptor_;
  metadata.reflection = ArtifactInfoList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RunesInfo::kKeyFieldNumber;
const int RunesInfo::kIdFieldNumber;
const int RunesInfo::kHeroIdFieldNumber;
const int RunesInfo::kMapFieldNumber;
const int RunesInfo::kSkillsFieldNumber;
const int RunesInfo::kTmpMapFieldNumber;
const int RunesInfo::kTmpSkillsFieldNumber;
#endif  // !_MSC_VER

RunesInfo::RunesInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RunesInfo::InitAsDefaultInstance() {
}

RunesInfo::RunesInfo(const RunesInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RunesInfo::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  id_ = 0;
  heroid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RunesInfo::~RunesInfo() {
  SharedDtor();
}

void RunesInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RunesInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunesInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RunesInfo_descriptor_;
}

const RunesInfo& RunesInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artifact_2eproto();  return *default_instance_;
}

RunesInfo* RunesInfo::default_instance_ = NULL;

RunesInfo* RunesInfo::New() const {
  return new RunesInfo;
}

void RunesInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0;
    id_ = 0;
    heroid_ = 0;
  }
  map_.Clear();
  skills_.Clear();
  tmpmap_.Clear();
  tmpskills_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RunesInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // required int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_heroId;
        break;
      }
      
      // required int32 heroId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_map;
        break;
      }
      
      // repeated .protobuf.common.KVint32string map = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_map;
        if (input->ExpectTag(40)) goto parse_skills;
        break;
      }
      
      // repeated int32 skills = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_skills())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_skills())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_skills;
        if (input->ExpectTag(50)) goto parse_tmpMap;
        break;
      }
      
      // repeated .protobuf.common.KVint32string tmpMap = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tmpMap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tmpmap()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_tmpMap;
        if (input->ExpectTag(56)) goto parse_tmpSkills;
        break;
      }
      
      // repeated int32 tmpSkills = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tmpSkills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_tmpskills())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_tmpskills())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_tmpSkills;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RunesInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }
  
  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  // required int32 heroId = 3;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->heroid(), output);
  }
  
  // repeated .protobuf.common.KVint32string map = 4;
  for (int i = 0; i < this->map_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->map(i), output);
  }
  
  // repeated int32 skills = 5;
  for (int i = 0; i < this->skills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->skills(i), output);
  }
  
  // repeated .protobuf.common.KVint32string tmpMap = 6;
  for (int i = 0; i < this->tmpmap_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->tmpmap(i), output);
  }
  
  // repeated int32 tmpSkills = 7;
  for (int i = 0; i < this->tmpskills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->tmpskills(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RunesInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }
  
  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  // required int32 heroId = 3;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->heroid(), target);
  }
  
  // repeated .protobuf.common.KVint32string map = 4;
  for (int i = 0; i < this->map_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->map(i), target);
  }
  
  // repeated int32 skills = 5;
  for (int i = 0; i < this->skills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->skills(i), target);
  }
  
  // repeated .protobuf.common.KVint32string tmpMap = 6;
  for (int i = 0; i < this->tmpmap_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->tmpmap(i), target);
  }
  
  // repeated int32 tmpSkills = 7;
  for (int i = 0; i < this->tmpskills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->tmpskills(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RunesInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }
    
    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required int32 heroId = 3;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->heroid());
    }
    
  }
  // repeated .protobuf.common.KVint32string map = 4;
  total_size += 1 * this->map_size();
  for (int i = 0; i < this->map_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->map(i));
  }
  
  // repeated int32 skills = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->skills_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->skills(i));
    }
    total_size += 1 * this->skills_size() + data_size;
  }
  
  // repeated .protobuf.common.KVint32string tmpMap = 6;
  total_size += 1 * this->tmpmap_size();
  for (int i = 0; i < this->tmpmap_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tmpmap(i));
  }
  
  // repeated int32 tmpSkills = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->tmpskills_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->tmpskills(i));
    }
    total_size += 1 * this->tmpskills_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunesInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RunesInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RunesInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RunesInfo::MergeFrom(const RunesInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  map_.MergeFrom(from.map_);
  skills_.MergeFrom(from.skills_);
  tmpmap_.MergeFrom(from.tmpmap_);
  tmpskills_.MergeFrom(from.tmpskills_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RunesInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunesInfo::CopyFrom(const RunesInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunesInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < map_size(); i++) {
    if (!this->map(i).IsInitialized()) return false;
  }
  for (int i = 0; i < tmpmap_size(); i++) {
    if (!this->tmpmap(i).IsInitialized()) return false;
  }
  return true;
}

void RunesInfo::Swap(RunesInfo* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(id_, other->id_);
    std::swap(heroid_, other->heroid_);
    map_.Swap(&other->map_);
    skills_.Swap(&other->skills_);
    tmpmap_.Swap(&other->tmpmap_);
    tmpskills_.Swap(&other->tmpskills_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RunesInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RunesInfo_descriptor_;
  metadata.reflection = RunesInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RunesInfoList::kRunesInfoFieldNumber;
#endif  // !_MSC_VER

RunesInfoList::RunesInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RunesInfoList::InitAsDefaultInstance() {
}

RunesInfoList::RunesInfoList(const RunesInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RunesInfoList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RunesInfoList::~RunesInfoList() {
  SharedDtor();
}

void RunesInfoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RunesInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunesInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RunesInfoList_descriptor_;
}

const RunesInfoList& RunesInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artifact_2eproto();  return *default_instance_;
}

RunesInfoList* RunesInfoList::default_instance_ = NULL;

RunesInfoList* RunesInfoList::New() const {
  return new RunesInfoList;
}

void RunesInfoList::Clear() {
  runesinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RunesInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.artifact.RunesInfo runesInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_runesInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_runesinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_runesInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RunesInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.artifact.RunesInfo runesInfo = 1;
  for (int i = 0; i < this->runesinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->runesinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RunesInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.artifact.RunesInfo runesInfo = 1;
  for (int i = 0; i < this->runesinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->runesinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RunesInfoList::ByteSize() const {
  int total_size = 0;
  
  // repeated .protobuf.artifact.RunesInfo runesInfo = 1;
  total_size += 1 * this->runesinfo_size();
  for (int i = 0; i < this->runesinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->runesinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunesInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RunesInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RunesInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RunesInfoList::MergeFrom(const RunesInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  runesinfo_.MergeFrom(from.runesinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RunesInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunesInfoList::CopyFrom(const RunesInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunesInfoList::IsInitialized() const {
  
  for (int i = 0; i < runesinfo_size(); i++) {
    if (!this->runesinfo(i).IsInitialized()) return false;
  }
  return true;
}

void RunesInfoList::Swap(RunesInfoList* other) {
  if (other != this) {
    runesinfo_.Swap(&other->runesinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RunesInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RunesInfoList_descriptor_;
  metadata.reflection = RunesInfoList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RunesCompoundInfo::kRunesInfoFieldNumber;
const int RunesCompoundInfo::kDelKeyFieldNumber;
#endif  // !_MSC_VER

RunesCompoundInfo::RunesCompoundInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RunesCompoundInfo::InitAsDefaultInstance() {
  runesinfo_ = const_cast< ::protobuf::artifact::RunesInfo*>(&::protobuf::artifact::RunesInfo::default_instance());
}

RunesCompoundInfo::RunesCompoundInfo(const RunesCompoundInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RunesCompoundInfo::SharedCtor() {
  _cached_size_ = 0;
  runesinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RunesCompoundInfo::~RunesCompoundInfo() {
  SharedDtor();
}

void RunesCompoundInfo::SharedDtor() {
  if (this != default_instance_) {
    delete runesinfo_;
  }
}

void RunesCompoundInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunesCompoundInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RunesCompoundInfo_descriptor_;
}

const RunesCompoundInfo& RunesCompoundInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artifact_2eproto();  return *default_instance_;
}

RunesCompoundInfo* RunesCompoundInfo::default_instance_ = NULL;

RunesCompoundInfo* RunesCompoundInfo::New() const {
  return new RunesCompoundInfo;
}

void RunesCompoundInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_runesinfo()) {
      if (runesinfo_ != NULL) runesinfo_->::protobuf::artifact::RunesInfo::Clear();
    }
  }
  delkey_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RunesCompoundInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protobuf.artifact.RunesInfo runesInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_runesinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_delKey;
        break;
      }
      
      // repeated int32 delKey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delKey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_delkey())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_delkey())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_delKey;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RunesCompoundInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protobuf.artifact.RunesInfo runesInfo = 1;
  if (has_runesinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->runesinfo(), output);
  }
  
  // repeated int32 delKey = 2;
  for (int i = 0; i < this->delkey_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->delkey(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RunesCompoundInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protobuf.artifact.RunesInfo runesInfo = 1;
  if (has_runesinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->runesinfo(), target);
  }
  
  // repeated int32 delKey = 2;
  for (int i = 0; i < this->delkey_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->delkey(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RunesCompoundInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protobuf.artifact.RunesInfo runesInfo = 1;
    if (has_runesinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->runesinfo());
    }
    
  }
  // repeated int32 delKey = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->delkey_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->delkey(i));
    }
    total_size += 1 * this->delkey_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunesCompoundInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RunesCompoundInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RunesCompoundInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RunesCompoundInfo::MergeFrom(const RunesCompoundInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  delkey_.MergeFrom(from.delkey_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_runesinfo()) {
      mutable_runesinfo()->::protobuf::artifact::RunesInfo::MergeFrom(from.runesinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RunesCompoundInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunesCompoundInfo::CopyFrom(const RunesCompoundInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunesCompoundInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_runesinfo()) {
    if (!this->runesinfo().IsInitialized()) return false;
  }
  return true;
}

void RunesCompoundInfo::Swap(RunesCompoundInfo* other) {
  if (other != this) {
    std::swap(runesinfo_, other->runesinfo_);
    delkey_.Swap(&other->delkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RunesCompoundInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RunesCompoundInfo_descriptor_;
  metadata.reflection = RunesCompoundInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace artifact
}  // namespace protobuf

// @@protoc_insertion_point(global_scope)
