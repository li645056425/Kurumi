// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

#ifndef PROTOBUF_chat_2eproto__INCLUDED
#define PROTOBUF_chat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf {
namespace chat {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_chat_2eproto();
void protobuf_AssignDesc_chat_2eproto();
void protobuf_ShutdownFile_chat_2eproto();

class ChatInfo;
class ChatInfoList;
class RecruitInfo;
class BattleShare;
class OneBattleShow;
class BattleShow;
class SendChat;
class PullChatInfo;

// ===================================================================

class ChatInfo : public ::google::protobuf::Message {
 public:
  ChatInfo();
  virtual ~ChatInfo();
  
  ChatInfo(const ChatInfo& from);
  
  inline ChatInfo& operator=(const ChatInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatInfo& default_instance();
  
  void Swap(ChatInfo* other);
  
  // implements Message ----------------------------------------------
  
  ChatInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatInfo& from);
  void MergeFrom(const ChatInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);
  
  // required int32 chatId = 2;
  inline bool has_chatid() const;
  inline void clear_chatid();
  static const int kChatIdFieldNumber = 2;
  inline ::google::protobuf::int32 chatid() const;
  inline void set_chatid(::google::protobuf::int32 value);
  
  // required int64 sendTime = 3;
  inline bool has_sendtime() const;
  inline void clear_sendtime();
  static const int kSendTimeFieldNumber = 3;
  inline ::google::protobuf::int64 sendtime() const;
  inline void set_sendtime(::google::protobuf::int64 value);
  
  // optional int32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional string name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional string head = 6;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 6;
  inline const ::std::string& head() const;
  inline void set_head(const ::std::string& value);
  inline void set_head(const char* value);
  inline void set_head(const char* value, size_t size);
  inline ::std::string* mutable_head();
  inline ::std::string* release_head();
  
  // optional string playerId = 7;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 7;
  inline const ::std::string& playerid() const;
  inline void set_playerid(const ::std::string& value);
  inline void set_playerid(const char* value);
  inline void set_playerid(const char* value, size_t size);
  inline ::std::string* mutable_playerid();
  inline ::std::string* release_playerid();
  
  // repeated string pram = 8;
  inline int pram_size() const;
  inline void clear_pram();
  static const int kPramFieldNumber = 8;
  inline const ::std::string& pram(int index) const;
  inline ::std::string* mutable_pram(int index);
  inline void set_pram(int index, const ::std::string& value);
  inline void set_pram(int index, const char* value);
  inline void set_pram(int index, const char* value, size_t size);
  inline ::std::string* add_pram();
  inline void add_pram(const ::std::string& value);
  inline void add_pram(const char* value);
  inline void add_pram(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& pram() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_pram();
  
  // optional .protobuf.chat.RecruitInfo recruit = 9;
  inline bool has_recruit() const;
  inline void clear_recruit();
  static const int kRecruitFieldNumber = 9;
  inline const ::protobuf::chat::RecruitInfo& recruit() const;
  inline ::protobuf::chat::RecruitInfo* mutable_recruit();
  inline ::protobuf::chat::RecruitInfo* release_recruit();
  
  // repeated .protobuf.common.KVint3232 item = 10;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 10;
  inline const ::protobuf::common::KVint3232& item(int index) const;
  inline ::protobuf::common::KVint3232* mutable_item(int index);
  inline ::protobuf::common::KVint3232* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >*
      mutable_item();
  
  // optional .protobuf.common.LineupDetail hero = 12;
  inline bool has_hero() const;
  inline void clear_hero();
  static const int kHeroFieldNumber = 12;
  inline const ::protobuf::common::LineupDetail& hero() const;
  inline ::protobuf::common::LineupDetail* mutable_hero();
  inline ::protobuf::common::LineupDetail* release_hero();
  
  // optional int32 vipLevel = 13;
  inline bool has_viplevel() const;
  inline void clear_viplevel();
  static const int kVipLevelFieldNumber = 13;
  inline ::google::protobuf::int32 viplevel() const;
  inline void set_viplevel(::google::protobuf::int32 value);
  
  // repeated .protobuf.common.Pet pet = 14;
  inline int pet_size() const;
  inline void clear_pet();
  static const int kPetFieldNumber = 14;
  inline const ::protobuf::common::Pet& pet(int index) const;
  inline ::protobuf::common::Pet* mutable_pet(int index);
  inline ::protobuf::common::Pet* add_pet();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::Pet >&
      pet() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::Pet >*
      mutable_pet();
  
  // optional int32 headFrame = 15;
  inline bool has_headframe() const;
  inline void clear_headframe();
  static const int kHeadFrameFieldNumber = 15;
  inline ::google::protobuf::int32 headframe() const;
  inline void set_headframe(::google::protobuf::int32 value);
  
  // optional string sendToPlayerId = 16;
  inline bool has_sendtoplayerid() const;
  inline void clear_sendtoplayerid();
  static const int kSendToPlayerIdFieldNumber = 16;
  inline const ::std::string& sendtoplayerid() const;
  inline void set_sendtoplayerid(const ::std::string& value);
  inline void set_sendtoplayerid(const char* value);
  inline void set_sendtoplayerid(const char* value, size_t size);
  inline ::std::string* mutable_sendtoplayerid();
  inline ::std::string* release_sendtoplayerid();
  
  // optional int32 serverId = 17;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 17;
  inline ::google::protobuf::int32 serverid() const;
  inline void set_serverid(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protobuf.chat.ChatInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_chatid();
  inline void clear_has_chatid();
  inline void set_has_sendtime();
  inline void clear_has_sendtime();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_recruit();
  inline void clear_has_recruit();
  inline void set_has_hero();
  inline void clear_has_hero();
  inline void set_has_viplevel();
  inline void clear_has_viplevel();
  inline void set_has_headframe();
  inline void clear_has_headframe();
  inline void set_has_sendtoplayerid();
  inline void clear_has_sendtoplayerid();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 sendtime_;
  ::google::protobuf::int32 chatid_;
  ::google::protobuf::int32 level_;
  ::std::string* name_;
  ::std::string* head_;
  ::std::string* playerid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> pram_;
  ::protobuf::chat::RecruitInfo* recruit_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 > item_;
  ::protobuf::common::LineupDetail* hero_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::common::Pet > pet_;
  ::google::protobuf::int32 viplevel_;
  ::google::protobuf::int32 headframe_;
  ::std::string* sendtoplayerid_;
  ::google::protobuf::int32 serverid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];
  
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();
  
  void InitAsDefaultInstance();
  static ChatInfo* default_instance_;
};
// -------------------------------------------------------------------

class ChatInfoList : public ::google::protobuf::Message {
 public:
  ChatInfoList();
  virtual ~ChatInfoList();
  
  ChatInfoList(const ChatInfoList& from);
  
  inline ChatInfoList& operator=(const ChatInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatInfoList& default_instance();
  
  void Swap(ChatInfoList* other);
  
  // implements Message ----------------------------------------------
  
  ChatInfoList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatInfoList& from);
  void MergeFrom(const ChatInfoList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protobuf.chat.ChatInfo chatInfo = 1;
  inline int chatinfo_size() const;
  inline void clear_chatinfo();
  static const int kChatInfoFieldNumber = 1;
  inline const ::protobuf::chat::ChatInfo& chatinfo(int index) const;
  inline ::protobuf::chat::ChatInfo* mutable_chatinfo(int index);
  inline ::protobuf::chat::ChatInfo* add_chatinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::chat::ChatInfo >&
      chatinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::chat::ChatInfo >*
      mutable_chatinfo();
  
  // @@protoc_insertion_point(class_scope:protobuf.chat.ChatInfoList)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protobuf::chat::ChatInfo > chatinfo_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();
  
  void InitAsDefaultInstance();
  static ChatInfoList* default_instance_;
};
// -------------------------------------------------------------------

class RecruitInfo : public ::google::protobuf::Message {
 public:
  RecruitInfo();
  virtual ~RecruitInfo();
  
  RecruitInfo(const RecruitInfo& from);
  
  inline RecruitInfo& operator=(const RecruitInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecruitInfo& default_instance();
  
  void Swap(RecruitInfo* other);
  
  // implements Message ----------------------------------------------
  
  RecruitInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecruitInfo& from);
  void MergeFrom(const RecruitInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required string info = 3;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::std::string& info() const;
  inline void set_info(const ::std::string& value);
  inline void set_info(const char* value);
  inline void set_info(const char* value, size_t size);
  inline ::std::string* mutable_info();
  inline ::std::string* release_info();
  
  // required int32 lvOrPower = 4;
  inline bool has_lvorpower() const;
  inline void clear_lvorpower();
  static const int kLvOrPowerFieldNumber = 4;
  inline ::google::protobuf::int32 lvorpower() const;
  inline void set_lvorpower(::google::protobuf::int32 value);
  
  // optional string objId = 5;
  inline bool has_objid() const;
  inline void clear_objid();
  static const int kObjIdFieldNumber = 5;
  inline const ::std::string& objid() const;
  inline void set_objid(const ::std::string& value);
  inline void set_objid(const char* value);
  inline void set_objid(const char* value, size_t size);
  inline ::std::string* mutable_objid();
  inline ::std::string* release_objid();
  
  // @@protoc_insertion_point(class_scope:protobuf.chat.RecruitInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_lvorpower();
  inline void clear_has_lvorpower();
  inline void set_has_objid();
  inline void clear_has_objid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 lvorpower_;
  ::std::string* info_;
  ::std::string* objid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();
  
  void InitAsDefaultInstance();
  static RecruitInfo* default_instance_;
};
// -------------------------------------------------------------------

class BattleShare : public ::google::protobuf::Message {
 public:
  BattleShare();
  virtual ~BattleShare();
  
  BattleShare(const BattleShare& from);
  
  inline BattleShare& operator=(const BattleShare& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BattleShare& default_instance();
  
  void Swap(BattleShare* other);
  
  // implements Message ----------------------------------------------
  
  BattleShare* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BattleShare& from);
  void MergeFrom(const BattleShare& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional string id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  
  // @@protoc_insertion_point(class_scope:protobuf.chat.BattleShare)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* id_;
  ::google::protobuf::int32 type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();
  
  void InitAsDefaultInstance();
  static BattleShare* default_instance_;
};
// -------------------------------------------------------------------

class OneBattleShow : public ::google::protobuf::Message {
 public:
  OneBattleShow();
  virtual ~OneBattleShow();
  
  OneBattleShow(const OneBattleShow& from);
  
  inline OneBattleShow& operator=(const OneBattleShow& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OneBattleShow& default_instance();
  
  void Swap(OneBattleShow* other);
  
  // implements Message ----------------------------------------------
  
  OneBattleShow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OneBattleShow& from);
  void MergeFrom(const OneBattleShow& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string attackName = 2;
  inline bool has_attackname() const;
  inline void clear_attackname();
  static const int kAttackNameFieldNumber = 2;
  inline const ::std::string& attackname() const;
  inline void set_attackname(const ::std::string& value);
  inline void set_attackname(const char* value);
  inline void set_attackname(const char* value, size_t size);
  inline ::std::string* mutable_attackname();
  inline ::std::string* release_attackname();
  
  // required int32 attackLvl = 3;
  inline bool has_attacklvl() const;
  inline void clear_attacklvl();
  static const int kAttackLvlFieldNumber = 3;
  inline ::google::protobuf::int32 attacklvl() const;
  inline void set_attacklvl(::google::protobuf::int32 value);
  
  // required string attackHead = 4;
  inline bool has_attackhead() const;
  inline void clear_attackhead();
  static const int kAttackHeadFieldNumber = 4;
  inline const ::std::string& attackhead() const;
  inline void set_attackhead(const ::std::string& value);
  inline void set_attackhead(const char* value);
  inline void set_attackhead(const char* value, size_t size);
  inline ::std::string* mutable_attackhead();
  inline ::std::string* release_attackhead();
  
  // required string attackId = 5;
  inline bool has_attackid() const;
  inline void clear_attackid();
  static const int kAttackIdFieldNumber = 5;
  inline const ::std::string& attackid() const;
  inline void set_attackid(const ::std::string& value);
  inline void set_attackid(const char* value);
  inline void set_attackid(const char* value, size_t size);
  inline ::std::string* mutable_attackid();
  inline ::std::string* release_attackid();
  
  // optional int32 atHeadFrame = 6;
  inline bool has_atheadframe() const;
  inline void clear_atheadframe();
  static const int kAtHeadFrameFieldNumber = 6;
  inline ::google::protobuf::int32 atheadframe() const;
  inline void set_atheadframe(::google::protobuf::int32 value);
  
  // required string defenseId = 7;
  inline bool has_defenseid() const;
  inline void clear_defenseid();
  static const int kDefenseIdFieldNumber = 7;
  inline const ::std::string& defenseid() const;
  inline void set_defenseid(const ::std::string& value);
  inline void set_defenseid(const char* value);
  inline void set_defenseid(const char* value, size_t size);
  inline ::std::string* mutable_defenseid();
  inline ::std::string* release_defenseid();
  
  // required string defenseName = 8;
  inline bool has_defensename() const;
  inline void clear_defensename();
  static const int kDefenseNameFieldNumber = 8;
  inline const ::std::string& defensename() const;
  inline void set_defensename(const ::std::string& value);
  inline void set_defensename(const char* value);
  inline void set_defensename(const char* value, size_t size);
  inline ::std::string* mutable_defensename();
  inline ::std::string* release_defensename();
  
  // required int32 defenseLvl = 9;
  inline bool has_defenselvl() const;
  inline void clear_defenselvl();
  static const int kDefenseLvlFieldNumber = 9;
  inline ::google::protobuf::int32 defenselvl() const;
  inline void set_defenselvl(::google::protobuf::int32 value);
  
  // required string defenseHead = 10;
  inline bool has_defensehead() const;
  inline void clear_defensehead();
  static const int kDefenseHeadFieldNumber = 10;
  inline const ::std::string& defensehead() const;
  inline void set_defensehead(const ::std::string& value);
  inline void set_defensehead(const char* value);
  inline void set_defensehead(const char* value, size_t size);
  inline ::std::string* mutable_defensehead();
  inline ::std::string* release_defensehead();
  
  // optional int32 deHeadFrame = 11;
  inline bool has_deheadframe() const;
  inline void clear_deheadframe();
  static const int kDeHeadFrameFieldNumber = 11;
  inline ::google::protobuf::int32 deheadframe() const;
  inline void set_deheadframe(::google::protobuf::int32 value);
  
  // required bool victory = 14;
  inline bool has_victory() const;
  inline void clear_victory();
  static const int kVictoryFieldNumber = 14;
  inline bool victory() const;
  inline void set_victory(bool value);
  
  // @@protoc_insertion_point(class_scope:protobuf.chat.OneBattleShow)
 private:
  inline void set_has_attackname();
  inline void clear_has_attackname();
  inline void set_has_attacklvl();
  inline void clear_has_attacklvl();
  inline void set_has_attackhead();
  inline void clear_has_attackhead();
  inline void set_has_attackid();
  inline void clear_has_attackid();
  inline void set_has_atheadframe();
  inline void clear_has_atheadframe();
  inline void set_has_defenseid();
  inline void clear_has_defenseid();
  inline void set_has_defensename();
  inline void clear_has_defensename();
  inline void set_has_defenselvl();
  inline void clear_has_defenselvl();
  inline void set_has_defensehead();
  inline void clear_has_defensehead();
  inline void set_has_deheadframe();
  inline void clear_has_deheadframe();
  inline void set_has_victory();
  inline void clear_has_victory();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* attackname_;
  ::std::string* attackhead_;
  ::google::protobuf::int32 attacklvl_;
  ::google::protobuf::int32 atheadframe_;
  ::std::string* attackid_;
  ::std::string* defenseid_;
  ::std::string* defensename_;
  ::std::string* defensehead_;
  ::google::protobuf::int32 defenselvl_;
  ::google::protobuf::int32 deheadframe_;
  bool victory_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();
  
  void InitAsDefaultInstance();
  static OneBattleShow* default_instance_;
};
// -------------------------------------------------------------------

class BattleShow : public ::google::protobuf::Message {
 public:
  BattleShow();
  virtual ~BattleShow();
  
  BattleShow(const BattleShow& from);
  
  inline BattleShow& operator=(const BattleShow& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BattleShow& default_instance();
  
  void Swap(BattleShow* other);
  
  // implements Message ----------------------------------------------
  
  BattleShow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BattleShow& from);
  void MergeFrom(const BattleShow& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protobuf.chat.OneBattleShow show = 1;
  inline int show_size() const;
  inline void clear_show();
  static const int kShowFieldNumber = 1;
  inline const ::protobuf::chat::OneBattleShow& show(int index) const;
  inline ::protobuf::chat::OneBattleShow* mutable_show(int index);
  inline ::protobuf::chat::OneBattleShow* add_show();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::chat::OneBattleShow >&
      show() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::chat::OneBattleShow >*
      mutable_show();
  
  // @@protoc_insertion_point(class_scope:protobuf.chat.BattleShow)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protobuf::chat::OneBattleShow > show_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();
  
  void InitAsDefaultInstance();
  static BattleShow* default_instance_;
};
// -------------------------------------------------------------------

class SendChat : public ::google::protobuf::Message {
 public:
  SendChat();
  virtual ~SendChat();
  
  SendChat(const SendChat& from);
  
  inline SendChat& operator=(const SendChat& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendChat& default_instance();
  
  void Swap(SendChat* other);
  
  // implements Message ----------------------------------------------
  
  SendChat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SendChat& from);
  void MergeFrom(const SendChat& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 chatId = 1;
  inline bool has_chatid() const;
  inline void clear_chatid();
  static const int kChatIdFieldNumber = 1;
  inline ::google::protobuf::int32 chatid() const;
  inline void set_chatid(::google::protobuf::int32 value);
  
  // repeated string pram = 2;
  inline int pram_size() const;
  inline void clear_pram();
  static const int kPramFieldNumber = 2;
  inline const ::std::string& pram(int index) const;
  inline ::std::string* mutable_pram(int index);
  inline void set_pram(int index, const ::std::string& value);
  inline void set_pram(int index, const char* value);
  inline void set_pram(int index, const char* value, size_t size);
  inline ::std::string* add_pram();
  inline void add_pram(const ::std::string& value);
  inline void add_pram(const char* value);
  inline void add_pram(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& pram() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_pram();
  
  // optional .protobuf.chat.RecruitInfo recruit = 3;
  inline bool has_recruit() const;
  inline void clear_recruit();
  static const int kRecruitFieldNumber = 3;
  inline const ::protobuf::chat::RecruitInfo& recruit() const;
  inline ::protobuf::chat::RecruitInfo* mutable_recruit();
  inline ::protobuf::chat::RecruitInfo* release_recruit();
  
  // optional .protobuf.chat.BattleShare battle = 4;
  inline bool has_battle() const;
  inline void clear_battle();
  static const int kBattleFieldNumber = 4;
  inline const ::protobuf::chat::BattleShare& battle() const;
  inline ::protobuf::chat::BattleShare* mutable_battle();
  inline ::protobuf::chat::BattleShare* release_battle();
  
  // optional int32 hero = 5;
  inline bool has_hero() const;
  inline void clear_hero();
  static const int kHeroFieldNumber = 5;
  inline ::google::protobuf::int32 hero() const;
  inline void set_hero(::google::protobuf::int32 value);
  
  // optional int32 pet = 6;
  inline bool has_pet() const;
  inline void clear_pet();
  static const int kPetFieldNumber = 6;
  inline ::google::protobuf::int32 pet() const;
  inline void set_pet(::google::protobuf::int32 value);
  
  // optional string sendToPlayerId = 7;
  inline bool has_sendtoplayerid() const;
  inline void clear_sendtoplayerid();
  static const int kSendToPlayerIdFieldNumber = 7;
  inline const ::std::string& sendtoplayerid() const;
  inline void set_sendtoplayerid(const ::std::string& value);
  inline void set_sendtoplayerid(const char* value);
  inline void set_sendtoplayerid(const char* value, size_t size);
  inline ::std::string* mutable_sendtoplayerid();
  inline ::std::string* release_sendtoplayerid();
  
  // optional int32 serverId = 8;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 8;
  inline ::google::protobuf::int32 serverid() const;
  inline void set_serverid(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protobuf.chat.SendChat)
 private:
  inline void set_has_chatid();
  inline void clear_has_chatid();
  inline void set_has_recruit();
  inline void clear_has_recruit();
  inline void set_has_battle();
  inline void clear_has_battle();
  inline void set_has_hero();
  inline void clear_has_hero();
  inline void set_has_pet();
  inline void clear_has_pet();
  inline void set_has_sendtoplayerid();
  inline void clear_has_sendtoplayerid();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> pram_;
  ::protobuf::chat::RecruitInfo* recruit_;
  ::google::protobuf::int32 chatid_;
  ::google::protobuf::int32 hero_;
  ::protobuf::chat::BattleShare* battle_;
  ::std::string* sendtoplayerid_;
  ::google::protobuf::int32 pet_;
  ::google::protobuf::int32 serverid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();
  
  void InitAsDefaultInstance();
  static SendChat* default_instance_;
};
// -------------------------------------------------------------------

class PullChatInfo : public ::google::protobuf::Message {
 public:
  PullChatInfo();
  virtual ~PullChatInfo();
  
  PullChatInfo(const PullChatInfo& from);
  
  inline PullChatInfo& operator=(const PullChatInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PullChatInfo& default_instance();
  
  void Swap(PullChatInfo* other);
  
  // implements Message ----------------------------------------------
  
  PullChatInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PullChatInfo& from);
  void MergeFrom(const PullChatInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // repeated .protobuf.chat.ChatInfo chatInfo = 2;
  inline int chatinfo_size() const;
  inline void clear_chatinfo();
  static const int kChatInfoFieldNumber = 2;
  inline const ::protobuf::chat::ChatInfo& chatinfo(int index) const;
  inline ::protobuf::chat::ChatInfo* mutable_chatinfo(int index);
  inline ::protobuf::chat::ChatInfo* add_chatinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::chat::ChatInfo >&
      chatinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::chat::ChatInfo >*
      mutable_chatinfo();
  
  // @@protoc_insertion_point(class_scope:protobuf.chat.PullChatInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protobuf::chat::ChatInfo > chatinfo_;
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();
  
  void InitAsDefaultInstance();
  static PullChatInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// ChatInfo

// required int64 id = 1;
inline bool ChatInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatInfo::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 ChatInfo::id() const {
  return id_;
}
inline void ChatInfo::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// required int32 chatId = 2;
inline bool ChatInfo::has_chatid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatInfo::set_has_chatid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatInfo::clear_has_chatid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatInfo::clear_chatid() {
  chatid_ = 0;
  clear_has_chatid();
}
inline ::google::protobuf::int32 ChatInfo::chatid() const {
  return chatid_;
}
inline void ChatInfo::set_chatid(::google::protobuf::int32 value) {
  set_has_chatid();
  chatid_ = value;
}

// required int64 sendTime = 3;
inline bool ChatInfo::has_sendtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatInfo::set_has_sendtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatInfo::clear_has_sendtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatInfo::clear_sendtime() {
  sendtime_ = GOOGLE_LONGLONG(0);
  clear_has_sendtime();
}
inline ::google::protobuf::int64 ChatInfo::sendtime() const {
  return sendtime_;
}
inline void ChatInfo::set_sendtime(::google::protobuf::int64 value) {
  set_has_sendtime();
  sendtime_ = value;
}

// optional int32 level = 4;
inline bool ChatInfo::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChatInfo::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChatInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChatInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 ChatInfo::level() const {
  return level_;
}
inline void ChatInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional string name = 5;
inline bool ChatInfo::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChatInfo::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChatInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChatInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ChatInfo::name() const {
  return *name_;
}
inline void ChatInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ChatInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ChatInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChatInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ChatInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string head = 6;
inline bool ChatInfo::has_head() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChatInfo::set_has_head() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChatInfo::clear_has_head() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChatInfo::clear_head() {
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    head_->clear();
  }
  clear_has_head();
}
inline const ::std::string& ChatInfo::head() const {
  return *head_;
}
inline void ChatInfo::set_head(const ::std::string& value) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(value);
}
inline void ChatInfo::set_head(const char* value) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(value);
}
inline void ChatInfo::set_head(const char* value, size_t size) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChatInfo::mutable_head() {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  return head_;
}
inline ::std::string* ChatInfo::release_head() {
  clear_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = head_;
    head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string playerId = 7;
inline bool ChatInfo::has_playerid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChatInfo::set_has_playerid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ChatInfo::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ChatInfo::clear_playerid() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    playerid_->clear();
  }
  clear_has_playerid();
}
inline const ::std::string& ChatInfo::playerid() const {
  return *playerid_;
}
inline void ChatInfo::set_playerid(const ::std::string& value) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(value);
}
inline void ChatInfo::set_playerid(const char* value) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(value);
}
inline void ChatInfo::set_playerid(const char* value, size_t size) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChatInfo::mutable_playerid() {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  return playerid_;
}
inline ::std::string* ChatInfo::release_playerid() {
  clear_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playerid_;
    playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated string pram = 8;
inline int ChatInfo::pram_size() const {
  return pram_.size();
}
inline void ChatInfo::clear_pram() {
  pram_.Clear();
}
inline const ::std::string& ChatInfo::pram(int index) const {
  return pram_.Get(index);
}
inline ::std::string* ChatInfo::mutable_pram(int index) {
  return pram_.Mutable(index);
}
inline void ChatInfo::set_pram(int index, const ::std::string& value) {
  pram_.Mutable(index)->assign(value);
}
inline void ChatInfo::set_pram(int index, const char* value) {
  pram_.Mutable(index)->assign(value);
}
inline void ChatInfo::set_pram(int index, const char* value, size_t size) {
  pram_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChatInfo::add_pram() {
  return pram_.Add();
}
inline void ChatInfo::add_pram(const ::std::string& value) {
  pram_.Add()->assign(value);
}
inline void ChatInfo::add_pram(const char* value) {
  pram_.Add()->assign(value);
}
inline void ChatInfo::add_pram(const char* value, size_t size) {
  pram_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ChatInfo::pram() const {
  return pram_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ChatInfo::mutable_pram() {
  return &pram_;
}

// optional .protobuf.chat.RecruitInfo recruit = 9;
inline bool ChatInfo::has_recruit() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ChatInfo::set_has_recruit() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ChatInfo::clear_has_recruit() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ChatInfo::clear_recruit() {
  if (recruit_ != NULL) recruit_->::protobuf::chat::RecruitInfo::Clear();
  clear_has_recruit();
}
inline const ::protobuf::chat::RecruitInfo& ChatInfo::recruit() const {
  return recruit_ != NULL ? *recruit_ : *default_instance_->recruit_;
}
inline ::protobuf::chat::RecruitInfo* ChatInfo::mutable_recruit() {
  set_has_recruit();
  if (recruit_ == NULL) recruit_ = new ::protobuf::chat::RecruitInfo;
  return recruit_;
}
inline ::protobuf::chat::RecruitInfo* ChatInfo::release_recruit() {
  clear_has_recruit();
  ::protobuf::chat::RecruitInfo* temp = recruit_;
  recruit_ = NULL;
  return temp;
}

// repeated .protobuf.common.KVint3232 item = 10;
inline int ChatInfo::item_size() const {
  return item_.size();
}
inline void ChatInfo::clear_item() {
  item_.Clear();
}
inline const ::protobuf::common::KVint3232& ChatInfo::item(int index) const {
  return item_.Get(index);
}
inline ::protobuf::common::KVint3232* ChatInfo::mutable_item(int index) {
  return item_.Mutable(index);
}
inline ::protobuf::common::KVint3232* ChatInfo::add_item() {
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >&
ChatInfo::item() const {
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >*
ChatInfo::mutable_item() {
  return &item_;
}

// optional .protobuf.common.LineupDetail hero = 12;
inline bool ChatInfo::has_hero() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ChatInfo::set_has_hero() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ChatInfo::clear_has_hero() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ChatInfo::clear_hero() {
  if (hero_ != NULL) hero_->::protobuf::common::LineupDetail::Clear();
  clear_has_hero();
}
inline const ::protobuf::common::LineupDetail& ChatInfo::hero() const {
  return hero_ != NULL ? *hero_ : *default_instance_->hero_;
}
inline ::protobuf::common::LineupDetail* ChatInfo::mutable_hero() {
  set_has_hero();
  if (hero_ == NULL) hero_ = new ::protobuf::common::LineupDetail;
  return hero_;
}
inline ::protobuf::common::LineupDetail* ChatInfo::release_hero() {
  clear_has_hero();
  ::protobuf::common::LineupDetail* temp = hero_;
  hero_ = NULL;
  return temp;
}

// optional int32 vipLevel = 13;
inline bool ChatInfo::has_viplevel() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ChatInfo::set_has_viplevel() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ChatInfo::clear_has_viplevel() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ChatInfo::clear_viplevel() {
  viplevel_ = 0;
  clear_has_viplevel();
}
inline ::google::protobuf::int32 ChatInfo::viplevel() const {
  return viplevel_;
}
inline void ChatInfo::set_viplevel(::google::protobuf::int32 value) {
  set_has_viplevel();
  viplevel_ = value;
}

// repeated .protobuf.common.Pet pet = 14;
inline int ChatInfo::pet_size() const {
  return pet_.size();
}
inline void ChatInfo::clear_pet() {
  pet_.Clear();
}
inline const ::protobuf::common::Pet& ChatInfo::pet(int index) const {
  return pet_.Get(index);
}
inline ::protobuf::common::Pet* ChatInfo::mutable_pet(int index) {
  return pet_.Mutable(index);
}
inline ::protobuf::common::Pet* ChatInfo::add_pet() {
  return pet_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::Pet >&
ChatInfo::pet() const {
  return pet_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::Pet >*
ChatInfo::mutable_pet() {
  return &pet_;
}

// optional int32 headFrame = 15;
inline bool ChatInfo::has_headframe() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ChatInfo::set_has_headframe() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ChatInfo::clear_has_headframe() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ChatInfo::clear_headframe() {
  headframe_ = 0;
  clear_has_headframe();
}
inline ::google::protobuf::int32 ChatInfo::headframe() const {
  return headframe_;
}
inline void ChatInfo::set_headframe(::google::protobuf::int32 value) {
  set_has_headframe();
  headframe_ = value;
}

// optional string sendToPlayerId = 16;
inline bool ChatInfo::has_sendtoplayerid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ChatInfo::set_has_sendtoplayerid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ChatInfo::clear_has_sendtoplayerid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ChatInfo::clear_sendtoplayerid() {
  if (sendtoplayerid_ != &::google::protobuf::internal::kEmptyString) {
    sendtoplayerid_->clear();
  }
  clear_has_sendtoplayerid();
}
inline const ::std::string& ChatInfo::sendtoplayerid() const {
  return *sendtoplayerid_;
}
inline void ChatInfo::set_sendtoplayerid(const ::std::string& value) {
  set_has_sendtoplayerid();
  if (sendtoplayerid_ == &::google::protobuf::internal::kEmptyString) {
    sendtoplayerid_ = new ::std::string;
  }
  sendtoplayerid_->assign(value);
}
inline void ChatInfo::set_sendtoplayerid(const char* value) {
  set_has_sendtoplayerid();
  if (sendtoplayerid_ == &::google::protobuf::internal::kEmptyString) {
    sendtoplayerid_ = new ::std::string;
  }
  sendtoplayerid_->assign(value);
}
inline void ChatInfo::set_sendtoplayerid(const char* value, size_t size) {
  set_has_sendtoplayerid();
  if (sendtoplayerid_ == &::google::protobuf::internal::kEmptyString) {
    sendtoplayerid_ = new ::std::string;
  }
  sendtoplayerid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChatInfo::mutable_sendtoplayerid() {
  set_has_sendtoplayerid();
  if (sendtoplayerid_ == &::google::protobuf::internal::kEmptyString) {
    sendtoplayerid_ = new ::std::string;
  }
  return sendtoplayerid_;
}
inline ::std::string* ChatInfo::release_sendtoplayerid() {
  clear_has_sendtoplayerid();
  if (sendtoplayerid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sendtoplayerid_;
    sendtoplayerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 serverId = 17;
inline bool ChatInfo::has_serverid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ChatInfo::set_has_serverid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ChatInfo::clear_has_serverid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ChatInfo::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
inline ::google::protobuf::int32 ChatInfo::serverid() const {
  return serverid_;
}
inline void ChatInfo::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
}

// -------------------------------------------------------------------

// ChatInfoList

// repeated .protobuf.chat.ChatInfo chatInfo = 1;
inline int ChatInfoList::chatinfo_size() const {
  return chatinfo_.size();
}
inline void ChatInfoList::clear_chatinfo() {
  chatinfo_.Clear();
}
inline const ::protobuf::chat::ChatInfo& ChatInfoList::chatinfo(int index) const {
  return chatinfo_.Get(index);
}
inline ::protobuf::chat::ChatInfo* ChatInfoList::mutable_chatinfo(int index) {
  return chatinfo_.Mutable(index);
}
inline ::protobuf::chat::ChatInfo* ChatInfoList::add_chatinfo() {
  return chatinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::chat::ChatInfo >&
ChatInfoList::chatinfo() const {
  return chatinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::chat::ChatInfo >*
ChatInfoList::mutable_chatinfo() {
  return &chatinfo_;
}

// -------------------------------------------------------------------

// RecruitInfo

// required int32 id = 1;
inline bool RecruitInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecruitInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecruitInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecruitInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 RecruitInfo::id() const {
  return id_;
}
inline void RecruitInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string name = 2;
inline bool RecruitInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecruitInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecruitInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecruitInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RecruitInfo::name() const {
  return *name_;
}
inline void RecruitInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RecruitInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RecruitInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecruitInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* RecruitInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string info = 3;
inline bool RecruitInfo::has_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RecruitInfo::set_has_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RecruitInfo::clear_has_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RecruitInfo::clear_info() {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    info_->clear();
  }
  clear_has_info();
}
inline const ::std::string& RecruitInfo::info() const {
  return *info_;
}
inline void RecruitInfo::set_info(const ::std::string& value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(value);
}
inline void RecruitInfo::set_info(const char* value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(value);
}
inline void RecruitInfo::set_info(const char* value, size_t size) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecruitInfo::mutable_info() {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  return info_;
}
inline ::std::string* RecruitInfo::release_info() {
  clear_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = info_;
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 lvOrPower = 4;
inline bool RecruitInfo::has_lvorpower() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RecruitInfo::set_has_lvorpower() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RecruitInfo::clear_has_lvorpower() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RecruitInfo::clear_lvorpower() {
  lvorpower_ = 0;
  clear_has_lvorpower();
}
inline ::google::protobuf::int32 RecruitInfo::lvorpower() const {
  return lvorpower_;
}
inline void RecruitInfo::set_lvorpower(::google::protobuf::int32 value) {
  set_has_lvorpower();
  lvorpower_ = value;
}

// optional string objId = 5;
inline bool RecruitInfo::has_objid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RecruitInfo::set_has_objid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RecruitInfo::clear_has_objid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RecruitInfo::clear_objid() {
  if (objid_ != &::google::protobuf::internal::kEmptyString) {
    objid_->clear();
  }
  clear_has_objid();
}
inline const ::std::string& RecruitInfo::objid() const {
  return *objid_;
}
inline void RecruitInfo::set_objid(const ::std::string& value) {
  set_has_objid();
  if (objid_ == &::google::protobuf::internal::kEmptyString) {
    objid_ = new ::std::string;
  }
  objid_->assign(value);
}
inline void RecruitInfo::set_objid(const char* value) {
  set_has_objid();
  if (objid_ == &::google::protobuf::internal::kEmptyString) {
    objid_ = new ::std::string;
  }
  objid_->assign(value);
}
inline void RecruitInfo::set_objid(const char* value, size_t size) {
  set_has_objid();
  if (objid_ == &::google::protobuf::internal::kEmptyString) {
    objid_ = new ::std::string;
  }
  objid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecruitInfo::mutable_objid() {
  set_has_objid();
  if (objid_ == &::google::protobuf::internal::kEmptyString) {
    objid_ = new ::std::string;
  }
  return objid_;
}
inline ::std::string* RecruitInfo::release_objid() {
  clear_has_objid();
  if (objid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = objid_;
    objid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// BattleShare

// required int32 type = 1;
inline bool BattleShare::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BattleShare::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BattleShare::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BattleShare::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 BattleShare::type() const {
  return type_;
}
inline void BattleShare::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional string id = 2;
inline bool BattleShare::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BattleShare::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BattleShare::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BattleShare::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& BattleShare::id() const {
  return *id_;
}
inline void BattleShare::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BattleShare::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BattleShare::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BattleShare::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* BattleShare::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// OneBattleShow

// required string attackName = 2;
inline bool OneBattleShow::has_attackname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OneBattleShow::set_has_attackname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OneBattleShow::clear_has_attackname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OneBattleShow::clear_attackname() {
  if (attackname_ != &::google::protobuf::internal::kEmptyString) {
    attackname_->clear();
  }
  clear_has_attackname();
}
inline const ::std::string& OneBattleShow::attackname() const {
  return *attackname_;
}
inline void OneBattleShow::set_attackname(const ::std::string& value) {
  set_has_attackname();
  if (attackname_ == &::google::protobuf::internal::kEmptyString) {
    attackname_ = new ::std::string;
  }
  attackname_->assign(value);
}
inline void OneBattleShow::set_attackname(const char* value) {
  set_has_attackname();
  if (attackname_ == &::google::protobuf::internal::kEmptyString) {
    attackname_ = new ::std::string;
  }
  attackname_->assign(value);
}
inline void OneBattleShow::set_attackname(const char* value, size_t size) {
  set_has_attackname();
  if (attackname_ == &::google::protobuf::internal::kEmptyString) {
    attackname_ = new ::std::string;
  }
  attackname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OneBattleShow::mutable_attackname() {
  set_has_attackname();
  if (attackname_ == &::google::protobuf::internal::kEmptyString) {
    attackname_ = new ::std::string;
  }
  return attackname_;
}
inline ::std::string* OneBattleShow::release_attackname() {
  clear_has_attackname();
  if (attackname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = attackname_;
    attackname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 attackLvl = 3;
inline bool OneBattleShow::has_attacklvl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OneBattleShow::set_has_attacklvl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OneBattleShow::clear_has_attacklvl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OneBattleShow::clear_attacklvl() {
  attacklvl_ = 0;
  clear_has_attacklvl();
}
inline ::google::protobuf::int32 OneBattleShow::attacklvl() const {
  return attacklvl_;
}
inline void OneBattleShow::set_attacklvl(::google::protobuf::int32 value) {
  set_has_attacklvl();
  attacklvl_ = value;
}

// required string attackHead = 4;
inline bool OneBattleShow::has_attackhead() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OneBattleShow::set_has_attackhead() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OneBattleShow::clear_has_attackhead() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OneBattleShow::clear_attackhead() {
  if (attackhead_ != &::google::protobuf::internal::kEmptyString) {
    attackhead_->clear();
  }
  clear_has_attackhead();
}
inline const ::std::string& OneBattleShow::attackhead() const {
  return *attackhead_;
}
inline void OneBattleShow::set_attackhead(const ::std::string& value) {
  set_has_attackhead();
  if (attackhead_ == &::google::protobuf::internal::kEmptyString) {
    attackhead_ = new ::std::string;
  }
  attackhead_->assign(value);
}
inline void OneBattleShow::set_attackhead(const char* value) {
  set_has_attackhead();
  if (attackhead_ == &::google::protobuf::internal::kEmptyString) {
    attackhead_ = new ::std::string;
  }
  attackhead_->assign(value);
}
inline void OneBattleShow::set_attackhead(const char* value, size_t size) {
  set_has_attackhead();
  if (attackhead_ == &::google::protobuf::internal::kEmptyString) {
    attackhead_ = new ::std::string;
  }
  attackhead_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OneBattleShow::mutable_attackhead() {
  set_has_attackhead();
  if (attackhead_ == &::google::protobuf::internal::kEmptyString) {
    attackhead_ = new ::std::string;
  }
  return attackhead_;
}
inline ::std::string* OneBattleShow::release_attackhead() {
  clear_has_attackhead();
  if (attackhead_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = attackhead_;
    attackhead_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string attackId = 5;
inline bool OneBattleShow::has_attackid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OneBattleShow::set_has_attackid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OneBattleShow::clear_has_attackid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OneBattleShow::clear_attackid() {
  if (attackid_ != &::google::protobuf::internal::kEmptyString) {
    attackid_->clear();
  }
  clear_has_attackid();
}
inline const ::std::string& OneBattleShow::attackid() const {
  return *attackid_;
}
inline void OneBattleShow::set_attackid(const ::std::string& value) {
  set_has_attackid();
  if (attackid_ == &::google::protobuf::internal::kEmptyString) {
    attackid_ = new ::std::string;
  }
  attackid_->assign(value);
}
inline void OneBattleShow::set_attackid(const char* value) {
  set_has_attackid();
  if (attackid_ == &::google::protobuf::internal::kEmptyString) {
    attackid_ = new ::std::string;
  }
  attackid_->assign(value);
}
inline void OneBattleShow::set_attackid(const char* value, size_t size) {
  set_has_attackid();
  if (attackid_ == &::google::protobuf::internal::kEmptyString) {
    attackid_ = new ::std::string;
  }
  attackid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OneBattleShow::mutable_attackid() {
  set_has_attackid();
  if (attackid_ == &::google::protobuf::internal::kEmptyString) {
    attackid_ = new ::std::string;
  }
  return attackid_;
}
inline ::std::string* OneBattleShow::release_attackid() {
  clear_has_attackid();
  if (attackid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = attackid_;
    attackid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 atHeadFrame = 6;
inline bool OneBattleShow::has_atheadframe() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OneBattleShow::set_has_atheadframe() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OneBattleShow::clear_has_atheadframe() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OneBattleShow::clear_atheadframe() {
  atheadframe_ = 0;
  clear_has_atheadframe();
}
inline ::google::protobuf::int32 OneBattleShow::atheadframe() const {
  return atheadframe_;
}
inline void OneBattleShow::set_atheadframe(::google::protobuf::int32 value) {
  set_has_atheadframe();
  atheadframe_ = value;
}

// required string defenseId = 7;
inline bool OneBattleShow::has_defenseid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OneBattleShow::set_has_defenseid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OneBattleShow::clear_has_defenseid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OneBattleShow::clear_defenseid() {
  if (defenseid_ != &::google::protobuf::internal::kEmptyString) {
    defenseid_->clear();
  }
  clear_has_defenseid();
}
inline const ::std::string& OneBattleShow::defenseid() const {
  return *defenseid_;
}
inline void OneBattleShow::set_defenseid(const ::std::string& value) {
  set_has_defenseid();
  if (defenseid_ == &::google::protobuf::internal::kEmptyString) {
    defenseid_ = new ::std::string;
  }
  defenseid_->assign(value);
}
inline void OneBattleShow::set_defenseid(const char* value) {
  set_has_defenseid();
  if (defenseid_ == &::google::protobuf::internal::kEmptyString) {
    defenseid_ = new ::std::string;
  }
  defenseid_->assign(value);
}
inline void OneBattleShow::set_defenseid(const char* value, size_t size) {
  set_has_defenseid();
  if (defenseid_ == &::google::protobuf::internal::kEmptyString) {
    defenseid_ = new ::std::string;
  }
  defenseid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OneBattleShow::mutable_defenseid() {
  set_has_defenseid();
  if (defenseid_ == &::google::protobuf::internal::kEmptyString) {
    defenseid_ = new ::std::string;
  }
  return defenseid_;
}
inline ::std::string* OneBattleShow::release_defenseid() {
  clear_has_defenseid();
  if (defenseid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = defenseid_;
    defenseid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string defenseName = 8;
inline bool OneBattleShow::has_defensename() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OneBattleShow::set_has_defensename() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OneBattleShow::clear_has_defensename() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OneBattleShow::clear_defensename() {
  if (defensename_ != &::google::protobuf::internal::kEmptyString) {
    defensename_->clear();
  }
  clear_has_defensename();
}
inline const ::std::string& OneBattleShow::defensename() const {
  return *defensename_;
}
inline void OneBattleShow::set_defensename(const ::std::string& value) {
  set_has_defensename();
  if (defensename_ == &::google::protobuf::internal::kEmptyString) {
    defensename_ = new ::std::string;
  }
  defensename_->assign(value);
}
inline void OneBattleShow::set_defensename(const char* value) {
  set_has_defensename();
  if (defensename_ == &::google::protobuf::internal::kEmptyString) {
    defensename_ = new ::std::string;
  }
  defensename_->assign(value);
}
inline void OneBattleShow::set_defensename(const char* value, size_t size) {
  set_has_defensename();
  if (defensename_ == &::google::protobuf::internal::kEmptyString) {
    defensename_ = new ::std::string;
  }
  defensename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OneBattleShow::mutable_defensename() {
  set_has_defensename();
  if (defensename_ == &::google::protobuf::internal::kEmptyString) {
    defensename_ = new ::std::string;
  }
  return defensename_;
}
inline ::std::string* OneBattleShow::release_defensename() {
  clear_has_defensename();
  if (defensename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = defensename_;
    defensename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 defenseLvl = 9;
inline bool OneBattleShow::has_defenselvl() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OneBattleShow::set_has_defenselvl() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OneBattleShow::clear_has_defenselvl() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OneBattleShow::clear_defenselvl() {
  defenselvl_ = 0;
  clear_has_defenselvl();
}
inline ::google::protobuf::int32 OneBattleShow::defenselvl() const {
  return defenselvl_;
}
inline void OneBattleShow::set_defenselvl(::google::protobuf::int32 value) {
  set_has_defenselvl();
  defenselvl_ = value;
}

// required string defenseHead = 10;
inline bool OneBattleShow::has_defensehead() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OneBattleShow::set_has_defensehead() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OneBattleShow::clear_has_defensehead() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OneBattleShow::clear_defensehead() {
  if (defensehead_ != &::google::protobuf::internal::kEmptyString) {
    defensehead_->clear();
  }
  clear_has_defensehead();
}
inline const ::std::string& OneBattleShow::defensehead() const {
  return *defensehead_;
}
inline void OneBattleShow::set_defensehead(const ::std::string& value) {
  set_has_defensehead();
  if (defensehead_ == &::google::protobuf::internal::kEmptyString) {
    defensehead_ = new ::std::string;
  }
  defensehead_->assign(value);
}
inline void OneBattleShow::set_defensehead(const char* value) {
  set_has_defensehead();
  if (defensehead_ == &::google::protobuf::internal::kEmptyString) {
    defensehead_ = new ::std::string;
  }
  defensehead_->assign(value);
}
inline void OneBattleShow::set_defensehead(const char* value, size_t size) {
  set_has_defensehead();
  if (defensehead_ == &::google::protobuf::internal::kEmptyString) {
    defensehead_ = new ::std::string;
  }
  defensehead_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OneBattleShow::mutable_defensehead() {
  set_has_defensehead();
  if (defensehead_ == &::google::protobuf::internal::kEmptyString) {
    defensehead_ = new ::std::string;
  }
  return defensehead_;
}
inline ::std::string* OneBattleShow::release_defensehead() {
  clear_has_defensehead();
  if (defensehead_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = defensehead_;
    defensehead_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 deHeadFrame = 11;
inline bool OneBattleShow::has_deheadframe() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OneBattleShow::set_has_deheadframe() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OneBattleShow::clear_has_deheadframe() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OneBattleShow::clear_deheadframe() {
  deheadframe_ = 0;
  clear_has_deheadframe();
}
inline ::google::protobuf::int32 OneBattleShow::deheadframe() const {
  return deheadframe_;
}
inline void OneBattleShow::set_deheadframe(::google::protobuf::int32 value) {
  set_has_deheadframe();
  deheadframe_ = value;
}

// required bool victory = 14;
inline bool OneBattleShow::has_victory() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void OneBattleShow::set_has_victory() {
  _has_bits_[0] |= 0x00000400u;
}
inline void OneBattleShow::clear_has_victory() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void OneBattleShow::clear_victory() {
  victory_ = false;
  clear_has_victory();
}
inline bool OneBattleShow::victory() const {
  return victory_;
}
inline void OneBattleShow::set_victory(bool value) {
  set_has_victory();
  victory_ = value;
}

// -------------------------------------------------------------------

// BattleShow

// repeated .protobuf.chat.OneBattleShow show = 1;
inline int BattleShow::show_size() const {
  return show_.size();
}
inline void BattleShow::clear_show() {
  show_.Clear();
}
inline const ::protobuf::chat::OneBattleShow& BattleShow::show(int index) const {
  return show_.Get(index);
}
inline ::protobuf::chat::OneBattleShow* BattleShow::mutable_show(int index) {
  return show_.Mutable(index);
}
inline ::protobuf::chat::OneBattleShow* BattleShow::add_show() {
  return show_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::chat::OneBattleShow >&
BattleShow::show() const {
  return show_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::chat::OneBattleShow >*
BattleShow::mutable_show() {
  return &show_;
}

// -------------------------------------------------------------------

// SendChat

// required int32 chatId = 1;
inline bool SendChat::has_chatid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SendChat::set_has_chatid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SendChat::clear_has_chatid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SendChat::clear_chatid() {
  chatid_ = 0;
  clear_has_chatid();
}
inline ::google::protobuf::int32 SendChat::chatid() const {
  return chatid_;
}
inline void SendChat::set_chatid(::google::protobuf::int32 value) {
  set_has_chatid();
  chatid_ = value;
}

// repeated string pram = 2;
inline int SendChat::pram_size() const {
  return pram_.size();
}
inline void SendChat::clear_pram() {
  pram_.Clear();
}
inline const ::std::string& SendChat::pram(int index) const {
  return pram_.Get(index);
}
inline ::std::string* SendChat::mutable_pram(int index) {
  return pram_.Mutable(index);
}
inline void SendChat::set_pram(int index, const ::std::string& value) {
  pram_.Mutable(index)->assign(value);
}
inline void SendChat::set_pram(int index, const char* value) {
  pram_.Mutable(index)->assign(value);
}
inline void SendChat::set_pram(int index, const char* value, size_t size) {
  pram_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SendChat::add_pram() {
  return pram_.Add();
}
inline void SendChat::add_pram(const ::std::string& value) {
  pram_.Add()->assign(value);
}
inline void SendChat::add_pram(const char* value) {
  pram_.Add()->assign(value);
}
inline void SendChat::add_pram(const char* value, size_t size) {
  pram_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SendChat::pram() const {
  return pram_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SendChat::mutable_pram() {
  return &pram_;
}

// optional .protobuf.chat.RecruitInfo recruit = 3;
inline bool SendChat::has_recruit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SendChat::set_has_recruit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SendChat::clear_has_recruit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SendChat::clear_recruit() {
  if (recruit_ != NULL) recruit_->::protobuf::chat::RecruitInfo::Clear();
  clear_has_recruit();
}
inline const ::protobuf::chat::RecruitInfo& SendChat::recruit() const {
  return recruit_ != NULL ? *recruit_ : *default_instance_->recruit_;
}
inline ::protobuf::chat::RecruitInfo* SendChat::mutable_recruit() {
  set_has_recruit();
  if (recruit_ == NULL) recruit_ = new ::protobuf::chat::RecruitInfo;
  return recruit_;
}
inline ::protobuf::chat::RecruitInfo* SendChat::release_recruit() {
  clear_has_recruit();
  ::protobuf::chat::RecruitInfo* temp = recruit_;
  recruit_ = NULL;
  return temp;
}

// optional .protobuf.chat.BattleShare battle = 4;
inline bool SendChat::has_battle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SendChat::set_has_battle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SendChat::clear_has_battle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SendChat::clear_battle() {
  if (battle_ != NULL) battle_->::protobuf::chat::BattleShare::Clear();
  clear_has_battle();
}
inline const ::protobuf::chat::BattleShare& SendChat::battle() const {
  return battle_ != NULL ? *battle_ : *default_instance_->battle_;
}
inline ::protobuf::chat::BattleShare* SendChat::mutable_battle() {
  set_has_battle();
  if (battle_ == NULL) battle_ = new ::protobuf::chat::BattleShare;
  return battle_;
}
inline ::protobuf::chat::BattleShare* SendChat::release_battle() {
  clear_has_battle();
  ::protobuf::chat::BattleShare* temp = battle_;
  battle_ = NULL;
  return temp;
}

// optional int32 hero = 5;
inline bool SendChat::has_hero() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SendChat::set_has_hero() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SendChat::clear_has_hero() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SendChat::clear_hero() {
  hero_ = 0;
  clear_has_hero();
}
inline ::google::protobuf::int32 SendChat::hero() const {
  return hero_;
}
inline void SendChat::set_hero(::google::protobuf::int32 value) {
  set_has_hero();
  hero_ = value;
}

// optional int32 pet = 6;
inline bool SendChat::has_pet() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SendChat::set_has_pet() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SendChat::clear_has_pet() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SendChat::clear_pet() {
  pet_ = 0;
  clear_has_pet();
}
inline ::google::protobuf::int32 SendChat::pet() const {
  return pet_;
}
inline void SendChat::set_pet(::google::protobuf::int32 value) {
  set_has_pet();
  pet_ = value;
}

// optional string sendToPlayerId = 7;
inline bool SendChat::has_sendtoplayerid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SendChat::set_has_sendtoplayerid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SendChat::clear_has_sendtoplayerid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SendChat::clear_sendtoplayerid() {
  if (sendtoplayerid_ != &::google::protobuf::internal::kEmptyString) {
    sendtoplayerid_->clear();
  }
  clear_has_sendtoplayerid();
}
inline const ::std::string& SendChat::sendtoplayerid() const {
  return *sendtoplayerid_;
}
inline void SendChat::set_sendtoplayerid(const ::std::string& value) {
  set_has_sendtoplayerid();
  if (sendtoplayerid_ == &::google::protobuf::internal::kEmptyString) {
    sendtoplayerid_ = new ::std::string;
  }
  sendtoplayerid_->assign(value);
}
inline void SendChat::set_sendtoplayerid(const char* value) {
  set_has_sendtoplayerid();
  if (sendtoplayerid_ == &::google::protobuf::internal::kEmptyString) {
    sendtoplayerid_ = new ::std::string;
  }
  sendtoplayerid_->assign(value);
}
inline void SendChat::set_sendtoplayerid(const char* value, size_t size) {
  set_has_sendtoplayerid();
  if (sendtoplayerid_ == &::google::protobuf::internal::kEmptyString) {
    sendtoplayerid_ = new ::std::string;
  }
  sendtoplayerid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SendChat::mutable_sendtoplayerid() {
  set_has_sendtoplayerid();
  if (sendtoplayerid_ == &::google::protobuf::internal::kEmptyString) {
    sendtoplayerid_ = new ::std::string;
  }
  return sendtoplayerid_;
}
inline ::std::string* SendChat::release_sendtoplayerid() {
  clear_has_sendtoplayerid();
  if (sendtoplayerid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sendtoplayerid_;
    sendtoplayerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 serverId = 8;
inline bool SendChat::has_serverid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SendChat::set_has_serverid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SendChat::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SendChat::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
inline ::google::protobuf::int32 SendChat::serverid() const {
  return serverid_;
}
inline void SendChat::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
}

// -------------------------------------------------------------------

// PullChatInfo

// required int32 id = 1;
inline bool PullChatInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PullChatInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PullChatInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PullChatInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PullChatInfo::id() const {
  return id_;
}
inline void PullChatInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// repeated .protobuf.chat.ChatInfo chatInfo = 2;
inline int PullChatInfo::chatinfo_size() const {
  return chatinfo_.size();
}
inline void PullChatInfo::clear_chatinfo() {
  chatinfo_.Clear();
}
inline const ::protobuf::chat::ChatInfo& PullChatInfo::chatinfo(int index) const {
  return chatinfo_.Get(index);
}
inline ::protobuf::chat::ChatInfo* PullChatInfo::mutable_chatinfo(int index) {
  return chatinfo_.Mutable(index);
}
inline ::protobuf::chat::ChatInfo* PullChatInfo::add_chatinfo() {
  return chatinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::chat::ChatInfo >&
PullChatInfo::chatinfo() const {
  return chatinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::chat::ChatInfo >*
PullChatInfo::mutable_chatinfo() {
  return &chatinfo_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace chat
}  // namespace protobuf

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_chat_2eproto__INCLUDED
