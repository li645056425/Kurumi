// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brave.proto

#ifndef PROTOBUF_brave_2eproto__INCLUDED
#define PROTOBUF_brave_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf {
namespace brave {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_brave_2eproto();
void protobuf_AssignDesc_brave_2eproto();
void protobuf_ShutdownFile_brave_2eproto();

class braveBoxList;
class BraveInfo;
class enemyinfo;

// ===================================================================

class braveBoxList : public ::google::protobuf::Message {
 public:
  braveBoxList();
  virtual ~braveBoxList();
  
  braveBoxList(const braveBoxList& from);
  
  inline braveBoxList& operator=(const braveBoxList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const braveBoxList& default_instance();
  
  void Swap(braveBoxList* other);
  
  // implements Message ----------------------------------------------
  
  braveBoxList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const braveBoxList& from);
  void MergeFrom(const braveBoxList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated bool state = 1;
  inline int state_size() const;
  inline void clear_state();
  static const int kStateFieldNumber = 1;
  inline bool state(int index) const;
  inline void set_state(int index, bool value);
  inline void add_state(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      state() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_state();
  
  // repeated .protobuf.common.KVint3232 items = 2;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 2;
  inline const ::protobuf::common::KVint3232& items(int index) const;
  inline ::protobuf::common::KVint3232* mutable_items(int index);
  inline ::protobuf::common::KVint3232* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >*
      mutable_items();
  
  // @@protoc_insertion_point(class_scope:protobuf.brave.braveBoxList)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< bool > state_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 > items_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_brave_2eproto();
  friend void protobuf_AssignDesc_brave_2eproto();
  friend void protobuf_ShutdownFile_brave_2eproto();
  
  void InitAsDefaultInstance();
  static braveBoxList* default_instance_;
};
// -------------------------------------------------------------------

class BraveInfo : public ::google::protobuf::Message {
 public:
  BraveInfo();
  virtual ~BraveInfo();
  
  BraveInfo(const BraveInfo& from);
  
  inline BraveInfo& operator=(const BraveInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BraveInfo& default_instance();
  
  void Swap(BraveInfo* other);
  
  // implements Message ----------------------------------------------
  
  BraveInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BraveInfo& from);
  void MergeFrom(const BraveInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protobuf.brave.enemyinfo showinfo = 1;
  inline int showinfo_size() const;
  inline void clear_showinfo();
  static const int kShowinfoFieldNumber = 1;
  inline const ::protobuf::brave::enemyinfo& showinfo(int index) const;
  inline ::protobuf::brave::enemyinfo* mutable_showinfo(int index);
  inline ::protobuf::brave::enemyinfo* add_showinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::brave::enemyinfo >&
      showinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::brave::enemyinfo >*
      mutable_showinfo();
  
  // required .protobuf.common.LineupTemplate attackLineup = 2;
  inline bool has_attacklineup() const;
  inline void clear_attacklineup();
  static const int kAttackLineupFieldNumber = 2;
  inline const ::protobuf::common::LineupTemplate& attacklineup() const;
  inline ::protobuf::common::LineupTemplate* mutable_attacklineup();
  inline ::protobuf::common::LineupTemplate* release_attacklineup();
  
  // repeated .protobuf.common.KVint3264 herohps = 3;
  inline int herohps_size() const;
  inline void clear_herohps();
  static const int kHerohpsFieldNumber = 3;
  inline const ::protobuf::common::KVint3264& herohps(int index) const;
  inline ::protobuf::common::KVint3264* mutable_herohps(int index);
  inline ::protobuf::common::KVint3264* add_herohps();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 >&
      herohps() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 >*
      mutable_herohps();
  
  // repeated .protobuf.common.KVint3232 heroEns = 4;
  inline int heroens_size() const;
  inline void clear_heroens();
  static const int kHeroEnsFieldNumber = 4;
  inline const ::protobuf::common::KVint3232& heroens(int index) const;
  inline ::protobuf::common::KVint3232* mutable_heroens(int index);
  inline ::protobuf::common::KVint3232* add_heroens();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >&
      heroens() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >*
      mutable_heroens();
  
  // @@protoc_insertion_point(class_scope:protobuf.brave.BraveInfo)
 private:
  inline void set_has_attacklineup();
  inline void clear_has_attacklineup();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protobuf::brave::enemyinfo > showinfo_;
  ::protobuf::common::LineupTemplate* attacklineup_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 > herohps_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 > heroens_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_brave_2eproto();
  friend void protobuf_AssignDesc_brave_2eproto();
  friend void protobuf_ShutdownFile_brave_2eproto();
  
  void InitAsDefaultInstance();
  static BraveInfo* default_instance_;
};
// -------------------------------------------------------------------

class enemyinfo : public ::google::protobuf::Message {
 public:
  enemyinfo();
  virtual ~enemyinfo();
  
  enemyinfo(const enemyinfo& from);
  
  inline enemyinfo& operator=(const enemyinfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const enemyinfo& default_instance();
  
  void Swap(enemyinfo* other);
  
  // implements Message ----------------------------------------------
  
  enemyinfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const enemyinfo& from);
  void MergeFrom(const enemyinfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required string head = 3;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 3;
  inline const ::std::string& head() const;
  inline void set_head(const ::std::string& value);
  inline void set_head(const char* value);
  inline void set_head(const char* value, size_t size);
  inline ::std::string* mutable_head();
  inline ::std::string* release_head();
  
  // required int32 lasthp = 4;
  inline bool has_lasthp() const;
  inline void clear_lasthp();
  static const int kLasthpFieldNumber = 4;
  inline ::google::protobuf::int32 lasthp() const;
  inline void set_lasthp(::google::protobuf::int32 value);
  
  // optional string serverName = 5;
  inline bool has_servername() const;
  inline void clear_servername();
  static const int kServerNameFieldNumber = 5;
  inline const ::std::string& servername() const;
  inline void set_servername(const ::std::string& value);
  inline void set_servername(const char* value);
  inline void set_servername(const char* value, size_t size);
  inline ::std::string* mutable_servername();
  inline ::std::string* release_servername();
  
  // optional int32 power = 7;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 7;
  inline ::google::protobuf::int32 power() const;
  inline void set_power(::google::protobuf::int32 value);
  
  // optional int32 headFrame = 8;
  inline bool has_headframe() const;
  inline void clear_headframe();
  static const int kHeadFrameFieldNumber = 8;
  inline ::google::protobuf::int32 headframe() const;
  inline void set_headframe(::google::protobuf::int32 value);
  
  // repeated int32 buflist = 9;
  inline int buflist_size() const;
  inline void clear_buflist();
  static const int kBuflistFieldNumber = 9;
  inline ::google::protobuf::int32 buflist(int index) const;
  inline void set_buflist(int index, ::google::protobuf::int32 value);
  inline void add_buflist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      buflist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_buflist();
  
  // optional int32 selected = 10;
  inline bool has_selected() const;
  inline void clear_selected();
  static const int kSelectedFieldNumber = 10;
  inline ::google::protobuf::int32 selected() const;
  inline void set_selected(::google::protobuf::int32 value);
  
  // repeated .protobuf.common.KVint3232 herolist = 11;
  inline int herolist_size() const;
  inline void clear_herolist();
  static const int kHerolistFieldNumber = 11;
  inline const ::protobuf::common::KVint3232& herolist(int index) const;
  inline ::protobuf::common::KVint3232* mutable_herolist(int index);
  inline ::protobuf::common::KVint3232* add_herolist();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >&
      herolist() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >*
      mutable_herolist();
  
  // @@protoc_insertion_point(class_scope:protobuf.brave.enemyinfo)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_lasthp();
  inline void clear_has_lasthp();
  inline void set_has_servername();
  inline void clear_has_servername();
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_headframe();
  inline void clear_has_headframe();
  inline void set_has_selected();
  inline void clear_has_selected();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 lasthp_;
  ::std::string* head_;
  ::std::string* servername_;
  ::google::protobuf::int32 power_;
  ::google::protobuf::int32 headframe_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > buflist_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 > herolist_;
  ::google::protobuf::int32 selected_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_brave_2eproto();
  friend void protobuf_AssignDesc_brave_2eproto();
  friend void protobuf_ShutdownFile_brave_2eproto();
  
  void InitAsDefaultInstance();
  static enemyinfo* default_instance_;
};
// ===================================================================


// ===================================================================

// braveBoxList

// repeated bool state = 1;
inline int braveBoxList::state_size() const {
  return state_.size();
}
inline void braveBoxList::clear_state() {
  state_.Clear();
}
inline bool braveBoxList::state(int index) const {
  return state_.Get(index);
}
inline void braveBoxList::set_state(int index, bool value) {
  state_.Set(index, value);
}
inline void braveBoxList::add_state(bool value) {
  state_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
braveBoxList::state() const {
  return state_;
}
inline ::google::protobuf::RepeatedField< bool >*
braveBoxList::mutable_state() {
  return &state_;
}

// repeated .protobuf.common.KVint3232 items = 2;
inline int braveBoxList::items_size() const {
  return items_.size();
}
inline void braveBoxList::clear_items() {
  items_.Clear();
}
inline const ::protobuf::common::KVint3232& braveBoxList::items(int index) const {
  return items_.Get(index);
}
inline ::protobuf::common::KVint3232* braveBoxList::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::protobuf::common::KVint3232* braveBoxList::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >&
braveBoxList::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >*
braveBoxList::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// BraveInfo

// repeated .protobuf.brave.enemyinfo showinfo = 1;
inline int BraveInfo::showinfo_size() const {
  return showinfo_.size();
}
inline void BraveInfo::clear_showinfo() {
  showinfo_.Clear();
}
inline const ::protobuf::brave::enemyinfo& BraveInfo::showinfo(int index) const {
  return showinfo_.Get(index);
}
inline ::protobuf::brave::enemyinfo* BraveInfo::mutable_showinfo(int index) {
  return showinfo_.Mutable(index);
}
inline ::protobuf::brave::enemyinfo* BraveInfo::add_showinfo() {
  return showinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::brave::enemyinfo >&
BraveInfo::showinfo() const {
  return showinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::brave::enemyinfo >*
BraveInfo::mutable_showinfo() {
  return &showinfo_;
}

// required .protobuf.common.LineupTemplate attackLineup = 2;
inline bool BraveInfo::has_attacklineup() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BraveInfo::set_has_attacklineup() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BraveInfo::clear_has_attacklineup() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BraveInfo::clear_attacklineup() {
  if (attacklineup_ != NULL) attacklineup_->::protobuf::common::LineupTemplate::Clear();
  clear_has_attacklineup();
}
inline const ::protobuf::common::LineupTemplate& BraveInfo::attacklineup() const {
  return attacklineup_ != NULL ? *attacklineup_ : *default_instance_->attacklineup_;
}
inline ::protobuf::common::LineupTemplate* BraveInfo::mutable_attacklineup() {
  set_has_attacklineup();
  if (attacklineup_ == NULL) attacklineup_ = new ::protobuf::common::LineupTemplate;
  return attacklineup_;
}
inline ::protobuf::common::LineupTemplate* BraveInfo::release_attacklineup() {
  clear_has_attacklineup();
  ::protobuf::common::LineupTemplate* temp = attacklineup_;
  attacklineup_ = NULL;
  return temp;
}

// repeated .protobuf.common.KVint3264 herohps = 3;
inline int BraveInfo::herohps_size() const {
  return herohps_.size();
}
inline void BraveInfo::clear_herohps() {
  herohps_.Clear();
}
inline const ::protobuf::common::KVint3264& BraveInfo::herohps(int index) const {
  return herohps_.Get(index);
}
inline ::protobuf::common::KVint3264* BraveInfo::mutable_herohps(int index) {
  return herohps_.Mutable(index);
}
inline ::protobuf::common::KVint3264* BraveInfo::add_herohps() {
  return herohps_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 >&
BraveInfo::herohps() const {
  return herohps_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 >*
BraveInfo::mutable_herohps() {
  return &herohps_;
}

// repeated .protobuf.common.KVint3232 heroEns = 4;
inline int BraveInfo::heroens_size() const {
  return heroens_.size();
}
inline void BraveInfo::clear_heroens() {
  heroens_.Clear();
}
inline const ::protobuf::common::KVint3232& BraveInfo::heroens(int index) const {
  return heroens_.Get(index);
}
inline ::protobuf::common::KVint3232* BraveInfo::mutable_heroens(int index) {
  return heroens_.Mutable(index);
}
inline ::protobuf::common::KVint3232* BraveInfo::add_heroens() {
  return heroens_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >&
BraveInfo::heroens() const {
  return heroens_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >*
BraveInfo::mutable_heroens() {
  return &heroens_;
}

// -------------------------------------------------------------------

// enemyinfo

// required int32 level = 1;
inline bool enemyinfo::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void enemyinfo::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void enemyinfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void enemyinfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 enemyinfo::level() const {
  return level_;
}
inline void enemyinfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// required string name = 2;
inline bool enemyinfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void enemyinfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void enemyinfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void enemyinfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& enemyinfo::name() const {
  return *name_;
}
inline void enemyinfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void enemyinfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void enemyinfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* enemyinfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* enemyinfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string head = 3;
inline bool enemyinfo::has_head() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void enemyinfo::set_has_head() {
  _has_bits_[0] |= 0x00000004u;
}
inline void enemyinfo::clear_has_head() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void enemyinfo::clear_head() {
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    head_->clear();
  }
  clear_has_head();
}
inline const ::std::string& enemyinfo::head() const {
  return *head_;
}
inline void enemyinfo::set_head(const ::std::string& value) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(value);
}
inline void enemyinfo::set_head(const char* value) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(value);
}
inline void enemyinfo::set_head(const char* value, size_t size) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* enemyinfo::mutable_head() {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  return head_;
}
inline ::std::string* enemyinfo::release_head() {
  clear_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = head_;
    head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 lasthp = 4;
inline bool enemyinfo::has_lasthp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void enemyinfo::set_has_lasthp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void enemyinfo::clear_has_lasthp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void enemyinfo::clear_lasthp() {
  lasthp_ = 0;
  clear_has_lasthp();
}
inline ::google::protobuf::int32 enemyinfo::lasthp() const {
  return lasthp_;
}
inline void enemyinfo::set_lasthp(::google::protobuf::int32 value) {
  set_has_lasthp();
  lasthp_ = value;
}

// optional string serverName = 5;
inline bool enemyinfo::has_servername() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void enemyinfo::set_has_servername() {
  _has_bits_[0] |= 0x00000010u;
}
inline void enemyinfo::clear_has_servername() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void enemyinfo::clear_servername() {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    servername_->clear();
  }
  clear_has_servername();
}
inline const ::std::string& enemyinfo::servername() const {
  return *servername_;
}
inline void enemyinfo::set_servername(const ::std::string& value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
}
inline void enemyinfo::set_servername(const char* value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
}
inline void enemyinfo::set_servername(const char* value, size_t size) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* enemyinfo::mutable_servername() {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  return servername_;
}
inline ::std::string* enemyinfo::release_servername() {
  clear_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = servername_;
    servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 power = 7;
inline bool enemyinfo::has_power() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void enemyinfo::set_has_power() {
  _has_bits_[0] |= 0x00000020u;
}
inline void enemyinfo::clear_has_power() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void enemyinfo::clear_power() {
  power_ = 0;
  clear_has_power();
}
inline ::google::protobuf::int32 enemyinfo::power() const {
  return power_;
}
inline void enemyinfo::set_power(::google::protobuf::int32 value) {
  set_has_power();
  power_ = value;
}

// optional int32 headFrame = 8;
inline bool enemyinfo::has_headframe() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void enemyinfo::set_has_headframe() {
  _has_bits_[0] |= 0x00000040u;
}
inline void enemyinfo::clear_has_headframe() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void enemyinfo::clear_headframe() {
  headframe_ = 0;
  clear_has_headframe();
}
inline ::google::protobuf::int32 enemyinfo::headframe() const {
  return headframe_;
}
inline void enemyinfo::set_headframe(::google::protobuf::int32 value) {
  set_has_headframe();
  headframe_ = value;
}

// repeated int32 buflist = 9;
inline int enemyinfo::buflist_size() const {
  return buflist_.size();
}
inline void enemyinfo::clear_buflist() {
  buflist_.Clear();
}
inline ::google::protobuf::int32 enemyinfo::buflist(int index) const {
  return buflist_.Get(index);
}
inline void enemyinfo::set_buflist(int index, ::google::protobuf::int32 value) {
  buflist_.Set(index, value);
}
inline void enemyinfo::add_buflist(::google::protobuf::int32 value) {
  buflist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
enemyinfo::buflist() const {
  return buflist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
enemyinfo::mutable_buflist() {
  return &buflist_;
}

// optional int32 selected = 10;
inline bool enemyinfo::has_selected() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void enemyinfo::set_has_selected() {
  _has_bits_[0] |= 0x00000100u;
}
inline void enemyinfo::clear_has_selected() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void enemyinfo::clear_selected() {
  selected_ = 0;
  clear_has_selected();
}
inline ::google::protobuf::int32 enemyinfo::selected() const {
  return selected_;
}
inline void enemyinfo::set_selected(::google::protobuf::int32 value) {
  set_has_selected();
  selected_ = value;
}

// repeated .protobuf.common.KVint3232 herolist = 11;
inline int enemyinfo::herolist_size() const {
  return herolist_.size();
}
inline void enemyinfo::clear_herolist() {
  herolist_.Clear();
}
inline const ::protobuf::common::KVint3232& enemyinfo::herolist(int index) const {
  return herolist_.Get(index);
}
inline ::protobuf::common::KVint3232* enemyinfo::mutable_herolist(int index) {
  return herolist_.Mutable(index);
}
inline ::protobuf::common::KVint3232* enemyinfo::add_herolist() {
  return herolist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >&
enemyinfo::herolist() const {
  return herolist_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >*
enemyinfo::mutable_herolist() {
  return &herolist_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace brave
}  // namespace protobuf

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_brave_2eproto__INCLUDED
