// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: playerInfo.proto

#ifndef PROTOBUF_playerInfo_2eproto__INCLUDED
#define PROTOBUF_playerInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf {
namespace playerInfo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_playerInfo_2eproto();
void protobuf_AssignDesc_playerInfo_2eproto();
void protobuf_ShutdownFile_playerInfo_2eproto();

class AlterName;
class ReplyAlterName;
class UpdateInfo;
class ReplyUpdateInfo;
class ExpAndLv;
class AccountInfo;
class LoginInfo;
class PlayerGuild;
class ReplyLoginInfo;
class ObsessedState;
class ReplyLoginState;
class ReplyAlterHead;
class HeadList;
class CommonPlayerInfo;
class Achievement;
class ReplyHeroSkin;
class HeroSkinList;

// ===================================================================

class AlterName : public ::google::protobuf::Message {
 public:
  AlterName();
  virtual ~AlterName();
  
  AlterName(const AlterName& from);
  
  inline AlterName& operator=(const AlterName& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AlterName& default_instance();
  
  void Swap(AlterName* other);
  
  // implements Message ----------------------------------------------
  
  AlterName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AlterName& from);
  void MergeFrom(const AlterName& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // @@protoc_insertion_point(class_scope:protobuf.playerInfo.AlterName)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_playerInfo_2eproto();
  friend void protobuf_AssignDesc_playerInfo_2eproto();
  friend void protobuf_ShutdownFile_playerInfo_2eproto();
  
  void InitAsDefaultInstance();
  static AlterName* default_instance_;
};
// -------------------------------------------------------------------

class ReplyAlterName : public ::google::protobuf::Message {
 public:
  ReplyAlterName();
  virtual ~ReplyAlterName();
  
  ReplyAlterName(const ReplyAlterName& from);
  
  inline ReplyAlterName& operator=(const ReplyAlterName& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReplyAlterName& default_instance();
  
  void Swap(ReplyAlterName* other);
  
  // implements Message ----------------------------------------------
  
  ReplyAlterName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReplyAlterName& from);
  void MergeFrom(const ReplyAlterName& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 diamond = 1;
  inline bool has_diamond() const;
  inline void clear_diamond();
  static const int kDiamondFieldNumber = 1;
  inline ::google::protobuf::int32 diamond() const;
  inline void set_diamond(::google::protobuf::int32 value);
  
  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // @@protoc_insertion_point(class_scope:protobuf.playerInfo.ReplyAlterName)
 private:
  inline void set_has_diamond();
  inline void clear_has_diamond();
  inline void set_has_name();
  inline void clear_has_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::int32 diamond_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_playerInfo_2eproto();
  friend void protobuf_AssignDesc_playerInfo_2eproto();
  friend void protobuf_ShutdownFile_playerInfo_2eproto();
  
  void InitAsDefaultInstance();
  static ReplyAlterName* default_instance_;
};
// -------------------------------------------------------------------

class UpdateInfo : public ::google::protobuf::Message {
 public:
  UpdateInfo();
  virtual ~UpdateInfo();
  
  UpdateInfo(const UpdateInfo& from);
  
  inline UpdateInfo& operator=(const UpdateInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateInfo& default_instance();
  
  void Swap(UpdateInfo* other);
  
  // implements Message ----------------------------------------------
  
  UpdateInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateInfo& from);
  void MergeFrom(const UpdateInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional int32 kvInt = 3;
  inline bool has_kvint() const;
  inline void clear_kvint();
  static const int kKvIntFieldNumber = 3;
  inline ::google::protobuf::int32 kvint() const;
  inline void set_kvint(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protobuf.playerInfo.UpdateInfo)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_kvint();
  inline void clear_has_kvint();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::int32 key_;
  ::google::protobuf::int32 kvint_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_playerInfo_2eproto();
  friend void protobuf_AssignDesc_playerInfo_2eproto();
  friend void protobuf_ShutdownFile_playerInfo_2eproto();
  
  void InitAsDefaultInstance();
  static UpdateInfo* default_instance_;
};
// -------------------------------------------------------------------

class ReplyUpdateInfo : public ::google::protobuf::Message {
 public:
  ReplyUpdateInfo();
  virtual ~ReplyUpdateInfo();
  
  ReplyUpdateInfo(const ReplyUpdateInfo& from);
  
  inline ReplyUpdateInfo& operator=(const ReplyUpdateInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReplyUpdateInfo& default_instance();
  
  void Swap(ReplyUpdateInfo* other);
  
  // implements Message ----------------------------------------------
  
  ReplyUpdateInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReplyUpdateInfo& from);
  void MergeFrom(const ReplyUpdateInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protobuf.playerInfo.ReplyUpdateInfo)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 key_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_playerInfo_2eproto();
  friend void protobuf_AssignDesc_playerInfo_2eproto();
  friend void protobuf_ShutdownFile_playerInfo_2eproto();
  
  void InitAsDefaultInstance();
  static ReplyUpdateInfo* default_instance_;
};
// -------------------------------------------------------------------

class ExpAndLv : public ::google::protobuf::Message {
 public:
  ExpAndLv();
  virtual ~ExpAndLv();
  
  ExpAndLv(const ExpAndLv& from);
  
  inline ExpAndLv& operator=(const ExpAndLv& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExpAndLv& default_instance();
  
  void Swap(ExpAndLv* other);
  
  // implements Message ----------------------------------------------
  
  ExpAndLv* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExpAndLv& from);
  void MergeFrom(const ExpAndLv& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 exp = 1;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 1;
  inline ::google::protobuf::int64 exp() const;
  inline void set_exp(::google::protobuf::int64 value);
  
  // optional int32 lv = 2;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 2;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);
  
  // optional int64 diamond = 3;
  inline bool has_diamond() const;
  inline void clear_diamond();
  static const int kDiamondFieldNumber = 3;
  inline ::google::protobuf::int64 diamond() const;
  inline void set_diamond(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:protobuf.playerInfo.ExpAndLv)
 private:
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_diamond();
  inline void clear_has_diamond();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 exp_;
  ::google::protobuf::int64 diamond_;
  ::google::protobuf::int32 lv_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_playerInfo_2eproto();
  friend void protobuf_AssignDesc_playerInfo_2eproto();
  friend void protobuf_ShutdownFile_playerInfo_2eproto();
  
  void InitAsDefaultInstance();
  static ExpAndLv* default_instance_;
};
// -------------------------------------------------------------------

class AccountInfo : public ::google::protobuf::Message {
 public:
  AccountInfo();
  virtual ~AccountInfo();
  
  AccountInfo(const AccountInfo& from);
  
  inline AccountInfo& operator=(const AccountInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountInfo& default_instance();
  
  void Swap(AccountInfo* other);
  
  // implements Message ----------------------------------------------
  
  AccountInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccountInfo& from);
  void MergeFrom(const AccountInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protobuf.common.KVstringstring account = 1;
  inline int account_size() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::protobuf::common::KVstringstring& account(int index) const;
  inline ::protobuf::common::KVstringstring* mutable_account(int index);
  inline ::protobuf::common::KVstringstring* add_account();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVstringstring >&
      account() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVstringstring >*
      mutable_account();
  
  // @@protoc_insertion_point(class_scope:protobuf.playerInfo.AccountInfo)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVstringstring > account_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_playerInfo_2eproto();
  friend void protobuf_AssignDesc_playerInfo_2eproto();
  friend void protobuf_ShutdownFile_playerInfo_2eproto();
  
  void InitAsDefaultInstance();
  static AccountInfo* default_instance_;
};
// -------------------------------------------------------------------

class LoginInfo : public ::google::protobuf::Message {
 public:
  LoginInfo();
  virtual ~LoginInfo();
  
  LoginInfo(const LoginInfo& from);
  
  inline LoginInfo& operator=(const LoginInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginInfo& default_instance();
  
  void Swap(LoginInfo* other);
  
  // implements Message ----------------------------------------------
  
  LoginInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginInfo& from);
  void MergeFrom(const LoginInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  
  // required string token = 2;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 2;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  
  // required int32 serverid = 3;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 3;
  inline ::google::protobuf::int32 serverid() const;
  inline void set_serverid(::google::protobuf::int32 value);
  
  // required string machineid = 4;
  inline bool has_machineid() const;
  inline void clear_machineid();
  static const int kMachineidFieldNumber = 4;
  inline const ::std::string& machineid() const;
  inline void set_machineid(const ::std::string& value);
  inline void set_machineid(const char* value);
  inline void set_machineid(const char* value, size_t size);
  inline ::std::string* mutable_machineid();
  inline ::std::string* release_machineid();
  
  // required bool reLogin = 5;
  inline bool has_relogin() const;
  inline void clear_relogin();
  static const int kReLoginFieldNumber = 5;
  inline bool relogin() const;
  inline void set_relogin(bool value);
  
  // optional string uid = 6;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 6;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  
  // @@protoc_insertion_point(class_scope:protobuf.playerInfo.LoginInfo)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_machineid();
  inline void clear_has_machineid();
  inline void set_has_relogin();
  inline void clear_has_relogin();
  inline void set_has_uid();
  inline void clear_has_uid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* account_;
  ::std::string* token_;
  ::std::string* machineid_;
  ::google::protobuf::int32 serverid_;
  bool relogin_;
  ::std::string* uid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_playerInfo_2eproto();
  friend void protobuf_AssignDesc_playerInfo_2eproto();
  friend void protobuf_ShutdownFile_playerInfo_2eproto();
  
  void InitAsDefaultInstance();
  static LoginInfo* default_instance_;
};
// -------------------------------------------------------------------

class PlayerGuild : public ::google::protobuf::Message {
 public:
  PlayerGuild();
  virtual ~PlayerGuild();
  
  PlayerGuild(const PlayerGuild& from);
  
  inline PlayerGuild& operator=(const PlayerGuild& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerGuild& default_instance();
  
  void Swap(PlayerGuild* other);
  
  // implements Message ----------------------------------------------
  
  PlayerGuild* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerGuild& from);
  void MergeFrom(const PlayerGuild& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 guildid = 1;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildidFieldNumber = 1;
  inline ::google::protobuf::int32 guildid() const;
  inline void set_guildid(::google::protobuf::int32 value);
  
  // optional int64 GuildMillFinishTime = 3;
  inline bool has_guildmillfinishtime() const;
  inline void clear_guildmillfinishtime();
  static const int kGuildMillFinishTimeFieldNumber = 3;
  inline ::google::protobuf::int64 guildmillfinishtime() const;
  inline void set_guildmillfinishtime(::google::protobuf::int64 value);
  
  // required int64 GuildCheckInTime = 4;
  inline bool has_guildcheckintime() const;
  inline void clear_guildcheckintime();
  static const int kGuildCheckInTimeFieldNumber = 4;
  inline ::google::protobuf::int64 guildcheckintime() const;
  inline void set_guildcheckintime(::google::protobuf::int64 value);
  
  // optional int32 refreshattackcnt = 5;
  inline bool has_refreshattackcnt() const;
  inline void clear_refreshattackcnt();
  static const int kRefreshattackcntFieldNumber = 5;
  inline ::google::protobuf::int32 refreshattackcnt() const;
  inline void set_refreshattackcnt(::google::protobuf::int32 value);
  
  // optional int64 refreshfreecnttime = 6;
  inline bool has_refreshfreecnttime() const;
  inline void clear_refreshfreecnttime();
  static const int kRefreshfreecnttimeFieldNumber = 6;
  inline ::google::protobuf::int64 refreshfreecnttime() const;
  inline void set_refreshfreecnttime(::google::protobuf::int64 value);
  
  // repeated .protobuf.common.KVint3232 science = 7;
  inline int science_size() const;
  inline void clear_science();
  static const int kScienceFieldNumber = 7;
  inline const ::protobuf::common::KVint3232& science(int index) const;
  inline ::protobuf::common::KVint3232* mutable_science(int index);
  inline ::protobuf::common::KVint3232* add_science();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >&
      science() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >*
      mutable_science();
  
  // optional string guildname = 8;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildnameFieldNumber = 8;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  
  // optional string guildicon = 9;
  inline bool has_guildicon() const;
  inline void clear_guildicon();
  static const int kGuildiconFieldNumber = 9;
  inline const ::std::string& guildicon() const;
  inline void set_guildicon(const ::std::string& value);
  inline void set_guildicon(const char* value);
  inline void set_guildicon(const char* value, size_t size);
  inline ::std::string* mutable_guildicon();
  inline ::std::string* release_guildicon();
  
  // optional string guildlasticon = 10;
  inline bool has_guildlasticon() const;
  inline void clear_guildlasticon();
  static const int kGuildlasticonFieldNumber = 10;
  inline const ::std::string& guildlasticon() const;
  inline void set_guildlasticon(const ::std::string& value);
  inline void set_guildlasticon(const char* value);
  inline void set_guildlasticon(const char* value, size_t size);
  inline ::std::string* mutable_guildlasticon();
  inline ::std::string* release_guildlasticon();
  
  // optional bool isSet = 11;
  inline bool has_isset() const;
  inline void clear_isset();
  static const int kIsSetFieldNumber = 11;
  inline bool isset() const;
  inline void set_isset(bool value);
  
  // optional string id = 12;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 12;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  
  // @@protoc_insertion_point(class_scope:protobuf.playerInfo.PlayerGuild)
 private:
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_guildmillfinishtime();
  inline void clear_has_guildmillfinishtime();
  inline void set_has_guildcheckintime();
  inline void clear_has_guildcheckintime();
  inline void set_has_refreshattackcnt();
  inline void clear_has_refreshattackcnt();
  inline void set_has_refreshfreecnttime();
  inline void clear_has_refreshfreecnttime();
  inline void set_has_guildname();
  inline void clear_has_guildname();
  inline void set_has_guildicon();
  inline void clear_has_guildicon();
  inline void set_has_guildlasticon();
  inline void clear_has_guildlasticon();
  inline void set_has_isset();
  inline void clear_has_isset();
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 guildmillfinishtime_;
  ::google::protobuf::int32 guildid_;
  ::google::protobuf::int32 refreshattackcnt_;
  ::google::protobuf::int64 guildcheckintime_;
  ::google::protobuf::int64 refreshfreecnttime_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 > science_;
  ::std::string* guildname_;
  ::std::string* guildicon_;
  ::std::string* guildlasticon_;
  ::std::string* id_;
  bool isset_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  friend void  protobuf_AddDesc_playerInfo_2eproto();
  friend void protobuf_AssignDesc_playerInfo_2eproto();
  friend void protobuf_ShutdownFile_playerInfo_2eproto();
  
  void InitAsDefaultInstance();
  static PlayerGuild* default_instance_;
};
// -------------------------------------------------------------------

class ReplyLoginInfo : public ::google::protobuf::Message {
 public:
  ReplyLoginInfo();
  virtual ~ReplyLoginInfo();
  
  ReplyLoginInfo(const ReplyLoginInfo& from);
  
  inline ReplyLoginInfo& operator=(const ReplyLoginInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReplyLoginInfo& default_instance();
  
  void Swap(ReplyLoginInfo* other);
  
  // implements Message ----------------------------------------------
  
  ReplyLoginInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReplyLoginInfo& from);
  void MergeFrom(const ReplyLoginInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 gid = 1;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 1;
  inline ::google::protobuf::int32 gid() const;
  inline void set_gid(::google::protobuf::int32 value);
  
  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required int32 playerLevel = 3;
  inline bool has_playerlevel() const;
  inline void clear_playerlevel();
  static const int kPlayerLevelFieldNumber = 3;
  inline ::google::protobuf::int32 playerlevel() const;
  inline void set_playerlevel(::google::protobuf::int32 value);
  
  // required int64 playerExp = 4;
  inline bool has_playerexp() const;
  inline void clear_playerexp();
  static const int kPlayerExpFieldNumber = 4;
  inline ::google::protobuf::int64 playerexp() const;
  inline void set_playerexp(::google::protobuf::int64 value);
  
  // required int64 diamond = 6;
  inline bool has_diamond() const;
  inline void clear_diamond();
  static const int kDiamondFieldNumber = 6;
  inline ::google::protobuf::int64 diamond() const;
  inline void set_diamond(::google::protobuf::int64 value);
  
  // required int64 gold = 7;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 7;
  inline ::google::protobuf::int64 gold() const;
  inline void set_gold(::google::protobuf::int64 value);
  
  // required int32 alterNameTimes = 8;
  inline bool has_alternametimes() const;
  inline void clear_alternametimes();
  static const int kAlterNameTimesFieldNumber = 8;
  inline ::google::protobuf::int32 alternametimes() const;
  inline void set_alternametimes(::google::protobuf::int32 value);
  
  // required int32 vipLevel = 9;
  inline bool has_viplevel() const;
  inline void clear_viplevel();
  static const int kVipLevelFieldNumber = 9;
  inline ::google::protobuf::int32 viplevel() const;
  inline void set_viplevel(::google::protobuf::int32 value);
  
  // required int32 vipExp = 10;
  inline bool has_vipexp() const;
  inline void clear_vipexp();
  static const int kVipExpFieldNumber = 10;
  inline ::google::protobuf::int32 vipexp() const;
  inline void set_vipexp(::google::protobuf::int32 value);
  
  // required int32 heroeBag = 11;
  inline bool has_heroebag() const;
  inline void clear_heroebag();
  static const int kHeroeBagFieldNumber = 11;
  inline ::google::protobuf::int32 heroebag() const;
  inline void set_heroebag(::google::protobuf::int32 value);
  
  // required int32 expandTimes = 12;
  inline bool has_expandtimes() const;
  inline void clear_expandtimes();
  static const int kExpandTimesFieldNumber = 12;
  inline ::google::protobuf::int32 expandtimes() const;
  inline void set_expandtimes(::google::protobuf::int32 value);
  
  // required int32 expandTimes2 = 33;
  inline bool has_expandtimes2() const;
  inline void clear_expandtimes2();
  static const int kExpandTimes2FieldNumber = 33;
  inline ::google::protobuf::int32 expandtimes2() const;
  inline void set_expandtimes2(::google::protobuf::int32 value);
  
  // required string objectid = 13;
  inline bool has_objectid() const;
  inline void clear_objectid();
  static const int kObjectidFieldNumber = 13;
  inline const ::std::string& objectid() const;
  inline void set_objectid(const ::std::string& value);
  inline void set_objectid(const char* value);
  inline void set_objectid(const char* value, size_t size);
  inline ::std::string* mutable_objectid();
  inline ::std::string* release_objectid();
  
  // required int32 hangMaxMap = 14;
  inline bool has_hangmaxmap() const;
  inline void clear_hangmaxmap();
  static const int kHangMaxMapFieldNumber = 14;
  inline ::google::protobuf::int32 hangmaxmap() const;
  inline void set_hangmaxmap(::google::protobuf::int32 value);
  
  // required bool killGblCnt = 15;
  inline bool has_killgblcnt() const;
  inline void clear_killgblcnt();
  static const int kKillGblCntFieldNumber = 15;
  inline bool killgblcnt() const;
  inline void set_killgblcnt(bool value);
  
  // required bool killSuperMosterCnt = 16;
  inline bool has_killsupermostercnt() const;
  inline void clear_killsupermostercnt();
  static const int kKillSuperMosterCntFieldNumber = 16;
  inline bool killsupermostercnt() const;
  inline void set_killsupermostercnt(bool value);
  
  // required string head = 17;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 17;
  inline const ::std::string& head() const;
  inline void set_head(const ::std::string& value);
  inline void set_head(const char* value);
  inline void set_head(const char* value, size_t size);
  inline ::std::string* mutable_head();
  inline ::std::string* release_head();
  
  // required .protobuf.playerInfo.PlayerGuild guildinfo = 18;
  inline bool has_guildinfo() const;
  inline void clear_guildinfo();
  static const int kGuildinfoFieldNumber = 18;
  inline const ::protobuf::playerInfo::PlayerGuild& guildinfo() const;
  inline ::protobuf::playerInfo::PlayerGuild* mutable_guildinfo();
  inline ::protobuf::playerInfo::PlayerGuild* release_guildinfo();
  
  // optional int64 blakMarketTime = 19;
  inline bool has_blakmarkettime() const;
  inline void clear_blakmarkettime();
  static const int kBlakMarketTimeFieldNumber = 19;
  inline ::google::protobuf::int64 blakmarkettime() const;
  inline void set_blakmarkettime(::google::protobuf::int64 value);
  
  // optional int64 baseSummonTime = 20;
  inline bool has_basesummontime() const;
  inline void clear_basesummontime();
  static const int kBaseSummonTimeFieldNumber = 20;
  inline ::google::protobuf::int64 basesummontime() const;
  inline void set_basesummontime(::google::protobuf::int64 value);
  
  // optional int64 seniorSummonTime = 21;
  inline bool has_seniorsummontime() const;
  inline void clear_seniorsummontime();
  static const int kSeniorSummonTimeFieldNumber = 21;
  inline ::google::protobuf::int64 seniorsummontime() const;
  inline void set_seniorsummontime(::google::protobuf::int64 value);
  
  // optional int64 goldMetallurgyTime = 22;
  inline bool has_goldmetallurgytime() const;
  inline void clear_goldmetallurgytime();
  static const int kGoldMetallurgyTimeFieldNumber = 22;
  inline ::google::protobuf::int64 goldmetallurgytime() const;
  inline void set_goldmetallurgytime(::google::protobuf::int64 value);
  
  // optional int64 summonEnergy = 23;
  inline bool has_summonenergy() const;
  inline void clear_summonenergy();
  static const int kSummonEnergyFieldNumber = 23;
  inline ::google::protobuf::int64 summonenergy() const;
  inline void set_summonenergy(::google::protobuf::int64 value);
  
  // repeated .protobuf.common.LineupTemplate lineupTemplates = 24;
  inline int lineuptemplates_size() const;
  inline void clear_lineuptemplates();
  static const int kLineupTemplatesFieldNumber = 24;
  inline const ::protobuf::common::LineupTemplate& lineuptemplates(int index) const;
  inline ::protobuf::common::LineupTemplate* mutable_lineuptemplates(int index);
  inline ::protobuf::common::LineupTemplate* add_lineuptemplates();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::LineupTemplate >&
      lineuptemplates() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::LineupTemplate >*
      mutable_lineuptemplates();
  
  // repeated .protobuf.common.KVint3264 tavernFinishTimes = 25;
  inline int tavernfinishtimes_size() const;
  inline void clear_tavernfinishtimes();
  static const int kTavernFinishTimesFieldNumber = 25;
  inline const ::protobuf::common::KVint3264& tavernfinishtimes(int index) const;
  inline ::protobuf::common::KVint3264* mutable_tavernfinishtimes(int index);
  inline ::protobuf::common::KVint3264* add_tavernfinishtimes();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 >&
      tavernfinishtimes() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 >*
      mutable_tavernfinishtimes();
  
  // optional string guidance = 26;
  inline bool has_guidance() const;
  inline void clear_guidance();
  static const int kGuidanceFieldNumber = 26;
  inline const ::std::string& guidance() const;
  inline void set_guidance(const ::std::string& value);
  inline void set_guidance(const char* value);
  inline void set_guidance(const char* value, size_t size);
  inline ::std::string* mutable_guidance();
  inline ::std::string* release_guidance();
  
  // optional bool isHideVip = 27;
  inline bool has_ishidevip() const;
  inline void clear_ishidevip();
  static const int kIsHideVipFieldNumber = 27;
  inline bool ishidevip() const;
  inline void set_ishidevip(bool value);
  
  // optional int64 wishRefreshTime = 28;
  inline bool has_wishrefreshtime() const;
  inline void clear_wishrefreshtime();
  static const int kWishRefreshTimeFieldNumber = 28;
  inline ::google::protobuf::int64 wishrefreshtime() const;
  inline void set_wishrefreshtime(::google::protobuf::int64 value);
  
  // repeated .protobuf.common.KVint3232 goldStatus = 29;
  inline int goldstatus_size() const;
  inline void clear_goldstatus();
  static const int kGoldStatusFieldNumber = 29;
  inline const ::protobuf::common::KVint3232& goldstatus(int index) const;
  inline ::protobuf::common::KVint3232* mutable_goldstatus(int index);
  inline ::protobuf::common::KVint3232* add_goldstatus();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >&
      goldstatus() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >*
      mutable_goldstatus();
  
  // optional int32 town = 30;
  inline bool has_town() const;
  inline void clear_town();
  static const int kTownFieldNumber = 30;
  inline ::google::protobuf::int32 town() const;
  inline void set_town(::google::protobuf::int32 value);
  
  // optional bool isKillBoss = 31;
  inline bool has_iskillboss() const;
  inline void clear_iskillboss();
  static const int kIsKillBossFieldNumber = 31;
  inline bool iskillboss() const;
  inline void set_iskillboss(bool value);
  
  // optional int32 headFrame = 32;
  inline bool has_headframe() const;
  inline void clear_headframe();
  static const int kHeadFrameFieldNumber = 32;
  inline ::google::protobuf::int32 headframe() const;
  inline void set_headframe(::google::protobuf::int32 value);
  
  // optional string characterName = 34;
  inline bool has_charactername() const;
  inline void clear_charactername();
  static const int kCharacterNameFieldNumber = 34;
  inline const ::std::string& charactername() const;
  inline void set_charactername(const ::std::string& value);
  inline void set_charactername(const char* value);
  inline void set_charactername(const char* value, size_t size);
  inline ::std::string* mutable_charactername();
  inline ::std::string* release_charactername();
  
  // optional int32 sex = 35;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 35;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);
  
  // optional string city = 36;
  inline bool has_city() const;
  inline void clear_city();
  static const int kCityFieldNumber = 36;
  inline const ::std::string& city() const;
  inline void set_city(const ::std::string& value);
  inline void set_city(const char* value);
  inline void set_city(const char* value, size_t size);
  inline ::std::string* mutable_city();
  inline ::std::string* release_city();
  
  // optional int32 serverid = 37;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 37;
  inline ::google::protobuf::int32 serverid() const;
  inline void set_serverid(::google::protobuf::int32 value);
  
  // optional bool playerCheck = 38;
  inline bool has_playercheck() const;
  inline void clear_playercheck();
  static const int kPlayerCheckFieldNumber = 38;
  inline bool playercheck() const;
  inline void set_playercheck(bool value);
  
  // optional .protobuf.playerInfo.ObsessedState obsessedState = 39;
  inline bool has_obsessedstate() const;
  inline void clear_obsessedstate();
  static const int kObsessedStateFieldNumber = 39;
  inline const ::protobuf::playerInfo::ObsessedState& obsessedstate() const;
  inline ::protobuf::playerInfo::ObsessedState* mutable_obsessedstate();
  inline ::protobuf::playerInfo::ObsessedState* release_obsessedstate();
  
  // optional int32 power = 40;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 40;
  inline ::google::protobuf::int32 power() const;
  inline void set_power(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protobuf.playerInfo.ReplyLoginInfo)
 private:
  inline void set_has_gid();
  inline void clear_has_gid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_playerlevel();
  inline void clear_has_playerlevel();
  inline void set_has_playerexp();
  inline void clear_has_playerexp();
  inline void set_has_diamond();
  inline void clear_has_diamond();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_alternametimes();
  inline void clear_has_alternametimes();
  inline void set_has_viplevel();
  inline void clear_has_viplevel();
  inline void set_has_vipexp();
  inline void clear_has_vipexp();
  inline void set_has_heroebag();
  inline void clear_has_heroebag();
  inline void set_has_expandtimes();
  inline void clear_has_expandtimes();
  inline void set_has_expandtimes2();
  inline void clear_has_expandtimes2();
  inline void set_has_objectid();
  inline void clear_has_objectid();
  inline void set_has_hangmaxmap();
  inline void clear_has_hangmaxmap();
  inline void set_has_killgblcnt();
  inline void clear_has_killgblcnt();
  inline void set_has_killsupermostercnt();
  inline void clear_has_killsupermostercnt();
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_guildinfo();
  inline void clear_has_guildinfo();
  inline void set_has_blakmarkettime();
  inline void clear_has_blakmarkettime();
  inline void set_has_basesummontime();
  inline void clear_has_basesummontime();
  inline void set_has_seniorsummontime();
  inline void clear_has_seniorsummontime();
  inline void set_has_goldmetallurgytime();
  inline void clear_has_goldmetallurgytime();
  inline void set_has_summonenergy();
  inline void clear_has_summonenergy();
  inline void set_has_guidance();
  inline void clear_has_guidance();
  inline void set_has_ishidevip();
  inline void clear_has_ishidevip();
  inline void set_has_wishrefreshtime();
  inline void clear_has_wishrefreshtime();
  inline void set_has_town();
  inline void clear_has_town();
  inline void set_has_iskillboss();
  inline void clear_has_iskillboss();
  inline void set_has_headframe();
  inline void clear_has_headframe();
  inline void set_has_charactername();
  inline void clear_has_charactername();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_city();
  inline void clear_has_city();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_playercheck();
  inline void clear_has_playercheck();
  inline void set_has_obsessedstate();
  inline void clear_has_obsessedstate();
  inline void set_has_power();
  inline void clear_has_power();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 gid_;
  ::google::protobuf::int32 playerlevel_;
  ::std::string* name_;
  ::google::protobuf::int64 playerexp_;
  ::google::protobuf::int64 diamond_;
  ::google::protobuf::int64 gold_;
  ::google::protobuf::int32 alternametimes_;
  ::google::protobuf::int32 viplevel_;
  ::google::protobuf::int32 vipexp_;
  ::google::protobuf::int32 heroebag_;
  ::google::protobuf::int32 expandtimes_;
  ::google::protobuf::int32 expandtimes2_;
  ::std::string* objectid_;
  ::std::string* head_;
  ::protobuf::playerInfo::PlayerGuild* guildinfo_;
  ::google::protobuf::int64 blakmarkettime_;
  ::google::protobuf::int64 basesummontime_;
  ::google::protobuf::int32 hangmaxmap_;
  bool killgblcnt_;
  bool killsupermostercnt_;
  bool ishidevip_;
  bool iskillboss_;
  ::google::protobuf::int64 seniorsummontime_;
  ::google::protobuf::int64 goldmetallurgytime_;
  ::google::protobuf::int64 summonenergy_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::common::LineupTemplate > lineuptemplates_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 > tavernfinishtimes_;
  ::std::string* guidance_;
  ::google::protobuf::int64 wishrefreshtime_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 > goldstatus_;
  ::google::protobuf::int32 town_;
  ::google::protobuf::int32 headframe_;
  ::std::string* charactername_;
  ::std::string* city_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 serverid_;
  ::protobuf::playerInfo::ObsessedState* obsessedstate_;
  bool playercheck_;
  ::google::protobuf::int32 power_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(39 + 31) / 32];
  
  friend void  protobuf_AddDesc_playerInfo_2eproto();
  friend void protobuf_AssignDesc_playerInfo_2eproto();
  friend void protobuf_ShutdownFile_playerInfo_2eproto();
  
  void InitAsDefaultInstance();
  static ReplyLoginInfo* default_instance_;
};
// -------------------------------------------------------------------

class ObsessedState : public ::google::protobuf::Message {
 public:
  ObsessedState();
  virtual ~ObsessedState();
  
  ObsessedState(const ObsessedState& from);
  
  inline ObsessedState& operator=(const ObsessedState& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ObsessedState& default_instance();
  
  void Swap(ObsessedState* other);
  
  // implements Message ----------------------------------------------
  
  ObsessedState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObsessedState& from);
  void MergeFrom(const ObsessedState& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 logInMine = 1;
  inline bool has_loginmine() const;
  inline void clear_loginmine();
  static const int kLogInMineFieldNumber = 1;
  inline ::google::protobuf::int32 loginmine() const;
  inline void set_loginmine(::google::protobuf::int32 value);
  
  // optional int64 serverTime = 2;
  inline bool has_servertime() const;
  inline void clear_servertime();
  static const int kServerTimeFieldNumber = 2;
  inline ::google::protobuf::int64 servertime() const;
  inline void set_servertime(::google::protobuf::int64 value);
  
  // optional bool obsessedOpen = 3;
  inline bool has_obsessedopen() const;
  inline void clear_obsessedopen();
  static const int kObsessedOpenFieldNumber = 3;
  inline bool obsessedopen() const;
  inline void set_obsessedopen(bool value);
  
  // @@protoc_insertion_point(class_scope:protobuf.playerInfo.ObsessedState)
 private:
  inline void set_has_loginmine();
  inline void clear_has_loginmine();
  inline void set_has_servertime();
  inline void clear_has_servertime();
  inline void set_has_obsessedopen();
  inline void clear_has_obsessedopen();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 servertime_;
  ::google::protobuf::int32 loginmine_;
  bool obsessedopen_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_playerInfo_2eproto();
  friend void protobuf_AssignDesc_playerInfo_2eproto();
  friend void protobuf_ShutdownFile_playerInfo_2eproto();
  
  void InitAsDefaultInstance();
  static ObsessedState* default_instance_;
};
// -------------------------------------------------------------------

class ReplyLoginState : public ::google::protobuf::Message {
 public:
  ReplyLoginState();
  virtual ~ReplyLoginState();
  
  ReplyLoginState(const ReplyLoginState& from);
  
  inline ReplyLoginState& operator=(const ReplyLoginState& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReplyLoginState& default_instance();
  
  void Swap(ReplyLoginState* other);
  
  // implements Message ----------------------------------------------
  
  ReplyLoginState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReplyLoginState& from);
  void MergeFrom(const ReplyLoginState& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 championStartTime = 1;
  inline bool has_championstarttime() const;
  inline void clear_championstarttime();
  static const int kChampionStartTimeFieldNumber = 1;
  inline ::google::protobuf::int64 championstarttime() const;
  inline void set_championstarttime(::google::protobuf::int64 value);
  
  // optional bool championFirst = 2;
  inline bool has_championfirst() const;
  inline void clear_championfirst();
  static const int kChampionFirstFieldNumber = 2;
  inline bool championfirst() const;
  inline void set_championfirst(bool value);
  
  // optional int64 exchargeMarketFinish = 3;
  inline bool has_exchargemarketfinish() const;
  inline void clear_exchargemarketfinish();
  static const int kExchargeMarketFinishFieldNumber = 3;
  inline ::google::protobuf::int64 exchargemarketfinish() const;
  inline void set_exchargemarketfinish(::google::protobuf::int64 value);
  
  // optional int64 blakMarketTime = 4;
  inline bool has_blakmarkettime() const;
  inline void clear_blakmarkettime();
  static const int kBlakMarketTimeFieldNumber = 4;
  inline ::google::protobuf::int64 blakmarkettime() const;
  inline void set_blakmarkettime(::google::protobuf::int64 value);
  
  // optional int64 baseSummonTime = 5;
  inline bool has_basesummontime() const;
  inline void clear_basesummontime();
  static const int kBaseSummonTimeFieldNumber = 5;
  inline ::google::protobuf::int64 basesummontime() const;
  inline void set_basesummontime(::google::protobuf::int64 value);
  
  // optional int64 seniorSummonTime = 6;
  inline bool has_seniorsummontime() const;
  inline void clear_seniorsummontime();
  static const int kSeniorSummonTimeFieldNumber = 6;
  inline ::google::protobuf::int64 seniorsummontime() const;
  inline void set_seniorsummontime(::google::protobuf::int64 value);
  
  // optional int64 goldMetallurgyTime = 7;
  inline bool has_goldmetallurgytime() const;
  inline void clear_goldmetallurgytime();
  static const int kGoldMetallurgyTimeFieldNumber = 7;
  inline ::google::protobuf::int64 goldmetallurgytime() const;
  inline void set_goldmetallurgytime(::google::protobuf::int64 value);
  
  // repeated .protobuf.common.KVint3264 tavernFinishTimes = 8;
  inline int tavernfinishtimes_size() const;
  inline void clear_tavernfinishtimes();
  static const int kTavernFinishTimesFieldNumber = 8;
  inline const ::protobuf::common::KVint3264& tavernfinishtimes(int index) const;
  inline ::protobuf::common::KVint3264* mutable_tavernfinishtimes(int index);
  inline ::protobuf::common::KVint3264* add_tavernfinishtimes();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 >&
      tavernfinishtimes() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 >*
      mutable_tavernfinishtimes();
  
  // optional int64 wishRefreshTime = 9;
  inline bool has_wishrefreshtime() const;
  inline void clear_wishrefreshtime();
  static const int kWishRefreshTimeFieldNumber = 9;
  inline ::google::protobuf::int64 wishrefreshtime() const;
  inline void set_wishrefreshtime(::google::protobuf::int64 value);
  
  // optional int32 timezone = 10;
  inline bool has_timezone() const;
  inline void clear_timezone();
  static const int kTimezoneFieldNumber = 10;
  inline ::google::protobuf::int32 timezone() const;
  inline void set_timezone(::google::protobuf::int32 value);
  
  // optional bool battle = 11;
  inline bool has_battle() const;
  inline void clear_battle();
  static const int kBattleFieldNumber = 11;
  inline bool battle() const;
  inline void set_battle(bool value);
  
  // optional int32 dungeonid = 12;
  inline bool has_dungeonid() const;
  inline void clear_dungeonid();
  static const int kDungeonidFieldNumber = 12;
  inline ::google::protobuf::int32 dungeonid() const;
  inline void set_dungeonid(::google::protobuf::int32 value);
  
  // optional int64 dungeontime = 13;
  inline bool has_dungeontime() const;
  inline void clear_dungeontime();
  static const int kDungeontimeFieldNumber = 13;
  inline ::google::protobuf::int64 dungeontime() const;
  inline void set_dungeontime(::google::protobuf::int64 value);
  
  // optional int32 nextdungeon = 14;
  inline bool has_nextdungeon() const;
  inline void clear_nextdungeon();
  static const int kNextdungeonFieldNumber = 14;
  inline ::google::protobuf::int32 nextdungeon() const;
  inline void set_nextdungeon(::google::protobuf::int32 value);
  
  // optional string serverName = 15;
  inline bool has_servername() const;
  inline void clear_servername();
  static const int kServerNameFieldNumber = 15;
  inline const ::std::string& servername() const;
  inline void set_servername(const ::std::string& value);
  inline void set_servername(const char* value);
  inline void set_servername(const char* value, size_t size);
  inline ::std::string* mutable_servername();
  inline ::std::string* release_servername();
  
  // optional int64 createTime = 16;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 16;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);
  
  // optional int64 triggerTime = 17;
  inline bool has_triggertime() const;
  inline void clear_triggertime();
  static const int kTriggerTimeFieldNumber = 17;
  inline ::google::protobuf::int64 triggertime() const;
  inline void set_triggertime(::google::protobuf::int64 value);
  
  // optional int64 newTime = 18;
  inline bool has_newtime() const;
  inline void clear_newtime();
  static const int kNewTimeFieldNumber = 18;
  inline ::google::protobuf::int64 newtime() const;
  inline void set_newtime(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:protobuf.playerInfo.ReplyLoginState)
 private:
  inline void set_has_championstarttime();
  inline void clear_has_championstarttime();
  inline void set_has_championfirst();
  inline void clear_has_championfirst();
  inline void set_has_exchargemarketfinish();
  inline void clear_has_exchargemarketfinish();
  inline void set_has_blakmarkettime();
  inline void clear_has_blakmarkettime();
  inline void set_has_basesummontime();
  inline void clear_has_basesummontime();
  inline void set_has_seniorsummontime();
  inline void clear_has_seniorsummontime();
  inline void set_has_goldmetallurgytime();
  inline void clear_has_goldmetallurgytime();
  inline void set_has_wishrefreshtime();
  inline void clear_has_wishrefreshtime();
  inline void set_has_timezone();
  inline void clear_has_timezone();
  inline void set_has_battle();
  inline void clear_has_battle();
  inline void set_has_dungeonid();
  inline void clear_has_dungeonid();
  inline void set_has_dungeontime();
  inline void clear_has_dungeontime();
  inline void set_has_nextdungeon();
  inline void clear_has_nextdungeon();
  inline void set_has_servername();
  inline void clear_has_servername();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_triggertime();
  inline void clear_has_triggertime();
  inline void set_has_newtime();
  inline void clear_has_newtime();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 championstarttime_;
  ::google::protobuf::int64 exchargemarketfinish_;
  ::google::protobuf::int64 blakmarkettime_;
  ::google::protobuf::int64 basesummontime_;
  ::google::protobuf::int64 seniorsummontime_;
  ::google::protobuf::int64 goldmetallurgytime_;
  bool championfirst_;
  bool battle_;
  ::google::protobuf::int32 timezone_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 > tavernfinishtimes_;
  ::google::protobuf::int64 wishrefreshtime_;
  ::google::protobuf::int64 dungeontime_;
  ::google::protobuf::int32 dungeonid_;
  ::google::protobuf::int32 nextdungeon_;
  ::std::string* servername_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 triggertime_;
  ::google::protobuf::int64 newtime_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];
  
  friend void  protobuf_AddDesc_playerInfo_2eproto();
  friend void protobuf_AssignDesc_playerInfo_2eproto();
  friend void protobuf_ShutdownFile_playerInfo_2eproto();
  
  void InitAsDefaultInstance();
  static ReplyLoginState* default_instance_;
};
// -------------------------------------------------------------------

class ReplyAlterHead : public ::google::protobuf::Message {
 public:
  ReplyAlterHead();
  virtual ~ReplyAlterHead();
  
  ReplyAlterHead(const ReplyAlterHead& from);
  
  inline ReplyAlterHead& operator=(const ReplyAlterHead& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReplyAlterHead& default_instance();
  
  void Swap(ReplyAlterHead* other);
  
  // implements Message ----------------------------------------------
  
  ReplyAlterHead* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReplyAlterHead& from);
  void MergeFrom(const ReplyAlterHead& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  
  // required int64 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);
  
  // optional int64 lastUseTime = 3;
  inline bool has_lastusetime() const;
  inline void clear_lastusetime();
  static const int kLastUseTimeFieldNumber = 3;
  inline ::google::protobuf::int64 lastusetime() const;
  inline void set_lastusetime(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:protobuf.playerInfo.ReplyAlterHead)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_lastusetime();
  inline void clear_has_lastusetime();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* id_;
  ::google::protobuf::int64 time_;
  ::google::protobuf::int64 lastusetime_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_playerInfo_2eproto();
  friend void protobuf_AssignDesc_playerInfo_2eproto();
  friend void protobuf_ShutdownFile_playerInfo_2eproto();
  
  void InitAsDefaultInstance();
  static ReplyAlterHead* default_instance_;
};
// -------------------------------------------------------------------

class HeadList : public ::google::protobuf::Message {
 public:
  HeadList();
  virtual ~HeadList();
  
  HeadList(const HeadList& from);
  
  inline HeadList& operator=(const HeadList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const HeadList& default_instance();
  
  void Swap(HeadList* other);
  
  // implements Message ----------------------------------------------
  
  HeadList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeadList& from);
  void MergeFrom(const HeadList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protobuf.playerInfo.ReplyAlterHead heads = 1;
  inline int heads_size() const;
  inline void clear_heads();
  static const int kHeadsFieldNumber = 1;
  inline const ::protobuf::playerInfo::ReplyAlterHead& heads(int index) const;
  inline ::protobuf::playerInfo::ReplyAlterHead* mutable_heads(int index);
  inline ::protobuf::playerInfo::ReplyAlterHead* add_heads();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::playerInfo::ReplyAlterHead >&
      heads() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::playerInfo::ReplyAlterHead >*
      mutable_heads();
  
  // @@protoc_insertion_point(class_scope:protobuf.playerInfo.HeadList)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protobuf::playerInfo::ReplyAlterHead > heads_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_playerInfo_2eproto();
  friend void protobuf_AssignDesc_playerInfo_2eproto();
  friend void protobuf_ShutdownFile_playerInfo_2eproto();
  
  void InitAsDefaultInstance();
  static HeadList* default_instance_;
};
// -------------------------------------------------------------------

class CommonPlayerInfo : public ::google::protobuf::Message {
 public:
  CommonPlayerInfo();
  virtual ~CommonPlayerInfo();
  
  CommonPlayerInfo(const CommonPlayerInfo& from);
  
  inline CommonPlayerInfo& operator=(const CommonPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommonPlayerInfo& default_instance();
  
  void Swap(CommonPlayerInfo* other);
  
  // implements Message ----------------------------------------------
  
  CommonPlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommonPlayerInfo& from);
  void MergeFrom(const CommonPlayerInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required string head = 3;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 3;
  inline const ::std::string& head() const;
  inline void set_head(const ::std::string& value);
  inline void set_head(const char* value);
  inline void set_head(const char* value, size_t size);
  inline ::std::string* mutable_head();
  inline ::std::string* release_head();
  
  // required int32 gid = 4;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 4;
  inline ::google::protobuf::int32 gid() const;
  inline void set_gid(::google::protobuf::int32 value);
  
  // required int64 playerExp = 5;
  inline bool has_playerexp() const;
  inline void clear_playerexp();
  static const int kPlayerExpFieldNumber = 5;
  inline ::google::protobuf::int64 playerexp() const;
  inline void set_playerexp(::google::protobuf::int64 value);
  
  // required string playerId = 6;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 6;
  inline const ::std::string& playerid() const;
  inline void set_playerid(const ::std::string& value);
  inline void set_playerid(const char* value);
  inline void set_playerid(const char* value, size_t size);
  inline ::std::string* mutable_playerid();
  inline ::std::string* release_playerid();
  
  // required bool isFreind = 7;
  inline bool has_isfreind() const;
  inline void clear_isfreind();
  static const int kIsFreindFieldNumber = 7;
  inline bool isfreind() const;
  inline void set_isfreind(bool value);
  
  // repeated .protobuf.playerInfo.Achievement achievement = 8;
  inline int achievement_size() const;
  inline void clear_achievement();
  static const int kAchievementFieldNumber = 8;
  inline const ::protobuf::playerInfo::Achievement& achievement(int index) const;
  inline ::protobuf::playerInfo::Achievement* mutable_achievement(int index);
  inline ::protobuf::playerInfo::Achievement* add_achievement();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::playerInfo::Achievement >&
      achievement() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::playerInfo::Achievement >*
      mutable_achievement();
  
  // optional string guildObjId = 15;
  inline bool has_guildobjid() const;
  inline void clear_guildobjid();
  static const int kGuildObjIdFieldNumber = 15;
  inline const ::std::string& guildobjid() const;
  inline void set_guildobjid(const ::std::string& value);
  inline void set_guildobjid(const char* value);
  inline void set_guildobjid(const char* value, size_t size);
  inline ::std::string* mutable_guildobjid();
  inline ::std::string* release_guildobjid();
  
  // optional int32 guildId = 9;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIdFieldNumber = 9;
  inline ::google::protobuf::int32 guildid() const;
  inline void set_guildid(::google::protobuf::int32 value);
  
  // optional string guildIcon = 10;
  inline bool has_guildicon() const;
  inline void clear_guildicon();
  static const int kGuildIconFieldNumber = 10;
  inline const ::std::string& guildicon() const;
  inline void set_guildicon(const ::std::string& value);
  inline void set_guildicon(const char* value);
  inline void set_guildicon(const char* value, size_t size);
  inline ::std::string* mutable_guildicon();
  inline ::std::string* release_guildicon();
  
  // optional string guildName = 11;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildNameFieldNumber = 11;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  
  // optional .protobuf.common.LineupDetail defineer = 12;
  inline bool has_defineer() const;
  inline void clear_defineer();
  static const int kDefineerFieldNumber = 12;
  inline const ::protobuf::common::LineupDetail& defineer() const;
  inline ::protobuf::common::LineupDetail* mutable_defineer();
  inline ::protobuf::common::LineupDetail* release_defineer();
  
  // optional int32 vipLevel = 13;
  inline bool has_viplevel() const;
  inline void clear_viplevel();
  static const int kVipLevelFieldNumber = 13;
  inline ::google::protobuf::int32 viplevel() const;
  inline void set_viplevel(::google::protobuf::int32 value);
  
  // optional int32 headFrame = 14;
  inline bool has_headframe() const;
  inline void clear_headframe();
  static const int kHeadFrameFieldNumber = 14;
  inline ::google::protobuf::int32 headframe() const;
  inline void set_headframe(::google::protobuf::int32 value);
  
  // optional string characterName = 16;
  inline bool has_charactername() const;
  inline void clear_charactername();
  static const int kCharacterNameFieldNumber = 16;
  inline const ::std::string& charactername() const;
  inline void set_charactername(const ::std::string& value);
  inline void set_charactername(const char* value);
  inline void set_charactername(const char* value, size_t size);
  inline ::std::string* mutable_charactername();
  inline ::std::string* release_charactername();
  
  // optional int32 sex = 17;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 17;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);
  
  // optional string city = 18;
  inline bool has_city() const;
  inline void clear_city();
  static const int kCityFieldNumber = 18;
  inline const ::std::string& city() const;
  inline void set_city(const ::std::string& value);
  inline void set_city(const char* value);
  inline void set_city(const char* value, size_t size);
  inline ::std::string* mutable_city();
  inline ::std::string* release_city();
  
  // optional int32 serverid = 19;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 19;
  inline ::google::protobuf::int32 serverid() const;
  inline void set_serverid(::google::protobuf::int32 value);
  
  // optional .protobuf.common.LineupTemplate squadShow = 20;
  inline bool has_squadshow() const;
  inline void clear_squadshow();
  static const int kSquadShowFieldNumber = 20;
  inline const ::protobuf::common::LineupTemplate& squadshow() const;
  inline ::protobuf::common::LineupTemplate* mutable_squadshow();
  inline ::protobuf::common::LineupTemplate* release_squadshow();
  
  // optional int32 hangMaxMap = 21;
  inline bool has_hangmaxmap() const;
  inline void clear_hangmaxmap();
  static const int kHangMaxMapFieldNumber = 21;
  inline ::google::protobuf::int32 hangmaxmap() const;
  inline void set_hangmaxmap(::google::protobuf::int32 value);
  
  // optional int32 identity = 22;
  inline bool has_identity() const;
  inline void clear_identity();
  static const int kIdentityFieldNumber = 22;
  inline ::google::protobuf::int32 identity() const;
  inline void set_identity(::google::protobuf::int32 value);
  
  // optional .protobuf.common.LineupDetail enemyLineup = 23;
  inline bool has_enemylineup() const;
  inline void clear_enemylineup();
  static const int kEnemyLineupFieldNumber = 23;
  inline const ::protobuf::common::LineupDetail& enemylineup() const;
  inline ::protobuf::common::LineupDetail* mutable_enemylineup();
  inline ::protobuf::common::LineupDetail* release_enemylineup();
  
  // optional int64 power = 24;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 24;
  inline ::google::protobuf::int64 power() const;
  inline void set_power(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:protobuf.playerInfo.CommonPlayerInfo)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_gid();
  inline void clear_has_gid();
  inline void set_has_playerexp();
  inline void clear_has_playerexp();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_isfreind();
  inline void clear_has_isfreind();
  inline void set_has_guildobjid();
  inline void clear_has_guildobjid();
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_guildicon();
  inline void clear_has_guildicon();
  inline void set_has_guildname();
  inline void clear_has_guildname();
  inline void set_has_defineer();
  inline void clear_has_defineer();
  inline void set_has_viplevel();
  inline void clear_has_viplevel();
  inline void set_has_headframe();
  inline void clear_has_headframe();
  inline void set_has_charactername();
  inline void clear_has_charactername();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_city();
  inline void clear_has_city();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_squadshow();
  inline void clear_has_squadshow();
  inline void set_has_hangmaxmap();
  inline void clear_has_hangmaxmap();
  inline void set_has_identity();
  inline void clear_has_identity();
  inline void set_has_enemylineup();
  inline void clear_has_enemylineup();
  inline void set_has_power();
  inline void clear_has_power();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 gid_;
  ::std::string* head_;
  ::google::protobuf::int64 playerexp_;
  ::std::string* playerid_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::playerInfo::Achievement > achievement_;
  bool isfreind_;
  ::google::protobuf::int32 guildid_;
  ::std::string* guildobjid_;
  ::std::string* guildicon_;
  ::std::string* guildname_;
  ::protobuf::common::LineupDetail* defineer_;
  ::google::protobuf::int32 viplevel_;
  ::google::protobuf::int32 headframe_;
  ::std::string* charactername_;
  ::std::string* city_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 serverid_;
  ::protobuf::common::LineupTemplate* squadshow_;
  ::google::protobuf::int32 hangmaxmap_;
  ::google::protobuf::int32 identity_;
  ::protobuf::common::LineupDetail* enemylineup_;
  ::google::protobuf::int64 power_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(24 + 31) / 32];
  
  friend void  protobuf_AddDesc_playerInfo_2eproto();
  friend void protobuf_AssignDesc_playerInfo_2eproto();
  friend void protobuf_ShutdownFile_playerInfo_2eproto();
  
  void InitAsDefaultInstance();
  static CommonPlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class Achievement : public ::google::protobuf::Message {
 public:
  Achievement();
  virtual ~Achievement();
  
  Achievement(const Achievement& from);
  
  inline Achievement& operator=(const Achievement& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Achievement& default_instance();
  
  void Swap(Achievement* other);
  
  // implements Message ----------------------------------------------
  
  Achievement* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Achievement& from);
  void MergeFrom(const Achievement& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // required int32 status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);
  
  // required int32 value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protobuf.playerInfo.Achievement)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_playerInfo_2eproto();
  friend void protobuf_AssignDesc_playerInfo_2eproto();
  friend void protobuf_ShutdownFile_playerInfo_2eproto();
  
  void InitAsDefaultInstance();
  static Achievement* default_instance_;
};
// -------------------------------------------------------------------

class ReplyHeroSkin : public ::google::protobuf::Message {
 public:
  ReplyHeroSkin();
  virtual ~ReplyHeroSkin();
  
  ReplyHeroSkin(const ReplyHeroSkin& from);
  
  inline ReplyHeroSkin& operator=(const ReplyHeroSkin& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReplyHeroSkin& default_instance();
  
  void Swap(ReplyHeroSkin* other);
  
  // implements Message ----------------------------------------------
  
  ReplyHeroSkin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReplyHeroSkin& from);
  void MergeFrom(const ReplyHeroSkin& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // required int32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);
  
  // required int32 spareNum = 3;
  inline bool has_sparenum() const;
  inline void clear_sparenum();
  static const int kSpareNumFieldNumber = 3;
  inline ::google::protobuf::int32 sparenum() const;
  inline void set_sparenum(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protobuf.playerInfo.ReplyHeroSkin)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_sparenum();
  inline void clear_has_sparenum();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 sparenum_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_playerInfo_2eproto();
  friend void protobuf_AssignDesc_playerInfo_2eproto();
  friend void protobuf_ShutdownFile_playerInfo_2eproto();
  
  void InitAsDefaultInstance();
  static ReplyHeroSkin* default_instance_;
};
// -------------------------------------------------------------------

class HeroSkinList : public ::google::protobuf::Message {
 public:
  HeroSkinList();
  virtual ~HeroSkinList();
  
  HeroSkinList(const HeroSkinList& from);
  
  inline HeroSkinList& operator=(const HeroSkinList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const HeroSkinList& default_instance();
  
  void Swap(HeroSkinList* other);
  
  // implements Message ----------------------------------------------
  
  HeroSkinList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeroSkinList& from);
  void MergeFrom(const HeroSkinList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protobuf.playerInfo.ReplyHeroSkin skins = 1;
  inline int skins_size() const;
  inline void clear_skins();
  static const int kSkinsFieldNumber = 1;
  inline const ::protobuf::playerInfo::ReplyHeroSkin& skins(int index) const;
  inline ::protobuf::playerInfo::ReplyHeroSkin* mutable_skins(int index);
  inline ::protobuf::playerInfo::ReplyHeroSkin* add_skins();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::playerInfo::ReplyHeroSkin >&
      skins() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::playerInfo::ReplyHeroSkin >*
      mutable_skins();
  
  // @@protoc_insertion_point(class_scope:protobuf.playerInfo.HeroSkinList)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protobuf::playerInfo::ReplyHeroSkin > skins_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_playerInfo_2eproto();
  friend void protobuf_AssignDesc_playerInfo_2eproto();
  friend void protobuf_ShutdownFile_playerInfo_2eproto();
  
  void InitAsDefaultInstance();
  static HeroSkinList* default_instance_;
};
// ===================================================================


// ===================================================================

// AlterName

// required string name = 1;
inline bool AlterName::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AlterName::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AlterName::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AlterName::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& AlterName::name() const {
  return *name_;
}
inline void AlterName::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void AlterName::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void AlterName::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AlterName::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* AlterName::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ReplyAlterName

// required int32 diamond = 1;
inline bool ReplyAlterName::has_diamond() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReplyAlterName::set_has_diamond() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReplyAlterName::clear_has_diamond() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReplyAlterName::clear_diamond() {
  diamond_ = 0;
  clear_has_diamond();
}
inline ::google::protobuf::int32 ReplyAlterName::diamond() const {
  return diamond_;
}
inline void ReplyAlterName::set_diamond(::google::protobuf::int32 value) {
  set_has_diamond();
  diamond_ = value;
}

// required string name = 2;
inline bool ReplyAlterName::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReplyAlterName::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReplyAlterName::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReplyAlterName::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ReplyAlterName::name() const {
  return *name_;
}
inline void ReplyAlterName::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ReplyAlterName::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ReplyAlterName::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReplyAlterName::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ReplyAlterName::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// UpdateInfo

// required int32 key = 1;
inline bool UpdateInfo::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateInfo::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateInfo::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateInfo::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::google::protobuf::int32 UpdateInfo::key() const {
  return key_;
}
inline void UpdateInfo::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
}

// optional string name = 2;
inline bool UpdateInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& UpdateInfo::name() const {
  return *name_;
}
inline void UpdateInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void UpdateInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void UpdateInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdateInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* UpdateInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 kvInt = 3;
inline bool UpdateInfo::has_kvint() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpdateInfo::set_has_kvint() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpdateInfo::clear_has_kvint() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpdateInfo::clear_kvint() {
  kvint_ = 0;
  clear_has_kvint();
}
inline ::google::protobuf::int32 UpdateInfo::kvint() const {
  return kvint_;
}
inline void UpdateInfo::set_kvint(::google::protobuf::int32 value) {
  set_has_kvint();
  kvint_ = value;
}

// -------------------------------------------------------------------

// ReplyUpdateInfo

// required int32 key = 1;
inline bool ReplyUpdateInfo::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReplyUpdateInfo::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReplyUpdateInfo::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReplyUpdateInfo::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::google::protobuf::int32 ReplyUpdateInfo::key() const {
  return key_;
}
inline void ReplyUpdateInfo::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
}

// -------------------------------------------------------------------

// ExpAndLv

// required int64 exp = 1;
inline bool ExpAndLv::has_exp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExpAndLv::set_has_exp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExpAndLv::clear_has_exp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExpAndLv::clear_exp() {
  exp_ = GOOGLE_LONGLONG(0);
  clear_has_exp();
}
inline ::google::protobuf::int64 ExpAndLv::exp() const {
  return exp_;
}
inline void ExpAndLv::set_exp(::google::protobuf::int64 value) {
  set_has_exp();
  exp_ = value;
}

// optional int32 lv = 2;
inline bool ExpAndLv::has_lv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExpAndLv::set_has_lv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExpAndLv::clear_has_lv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExpAndLv::clear_lv() {
  lv_ = 0;
  clear_has_lv();
}
inline ::google::protobuf::int32 ExpAndLv::lv() const {
  return lv_;
}
inline void ExpAndLv::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
}

// optional int64 diamond = 3;
inline bool ExpAndLv::has_diamond() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExpAndLv::set_has_diamond() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExpAndLv::clear_has_diamond() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExpAndLv::clear_diamond() {
  diamond_ = GOOGLE_LONGLONG(0);
  clear_has_diamond();
}
inline ::google::protobuf::int64 ExpAndLv::diamond() const {
  return diamond_;
}
inline void ExpAndLv::set_diamond(::google::protobuf::int64 value) {
  set_has_diamond();
  diamond_ = value;
}

// -------------------------------------------------------------------

// AccountInfo

// repeated .protobuf.common.KVstringstring account = 1;
inline int AccountInfo::account_size() const {
  return account_.size();
}
inline void AccountInfo::clear_account() {
  account_.Clear();
}
inline const ::protobuf::common::KVstringstring& AccountInfo::account(int index) const {
  return account_.Get(index);
}
inline ::protobuf::common::KVstringstring* AccountInfo::mutable_account(int index) {
  return account_.Mutable(index);
}
inline ::protobuf::common::KVstringstring* AccountInfo::add_account() {
  return account_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVstringstring >&
AccountInfo::account() const {
  return account_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVstringstring >*
AccountInfo::mutable_account() {
  return &account_;
}

// -------------------------------------------------------------------

// LoginInfo

// required string account = 1;
inline bool LoginInfo::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginInfo::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginInfo::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginInfo::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& LoginInfo::account() const {
  return *account_;
}
inline void LoginInfo::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void LoginInfo::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void LoginInfo::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginInfo::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* LoginInfo::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string token = 2;
inline bool LoginInfo::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginInfo::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginInfo::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginInfo::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& LoginInfo::token() const {
  return *token_;
}
inline void LoginInfo::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void LoginInfo::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void LoginInfo::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginInfo::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* LoginInfo::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 serverid = 3;
inline bool LoginInfo::has_serverid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginInfo::set_has_serverid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginInfo::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginInfo::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
inline ::google::protobuf::int32 LoginInfo::serverid() const {
  return serverid_;
}
inline void LoginInfo::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
}

// required string machineid = 4;
inline bool LoginInfo::has_machineid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LoginInfo::set_has_machineid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LoginInfo::clear_has_machineid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LoginInfo::clear_machineid() {
  if (machineid_ != &::google::protobuf::internal::kEmptyString) {
    machineid_->clear();
  }
  clear_has_machineid();
}
inline const ::std::string& LoginInfo::machineid() const {
  return *machineid_;
}
inline void LoginInfo::set_machineid(const ::std::string& value) {
  set_has_machineid();
  if (machineid_ == &::google::protobuf::internal::kEmptyString) {
    machineid_ = new ::std::string;
  }
  machineid_->assign(value);
}
inline void LoginInfo::set_machineid(const char* value) {
  set_has_machineid();
  if (machineid_ == &::google::protobuf::internal::kEmptyString) {
    machineid_ = new ::std::string;
  }
  machineid_->assign(value);
}
inline void LoginInfo::set_machineid(const char* value, size_t size) {
  set_has_machineid();
  if (machineid_ == &::google::protobuf::internal::kEmptyString) {
    machineid_ = new ::std::string;
  }
  machineid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginInfo::mutable_machineid() {
  set_has_machineid();
  if (machineid_ == &::google::protobuf::internal::kEmptyString) {
    machineid_ = new ::std::string;
  }
  return machineid_;
}
inline ::std::string* LoginInfo::release_machineid() {
  clear_has_machineid();
  if (machineid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = machineid_;
    machineid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bool reLogin = 5;
inline bool LoginInfo::has_relogin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LoginInfo::set_has_relogin() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LoginInfo::clear_has_relogin() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LoginInfo::clear_relogin() {
  relogin_ = false;
  clear_has_relogin();
}
inline bool LoginInfo::relogin() const {
  return relogin_;
}
inline void LoginInfo::set_relogin(bool value) {
  set_has_relogin();
  relogin_ = value;
}

// optional string uid = 6;
inline bool LoginInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LoginInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LoginInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LoginInfo::clear_uid() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& LoginInfo::uid() const {
  return *uid_;
}
inline void LoginInfo::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void LoginInfo::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void LoginInfo::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginInfo::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  return uid_;
}
inline ::std::string* LoginInfo::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PlayerGuild

// required int32 guildid = 1;
inline bool PlayerGuild::has_guildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerGuild::set_has_guildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerGuild::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerGuild::clear_guildid() {
  guildid_ = 0;
  clear_has_guildid();
}
inline ::google::protobuf::int32 PlayerGuild::guildid() const {
  return guildid_;
}
inline void PlayerGuild::set_guildid(::google::protobuf::int32 value) {
  set_has_guildid();
  guildid_ = value;
}

// optional int64 GuildMillFinishTime = 3;
inline bool PlayerGuild::has_guildmillfinishtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerGuild::set_has_guildmillfinishtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerGuild::clear_has_guildmillfinishtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerGuild::clear_guildmillfinishtime() {
  guildmillfinishtime_ = GOOGLE_LONGLONG(0);
  clear_has_guildmillfinishtime();
}
inline ::google::protobuf::int64 PlayerGuild::guildmillfinishtime() const {
  return guildmillfinishtime_;
}
inline void PlayerGuild::set_guildmillfinishtime(::google::protobuf::int64 value) {
  set_has_guildmillfinishtime();
  guildmillfinishtime_ = value;
}

// required int64 GuildCheckInTime = 4;
inline bool PlayerGuild::has_guildcheckintime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerGuild::set_has_guildcheckintime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerGuild::clear_has_guildcheckintime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerGuild::clear_guildcheckintime() {
  guildcheckintime_ = GOOGLE_LONGLONG(0);
  clear_has_guildcheckintime();
}
inline ::google::protobuf::int64 PlayerGuild::guildcheckintime() const {
  return guildcheckintime_;
}
inline void PlayerGuild::set_guildcheckintime(::google::protobuf::int64 value) {
  set_has_guildcheckintime();
  guildcheckintime_ = value;
}

// optional int32 refreshattackcnt = 5;
inline bool PlayerGuild::has_refreshattackcnt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerGuild::set_has_refreshattackcnt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerGuild::clear_has_refreshattackcnt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerGuild::clear_refreshattackcnt() {
  refreshattackcnt_ = 0;
  clear_has_refreshattackcnt();
}
inline ::google::protobuf::int32 PlayerGuild::refreshattackcnt() const {
  return refreshattackcnt_;
}
inline void PlayerGuild::set_refreshattackcnt(::google::protobuf::int32 value) {
  set_has_refreshattackcnt();
  refreshattackcnt_ = value;
}

// optional int64 refreshfreecnttime = 6;
inline bool PlayerGuild::has_refreshfreecnttime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerGuild::set_has_refreshfreecnttime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerGuild::clear_has_refreshfreecnttime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerGuild::clear_refreshfreecnttime() {
  refreshfreecnttime_ = GOOGLE_LONGLONG(0);
  clear_has_refreshfreecnttime();
}
inline ::google::protobuf::int64 PlayerGuild::refreshfreecnttime() const {
  return refreshfreecnttime_;
}
inline void PlayerGuild::set_refreshfreecnttime(::google::protobuf::int64 value) {
  set_has_refreshfreecnttime();
  refreshfreecnttime_ = value;
}

// repeated .protobuf.common.KVint3232 science = 7;
inline int PlayerGuild::science_size() const {
  return science_.size();
}
inline void PlayerGuild::clear_science() {
  science_.Clear();
}
inline const ::protobuf::common::KVint3232& PlayerGuild::science(int index) const {
  return science_.Get(index);
}
inline ::protobuf::common::KVint3232* PlayerGuild::mutable_science(int index) {
  return science_.Mutable(index);
}
inline ::protobuf::common::KVint3232* PlayerGuild::add_science() {
  return science_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >&
PlayerGuild::science() const {
  return science_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >*
PlayerGuild::mutable_science() {
  return &science_;
}

// optional string guildname = 8;
inline bool PlayerGuild::has_guildname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlayerGuild::set_has_guildname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlayerGuild::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlayerGuild::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    guildname_->clear();
  }
  clear_has_guildname();
}
inline const ::std::string& PlayerGuild::guildname() const {
  return *guildname_;
}
inline void PlayerGuild::set_guildname(const ::std::string& value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void PlayerGuild::set_guildname(const char* value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void PlayerGuild::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerGuild::mutable_guildname() {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  return guildname_;
}
inline ::std::string* PlayerGuild::release_guildname() {
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string guildicon = 9;
inline bool PlayerGuild::has_guildicon() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlayerGuild::set_has_guildicon() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlayerGuild::clear_has_guildicon() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlayerGuild::clear_guildicon() {
  if (guildicon_ != &::google::protobuf::internal::kEmptyString) {
    guildicon_->clear();
  }
  clear_has_guildicon();
}
inline const ::std::string& PlayerGuild::guildicon() const {
  return *guildicon_;
}
inline void PlayerGuild::set_guildicon(const ::std::string& value) {
  set_has_guildicon();
  if (guildicon_ == &::google::protobuf::internal::kEmptyString) {
    guildicon_ = new ::std::string;
  }
  guildicon_->assign(value);
}
inline void PlayerGuild::set_guildicon(const char* value) {
  set_has_guildicon();
  if (guildicon_ == &::google::protobuf::internal::kEmptyString) {
    guildicon_ = new ::std::string;
  }
  guildicon_->assign(value);
}
inline void PlayerGuild::set_guildicon(const char* value, size_t size) {
  set_has_guildicon();
  if (guildicon_ == &::google::protobuf::internal::kEmptyString) {
    guildicon_ = new ::std::string;
  }
  guildicon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerGuild::mutable_guildicon() {
  set_has_guildicon();
  if (guildicon_ == &::google::protobuf::internal::kEmptyString) {
    guildicon_ = new ::std::string;
  }
  return guildicon_;
}
inline ::std::string* PlayerGuild::release_guildicon() {
  clear_has_guildicon();
  if (guildicon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildicon_;
    guildicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string guildlasticon = 10;
inline bool PlayerGuild::has_guildlasticon() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PlayerGuild::set_has_guildlasticon() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PlayerGuild::clear_has_guildlasticon() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PlayerGuild::clear_guildlasticon() {
  if (guildlasticon_ != &::google::protobuf::internal::kEmptyString) {
    guildlasticon_->clear();
  }
  clear_has_guildlasticon();
}
inline const ::std::string& PlayerGuild::guildlasticon() const {
  return *guildlasticon_;
}
inline void PlayerGuild::set_guildlasticon(const ::std::string& value) {
  set_has_guildlasticon();
  if (guildlasticon_ == &::google::protobuf::internal::kEmptyString) {
    guildlasticon_ = new ::std::string;
  }
  guildlasticon_->assign(value);
}
inline void PlayerGuild::set_guildlasticon(const char* value) {
  set_has_guildlasticon();
  if (guildlasticon_ == &::google::protobuf::internal::kEmptyString) {
    guildlasticon_ = new ::std::string;
  }
  guildlasticon_->assign(value);
}
inline void PlayerGuild::set_guildlasticon(const char* value, size_t size) {
  set_has_guildlasticon();
  if (guildlasticon_ == &::google::protobuf::internal::kEmptyString) {
    guildlasticon_ = new ::std::string;
  }
  guildlasticon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerGuild::mutable_guildlasticon() {
  set_has_guildlasticon();
  if (guildlasticon_ == &::google::protobuf::internal::kEmptyString) {
    guildlasticon_ = new ::std::string;
  }
  return guildlasticon_;
}
inline ::std::string* PlayerGuild::release_guildlasticon() {
  clear_has_guildlasticon();
  if (guildlasticon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildlasticon_;
    guildlasticon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool isSet = 11;
inline bool PlayerGuild::has_isset() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PlayerGuild::set_has_isset() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PlayerGuild::clear_has_isset() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PlayerGuild::clear_isset() {
  isset_ = false;
  clear_has_isset();
}
inline bool PlayerGuild::isset() const {
  return isset_;
}
inline void PlayerGuild::set_isset(bool value) {
  set_has_isset();
  isset_ = value;
}

// optional string id = 12;
inline bool PlayerGuild::has_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PlayerGuild::set_has_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PlayerGuild::clear_has_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PlayerGuild::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& PlayerGuild::id() const {
  return *id_;
}
inline void PlayerGuild::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void PlayerGuild::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void PlayerGuild::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerGuild::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* PlayerGuild::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ReplyLoginInfo

// required int32 gid = 1;
inline bool ReplyLoginInfo::has_gid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReplyLoginInfo::set_has_gid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReplyLoginInfo::clear_has_gid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReplyLoginInfo::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
inline ::google::protobuf::int32 ReplyLoginInfo::gid() const {
  return gid_;
}
inline void ReplyLoginInfo::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
}

// required string name = 2;
inline bool ReplyLoginInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReplyLoginInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReplyLoginInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReplyLoginInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ReplyLoginInfo::name() const {
  return *name_;
}
inline void ReplyLoginInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ReplyLoginInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ReplyLoginInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReplyLoginInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ReplyLoginInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 playerLevel = 3;
inline bool ReplyLoginInfo::has_playerlevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReplyLoginInfo::set_has_playerlevel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReplyLoginInfo::clear_has_playerlevel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReplyLoginInfo::clear_playerlevel() {
  playerlevel_ = 0;
  clear_has_playerlevel();
}
inline ::google::protobuf::int32 ReplyLoginInfo::playerlevel() const {
  return playerlevel_;
}
inline void ReplyLoginInfo::set_playerlevel(::google::protobuf::int32 value) {
  set_has_playerlevel();
  playerlevel_ = value;
}

// required int64 playerExp = 4;
inline bool ReplyLoginInfo::has_playerexp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReplyLoginInfo::set_has_playerexp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReplyLoginInfo::clear_has_playerexp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReplyLoginInfo::clear_playerexp() {
  playerexp_ = GOOGLE_LONGLONG(0);
  clear_has_playerexp();
}
inline ::google::protobuf::int64 ReplyLoginInfo::playerexp() const {
  return playerexp_;
}
inline void ReplyLoginInfo::set_playerexp(::google::protobuf::int64 value) {
  set_has_playerexp();
  playerexp_ = value;
}

// required int64 diamond = 6;
inline bool ReplyLoginInfo::has_diamond() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReplyLoginInfo::set_has_diamond() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReplyLoginInfo::clear_has_diamond() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReplyLoginInfo::clear_diamond() {
  diamond_ = GOOGLE_LONGLONG(0);
  clear_has_diamond();
}
inline ::google::protobuf::int64 ReplyLoginInfo::diamond() const {
  return diamond_;
}
inline void ReplyLoginInfo::set_diamond(::google::protobuf::int64 value) {
  set_has_diamond();
  diamond_ = value;
}

// required int64 gold = 7;
inline bool ReplyLoginInfo::has_gold() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReplyLoginInfo::set_has_gold() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReplyLoginInfo::clear_has_gold() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReplyLoginInfo::clear_gold() {
  gold_ = GOOGLE_LONGLONG(0);
  clear_has_gold();
}
inline ::google::protobuf::int64 ReplyLoginInfo::gold() const {
  return gold_;
}
inline void ReplyLoginInfo::set_gold(::google::protobuf::int64 value) {
  set_has_gold();
  gold_ = value;
}

// required int32 alterNameTimes = 8;
inline bool ReplyLoginInfo::has_alternametimes() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ReplyLoginInfo::set_has_alternametimes() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ReplyLoginInfo::clear_has_alternametimes() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ReplyLoginInfo::clear_alternametimes() {
  alternametimes_ = 0;
  clear_has_alternametimes();
}
inline ::google::protobuf::int32 ReplyLoginInfo::alternametimes() const {
  return alternametimes_;
}
inline void ReplyLoginInfo::set_alternametimes(::google::protobuf::int32 value) {
  set_has_alternametimes();
  alternametimes_ = value;
}

// required int32 vipLevel = 9;
inline bool ReplyLoginInfo::has_viplevel() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ReplyLoginInfo::set_has_viplevel() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ReplyLoginInfo::clear_has_viplevel() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ReplyLoginInfo::clear_viplevel() {
  viplevel_ = 0;
  clear_has_viplevel();
}
inline ::google::protobuf::int32 ReplyLoginInfo::viplevel() const {
  return viplevel_;
}
inline void ReplyLoginInfo::set_viplevel(::google::protobuf::int32 value) {
  set_has_viplevel();
  viplevel_ = value;
}

// required int32 vipExp = 10;
inline bool ReplyLoginInfo::has_vipexp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ReplyLoginInfo::set_has_vipexp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ReplyLoginInfo::clear_has_vipexp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ReplyLoginInfo::clear_vipexp() {
  vipexp_ = 0;
  clear_has_vipexp();
}
inline ::google::protobuf::int32 ReplyLoginInfo::vipexp() const {
  return vipexp_;
}
inline void ReplyLoginInfo::set_vipexp(::google::protobuf::int32 value) {
  set_has_vipexp();
  vipexp_ = value;
}

// required int32 heroeBag = 11;
inline bool ReplyLoginInfo::has_heroebag() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ReplyLoginInfo::set_has_heroebag() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ReplyLoginInfo::clear_has_heroebag() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ReplyLoginInfo::clear_heroebag() {
  heroebag_ = 0;
  clear_has_heroebag();
}
inline ::google::protobuf::int32 ReplyLoginInfo::heroebag() const {
  return heroebag_;
}
inline void ReplyLoginInfo::set_heroebag(::google::protobuf::int32 value) {
  set_has_heroebag();
  heroebag_ = value;
}

// required int32 expandTimes = 12;
inline bool ReplyLoginInfo::has_expandtimes() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ReplyLoginInfo::set_has_expandtimes() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ReplyLoginInfo::clear_has_expandtimes() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ReplyLoginInfo::clear_expandtimes() {
  expandtimes_ = 0;
  clear_has_expandtimes();
}
inline ::google::protobuf::int32 ReplyLoginInfo::expandtimes() const {
  return expandtimes_;
}
inline void ReplyLoginInfo::set_expandtimes(::google::protobuf::int32 value) {
  set_has_expandtimes();
  expandtimes_ = value;
}

// required int32 expandTimes2 = 33;
inline bool ReplyLoginInfo::has_expandtimes2() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ReplyLoginInfo::set_has_expandtimes2() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ReplyLoginInfo::clear_has_expandtimes2() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ReplyLoginInfo::clear_expandtimes2() {
  expandtimes2_ = 0;
  clear_has_expandtimes2();
}
inline ::google::protobuf::int32 ReplyLoginInfo::expandtimes2() const {
  return expandtimes2_;
}
inline void ReplyLoginInfo::set_expandtimes2(::google::protobuf::int32 value) {
  set_has_expandtimes2();
  expandtimes2_ = value;
}

// required string objectid = 13;
inline bool ReplyLoginInfo::has_objectid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ReplyLoginInfo::set_has_objectid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ReplyLoginInfo::clear_has_objectid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ReplyLoginInfo::clear_objectid() {
  if (objectid_ != &::google::protobuf::internal::kEmptyString) {
    objectid_->clear();
  }
  clear_has_objectid();
}
inline const ::std::string& ReplyLoginInfo::objectid() const {
  return *objectid_;
}
inline void ReplyLoginInfo::set_objectid(const ::std::string& value) {
  set_has_objectid();
  if (objectid_ == &::google::protobuf::internal::kEmptyString) {
    objectid_ = new ::std::string;
  }
  objectid_->assign(value);
}
inline void ReplyLoginInfo::set_objectid(const char* value) {
  set_has_objectid();
  if (objectid_ == &::google::protobuf::internal::kEmptyString) {
    objectid_ = new ::std::string;
  }
  objectid_->assign(value);
}
inline void ReplyLoginInfo::set_objectid(const char* value, size_t size) {
  set_has_objectid();
  if (objectid_ == &::google::protobuf::internal::kEmptyString) {
    objectid_ = new ::std::string;
  }
  objectid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReplyLoginInfo::mutable_objectid() {
  set_has_objectid();
  if (objectid_ == &::google::protobuf::internal::kEmptyString) {
    objectid_ = new ::std::string;
  }
  return objectid_;
}
inline ::std::string* ReplyLoginInfo::release_objectid() {
  clear_has_objectid();
  if (objectid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = objectid_;
    objectid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 hangMaxMap = 14;
inline bool ReplyLoginInfo::has_hangmaxmap() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ReplyLoginInfo::set_has_hangmaxmap() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ReplyLoginInfo::clear_has_hangmaxmap() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ReplyLoginInfo::clear_hangmaxmap() {
  hangmaxmap_ = 0;
  clear_has_hangmaxmap();
}
inline ::google::protobuf::int32 ReplyLoginInfo::hangmaxmap() const {
  return hangmaxmap_;
}
inline void ReplyLoginInfo::set_hangmaxmap(::google::protobuf::int32 value) {
  set_has_hangmaxmap();
  hangmaxmap_ = value;
}

// required bool killGblCnt = 15;
inline bool ReplyLoginInfo::has_killgblcnt() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ReplyLoginInfo::set_has_killgblcnt() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ReplyLoginInfo::clear_has_killgblcnt() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ReplyLoginInfo::clear_killgblcnt() {
  killgblcnt_ = false;
  clear_has_killgblcnt();
}
inline bool ReplyLoginInfo::killgblcnt() const {
  return killgblcnt_;
}
inline void ReplyLoginInfo::set_killgblcnt(bool value) {
  set_has_killgblcnt();
  killgblcnt_ = value;
}

// required bool killSuperMosterCnt = 16;
inline bool ReplyLoginInfo::has_killsupermostercnt() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ReplyLoginInfo::set_has_killsupermostercnt() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ReplyLoginInfo::clear_has_killsupermostercnt() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ReplyLoginInfo::clear_killsupermostercnt() {
  killsupermostercnt_ = false;
  clear_has_killsupermostercnt();
}
inline bool ReplyLoginInfo::killsupermostercnt() const {
  return killsupermostercnt_;
}
inline void ReplyLoginInfo::set_killsupermostercnt(bool value) {
  set_has_killsupermostercnt();
  killsupermostercnt_ = value;
}

// required string head = 17;
inline bool ReplyLoginInfo::has_head() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ReplyLoginInfo::set_has_head() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ReplyLoginInfo::clear_has_head() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ReplyLoginInfo::clear_head() {
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    head_->clear();
  }
  clear_has_head();
}
inline const ::std::string& ReplyLoginInfo::head() const {
  return *head_;
}
inline void ReplyLoginInfo::set_head(const ::std::string& value) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(value);
}
inline void ReplyLoginInfo::set_head(const char* value) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(value);
}
inline void ReplyLoginInfo::set_head(const char* value, size_t size) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReplyLoginInfo::mutable_head() {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  return head_;
}
inline ::std::string* ReplyLoginInfo::release_head() {
  clear_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = head_;
    head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .protobuf.playerInfo.PlayerGuild guildinfo = 18;
inline bool ReplyLoginInfo::has_guildinfo() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ReplyLoginInfo::set_has_guildinfo() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ReplyLoginInfo::clear_has_guildinfo() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ReplyLoginInfo::clear_guildinfo() {
  if (guildinfo_ != NULL) guildinfo_->::protobuf::playerInfo::PlayerGuild::Clear();
  clear_has_guildinfo();
}
inline const ::protobuf::playerInfo::PlayerGuild& ReplyLoginInfo::guildinfo() const {
  return guildinfo_ != NULL ? *guildinfo_ : *default_instance_->guildinfo_;
}
inline ::protobuf::playerInfo::PlayerGuild* ReplyLoginInfo::mutable_guildinfo() {
  set_has_guildinfo();
  if (guildinfo_ == NULL) guildinfo_ = new ::protobuf::playerInfo::PlayerGuild;
  return guildinfo_;
}
inline ::protobuf::playerInfo::PlayerGuild* ReplyLoginInfo::release_guildinfo() {
  clear_has_guildinfo();
  ::protobuf::playerInfo::PlayerGuild* temp = guildinfo_;
  guildinfo_ = NULL;
  return temp;
}

// optional int64 blakMarketTime = 19;
inline bool ReplyLoginInfo::has_blakmarkettime() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ReplyLoginInfo::set_has_blakmarkettime() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ReplyLoginInfo::clear_has_blakmarkettime() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ReplyLoginInfo::clear_blakmarkettime() {
  blakmarkettime_ = GOOGLE_LONGLONG(0);
  clear_has_blakmarkettime();
}
inline ::google::protobuf::int64 ReplyLoginInfo::blakmarkettime() const {
  return blakmarkettime_;
}
inline void ReplyLoginInfo::set_blakmarkettime(::google::protobuf::int64 value) {
  set_has_blakmarkettime();
  blakmarkettime_ = value;
}

// optional int64 baseSummonTime = 20;
inline bool ReplyLoginInfo::has_basesummontime() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ReplyLoginInfo::set_has_basesummontime() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ReplyLoginInfo::clear_has_basesummontime() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ReplyLoginInfo::clear_basesummontime() {
  basesummontime_ = GOOGLE_LONGLONG(0);
  clear_has_basesummontime();
}
inline ::google::protobuf::int64 ReplyLoginInfo::basesummontime() const {
  return basesummontime_;
}
inline void ReplyLoginInfo::set_basesummontime(::google::protobuf::int64 value) {
  set_has_basesummontime();
  basesummontime_ = value;
}

// optional int64 seniorSummonTime = 21;
inline bool ReplyLoginInfo::has_seniorsummontime() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ReplyLoginInfo::set_has_seniorsummontime() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ReplyLoginInfo::clear_has_seniorsummontime() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ReplyLoginInfo::clear_seniorsummontime() {
  seniorsummontime_ = GOOGLE_LONGLONG(0);
  clear_has_seniorsummontime();
}
inline ::google::protobuf::int64 ReplyLoginInfo::seniorsummontime() const {
  return seniorsummontime_;
}
inline void ReplyLoginInfo::set_seniorsummontime(::google::protobuf::int64 value) {
  set_has_seniorsummontime();
  seniorsummontime_ = value;
}

// optional int64 goldMetallurgyTime = 22;
inline bool ReplyLoginInfo::has_goldmetallurgytime() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ReplyLoginInfo::set_has_goldmetallurgytime() {
  _has_bits_[0] |= 0x00200000u;
}
inline void ReplyLoginInfo::clear_has_goldmetallurgytime() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void ReplyLoginInfo::clear_goldmetallurgytime() {
  goldmetallurgytime_ = GOOGLE_LONGLONG(0);
  clear_has_goldmetallurgytime();
}
inline ::google::protobuf::int64 ReplyLoginInfo::goldmetallurgytime() const {
  return goldmetallurgytime_;
}
inline void ReplyLoginInfo::set_goldmetallurgytime(::google::protobuf::int64 value) {
  set_has_goldmetallurgytime();
  goldmetallurgytime_ = value;
}

// optional int64 summonEnergy = 23;
inline bool ReplyLoginInfo::has_summonenergy() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void ReplyLoginInfo::set_has_summonenergy() {
  _has_bits_[0] |= 0x00400000u;
}
inline void ReplyLoginInfo::clear_has_summonenergy() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void ReplyLoginInfo::clear_summonenergy() {
  summonenergy_ = GOOGLE_LONGLONG(0);
  clear_has_summonenergy();
}
inline ::google::protobuf::int64 ReplyLoginInfo::summonenergy() const {
  return summonenergy_;
}
inline void ReplyLoginInfo::set_summonenergy(::google::protobuf::int64 value) {
  set_has_summonenergy();
  summonenergy_ = value;
}

// repeated .protobuf.common.LineupTemplate lineupTemplates = 24;
inline int ReplyLoginInfo::lineuptemplates_size() const {
  return lineuptemplates_.size();
}
inline void ReplyLoginInfo::clear_lineuptemplates() {
  lineuptemplates_.Clear();
}
inline const ::protobuf::common::LineupTemplate& ReplyLoginInfo::lineuptemplates(int index) const {
  return lineuptemplates_.Get(index);
}
inline ::protobuf::common::LineupTemplate* ReplyLoginInfo::mutable_lineuptemplates(int index) {
  return lineuptemplates_.Mutable(index);
}
inline ::protobuf::common::LineupTemplate* ReplyLoginInfo::add_lineuptemplates() {
  return lineuptemplates_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::LineupTemplate >&
ReplyLoginInfo::lineuptemplates() const {
  return lineuptemplates_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::LineupTemplate >*
ReplyLoginInfo::mutable_lineuptemplates() {
  return &lineuptemplates_;
}

// repeated .protobuf.common.KVint3264 tavernFinishTimes = 25;
inline int ReplyLoginInfo::tavernfinishtimes_size() const {
  return tavernfinishtimes_.size();
}
inline void ReplyLoginInfo::clear_tavernfinishtimes() {
  tavernfinishtimes_.Clear();
}
inline const ::protobuf::common::KVint3264& ReplyLoginInfo::tavernfinishtimes(int index) const {
  return tavernfinishtimes_.Get(index);
}
inline ::protobuf::common::KVint3264* ReplyLoginInfo::mutable_tavernfinishtimes(int index) {
  return tavernfinishtimes_.Mutable(index);
}
inline ::protobuf::common::KVint3264* ReplyLoginInfo::add_tavernfinishtimes() {
  return tavernfinishtimes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 >&
ReplyLoginInfo::tavernfinishtimes() const {
  return tavernfinishtimes_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 >*
ReplyLoginInfo::mutable_tavernfinishtimes() {
  return &tavernfinishtimes_;
}

// optional string guidance = 26;
inline bool ReplyLoginInfo::has_guidance() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void ReplyLoginInfo::set_has_guidance() {
  _has_bits_[0] |= 0x02000000u;
}
inline void ReplyLoginInfo::clear_has_guidance() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void ReplyLoginInfo::clear_guidance() {
  if (guidance_ != &::google::protobuf::internal::kEmptyString) {
    guidance_->clear();
  }
  clear_has_guidance();
}
inline const ::std::string& ReplyLoginInfo::guidance() const {
  return *guidance_;
}
inline void ReplyLoginInfo::set_guidance(const ::std::string& value) {
  set_has_guidance();
  if (guidance_ == &::google::protobuf::internal::kEmptyString) {
    guidance_ = new ::std::string;
  }
  guidance_->assign(value);
}
inline void ReplyLoginInfo::set_guidance(const char* value) {
  set_has_guidance();
  if (guidance_ == &::google::protobuf::internal::kEmptyString) {
    guidance_ = new ::std::string;
  }
  guidance_->assign(value);
}
inline void ReplyLoginInfo::set_guidance(const char* value, size_t size) {
  set_has_guidance();
  if (guidance_ == &::google::protobuf::internal::kEmptyString) {
    guidance_ = new ::std::string;
  }
  guidance_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReplyLoginInfo::mutable_guidance() {
  set_has_guidance();
  if (guidance_ == &::google::protobuf::internal::kEmptyString) {
    guidance_ = new ::std::string;
  }
  return guidance_;
}
inline ::std::string* ReplyLoginInfo::release_guidance() {
  clear_has_guidance();
  if (guidance_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guidance_;
    guidance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool isHideVip = 27;
inline bool ReplyLoginInfo::has_ishidevip() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void ReplyLoginInfo::set_has_ishidevip() {
  _has_bits_[0] |= 0x04000000u;
}
inline void ReplyLoginInfo::clear_has_ishidevip() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void ReplyLoginInfo::clear_ishidevip() {
  ishidevip_ = false;
  clear_has_ishidevip();
}
inline bool ReplyLoginInfo::ishidevip() const {
  return ishidevip_;
}
inline void ReplyLoginInfo::set_ishidevip(bool value) {
  set_has_ishidevip();
  ishidevip_ = value;
}

// optional int64 wishRefreshTime = 28;
inline bool ReplyLoginInfo::has_wishrefreshtime() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void ReplyLoginInfo::set_has_wishrefreshtime() {
  _has_bits_[0] |= 0x08000000u;
}
inline void ReplyLoginInfo::clear_has_wishrefreshtime() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void ReplyLoginInfo::clear_wishrefreshtime() {
  wishrefreshtime_ = GOOGLE_LONGLONG(0);
  clear_has_wishrefreshtime();
}
inline ::google::protobuf::int64 ReplyLoginInfo::wishrefreshtime() const {
  return wishrefreshtime_;
}
inline void ReplyLoginInfo::set_wishrefreshtime(::google::protobuf::int64 value) {
  set_has_wishrefreshtime();
  wishrefreshtime_ = value;
}

// repeated .protobuf.common.KVint3232 goldStatus = 29;
inline int ReplyLoginInfo::goldstatus_size() const {
  return goldstatus_.size();
}
inline void ReplyLoginInfo::clear_goldstatus() {
  goldstatus_.Clear();
}
inline const ::protobuf::common::KVint3232& ReplyLoginInfo::goldstatus(int index) const {
  return goldstatus_.Get(index);
}
inline ::protobuf::common::KVint3232* ReplyLoginInfo::mutable_goldstatus(int index) {
  return goldstatus_.Mutable(index);
}
inline ::protobuf::common::KVint3232* ReplyLoginInfo::add_goldstatus() {
  return goldstatus_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >&
ReplyLoginInfo::goldstatus() const {
  return goldstatus_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >*
ReplyLoginInfo::mutable_goldstatus() {
  return &goldstatus_;
}

// optional int32 town = 30;
inline bool ReplyLoginInfo::has_town() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void ReplyLoginInfo::set_has_town() {
  _has_bits_[0] |= 0x20000000u;
}
inline void ReplyLoginInfo::clear_has_town() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void ReplyLoginInfo::clear_town() {
  town_ = 0;
  clear_has_town();
}
inline ::google::protobuf::int32 ReplyLoginInfo::town() const {
  return town_;
}
inline void ReplyLoginInfo::set_town(::google::protobuf::int32 value) {
  set_has_town();
  town_ = value;
}

// optional bool isKillBoss = 31;
inline bool ReplyLoginInfo::has_iskillboss() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void ReplyLoginInfo::set_has_iskillboss() {
  _has_bits_[0] |= 0x40000000u;
}
inline void ReplyLoginInfo::clear_has_iskillboss() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void ReplyLoginInfo::clear_iskillboss() {
  iskillboss_ = false;
  clear_has_iskillboss();
}
inline bool ReplyLoginInfo::iskillboss() const {
  return iskillboss_;
}
inline void ReplyLoginInfo::set_iskillboss(bool value) {
  set_has_iskillboss();
  iskillboss_ = value;
}

// optional int32 headFrame = 32;
inline bool ReplyLoginInfo::has_headframe() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void ReplyLoginInfo::set_has_headframe() {
  _has_bits_[0] |= 0x80000000u;
}
inline void ReplyLoginInfo::clear_has_headframe() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void ReplyLoginInfo::clear_headframe() {
  headframe_ = 0;
  clear_has_headframe();
}
inline ::google::protobuf::int32 ReplyLoginInfo::headframe() const {
  return headframe_;
}
inline void ReplyLoginInfo::set_headframe(::google::protobuf::int32 value) {
  set_has_headframe();
  headframe_ = value;
}

// optional string characterName = 34;
inline bool ReplyLoginInfo::has_charactername() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void ReplyLoginInfo::set_has_charactername() {
  _has_bits_[1] |= 0x00000001u;
}
inline void ReplyLoginInfo::clear_has_charactername() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void ReplyLoginInfo::clear_charactername() {
  if (charactername_ != &::google::protobuf::internal::kEmptyString) {
    charactername_->clear();
  }
  clear_has_charactername();
}
inline const ::std::string& ReplyLoginInfo::charactername() const {
  return *charactername_;
}
inline void ReplyLoginInfo::set_charactername(const ::std::string& value) {
  set_has_charactername();
  if (charactername_ == &::google::protobuf::internal::kEmptyString) {
    charactername_ = new ::std::string;
  }
  charactername_->assign(value);
}
inline void ReplyLoginInfo::set_charactername(const char* value) {
  set_has_charactername();
  if (charactername_ == &::google::protobuf::internal::kEmptyString) {
    charactername_ = new ::std::string;
  }
  charactername_->assign(value);
}
inline void ReplyLoginInfo::set_charactername(const char* value, size_t size) {
  set_has_charactername();
  if (charactername_ == &::google::protobuf::internal::kEmptyString) {
    charactername_ = new ::std::string;
  }
  charactername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReplyLoginInfo::mutable_charactername() {
  set_has_charactername();
  if (charactername_ == &::google::protobuf::internal::kEmptyString) {
    charactername_ = new ::std::string;
  }
  return charactername_;
}
inline ::std::string* ReplyLoginInfo::release_charactername() {
  clear_has_charactername();
  if (charactername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = charactername_;
    charactername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 sex = 35;
inline bool ReplyLoginInfo::has_sex() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void ReplyLoginInfo::set_has_sex() {
  _has_bits_[1] |= 0x00000002u;
}
inline void ReplyLoginInfo::clear_has_sex() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void ReplyLoginInfo::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 ReplyLoginInfo::sex() const {
  return sex_;
}
inline void ReplyLoginInfo::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// optional string city = 36;
inline bool ReplyLoginInfo::has_city() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void ReplyLoginInfo::set_has_city() {
  _has_bits_[1] |= 0x00000004u;
}
inline void ReplyLoginInfo::clear_has_city() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void ReplyLoginInfo::clear_city() {
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    city_->clear();
  }
  clear_has_city();
}
inline const ::std::string& ReplyLoginInfo::city() const {
  return *city_;
}
inline void ReplyLoginInfo::set_city(const ::std::string& value) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  city_->assign(value);
}
inline void ReplyLoginInfo::set_city(const char* value) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  city_->assign(value);
}
inline void ReplyLoginInfo::set_city(const char* value, size_t size) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  city_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReplyLoginInfo::mutable_city() {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  return city_;
}
inline ::std::string* ReplyLoginInfo::release_city() {
  clear_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = city_;
    city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 serverid = 37;
inline bool ReplyLoginInfo::has_serverid() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void ReplyLoginInfo::set_has_serverid() {
  _has_bits_[1] |= 0x00000008u;
}
inline void ReplyLoginInfo::clear_has_serverid() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void ReplyLoginInfo::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
inline ::google::protobuf::int32 ReplyLoginInfo::serverid() const {
  return serverid_;
}
inline void ReplyLoginInfo::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
}

// optional bool playerCheck = 38;
inline bool ReplyLoginInfo::has_playercheck() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void ReplyLoginInfo::set_has_playercheck() {
  _has_bits_[1] |= 0x00000010u;
}
inline void ReplyLoginInfo::clear_has_playercheck() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void ReplyLoginInfo::clear_playercheck() {
  playercheck_ = false;
  clear_has_playercheck();
}
inline bool ReplyLoginInfo::playercheck() const {
  return playercheck_;
}
inline void ReplyLoginInfo::set_playercheck(bool value) {
  set_has_playercheck();
  playercheck_ = value;
}

// optional .protobuf.playerInfo.ObsessedState obsessedState = 39;
inline bool ReplyLoginInfo::has_obsessedstate() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void ReplyLoginInfo::set_has_obsessedstate() {
  _has_bits_[1] |= 0x00000020u;
}
inline void ReplyLoginInfo::clear_has_obsessedstate() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void ReplyLoginInfo::clear_obsessedstate() {
  if (obsessedstate_ != NULL) obsessedstate_->::protobuf::playerInfo::ObsessedState::Clear();
  clear_has_obsessedstate();
}
inline const ::protobuf::playerInfo::ObsessedState& ReplyLoginInfo::obsessedstate() const {
  return obsessedstate_ != NULL ? *obsessedstate_ : *default_instance_->obsessedstate_;
}
inline ::protobuf::playerInfo::ObsessedState* ReplyLoginInfo::mutable_obsessedstate() {
  set_has_obsessedstate();
  if (obsessedstate_ == NULL) obsessedstate_ = new ::protobuf::playerInfo::ObsessedState;
  return obsessedstate_;
}
inline ::protobuf::playerInfo::ObsessedState* ReplyLoginInfo::release_obsessedstate() {
  clear_has_obsessedstate();
  ::protobuf::playerInfo::ObsessedState* temp = obsessedstate_;
  obsessedstate_ = NULL;
  return temp;
}

// optional int32 power = 40;
inline bool ReplyLoginInfo::has_power() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void ReplyLoginInfo::set_has_power() {
  _has_bits_[1] |= 0x00000040u;
}
inline void ReplyLoginInfo::clear_has_power() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void ReplyLoginInfo::clear_power() {
  power_ = 0;
  clear_has_power();
}
inline ::google::protobuf::int32 ReplyLoginInfo::power() const {
  return power_;
}
inline void ReplyLoginInfo::set_power(::google::protobuf::int32 value) {
  set_has_power();
  power_ = value;
}

// -------------------------------------------------------------------

// ObsessedState

// optional int32 logInMine = 1;
inline bool ObsessedState::has_loginmine() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObsessedState::set_has_loginmine() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ObsessedState::clear_has_loginmine() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ObsessedState::clear_loginmine() {
  loginmine_ = 0;
  clear_has_loginmine();
}
inline ::google::protobuf::int32 ObsessedState::loginmine() const {
  return loginmine_;
}
inline void ObsessedState::set_loginmine(::google::protobuf::int32 value) {
  set_has_loginmine();
  loginmine_ = value;
}

// optional int64 serverTime = 2;
inline bool ObsessedState::has_servertime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ObsessedState::set_has_servertime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ObsessedState::clear_has_servertime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ObsessedState::clear_servertime() {
  servertime_ = GOOGLE_LONGLONG(0);
  clear_has_servertime();
}
inline ::google::protobuf::int64 ObsessedState::servertime() const {
  return servertime_;
}
inline void ObsessedState::set_servertime(::google::protobuf::int64 value) {
  set_has_servertime();
  servertime_ = value;
}

// optional bool obsessedOpen = 3;
inline bool ObsessedState::has_obsessedopen() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ObsessedState::set_has_obsessedopen() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ObsessedState::clear_has_obsessedopen() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ObsessedState::clear_obsessedopen() {
  obsessedopen_ = false;
  clear_has_obsessedopen();
}
inline bool ObsessedState::obsessedopen() const {
  return obsessedopen_;
}
inline void ObsessedState::set_obsessedopen(bool value) {
  set_has_obsessedopen();
  obsessedopen_ = value;
}

// -------------------------------------------------------------------

// ReplyLoginState

// optional int64 championStartTime = 1;
inline bool ReplyLoginState::has_championstarttime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReplyLoginState::set_has_championstarttime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReplyLoginState::clear_has_championstarttime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReplyLoginState::clear_championstarttime() {
  championstarttime_ = GOOGLE_LONGLONG(0);
  clear_has_championstarttime();
}
inline ::google::protobuf::int64 ReplyLoginState::championstarttime() const {
  return championstarttime_;
}
inline void ReplyLoginState::set_championstarttime(::google::protobuf::int64 value) {
  set_has_championstarttime();
  championstarttime_ = value;
}

// optional bool championFirst = 2;
inline bool ReplyLoginState::has_championfirst() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReplyLoginState::set_has_championfirst() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReplyLoginState::clear_has_championfirst() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReplyLoginState::clear_championfirst() {
  championfirst_ = false;
  clear_has_championfirst();
}
inline bool ReplyLoginState::championfirst() const {
  return championfirst_;
}
inline void ReplyLoginState::set_championfirst(bool value) {
  set_has_championfirst();
  championfirst_ = value;
}

// optional int64 exchargeMarketFinish = 3;
inline bool ReplyLoginState::has_exchargemarketfinish() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReplyLoginState::set_has_exchargemarketfinish() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReplyLoginState::clear_has_exchargemarketfinish() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReplyLoginState::clear_exchargemarketfinish() {
  exchargemarketfinish_ = GOOGLE_LONGLONG(0);
  clear_has_exchargemarketfinish();
}
inline ::google::protobuf::int64 ReplyLoginState::exchargemarketfinish() const {
  return exchargemarketfinish_;
}
inline void ReplyLoginState::set_exchargemarketfinish(::google::protobuf::int64 value) {
  set_has_exchargemarketfinish();
  exchargemarketfinish_ = value;
}

// optional int64 blakMarketTime = 4;
inline bool ReplyLoginState::has_blakmarkettime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReplyLoginState::set_has_blakmarkettime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReplyLoginState::clear_has_blakmarkettime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReplyLoginState::clear_blakmarkettime() {
  blakmarkettime_ = GOOGLE_LONGLONG(0);
  clear_has_blakmarkettime();
}
inline ::google::protobuf::int64 ReplyLoginState::blakmarkettime() const {
  return blakmarkettime_;
}
inline void ReplyLoginState::set_blakmarkettime(::google::protobuf::int64 value) {
  set_has_blakmarkettime();
  blakmarkettime_ = value;
}

// optional int64 baseSummonTime = 5;
inline bool ReplyLoginState::has_basesummontime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReplyLoginState::set_has_basesummontime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReplyLoginState::clear_has_basesummontime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReplyLoginState::clear_basesummontime() {
  basesummontime_ = GOOGLE_LONGLONG(0);
  clear_has_basesummontime();
}
inline ::google::protobuf::int64 ReplyLoginState::basesummontime() const {
  return basesummontime_;
}
inline void ReplyLoginState::set_basesummontime(::google::protobuf::int64 value) {
  set_has_basesummontime();
  basesummontime_ = value;
}

// optional int64 seniorSummonTime = 6;
inline bool ReplyLoginState::has_seniorsummontime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReplyLoginState::set_has_seniorsummontime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReplyLoginState::clear_has_seniorsummontime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReplyLoginState::clear_seniorsummontime() {
  seniorsummontime_ = GOOGLE_LONGLONG(0);
  clear_has_seniorsummontime();
}
inline ::google::protobuf::int64 ReplyLoginState::seniorsummontime() const {
  return seniorsummontime_;
}
inline void ReplyLoginState::set_seniorsummontime(::google::protobuf::int64 value) {
  set_has_seniorsummontime();
  seniorsummontime_ = value;
}

// optional int64 goldMetallurgyTime = 7;
inline bool ReplyLoginState::has_goldmetallurgytime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ReplyLoginState::set_has_goldmetallurgytime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ReplyLoginState::clear_has_goldmetallurgytime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ReplyLoginState::clear_goldmetallurgytime() {
  goldmetallurgytime_ = GOOGLE_LONGLONG(0);
  clear_has_goldmetallurgytime();
}
inline ::google::protobuf::int64 ReplyLoginState::goldmetallurgytime() const {
  return goldmetallurgytime_;
}
inline void ReplyLoginState::set_goldmetallurgytime(::google::protobuf::int64 value) {
  set_has_goldmetallurgytime();
  goldmetallurgytime_ = value;
}

// repeated .protobuf.common.KVint3264 tavernFinishTimes = 8;
inline int ReplyLoginState::tavernfinishtimes_size() const {
  return tavernfinishtimes_.size();
}
inline void ReplyLoginState::clear_tavernfinishtimes() {
  tavernfinishtimes_.Clear();
}
inline const ::protobuf::common::KVint3264& ReplyLoginState::tavernfinishtimes(int index) const {
  return tavernfinishtimes_.Get(index);
}
inline ::protobuf::common::KVint3264* ReplyLoginState::mutable_tavernfinishtimes(int index) {
  return tavernfinishtimes_.Mutable(index);
}
inline ::protobuf::common::KVint3264* ReplyLoginState::add_tavernfinishtimes() {
  return tavernfinishtimes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 >&
ReplyLoginState::tavernfinishtimes() const {
  return tavernfinishtimes_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 >*
ReplyLoginState::mutable_tavernfinishtimes() {
  return &tavernfinishtimes_;
}

// optional int64 wishRefreshTime = 9;
inline bool ReplyLoginState::has_wishrefreshtime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ReplyLoginState::set_has_wishrefreshtime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ReplyLoginState::clear_has_wishrefreshtime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ReplyLoginState::clear_wishrefreshtime() {
  wishrefreshtime_ = GOOGLE_LONGLONG(0);
  clear_has_wishrefreshtime();
}
inline ::google::protobuf::int64 ReplyLoginState::wishrefreshtime() const {
  return wishrefreshtime_;
}
inline void ReplyLoginState::set_wishrefreshtime(::google::protobuf::int64 value) {
  set_has_wishrefreshtime();
  wishrefreshtime_ = value;
}

// optional int32 timezone = 10;
inline bool ReplyLoginState::has_timezone() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ReplyLoginState::set_has_timezone() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ReplyLoginState::clear_has_timezone() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ReplyLoginState::clear_timezone() {
  timezone_ = 0;
  clear_has_timezone();
}
inline ::google::protobuf::int32 ReplyLoginState::timezone() const {
  return timezone_;
}
inline void ReplyLoginState::set_timezone(::google::protobuf::int32 value) {
  set_has_timezone();
  timezone_ = value;
}

// optional bool battle = 11;
inline bool ReplyLoginState::has_battle() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ReplyLoginState::set_has_battle() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ReplyLoginState::clear_has_battle() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ReplyLoginState::clear_battle() {
  battle_ = false;
  clear_has_battle();
}
inline bool ReplyLoginState::battle() const {
  return battle_;
}
inline void ReplyLoginState::set_battle(bool value) {
  set_has_battle();
  battle_ = value;
}

// optional int32 dungeonid = 12;
inline bool ReplyLoginState::has_dungeonid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ReplyLoginState::set_has_dungeonid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ReplyLoginState::clear_has_dungeonid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ReplyLoginState::clear_dungeonid() {
  dungeonid_ = 0;
  clear_has_dungeonid();
}
inline ::google::protobuf::int32 ReplyLoginState::dungeonid() const {
  return dungeonid_;
}
inline void ReplyLoginState::set_dungeonid(::google::protobuf::int32 value) {
  set_has_dungeonid();
  dungeonid_ = value;
}

// optional int64 dungeontime = 13;
inline bool ReplyLoginState::has_dungeontime() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ReplyLoginState::set_has_dungeontime() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ReplyLoginState::clear_has_dungeontime() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ReplyLoginState::clear_dungeontime() {
  dungeontime_ = GOOGLE_LONGLONG(0);
  clear_has_dungeontime();
}
inline ::google::protobuf::int64 ReplyLoginState::dungeontime() const {
  return dungeontime_;
}
inline void ReplyLoginState::set_dungeontime(::google::protobuf::int64 value) {
  set_has_dungeontime();
  dungeontime_ = value;
}

// optional int32 nextdungeon = 14;
inline bool ReplyLoginState::has_nextdungeon() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ReplyLoginState::set_has_nextdungeon() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ReplyLoginState::clear_has_nextdungeon() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ReplyLoginState::clear_nextdungeon() {
  nextdungeon_ = 0;
  clear_has_nextdungeon();
}
inline ::google::protobuf::int32 ReplyLoginState::nextdungeon() const {
  return nextdungeon_;
}
inline void ReplyLoginState::set_nextdungeon(::google::protobuf::int32 value) {
  set_has_nextdungeon();
  nextdungeon_ = value;
}

// optional string serverName = 15;
inline bool ReplyLoginState::has_servername() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ReplyLoginState::set_has_servername() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ReplyLoginState::clear_has_servername() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ReplyLoginState::clear_servername() {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    servername_->clear();
  }
  clear_has_servername();
}
inline const ::std::string& ReplyLoginState::servername() const {
  return *servername_;
}
inline void ReplyLoginState::set_servername(const ::std::string& value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
}
inline void ReplyLoginState::set_servername(const char* value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
}
inline void ReplyLoginState::set_servername(const char* value, size_t size) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReplyLoginState::mutable_servername() {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  return servername_;
}
inline ::std::string* ReplyLoginState::release_servername() {
  clear_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = servername_;
    servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 createTime = 16;
inline bool ReplyLoginState::has_createtime() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ReplyLoginState::set_has_createtime() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ReplyLoginState::clear_has_createtime() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ReplyLoginState::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 ReplyLoginState::createtime() const {
  return createtime_;
}
inline void ReplyLoginState::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// optional int64 triggerTime = 17;
inline bool ReplyLoginState::has_triggertime() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ReplyLoginState::set_has_triggertime() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ReplyLoginState::clear_has_triggertime() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ReplyLoginState::clear_triggertime() {
  triggertime_ = GOOGLE_LONGLONG(0);
  clear_has_triggertime();
}
inline ::google::protobuf::int64 ReplyLoginState::triggertime() const {
  return triggertime_;
}
inline void ReplyLoginState::set_triggertime(::google::protobuf::int64 value) {
  set_has_triggertime();
  triggertime_ = value;
}

// optional int64 newTime = 18;
inline bool ReplyLoginState::has_newtime() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ReplyLoginState::set_has_newtime() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ReplyLoginState::clear_has_newtime() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ReplyLoginState::clear_newtime() {
  newtime_ = GOOGLE_LONGLONG(0);
  clear_has_newtime();
}
inline ::google::protobuf::int64 ReplyLoginState::newtime() const {
  return newtime_;
}
inline void ReplyLoginState::set_newtime(::google::protobuf::int64 value) {
  set_has_newtime();
  newtime_ = value;
}

// -------------------------------------------------------------------

// ReplyAlterHead

// required string id = 1;
inline bool ReplyAlterHead::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReplyAlterHead::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReplyAlterHead::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReplyAlterHead::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& ReplyAlterHead::id() const {
  return *id_;
}
inline void ReplyAlterHead::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void ReplyAlterHead::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void ReplyAlterHead::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReplyAlterHead::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* ReplyAlterHead::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int64 time = 2;
inline bool ReplyAlterHead::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReplyAlterHead::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReplyAlterHead::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReplyAlterHead::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 ReplyAlterHead::time() const {
  return time_;
}
inline void ReplyAlterHead::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// optional int64 lastUseTime = 3;
inline bool ReplyAlterHead::has_lastusetime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReplyAlterHead::set_has_lastusetime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReplyAlterHead::clear_has_lastusetime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReplyAlterHead::clear_lastusetime() {
  lastusetime_ = GOOGLE_LONGLONG(0);
  clear_has_lastusetime();
}
inline ::google::protobuf::int64 ReplyAlterHead::lastusetime() const {
  return lastusetime_;
}
inline void ReplyAlterHead::set_lastusetime(::google::protobuf::int64 value) {
  set_has_lastusetime();
  lastusetime_ = value;
}

// -------------------------------------------------------------------

// HeadList

// repeated .protobuf.playerInfo.ReplyAlterHead heads = 1;
inline int HeadList::heads_size() const {
  return heads_.size();
}
inline void HeadList::clear_heads() {
  heads_.Clear();
}
inline const ::protobuf::playerInfo::ReplyAlterHead& HeadList::heads(int index) const {
  return heads_.Get(index);
}
inline ::protobuf::playerInfo::ReplyAlterHead* HeadList::mutable_heads(int index) {
  return heads_.Mutable(index);
}
inline ::protobuf::playerInfo::ReplyAlterHead* HeadList::add_heads() {
  return heads_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::playerInfo::ReplyAlterHead >&
HeadList::heads() const {
  return heads_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::playerInfo::ReplyAlterHead >*
HeadList::mutable_heads() {
  return &heads_;
}

// -------------------------------------------------------------------

// CommonPlayerInfo

// required int32 level = 1;
inline bool CommonPlayerInfo::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommonPlayerInfo::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommonPlayerInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommonPlayerInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 CommonPlayerInfo::level() const {
  return level_;
}
inline void CommonPlayerInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// required string name = 2;
inline bool CommonPlayerInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommonPlayerInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommonPlayerInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommonPlayerInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CommonPlayerInfo::name() const {
  return *name_;
}
inline void CommonPlayerInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CommonPlayerInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CommonPlayerInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommonPlayerInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CommonPlayerInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string head = 3;
inline bool CommonPlayerInfo::has_head() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommonPlayerInfo::set_has_head() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommonPlayerInfo::clear_has_head() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommonPlayerInfo::clear_head() {
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    head_->clear();
  }
  clear_has_head();
}
inline const ::std::string& CommonPlayerInfo::head() const {
  return *head_;
}
inline void CommonPlayerInfo::set_head(const ::std::string& value) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(value);
}
inline void CommonPlayerInfo::set_head(const char* value) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(value);
}
inline void CommonPlayerInfo::set_head(const char* value, size_t size) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommonPlayerInfo::mutable_head() {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  return head_;
}
inline ::std::string* CommonPlayerInfo::release_head() {
  clear_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = head_;
    head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 gid = 4;
inline bool CommonPlayerInfo::has_gid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CommonPlayerInfo::set_has_gid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CommonPlayerInfo::clear_has_gid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CommonPlayerInfo::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
inline ::google::protobuf::int32 CommonPlayerInfo::gid() const {
  return gid_;
}
inline void CommonPlayerInfo::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
}

// required int64 playerExp = 5;
inline bool CommonPlayerInfo::has_playerexp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CommonPlayerInfo::set_has_playerexp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CommonPlayerInfo::clear_has_playerexp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CommonPlayerInfo::clear_playerexp() {
  playerexp_ = GOOGLE_LONGLONG(0);
  clear_has_playerexp();
}
inline ::google::protobuf::int64 CommonPlayerInfo::playerexp() const {
  return playerexp_;
}
inline void CommonPlayerInfo::set_playerexp(::google::protobuf::int64 value) {
  set_has_playerexp();
  playerexp_ = value;
}

// required string playerId = 6;
inline bool CommonPlayerInfo::has_playerid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CommonPlayerInfo::set_has_playerid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CommonPlayerInfo::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CommonPlayerInfo::clear_playerid() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    playerid_->clear();
  }
  clear_has_playerid();
}
inline const ::std::string& CommonPlayerInfo::playerid() const {
  return *playerid_;
}
inline void CommonPlayerInfo::set_playerid(const ::std::string& value) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(value);
}
inline void CommonPlayerInfo::set_playerid(const char* value) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(value);
}
inline void CommonPlayerInfo::set_playerid(const char* value, size_t size) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommonPlayerInfo::mutable_playerid() {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  return playerid_;
}
inline ::std::string* CommonPlayerInfo::release_playerid() {
  clear_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playerid_;
    playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bool isFreind = 7;
inline bool CommonPlayerInfo::has_isfreind() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CommonPlayerInfo::set_has_isfreind() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CommonPlayerInfo::clear_has_isfreind() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CommonPlayerInfo::clear_isfreind() {
  isfreind_ = false;
  clear_has_isfreind();
}
inline bool CommonPlayerInfo::isfreind() const {
  return isfreind_;
}
inline void CommonPlayerInfo::set_isfreind(bool value) {
  set_has_isfreind();
  isfreind_ = value;
}

// repeated .protobuf.playerInfo.Achievement achievement = 8;
inline int CommonPlayerInfo::achievement_size() const {
  return achievement_.size();
}
inline void CommonPlayerInfo::clear_achievement() {
  achievement_.Clear();
}
inline const ::protobuf::playerInfo::Achievement& CommonPlayerInfo::achievement(int index) const {
  return achievement_.Get(index);
}
inline ::protobuf::playerInfo::Achievement* CommonPlayerInfo::mutable_achievement(int index) {
  return achievement_.Mutable(index);
}
inline ::protobuf::playerInfo::Achievement* CommonPlayerInfo::add_achievement() {
  return achievement_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::playerInfo::Achievement >&
CommonPlayerInfo::achievement() const {
  return achievement_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::playerInfo::Achievement >*
CommonPlayerInfo::mutable_achievement() {
  return &achievement_;
}

// optional string guildObjId = 15;
inline bool CommonPlayerInfo::has_guildobjid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CommonPlayerInfo::set_has_guildobjid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CommonPlayerInfo::clear_has_guildobjid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CommonPlayerInfo::clear_guildobjid() {
  if (guildobjid_ != &::google::protobuf::internal::kEmptyString) {
    guildobjid_->clear();
  }
  clear_has_guildobjid();
}
inline const ::std::string& CommonPlayerInfo::guildobjid() const {
  return *guildobjid_;
}
inline void CommonPlayerInfo::set_guildobjid(const ::std::string& value) {
  set_has_guildobjid();
  if (guildobjid_ == &::google::protobuf::internal::kEmptyString) {
    guildobjid_ = new ::std::string;
  }
  guildobjid_->assign(value);
}
inline void CommonPlayerInfo::set_guildobjid(const char* value) {
  set_has_guildobjid();
  if (guildobjid_ == &::google::protobuf::internal::kEmptyString) {
    guildobjid_ = new ::std::string;
  }
  guildobjid_->assign(value);
}
inline void CommonPlayerInfo::set_guildobjid(const char* value, size_t size) {
  set_has_guildobjid();
  if (guildobjid_ == &::google::protobuf::internal::kEmptyString) {
    guildobjid_ = new ::std::string;
  }
  guildobjid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommonPlayerInfo::mutable_guildobjid() {
  set_has_guildobjid();
  if (guildobjid_ == &::google::protobuf::internal::kEmptyString) {
    guildobjid_ = new ::std::string;
  }
  return guildobjid_;
}
inline ::std::string* CommonPlayerInfo::release_guildobjid() {
  clear_has_guildobjid();
  if (guildobjid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildobjid_;
    guildobjid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 guildId = 9;
inline bool CommonPlayerInfo::has_guildid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CommonPlayerInfo::set_has_guildid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CommonPlayerInfo::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CommonPlayerInfo::clear_guildid() {
  guildid_ = 0;
  clear_has_guildid();
}
inline ::google::protobuf::int32 CommonPlayerInfo::guildid() const {
  return guildid_;
}
inline void CommonPlayerInfo::set_guildid(::google::protobuf::int32 value) {
  set_has_guildid();
  guildid_ = value;
}

// optional string guildIcon = 10;
inline bool CommonPlayerInfo::has_guildicon() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CommonPlayerInfo::set_has_guildicon() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CommonPlayerInfo::clear_has_guildicon() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CommonPlayerInfo::clear_guildicon() {
  if (guildicon_ != &::google::protobuf::internal::kEmptyString) {
    guildicon_->clear();
  }
  clear_has_guildicon();
}
inline const ::std::string& CommonPlayerInfo::guildicon() const {
  return *guildicon_;
}
inline void CommonPlayerInfo::set_guildicon(const ::std::string& value) {
  set_has_guildicon();
  if (guildicon_ == &::google::protobuf::internal::kEmptyString) {
    guildicon_ = new ::std::string;
  }
  guildicon_->assign(value);
}
inline void CommonPlayerInfo::set_guildicon(const char* value) {
  set_has_guildicon();
  if (guildicon_ == &::google::protobuf::internal::kEmptyString) {
    guildicon_ = new ::std::string;
  }
  guildicon_->assign(value);
}
inline void CommonPlayerInfo::set_guildicon(const char* value, size_t size) {
  set_has_guildicon();
  if (guildicon_ == &::google::protobuf::internal::kEmptyString) {
    guildicon_ = new ::std::string;
  }
  guildicon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommonPlayerInfo::mutable_guildicon() {
  set_has_guildicon();
  if (guildicon_ == &::google::protobuf::internal::kEmptyString) {
    guildicon_ = new ::std::string;
  }
  return guildicon_;
}
inline ::std::string* CommonPlayerInfo::release_guildicon() {
  clear_has_guildicon();
  if (guildicon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildicon_;
    guildicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string guildName = 11;
inline bool CommonPlayerInfo::has_guildname() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CommonPlayerInfo::set_has_guildname() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CommonPlayerInfo::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CommonPlayerInfo::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    guildname_->clear();
  }
  clear_has_guildname();
}
inline const ::std::string& CommonPlayerInfo::guildname() const {
  return *guildname_;
}
inline void CommonPlayerInfo::set_guildname(const ::std::string& value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void CommonPlayerInfo::set_guildname(const char* value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void CommonPlayerInfo::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommonPlayerInfo::mutable_guildname() {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  return guildname_;
}
inline ::std::string* CommonPlayerInfo::release_guildname() {
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .protobuf.common.LineupDetail defineer = 12;
inline bool CommonPlayerInfo::has_defineer() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CommonPlayerInfo::set_has_defineer() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CommonPlayerInfo::clear_has_defineer() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CommonPlayerInfo::clear_defineer() {
  if (defineer_ != NULL) defineer_->::protobuf::common::LineupDetail::Clear();
  clear_has_defineer();
}
inline const ::protobuf::common::LineupDetail& CommonPlayerInfo::defineer() const {
  return defineer_ != NULL ? *defineer_ : *default_instance_->defineer_;
}
inline ::protobuf::common::LineupDetail* CommonPlayerInfo::mutable_defineer() {
  set_has_defineer();
  if (defineer_ == NULL) defineer_ = new ::protobuf::common::LineupDetail;
  return defineer_;
}
inline ::protobuf::common::LineupDetail* CommonPlayerInfo::release_defineer() {
  clear_has_defineer();
  ::protobuf::common::LineupDetail* temp = defineer_;
  defineer_ = NULL;
  return temp;
}

// optional int32 vipLevel = 13;
inline bool CommonPlayerInfo::has_viplevel() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CommonPlayerInfo::set_has_viplevel() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CommonPlayerInfo::clear_has_viplevel() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CommonPlayerInfo::clear_viplevel() {
  viplevel_ = 0;
  clear_has_viplevel();
}
inline ::google::protobuf::int32 CommonPlayerInfo::viplevel() const {
  return viplevel_;
}
inline void CommonPlayerInfo::set_viplevel(::google::protobuf::int32 value) {
  set_has_viplevel();
  viplevel_ = value;
}

// optional int32 headFrame = 14;
inline bool CommonPlayerInfo::has_headframe() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CommonPlayerInfo::set_has_headframe() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CommonPlayerInfo::clear_has_headframe() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CommonPlayerInfo::clear_headframe() {
  headframe_ = 0;
  clear_has_headframe();
}
inline ::google::protobuf::int32 CommonPlayerInfo::headframe() const {
  return headframe_;
}
inline void CommonPlayerInfo::set_headframe(::google::protobuf::int32 value) {
  set_has_headframe();
  headframe_ = value;
}

// optional string characterName = 16;
inline bool CommonPlayerInfo::has_charactername() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CommonPlayerInfo::set_has_charactername() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CommonPlayerInfo::clear_has_charactername() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CommonPlayerInfo::clear_charactername() {
  if (charactername_ != &::google::protobuf::internal::kEmptyString) {
    charactername_->clear();
  }
  clear_has_charactername();
}
inline const ::std::string& CommonPlayerInfo::charactername() const {
  return *charactername_;
}
inline void CommonPlayerInfo::set_charactername(const ::std::string& value) {
  set_has_charactername();
  if (charactername_ == &::google::protobuf::internal::kEmptyString) {
    charactername_ = new ::std::string;
  }
  charactername_->assign(value);
}
inline void CommonPlayerInfo::set_charactername(const char* value) {
  set_has_charactername();
  if (charactername_ == &::google::protobuf::internal::kEmptyString) {
    charactername_ = new ::std::string;
  }
  charactername_->assign(value);
}
inline void CommonPlayerInfo::set_charactername(const char* value, size_t size) {
  set_has_charactername();
  if (charactername_ == &::google::protobuf::internal::kEmptyString) {
    charactername_ = new ::std::string;
  }
  charactername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommonPlayerInfo::mutable_charactername() {
  set_has_charactername();
  if (charactername_ == &::google::protobuf::internal::kEmptyString) {
    charactername_ = new ::std::string;
  }
  return charactername_;
}
inline ::std::string* CommonPlayerInfo::release_charactername() {
  clear_has_charactername();
  if (charactername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = charactername_;
    charactername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 sex = 17;
inline bool CommonPlayerInfo::has_sex() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CommonPlayerInfo::set_has_sex() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CommonPlayerInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CommonPlayerInfo::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 CommonPlayerInfo::sex() const {
  return sex_;
}
inline void CommonPlayerInfo::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// optional string city = 18;
inline bool CommonPlayerInfo::has_city() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CommonPlayerInfo::set_has_city() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CommonPlayerInfo::clear_has_city() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CommonPlayerInfo::clear_city() {
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    city_->clear();
  }
  clear_has_city();
}
inline const ::std::string& CommonPlayerInfo::city() const {
  return *city_;
}
inline void CommonPlayerInfo::set_city(const ::std::string& value) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  city_->assign(value);
}
inline void CommonPlayerInfo::set_city(const char* value) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  city_->assign(value);
}
inline void CommonPlayerInfo::set_city(const char* value, size_t size) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  city_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommonPlayerInfo::mutable_city() {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  return city_;
}
inline ::std::string* CommonPlayerInfo::release_city() {
  clear_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = city_;
    city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 serverid = 19;
inline bool CommonPlayerInfo::has_serverid() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CommonPlayerInfo::set_has_serverid() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CommonPlayerInfo::clear_has_serverid() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CommonPlayerInfo::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
inline ::google::protobuf::int32 CommonPlayerInfo::serverid() const {
  return serverid_;
}
inline void CommonPlayerInfo::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
}

// optional .protobuf.common.LineupTemplate squadShow = 20;
inline bool CommonPlayerInfo::has_squadshow() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CommonPlayerInfo::set_has_squadshow() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CommonPlayerInfo::clear_has_squadshow() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CommonPlayerInfo::clear_squadshow() {
  if (squadshow_ != NULL) squadshow_->::protobuf::common::LineupTemplate::Clear();
  clear_has_squadshow();
}
inline const ::protobuf::common::LineupTemplate& CommonPlayerInfo::squadshow() const {
  return squadshow_ != NULL ? *squadshow_ : *default_instance_->squadshow_;
}
inline ::protobuf::common::LineupTemplate* CommonPlayerInfo::mutable_squadshow() {
  set_has_squadshow();
  if (squadshow_ == NULL) squadshow_ = new ::protobuf::common::LineupTemplate;
  return squadshow_;
}
inline ::protobuf::common::LineupTemplate* CommonPlayerInfo::release_squadshow() {
  clear_has_squadshow();
  ::protobuf::common::LineupTemplate* temp = squadshow_;
  squadshow_ = NULL;
  return temp;
}

// optional int32 hangMaxMap = 21;
inline bool CommonPlayerInfo::has_hangmaxmap() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CommonPlayerInfo::set_has_hangmaxmap() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CommonPlayerInfo::clear_has_hangmaxmap() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CommonPlayerInfo::clear_hangmaxmap() {
  hangmaxmap_ = 0;
  clear_has_hangmaxmap();
}
inline ::google::protobuf::int32 CommonPlayerInfo::hangmaxmap() const {
  return hangmaxmap_;
}
inline void CommonPlayerInfo::set_hangmaxmap(::google::protobuf::int32 value) {
  set_has_hangmaxmap();
  hangmaxmap_ = value;
}

// optional int32 identity = 22;
inline bool CommonPlayerInfo::has_identity() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CommonPlayerInfo::set_has_identity() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CommonPlayerInfo::clear_has_identity() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CommonPlayerInfo::clear_identity() {
  identity_ = 0;
  clear_has_identity();
}
inline ::google::protobuf::int32 CommonPlayerInfo::identity() const {
  return identity_;
}
inline void CommonPlayerInfo::set_identity(::google::protobuf::int32 value) {
  set_has_identity();
  identity_ = value;
}

// optional .protobuf.common.LineupDetail enemyLineup = 23;
inline bool CommonPlayerInfo::has_enemylineup() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CommonPlayerInfo::set_has_enemylineup() {
  _has_bits_[0] |= 0x00400000u;
}
inline void CommonPlayerInfo::clear_has_enemylineup() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void CommonPlayerInfo::clear_enemylineup() {
  if (enemylineup_ != NULL) enemylineup_->::protobuf::common::LineupDetail::Clear();
  clear_has_enemylineup();
}
inline const ::protobuf::common::LineupDetail& CommonPlayerInfo::enemylineup() const {
  return enemylineup_ != NULL ? *enemylineup_ : *default_instance_->enemylineup_;
}
inline ::protobuf::common::LineupDetail* CommonPlayerInfo::mutable_enemylineup() {
  set_has_enemylineup();
  if (enemylineup_ == NULL) enemylineup_ = new ::protobuf::common::LineupDetail;
  return enemylineup_;
}
inline ::protobuf::common::LineupDetail* CommonPlayerInfo::release_enemylineup() {
  clear_has_enemylineup();
  ::protobuf::common::LineupDetail* temp = enemylineup_;
  enemylineup_ = NULL;
  return temp;
}

// optional int64 power = 24;
inline bool CommonPlayerInfo::has_power() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CommonPlayerInfo::set_has_power() {
  _has_bits_[0] |= 0x00800000u;
}
inline void CommonPlayerInfo::clear_has_power() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void CommonPlayerInfo::clear_power() {
  power_ = GOOGLE_LONGLONG(0);
  clear_has_power();
}
inline ::google::protobuf::int64 CommonPlayerInfo::power() const {
  return power_;
}
inline void CommonPlayerInfo::set_power(::google::protobuf::int64 value) {
  set_has_power();
  power_ = value;
}

// -------------------------------------------------------------------

// Achievement

// required int32 id = 1;
inline bool Achievement::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Achievement::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Achievement::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Achievement::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Achievement::id() const {
  return id_;
}
inline void Achievement::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 status = 2;
inline bool Achievement::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Achievement::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Achievement::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Achievement::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 Achievement::status() const {
  return status_;
}
inline void Achievement::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// required int32 value = 3;
inline bool Achievement::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Achievement::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Achievement::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Achievement::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 Achievement::value() const {
  return value_;
}
inline void Achievement::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// ReplyHeroSkin

// required int32 id = 1;
inline bool ReplyHeroSkin::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReplyHeroSkin::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReplyHeroSkin::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReplyHeroSkin::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ReplyHeroSkin::id() const {
  return id_;
}
inline void ReplyHeroSkin::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 num = 2;
inline bool ReplyHeroSkin::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReplyHeroSkin::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReplyHeroSkin::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReplyHeroSkin::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 ReplyHeroSkin::num() const {
  return num_;
}
inline void ReplyHeroSkin::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// required int32 spareNum = 3;
inline bool ReplyHeroSkin::has_sparenum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReplyHeroSkin::set_has_sparenum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReplyHeroSkin::clear_has_sparenum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReplyHeroSkin::clear_sparenum() {
  sparenum_ = 0;
  clear_has_sparenum();
}
inline ::google::protobuf::int32 ReplyHeroSkin::sparenum() const {
  return sparenum_;
}
inline void ReplyHeroSkin::set_sparenum(::google::protobuf::int32 value) {
  set_has_sparenum();
  sparenum_ = value;
}

// -------------------------------------------------------------------

// HeroSkinList

// repeated .protobuf.playerInfo.ReplyHeroSkin skins = 1;
inline int HeroSkinList::skins_size() const {
  return skins_.size();
}
inline void HeroSkinList::clear_skins() {
  skins_.Clear();
}
inline const ::protobuf::playerInfo::ReplyHeroSkin& HeroSkinList::skins(int index) const {
  return skins_.Get(index);
}
inline ::protobuf::playerInfo::ReplyHeroSkin* HeroSkinList::mutable_skins(int index) {
  return skins_.Mutable(index);
}
inline ::protobuf::playerInfo::ReplyHeroSkin* HeroSkinList::add_skins() {
  return skins_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::playerInfo::ReplyHeroSkin >&
HeroSkinList::skins() const {
  return skins_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::playerInfo::ReplyHeroSkin >*
HeroSkinList::mutable_skins() {
  return &skins_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace playerInfo
}  // namespace protobuf

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_playerInfo_2eproto__INCLUDED
