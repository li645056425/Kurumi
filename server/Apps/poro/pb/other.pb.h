// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: other.proto

#ifndef PROTOBUF_other_2eproto__INCLUDED
#define PROTOBUF_other_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf {
namespace other {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_other_2eproto();
void protobuf_AssignDesc_other_2eproto();
void protobuf_ShutdownFile_other_2eproto();

class OnlineAward;
class GoldMetallurgy;
class ReplyUseItem;
class NotifyList;
class ServerNotify;
class RollNotice;
class NoticeInfo;

// ===================================================================

class OnlineAward : public ::google::protobuf::Message {
 public:
  OnlineAward();
  virtual ~OnlineAward();
  
  OnlineAward(const OnlineAward& from);
  
  inline OnlineAward& operator=(const OnlineAward& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OnlineAward& default_instance();
  
  void Swap(OnlineAward* other);
  
  // implements Message ----------------------------------------------
  
  OnlineAward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OnlineAward& from);
  void MergeFrom(const OnlineAward& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);
  
  // required .protobuf.common.KVint3232 items = 2;
  inline bool has_items() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 2;
  inline const ::protobuf::common::KVint3232& items() const;
  inline ::protobuf::common::KVint3232* mutable_items();
  inline ::protobuf::common::KVint3232* release_items();
  
  // @@protoc_insertion_point(class_scope:protobuf.other.OnlineAward)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_items();
  inline void clear_has_items();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 time_;
  ::protobuf::common::KVint3232* items_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_other_2eproto();
  friend void protobuf_AssignDesc_other_2eproto();
  friend void protobuf_ShutdownFile_other_2eproto();
  
  void InitAsDefaultInstance();
  static OnlineAward* default_instance_;
};
// -------------------------------------------------------------------

class GoldMetallurgy : public ::google::protobuf::Message {
 public:
  GoldMetallurgy();
  virtual ~GoldMetallurgy();
  
  GoldMetallurgy(const GoldMetallurgy& from);
  
  inline GoldMetallurgy& operator=(const GoldMetallurgy& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GoldMetallurgy& default_instance();
  
  void Swap(GoldMetallurgy* other);
  
  // implements Message ----------------------------------------------
  
  GoldMetallurgy* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GoldMetallurgy& from);
  void MergeFrom(const GoldMetallurgy& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);
  
  // repeated .protobuf.common.KVint3232 items = 2;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 2;
  inline const ::protobuf::common::KVint3232& items(int index) const;
  inline ::protobuf::common::KVint3232* mutable_items(int index);
  inline ::protobuf::common::KVint3232* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >*
      mutable_items();
  
  // repeated .protobuf.common.KVint3232 status = 3;
  inline int status_size() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline const ::protobuf::common::KVint3232& status(int index) const;
  inline ::protobuf::common::KVint3232* mutable_status(int index);
  inline ::protobuf::common::KVint3232* add_status();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >&
      status() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >*
      mutable_status();
  
  // @@protoc_insertion_point(class_scope:protobuf.other.GoldMetallurgy)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 time_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 > items_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 > status_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_other_2eproto();
  friend void protobuf_AssignDesc_other_2eproto();
  friend void protobuf_ShutdownFile_other_2eproto();
  
  void InitAsDefaultInstance();
  static GoldMetallurgy* default_instance_;
};
// -------------------------------------------------------------------

class ReplyUseItem : public ::google::protobuf::Message {
 public:
  ReplyUseItem();
  virtual ~ReplyUseItem();
  
  ReplyUseItem(const ReplyUseItem& from);
  
  inline ReplyUseItem& operator=(const ReplyUseItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReplyUseItem& default_instance();
  
  void Swap(ReplyUseItem* other);
  
  // implements Message ----------------------------------------------
  
  ReplyUseItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReplyUseItem& from);
  void MergeFrom(const ReplyUseItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protobuf.common.KVint3232 item = 1;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 1;
  inline const ::protobuf::common::KVint3232& item(int index) const;
  inline ::protobuf::common::KVint3232* mutable_item(int index);
  inline ::protobuf::common::KVint3232* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >*
      mutable_item();
  
  // repeated .protobuf.common.Hero hero = 2;
  inline int hero_size() const;
  inline void clear_hero();
  static const int kHeroFieldNumber = 2;
  inline const ::protobuf::common::Hero& hero(int index) const;
  inline ::protobuf::common::Hero* mutable_hero(int index);
  inline ::protobuf::common::Hero* add_hero();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::Hero >&
      hero() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::Hero >*
      mutable_hero();
  
  // @@protoc_insertion_point(class_scope:protobuf.other.ReplyUseItem)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 > item_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::common::Hero > hero_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_other_2eproto();
  friend void protobuf_AssignDesc_other_2eproto();
  friend void protobuf_ShutdownFile_other_2eproto();
  
  void InitAsDefaultInstance();
  static ReplyUseItem* default_instance_;
};
// -------------------------------------------------------------------

class NotifyList : public ::google::protobuf::Message {
 public:
  NotifyList();
  virtual ~NotifyList();
  
  NotifyList(const NotifyList& from);
  
  inline NotifyList& operator=(const NotifyList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyList& default_instance();
  
  void Swap(NotifyList* other);
  
  // implements Message ----------------------------------------------
  
  NotifyList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotifyList& from);
  void MergeFrom(const NotifyList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protobuf.other.ServerNotify tips = 1;
  inline int tips_size() const;
  inline void clear_tips();
  static const int kTipsFieldNumber = 1;
  inline const ::protobuf::other::ServerNotify& tips(int index) const;
  inline ::protobuf::other::ServerNotify* mutable_tips(int index);
  inline ::protobuf::other::ServerNotify* add_tips();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::other::ServerNotify >&
      tips() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::other::ServerNotify >*
      mutable_tips();
  
  // @@protoc_insertion_point(class_scope:protobuf.other.NotifyList)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protobuf::other::ServerNotify > tips_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_other_2eproto();
  friend void protobuf_AssignDesc_other_2eproto();
  friend void protobuf_ShutdownFile_other_2eproto();
  
  void InitAsDefaultInstance();
  static NotifyList* default_instance_;
};
// -------------------------------------------------------------------

class ServerNotify : public ::google::protobuf::Message {
 public:
  ServerNotify();
  virtual ~ServerNotify();
  
  ServerNotify(const ServerNotify& from);
  
  inline ServerNotify& operator=(const ServerNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerNotify& default_instance();
  
  void Swap(ServerNotify* other);
  
  // implements Message ----------------------------------------------
  
  ServerNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerNotify& from);
  void MergeFrom(const ServerNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  
  // required int64 startTime = 2;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 2;
  inline ::google::protobuf::int64 starttime() const;
  inline void set_starttime(::google::protobuf::int64 value);
  
  // required int64 endTime = 3;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 3;
  inline ::google::protobuf::int64 endtime() const;
  inline void set_endtime(::google::protobuf::int64 value);
  
  // required int32 coolTime = 4;
  inline bool has_cooltime() const;
  inline void clear_cooltime();
  static const int kCoolTimeFieldNumber = 4;
  inline ::google::protobuf::int32 cooltime() const;
  inline void set_cooltime(::google::protobuf::int32 value);
  
  // required string text = 5;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 5;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  
  // @@protoc_insertion_point(class_scope:protobuf.other.ServerNotify)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_cooltime();
  inline void clear_has_cooltime();
  inline void set_has_text();
  inline void clear_has_text();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* id_;
  ::google::protobuf::int64 starttime_;
  ::google::protobuf::int64 endtime_;
  ::std::string* text_;
  ::google::protobuf::int32 cooltime_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_other_2eproto();
  friend void protobuf_AssignDesc_other_2eproto();
  friend void protobuf_ShutdownFile_other_2eproto();
  
  void InitAsDefaultInstance();
  static ServerNotify* default_instance_;
};
// -------------------------------------------------------------------

class RollNotice : public ::google::protobuf::Message {
 public:
  RollNotice();
  virtual ~RollNotice();
  
  RollNotice(const RollNotice& from);
  
  inline RollNotice& operator=(const RollNotice& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RollNotice& default_instance();
  
  void Swap(RollNotice* other);
  
  // implements Message ----------------------------------------------
  
  RollNotice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RollNotice& from);
  void MergeFrom(const RollNotice& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protobuf.other.NoticeInfo info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::protobuf::other::NoticeInfo& info(int index) const;
  inline ::protobuf::other::NoticeInfo* mutable_info(int index);
  inline ::protobuf::other::NoticeInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::other::NoticeInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::other::NoticeInfo >*
      mutable_info();
  
  // @@protoc_insertion_point(class_scope:protobuf.other.RollNotice)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protobuf::other::NoticeInfo > info_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_other_2eproto();
  friend void protobuf_AssignDesc_other_2eproto();
  friend void protobuf_ShutdownFile_other_2eproto();
  
  void InitAsDefaultInstance();
  static RollNotice* default_instance_;
};
// -------------------------------------------------------------------

class NoticeInfo : public ::google::protobuf::Message {
 public:
  NoticeInfo();
  virtual ~NoticeInfo();
  
  NoticeInfo(const NoticeInfo& from);
  
  inline NoticeInfo& operator=(const NoticeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NoticeInfo& default_instance();
  
  void Swap(NoticeInfo* other);
  
  // implements Message ----------------------------------------------
  
  NoticeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NoticeInfo& from);
  void MergeFrom(const NoticeInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bool state = 1;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 1;
  inline bool state() const;
  inline void set_state(bool value);
  
  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional int32 sort = 3;
  inline bool has_sort() const;
  inline void clear_sort();
  static const int kSortFieldNumber = 3;
  inline ::google::protobuf::int32 sort() const;
  inline void set_sort(::google::protobuf::int32 value);
  
  // optional string startTime = 4;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 4;
  inline const ::std::string& starttime() const;
  inline void set_starttime(const ::std::string& value);
  inline void set_starttime(const char* value);
  inline void set_starttime(const char* value, size_t size);
  inline ::std::string* mutable_starttime();
  inline ::std::string* release_starttime();
  
  // optional string endTime = 5;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 5;
  inline const ::std::string& endtime() const;
  inline void set_endtime(const ::std::string& value);
  inline void set_endtime(const char* value);
  inline void set_endtime(const char* value, size_t size);
  inline ::std::string* mutable_endtime();
  inline ::std::string* release_endtime();
  
  // optional string title = 6;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 6;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  
  // optional string data = 7;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 7;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const char* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  
  // optional string picture = 8;
  inline bool has_picture() const;
  inline void clear_picture();
  static const int kPictureFieldNumber = 8;
  inline const ::std::string& picture() const;
  inline void set_picture(const ::std::string& value);
  inline void set_picture(const char* value);
  inline void set_picture(const char* value, size_t size);
  inline ::std::string* mutable_picture();
  inline ::std::string* release_picture();
  
  // @@protoc_insertion_point(class_scope:protobuf.other.NoticeInfo)
 private:
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_sort();
  inline void clear_has_sort();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_picture();
  inline void clear_has_picture();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  bool state_;
  ::google::protobuf::int32 type_;
  ::std::string* starttime_;
  ::std::string* endtime_;
  ::std::string* title_;
  ::std::string* data_;
  ::std::string* picture_;
  ::google::protobuf::int32 sort_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_other_2eproto();
  friend void protobuf_AssignDesc_other_2eproto();
  friend void protobuf_ShutdownFile_other_2eproto();
  
  void InitAsDefaultInstance();
  static NoticeInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// OnlineAward

// required int64 time = 1;
inline bool OnlineAward::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OnlineAward::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OnlineAward::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OnlineAward::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 OnlineAward::time() const {
  return time_;
}
inline void OnlineAward::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// required .protobuf.common.KVint3232 items = 2;
inline bool OnlineAward::has_items() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OnlineAward::set_has_items() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OnlineAward::clear_has_items() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OnlineAward::clear_items() {
  if (items_ != NULL) items_->::protobuf::common::KVint3232::Clear();
  clear_has_items();
}
inline const ::protobuf::common::KVint3232& OnlineAward::items() const {
  return items_ != NULL ? *items_ : *default_instance_->items_;
}
inline ::protobuf::common::KVint3232* OnlineAward::mutable_items() {
  set_has_items();
  if (items_ == NULL) items_ = new ::protobuf::common::KVint3232;
  return items_;
}
inline ::protobuf::common::KVint3232* OnlineAward::release_items() {
  clear_has_items();
  ::protobuf::common::KVint3232* temp = items_;
  items_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// GoldMetallurgy

// required int64 time = 1;
inline bool GoldMetallurgy::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GoldMetallurgy::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GoldMetallurgy::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GoldMetallurgy::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 GoldMetallurgy::time() const {
  return time_;
}
inline void GoldMetallurgy::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// repeated .protobuf.common.KVint3232 items = 2;
inline int GoldMetallurgy::items_size() const {
  return items_.size();
}
inline void GoldMetallurgy::clear_items() {
  items_.Clear();
}
inline const ::protobuf::common::KVint3232& GoldMetallurgy::items(int index) const {
  return items_.Get(index);
}
inline ::protobuf::common::KVint3232* GoldMetallurgy::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::protobuf::common::KVint3232* GoldMetallurgy::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >&
GoldMetallurgy::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >*
GoldMetallurgy::mutable_items() {
  return &items_;
}

// repeated .protobuf.common.KVint3232 status = 3;
inline int GoldMetallurgy::status_size() const {
  return status_.size();
}
inline void GoldMetallurgy::clear_status() {
  status_.Clear();
}
inline const ::protobuf::common::KVint3232& GoldMetallurgy::status(int index) const {
  return status_.Get(index);
}
inline ::protobuf::common::KVint3232* GoldMetallurgy::mutable_status(int index) {
  return status_.Mutable(index);
}
inline ::protobuf::common::KVint3232* GoldMetallurgy::add_status() {
  return status_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >&
GoldMetallurgy::status() const {
  return status_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >*
GoldMetallurgy::mutable_status() {
  return &status_;
}

// -------------------------------------------------------------------

// ReplyUseItem

// repeated .protobuf.common.KVint3232 item = 1;
inline int ReplyUseItem::item_size() const {
  return item_.size();
}
inline void ReplyUseItem::clear_item() {
  item_.Clear();
}
inline const ::protobuf::common::KVint3232& ReplyUseItem::item(int index) const {
  return item_.Get(index);
}
inline ::protobuf::common::KVint3232* ReplyUseItem::mutable_item(int index) {
  return item_.Mutable(index);
}
inline ::protobuf::common::KVint3232* ReplyUseItem::add_item() {
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >&
ReplyUseItem::item() const {
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >*
ReplyUseItem::mutable_item() {
  return &item_;
}

// repeated .protobuf.common.Hero hero = 2;
inline int ReplyUseItem::hero_size() const {
  return hero_.size();
}
inline void ReplyUseItem::clear_hero() {
  hero_.Clear();
}
inline const ::protobuf::common::Hero& ReplyUseItem::hero(int index) const {
  return hero_.Get(index);
}
inline ::protobuf::common::Hero* ReplyUseItem::mutable_hero(int index) {
  return hero_.Mutable(index);
}
inline ::protobuf::common::Hero* ReplyUseItem::add_hero() {
  return hero_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::Hero >&
ReplyUseItem::hero() const {
  return hero_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::Hero >*
ReplyUseItem::mutable_hero() {
  return &hero_;
}

// -------------------------------------------------------------------

// NotifyList

// repeated .protobuf.other.ServerNotify tips = 1;
inline int NotifyList::tips_size() const {
  return tips_.size();
}
inline void NotifyList::clear_tips() {
  tips_.Clear();
}
inline const ::protobuf::other::ServerNotify& NotifyList::tips(int index) const {
  return tips_.Get(index);
}
inline ::protobuf::other::ServerNotify* NotifyList::mutable_tips(int index) {
  return tips_.Mutable(index);
}
inline ::protobuf::other::ServerNotify* NotifyList::add_tips() {
  return tips_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::other::ServerNotify >&
NotifyList::tips() const {
  return tips_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::other::ServerNotify >*
NotifyList::mutable_tips() {
  return &tips_;
}

// -------------------------------------------------------------------

// ServerNotify

// required string id = 1;
inline bool ServerNotify::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerNotify::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerNotify::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerNotify::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& ServerNotify::id() const {
  return *id_;
}
inline void ServerNotify::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void ServerNotify::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void ServerNotify::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerNotify::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* ServerNotify::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int64 startTime = 2;
inline bool ServerNotify::has_starttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerNotify::set_has_starttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerNotify::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerNotify::clear_starttime() {
  starttime_ = GOOGLE_LONGLONG(0);
  clear_has_starttime();
}
inline ::google::protobuf::int64 ServerNotify::starttime() const {
  return starttime_;
}
inline void ServerNotify::set_starttime(::google::protobuf::int64 value) {
  set_has_starttime();
  starttime_ = value;
}

// required int64 endTime = 3;
inline bool ServerNotify::has_endtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerNotify::set_has_endtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerNotify::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerNotify::clear_endtime() {
  endtime_ = GOOGLE_LONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::int64 ServerNotify::endtime() const {
  return endtime_;
}
inline void ServerNotify::set_endtime(::google::protobuf::int64 value) {
  set_has_endtime();
  endtime_ = value;
}

// required int32 coolTime = 4;
inline bool ServerNotify::has_cooltime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerNotify::set_has_cooltime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerNotify::clear_has_cooltime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerNotify::clear_cooltime() {
  cooltime_ = 0;
  clear_has_cooltime();
}
inline ::google::protobuf::int32 ServerNotify::cooltime() const {
  return cooltime_;
}
inline void ServerNotify::set_cooltime(::google::protobuf::int32 value) {
  set_has_cooltime();
  cooltime_ = value;
}

// required string text = 5;
inline bool ServerNotify::has_text() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ServerNotify::set_has_text() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ServerNotify::clear_has_text() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ServerNotify::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& ServerNotify::text() const {
  return *text_;
}
inline void ServerNotify::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void ServerNotify::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void ServerNotify::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerNotify::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* ServerNotify::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// RollNotice

// repeated .protobuf.other.NoticeInfo info = 1;
inline int RollNotice::info_size() const {
  return info_.size();
}
inline void RollNotice::clear_info() {
  info_.Clear();
}
inline const ::protobuf::other::NoticeInfo& RollNotice::info(int index) const {
  return info_.Get(index);
}
inline ::protobuf::other::NoticeInfo* RollNotice::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::protobuf::other::NoticeInfo* RollNotice::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::other::NoticeInfo >&
RollNotice::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::other::NoticeInfo >*
RollNotice::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// NoticeInfo

// optional bool state = 1;
inline bool NoticeInfo::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NoticeInfo::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NoticeInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NoticeInfo::clear_state() {
  state_ = false;
  clear_has_state();
}
inline bool NoticeInfo::state() const {
  return state_;
}
inline void NoticeInfo::set_state(bool value) {
  set_has_state();
  state_ = value;
}

// optional int32 type = 2;
inline bool NoticeInfo::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NoticeInfo::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NoticeInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NoticeInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 NoticeInfo::type() const {
  return type_;
}
inline void NoticeInfo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 sort = 3;
inline bool NoticeInfo::has_sort() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NoticeInfo::set_has_sort() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NoticeInfo::clear_has_sort() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NoticeInfo::clear_sort() {
  sort_ = 0;
  clear_has_sort();
}
inline ::google::protobuf::int32 NoticeInfo::sort() const {
  return sort_;
}
inline void NoticeInfo::set_sort(::google::protobuf::int32 value) {
  set_has_sort();
  sort_ = value;
}

// optional string startTime = 4;
inline bool NoticeInfo::has_starttime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NoticeInfo::set_has_starttime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NoticeInfo::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NoticeInfo::clear_starttime() {
  if (starttime_ != &::google::protobuf::internal::kEmptyString) {
    starttime_->clear();
  }
  clear_has_starttime();
}
inline const ::std::string& NoticeInfo::starttime() const {
  return *starttime_;
}
inline void NoticeInfo::set_starttime(const ::std::string& value) {
  set_has_starttime();
  if (starttime_ == &::google::protobuf::internal::kEmptyString) {
    starttime_ = new ::std::string;
  }
  starttime_->assign(value);
}
inline void NoticeInfo::set_starttime(const char* value) {
  set_has_starttime();
  if (starttime_ == &::google::protobuf::internal::kEmptyString) {
    starttime_ = new ::std::string;
  }
  starttime_->assign(value);
}
inline void NoticeInfo::set_starttime(const char* value, size_t size) {
  set_has_starttime();
  if (starttime_ == &::google::protobuf::internal::kEmptyString) {
    starttime_ = new ::std::string;
  }
  starttime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NoticeInfo::mutable_starttime() {
  set_has_starttime();
  if (starttime_ == &::google::protobuf::internal::kEmptyString) {
    starttime_ = new ::std::string;
  }
  return starttime_;
}
inline ::std::string* NoticeInfo::release_starttime() {
  clear_has_starttime();
  if (starttime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = starttime_;
    starttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string endTime = 5;
inline bool NoticeInfo::has_endtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NoticeInfo::set_has_endtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NoticeInfo::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NoticeInfo::clear_endtime() {
  if (endtime_ != &::google::protobuf::internal::kEmptyString) {
    endtime_->clear();
  }
  clear_has_endtime();
}
inline const ::std::string& NoticeInfo::endtime() const {
  return *endtime_;
}
inline void NoticeInfo::set_endtime(const ::std::string& value) {
  set_has_endtime();
  if (endtime_ == &::google::protobuf::internal::kEmptyString) {
    endtime_ = new ::std::string;
  }
  endtime_->assign(value);
}
inline void NoticeInfo::set_endtime(const char* value) {
  set_has_endtime();
  if (endtime_ == &::google::protobuf::internal::kEmptyString) {
    endtime_ = new ::std::string;
  }
  endtime_->assign(value);
}
inline void NoticeInfo::set_endtime(const char* value, size_t size) {
  set_has_endtime();
  if (endtime_ == &::google::protobuf::internal::kEmptyString) {
    endtime_ = new ::std::string;
  }
  endtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NoticeInfo::mutable_endtime() {
  set_has_endtime();
  if (endtime_ == &::google::protobuf::internal::kEmptyString) {
    endtime_ = new ::std::string;
  }
  return endtime_;
}
inline ::std::string* NoticeInfo::release_endtime() {
  clear_has_endtime();
  if (endtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = endtime_;
    endtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string title = 6;
inline bool NoticeInfo::has_title() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NoticeInfo::set_has_title() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NoticeInfo::clear_has_title() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NoticeInfo::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& NoticeInfo::title() const {
  return *title_;
}
inline void NoticeInfo::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void NoticeInfo::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void NoticeInfo::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NoticeInfo::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* NoticeInfo::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string data = 7;
inline bool NoticeInfo::has_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NoticeInfo::set_has_data() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NoticeInfo::clear_has_data() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NoticeInfo::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& NoticeInfo::data() const {
  return *data_;
}
inline void NoticeInfo::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void NoticeInfo::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void NoticeInfo::set_data(const char* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NoticeInfo::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* NoticeInfo::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string picture = 8;
inline bool NoticeInfo::has_picture() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NoticeInfo::set_has_picture() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NoticeInfo::clear_has_picture() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NoticeInfo::clear_picture() {
  if (picture_ != &::google::protobuf::internal::kEmptyString) {
    picture_->clear();
  }
  clear_has_picture();
}
inline const ::std::string& NoticeInfo::picture() const {
  return *picture_;
}
inline void NoticeInfo::set_picture(const ::std::string& value) {
  set_has_picture();
  if (picture_ == &::google::protobuf::internal::kEmptyString) {
    picture_ = new ::std::string;
  }
  picture_->assign(value);
}
inline void NoticeInfo::set_picture(const char* value) {
  set_has_picture();
  if (picture_ == &::google::protobuf::internal::kEmptyString) {
    picture_ = new ::std::string;
  }
  picture_->assign(value);
}
inline void NoticeInfo::set_picture(const char* value, size_t size) {
  set_has_picture();
  if (picture_ == &::google::protobuf::internal::kEmptyString) {
    picture_ = new ::std::string;
  }
  picture_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NoticeInfo::mutable_picture() {
  set_has_picture();
  if (picture_ == &::google::protobuf::internal::kEmptyString) {
    picture_ = new ::std::string;
  }
  return picture_;
}
inline ::std::string* NoticeInfo::release_picture() {
  clear_has_picture();
  if (picture_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = picture_;
    picture_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace other
}  // namespace protobuf

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_other_2eproto__INCLUDED
