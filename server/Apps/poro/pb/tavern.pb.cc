// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tavern.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protobuf {
namespace tavern {

namespace {

const ::google::protobuf::Descriptor* TavernList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TavernList_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* Tavern_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tavern_reflection_ = NULL;
const ::google::protobuf::Descriptor* TavernHero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TavernHero_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartTavern_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartTavern_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tavern_2eproto() {
  protobuf_AddDesc_tavern_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tavern.proto");
  GOOGLE_CHECK(file != NULL);
  TavernList_descriptor_ = file->message_type(0);
  static const int TavernList_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TavernList, tavern_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TavernList, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TavernList, playertasknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TavernList, grouptasknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TavernList, tavernlv_),
  };
  TavernList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TavernList_descriptor_,
      TavernList::default_instance_,
      TavernList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TavernList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TavernList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TavernList));
  TaskEnd_descriptor_ = file->message_type(1);
  static const int TaskEnd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskEnd, taskstarnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskEnd, endtasknum_),
  };
  TaskEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskEnd_descriptor_,
      TaskEnd::default_instance_,
      TaskEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskEnd));
  Tavern_descriptor_ = file->message_type(2);
  static const int Tavern_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tavern, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tavern, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tavern, finishtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tavern, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tavern, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tavern, hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tavern, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tavern, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tavern, camp_),
  };
  Tavern_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Tavern_descriptor_,
      Tavern::default_instance_,
      Tavern_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tavern, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tavern, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Tavern));
  TavernHero_descriptor_ = file->message_type(3);
  static const int TavernHero_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TavernHero, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TavernHero, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TavernHero, herolv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TavernHero, playerid_),
  };
  TavernHero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TavernHero_descriptor_,
      TavernHero::default_instance_,
      TavernHero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TavernHero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TavernHero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TavernHero));
  StartTavern_descriptor_ = file->message_type(4);
  static const int StartTavern_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartTavern, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartTavern, hero_),
  };
  StartTavern_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartTavern_descriptor_,
      StartTavern::default_instance_,
      StartTavern_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartTavern, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartTavern, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartTavern));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tavern_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TavernList_descriptor_, &TavernList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskEnd_descriptor_, &TaskEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Tavern_descriptor_, &Tavern::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TavernHero_descriptor_, &TavernHero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartTavern_descriptor_, &StartTavern::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tavern_2eproto() {
  delete TavernList::default_instance_;
  delete TavernList_reflection_;
  delete TaskEnd::default_instance_;
  delete TaskEnd_reflection_;
  delete Tavern::default_instance_;
  delete Tavern_reflection_;
  delete TavernHero::default_instance_;
  delete TavernHero_reflection_;
  delete StartTavern::default_instance_;
  delete StartTavern_reflection_;
}

void protobuf_AddDesc_tavern_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf::common::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014tavern.proto\022\017protobuf.tavern\032\014common."
    "proto\"\266\001\n\nTavernList\022\'\n\006tavern\030\001 \003(\0132\027.p"
    "rotobuf.tavern.Tavern\022\014\n\004time\030\002 \001(\003\022/\n\rp"
    "layerTaskNum\030\003 \003(\0132\030.protobuf.tavern.Tas"
    "kEnd\022.\n\014groupTaskNum\030\004 \003(\0132\030.protobuf.ta"
    "vern.TaskEnd\022\020\n\010tavernLv\030\005 \001(\005\"2\n\007TaskEn"
    "d\022\023\n\013taskStarNum\030\001 \001(\005\022\022\n\nendTaskNum\030\002 \001"
    "(\005\"\306\001\n\006Tavern\022\n\n\002id\030\001 \002(\005\022\r\n\005state\030\002 \002(\005"
    "\022\022\n\nfinishTime\030\003 \002(\003\022\014\n\004star\030\004 \002(\005\022)\n\005it"
    "ems\030\005 \003(\0132\032.protobuf.common.KVint3264\022)\n"
    "\004hero\030\006 \003(\0132\033.protobuf.tavern.TavernHero"
    "\022\014\n\004name\030\007 \001(\005\022\r\n\005index\030\010 \002(\005\022\014\n\004camp\030\t "
    "\003(\005\"L\n\nTavernHero\022\016\n\006heroId\030\001 \002(\005\022\014\n\004sta"
    "r\030\002 \002(\005\022\016\n\006heroLv\030\003 \002(\005\022\020\n\010playerId\030\004 \002("
    "\t\"D\n\013StartTavern\022\n\n\002id\030\001 \002(\005\022)\n\004hero\030\002 \003"
    "(\0132\033.protobuf.tavern.TavernHeroB\"\n\023xag.i"
    "dgo.core.protoB\013TavernProto", 667);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tavern.proto", &protobuf_RegisterTypes);
  TavernList::default_instance_ = new TavernList();
  TaskEnd::default_instance_ = new TaskEnd();
  Tavern::default_instance_ = new Tavern();
  TavernHero::default_instance_ = new TavernHero();
  StartTavern::default_instance_ = new StartTavern();
  TavernList::default_instance_->InitAsDefaultInstance();
  TaskEnd::default_instance_->InitAsDefaultInstance();
  Tavern::default_instance_->InitAsDefaultInstance();
  TavernHero::default_instance_->InitAsDefaultInstance();
  StartTavern::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tavern_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tavern_2eproto {
  StaticDescriptorInitializer_tavern_2eproto() {
    protobuf_AddDesc_tavern_2eproto();
  }
} static_descriptor_initializer_tavern_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int TavernList::kTavernFieldNumber;
const int TavernList::kTimeFieldNumber;
const int TavernList::kPlayerTaskNumFieldNumber;
const int TavernList::kGroupTaskNumFieldNumber;
const int TavernList::kTavernLvFieldNumber;
#endif  // !_MSC_VER

TavernList::TavernList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TavernList::InitAsDefaultInstance() {
}

TavernList::TavernList(const TavernList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TavernList::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  tavernlv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TavernList::~TavernList() {
  SharedDtor();
}

void TavernList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TavernList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TavernList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TavernList_descriptor_;
}

const TavernList& TavernList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tavern_2eproto();  return *default_instance_;
}

TavernList* TavernList::default_instance_ = NULL;

TavernList* TavernList::New() const {
  return new TavernList;
}

void TavernList::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    time_ = GOOGLE_LONGLONG(0);
    tavernlv_ = 0;
  }
  tavern_.Clear();
  playertasknum_.Clear();
  grouptasknum_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TavernList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.tavern.Tavern tavern = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tavern:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tavern()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_tavern;
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }
      
      // optional int64 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_playerTaskNum;
        break;
      }
      
      // repeated .protobuf.tavern.TaskEnd playerTaskNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerTaskNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playertasknum()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_playerTaskNum;
        if (input->ExpectTag(34)) goto parse_groupTaskNum;
        break;
      }
      
      // repeated .protobuf.tavern.TaskEnd groupTaskNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groupTaskNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_grouptasknum()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_groupTaskNum;
        if (input->ExpectTag(40)) goto parse_tavernLv;
        break;
      }
      
      // optional int32 tavernLv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tavernLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tavernlv_)));
          set_has_tavernlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TavernList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.tavern.Tavern tavern = 1;
  for (int i = 0; i < this->tavern_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tavern(i), output);
  }
  
  // optional int64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time(), output);
  }
  
  // repeated .protobuf.tavern.TaskEnd playerTaskNum = 3;
  for (int i = 0; i < this->playertasknum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->playertasknum(i), output);
  }
  
  // repeated .protobuf.tavern.TaskEnd groupTaskNum = 4;
  for (int i = 0; i < this->grouptasknum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->grouptasknum(i), output);
  }
  
  // optional int32 tavernLv = 5;
  if (has_tavernlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->tavernlv(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TavernList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.tavern.Tavern tavern = 1;
  for (int i = 0; i < this->tavern_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tavern(i), target);
  }
  
  // optional int64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time(), target);
  }
  
  // repeated .protobuf.tavern.TaskEnd playerTaskNum = 3;
  for (int i = 0; i < this->playertasknum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->playertasknum(i), target);
  }
  
  // repeated .protobuf.tavern.TaskEnd groupTaskNum = 4;
  for (int i = 0; i < this->grouptasknum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->grouptasknum(i), target);
  }
  
  // optional int32 tavernLv = 5;
  if (has_tavernlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->tavernlv(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TavernList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }
    
    // optional int32 tavernLv = 5;
    if (has_tavernlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tavernlv());
    }
    
  }
  // repeated .protobuf.tavern.Tavern tavern = 1;
  total_size += 1 * this->tavern_size();
  for (int i = 0; i < this->tavern_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tavern(i));
  }
  
  // repeated .protobuf.tavern.TaskEnd playerTaskNum = 3;
  total_size += 1 * this->playertasknum_size();
  for (int i = 0; i < this->playertasknum_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playertasknum(i));
  }
  
  // repeated .protobuf.tavern.TaskEnd groupTaskNum = 4;
  total_size += 1 * this->grouptasknum_size();
  for (int i = 0; i < this->grouptasknum_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->grouptasknum(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TavernList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TavernList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TavernList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TavernList::MergeFrom(const TavernList& from) {
  GOOGLE_CHECK_NE(&from, this);
  tavern_.MergeFrom(from.tavern_);
  playertasknum_.MergeFrom(from.playertasknum_);
  grouptasknum_.MergeFrom(from.grouptasknum_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_tavernlv()) {
      set_tavernlv(from.tavernlv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TavernList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TavernList::CopyFrom(const TavernList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TavernList::IsInitialized() const {
  
  for (int i = 0; i < tavern_size(); i++) {
    if (!this->tavern(i).IsInitialized()) return false;
  }
  return true;
}

void TavernList::Swap(TavernList* other) {
  if (other != this) {
    tavern_.Swap(&other->tavern_);
    std::swap(time_, other->time_);
    playertasknum_.Swap(&other->playertasknum_);
    grouptasknum_.Swap(&other->grouptasknum_);
    std::swap(tavernlv_, other->tavernlv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TavernList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TavernList_descriptor_;
  metadata.reflection = TavernList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TaskEnd::kTaskStarNumFieldNumber;
const int TaskEnd::kEndTaskNumFieldNumber;
#endif  // !_MSC_VER

TaskEnd::TaskEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TaskEnd::InitAsDefaultInstance() {
}

TaskEnd::TaskEnd(const TaskEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TaskEnd::SharedCtor() {
  _cached_size_ = 0;
  taskstarnum_ = 0;
  endtasknum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskEnd::~TaskEnd() {
  SharedDtor();
}

void TaskEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TaskEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskEnd_descriptor_;
}

const TaskEnd& TaskEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tavern_2eproto();  return *default_instance_;
}

TaskEnd* TaskEnd::default_instance_ = NULL;

TaskEnd* TaskEnd::New() const {
  return new TaskEnd;
}

void TaskEnd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskstarnum_ = 0;
    endtasknum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 taskStarNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taskstarnum_)));
          set_has_taskstarnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_endTaskNum;
        break;
      }
      
      // optional int32 endTaskNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endTaskNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endtasknum_)));
          set_has_endtasknum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TaskEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 taskStarNum = 1;
  if (has_taskstarnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->taskstarnum(), output);
  }
  
  // optional int32 endTaskNum = 2;
  if (has_endtasknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->endtasknum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TaskEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 taskStarNum = 1;
  if (has_taskstarnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->taskstarnum(), target);
  }
  
  // optional int32 endTaskNum = 2;
  if (has_endtasknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->endtasknum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TaskEnd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 taskStarNum = 1;
    if (has_taskstarnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->taskstarnum());
    }
    
    // optional int32 endTaskNum = 2;
    if (has_endtasknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endtasknum());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskEnd::MergeFrom(const TaskEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskstarnum()) {
      set_taskstarnum(from.taskstarnum());
    }
    if (from.has_endtasknum()) {
      set_endtasknum(from.endtasknum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskEnd::CopyFrom(const TaskEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskEnd::IsInitialized() const {
  
  return true;
}

void TaskEnd::Swap(TaskEnd* other) {
  if (other != this) {
    std::swap(taskstarnum_, other->taskstarnum_);
    std::swap(endtasknum_, other->endtasknum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskEnd_descriptor_;
  metadata.reflection = TaskEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Tavern::kIdFieldNumber;
const int Tavern::kStateFieldNumber;
const int Tavern::kFinishTimeFieldNumber;
const int Tavern::kStarFieldNumber;
const int Tavern::kItemsFieldNumber;
const int Tavern::kHeroFieldNumber;
const int Tavern::kNameFieldNumber;
const int Tavern::kIndexFieldNumber;
const int Tavern::kCampFieldNumber;
#endif  // !_MSC_VER

Tavern::Tavern()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Tavern::InitAsDefaultInstance() {
}

Tavern::Tavern(const Tavern& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Tavern::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  state_ = 0;
  finishtime_ = GOOGLE_LONGLONG(0);
  star_ = 0;
  name_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tavern::~Tavern() {
  SharedDtor();
}

void Tavern::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Tavern::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tavern::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tavern_descriptor_;
}

const Tavern& Tavern::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tavern_2eproto();  return *default_instance_;
}

Tavern* Tavern::default_instance_ = NULL;

Tavern* Tavern::New() const {
  return new Tavern;
}

void Tavern::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    state_ = 0;
    finishtime_ = GOOGLE_LONGLONG(0);
    star_ = 0;
    name_ = 0;
    index_ = 0;
  }
  items_.Clear();
  hero_.Clear();
  camp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Tavern::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }
      
      // required int32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_finishTime;
        break;
      }
      
      // required int64 finishTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finishTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &finishtime_)));
          set_has_finishtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_star;
        break;
      }
      
      // required int32 star = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_items;
        break;
      }
      
      // repeated .protobuf.common.KVint3264 items = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_items;
        if (input->ExpectTag(50)) goto parse_hero;
        break;
      }
      
      // repeated .protobuf.tavern.TavernHero hero = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hero()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_hero;
        if (input->ExpectTag(56)) goto parse_name;
        break;
      }
      
      // optional int32 name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_name:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &name_)));
          set_has_name();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_index;
        break;
      }
      
      // required int32 index = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_camp;
        break;
      }
      
      // repeated int32 camp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_camp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_camp())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_camp())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_camp;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Tavern::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // required int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }
  
  // required int64 finishTime = 3;
  if (has_finishtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->finishtime(), output);
  }
  
  // required int32 star = 4;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->star(), output);
  }
  
  // repeated .protobuf.common.KVint3264 items = 5;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->items(i), output);
  }
  
  // repeated .protobuf.tavern.TavernHero hero = 6;
  for (int i = 0; i < this->hero_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->hero(i), output);
  }
  
  // optional int32 name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->name(), output);
  }
  
  // required int32 index = 8;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->index(), output);
  }
  
  // repeated int32 camp = 9;
  for (int i = 0; i < this->camp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->camp(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Tavern::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // required int32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }
  
  // required int64 finishTime = 3;
  if (has_finishtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->finishtime(), target);
  }
  
  // required int32 star = 4;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->star(), target);
  }
  
  // repeated .protobuf.common.KVint3264 items = 5;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->items(i), target);
  }
  
  // repeated .protobuf.tavern.TavernHero hero = 6;
  for (int i = 0; i < this->hero_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->hero(i), target);
  }
  
  // optional int32 name = 7;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->name(), target);
  }
  
  // required int32 index = 8;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->index(), target);
  }
  
  // repeated int32 camp = 9;
  for (int i = 0; i < this->camp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->camp(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Tavern::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }
    
    // required int64 finishTime = 3;
    if (has_finishtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->finishtime());
    }
    
    // required int32 star = 4;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }
    
    // optional int32 name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->name());
    }
    
    // required int32 index = 8;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
  }
  // repeated .protobuf.common.KVint3264 items = 5;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  // repeated .protobuf.tavern.TavernHero hero = 6;
  total_size += 1 * this->hero_size();
  for (int i = 0; i < this->hero_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hero(i));
  }
  
  // repeated int32 camp = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->camp_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->camp(i));
    }
    total_size += 1 * this->camp_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tavern::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Tavern* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Tavern*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Tavern::MergeFrom(const Tavern& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  hero_.MergeFrom(from.hero_);
  camp_.MergeFrom(from.camp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_finishtime()) {
      set_finishtime(from.finishtime());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Tavern::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tavern::CopyFrom(const Tavern& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tavern::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000008f) != 0x0000008f) return false;
  
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  for (int i = 0; i < hero_size(); i++) {
    if (!this->hero(i).IsInitialized()) return false;
  }
  return true;
}

void Tavern::Swap(Tavern* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(state_, other->state_);
    std::swap(finishtime_, other->finishtime_);
    std::swap(star_, other->star_);
    items_.Swap(&other->items_);
    hero_.Swap(&other->hero_);
    std::swap(name_, other->name_);
    std::swap(index_, other->index_);
    camp_.Swap(&other->camp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Tavern::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tavern_descriptor_;
  metadata.reflection = Tavern_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TavernHero::kHeroIdFieldNumber;
const int TavernHero::kStarFieldNumber;
const int TavernHero::kHeroLvFieldNumber;
const int TavernHero::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

TavernHero::TavernHero()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TavernHero::InitAsDefaultInstance() {
}

TavernHero::TavernHero(const TavernHero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TavernHero::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0;
  star_ = 0;
  herolv_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TavernHero::~TavernHero() {
  SharedDtor();
}

void TavernHero::SharedDtor() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (this != default_instance_) {
  }
}

void TavernHero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TavernHero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TavernHero_descriptor_;
}

const TavernHero& TavernHero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tavern_2eproto();  return *default_instance_;
}

TavernHero* TavernHero::default_instance_ = NULL;

TavernHero* TavernHero::New() const {
  return new TavernHero;
}

void TavernHero::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = 0;
    star_ = 0;
    herolv_ = 0;
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TavernHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 heroId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_star;
        break;
      }
      
      // required int32 star = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_heroLv;
        break;
      }
      
      // required int32 heroLv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &herolv_)));
          set_has_herolv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_playerId;
        break;
      }
      
      // required string playerId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TavernHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 heroId = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->heroid(), output);
  }
  
  // required int32 star = 2;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->star(), output);
  }
  
  // required int32 heroLv = 3;
  if (has_herolv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->herolv(), output);
  }
  
  // required string playerId = 4;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TavernHero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 heroId = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->heroid(), target);
  }
  
  // required int32 star = 2;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->star(), target);
  }
  
  // required int32 heroLv = 3;
  if (has_herolv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->herolv(), target);
  }
  
  // required string playerId = 4;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TavernHero::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 heroId = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->heroid());
    }
    
    // required int32 star = 2;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }
    
    // required int32 heroLv = 3;
    if (has_herolv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->herolv());
    }
    
    // required string playerId = 4;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TavernHero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TavernHero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TavernHero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TavernHero::MergeFrom(const TavernHero& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_herolv()) {
      set_herolv(from.herolv());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TavernHero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TavernHero::CopyFrom(const TavernHero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TavernHero::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void TavernHero::Swap(TavernHero* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(star_, other->star_);
    std::swap(herolv_, other->herolv_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TavernHero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TavernHero_descriptor_;
  metadata.reflection = TavernHero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StartTavern::kIdFieldNumber;
const int StartTavern::kHeroFieldNumber;
#endif  // !_MSC_VER

StartTavern::StartTavern()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StartTavern::InitAsDefaultInstance() {
}

StartTavern::StartTavern(const StartTavern& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StartTavern::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartTavern::~StartTavern() {
  SharedDtor();
}

void StartTavern::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StartTavern::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartTavern::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartTavern_descriptor_;
}

const StartTavern& StartTavern::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tavern_2eproto();  return *default_instance_;
}

StartTavern* StartTavern::default_instance_ = NULL;

StartTavern* StartTavern::New() const {
  return new StartTavern;
}

void StartTavern::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  hero_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartTavern::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hero;
        break;
      }
      
      // repeated .protobuf.tavern.TavernHero hero = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hero()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hero;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StartTavern::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // repeated .protobuf.tavern.TavernHero hero = 2;
  for (int i = 0; i < this->hero_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->hero(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StartTavern::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // repeated .protobuf.tavern.TavernHero hero = 2;
  for (int i = 0; i < this->hero_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->hero(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StartTavern::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  // repeated .protobuf.tavern.TavernHero hero = 2;
  total_size += 1 * this->hero_size();
  for (int i = 0; i < this->hero_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hero(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartTavern::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartTavern* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartTavern*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartTavern::MergeFrom(const StartTavern& from) {
  GOOGLE_CHECK_NE(&from, this);
  hero_.MergeFrom(from.hero_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartTavern::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartTavern::CopyFrom(const StartTavern& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartTavern::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < hero_size(); i++) {
    if (!this->hero(i).IsInitialized()) return false;
  }
  return true;
}

void StartTavern::Swap(StartTavern* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    hero_.Swap(&other->hero_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartTavern::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartTavern_descriptor_;
  metadata.reflection = StartTavern_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tavern
}  // namespace protobuf

// @@protoc_insertion_point(global_scope)
