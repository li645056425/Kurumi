// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hang.proto

#ifndef PROTOBUF_hang_2eproto__INCLUDED
#define PROTOBUF_hang_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf {
namespace hang {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_hang_2eproto();
void protobuf_AssignDesc_hang_2eproto();
void protobuf_ShutdownFile_hang_2eproto();

class EntryHangMap;
class HangCurMap;
class OfflineGold;
class Moster;
class HangLineup;
class TakeHangBoxReq;
class TakeHangBox;
class KillGbl;
class KillGb2;
class HangQuickInfo;

// ===================================================================

class EntryHangMap : public ::google::protobuf::Message {
 public:
  EntryHangMap();
  virtual ~EntryHangMap();
  
  EntryHangMap(const EntryHangMap& from);
  
  inline EntryHangMap& operator=(const EntryHangMap& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EntryHangMap& default_instance();
  
  void Swap(EntryHangMap* other);
  
  // implements Message ----------------------------------------------
  
  EntryHangMap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EntryHangMap& from);
  void MergeFrom(const EntryHangMap& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional string guidev = 2;
  inline bool has_guidev() const;
  inline void clear_guidev();
  static const int kGuidevFieldNumber = 2;
  inline const ::std::string& guidev() const;
  inline void set_guidev(const ::std::string& value);
  inline void set_guidev(const char* value);
  inline void set_guidev(const char* value, size_t size);
  inline ::std::string* mutable_guidev();
  inline ::std::string* release_guidev();
  
  // @@protoc_insertion_point(class_scope:protobuf.hang.EntryHangMap)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_guidev();
  inline void clear_has_guidev();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* guidev_;
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_hang_2eproto();
  friend void protobuf_AssignDesc_hang_2eproto();
  friend void protobuf_ShutdownFile_hang_2eproto();
  
  void InitAsDefaultInstance();
  static EntryHangMap* default_instance_;
};
// -------------------------------------------------------------------

class HangCurMap : public ::google::protobuf::Message {
 public:
  HangCurMap();
  virtual ~HangCurMap();
  
  HangCurMap(const HangCurMap& from);
  
  inline HangCurMap& operator=(const HangCurMap& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const HangCurMap& default_instance();
  
  void Swap(HangCurMap* other);
  
  // implements Message ----------------------------------------------
  
  HangCurMap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HangCurMap& from);
  void MergeFrom(const HangCurMap& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 mapId = 1;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapIdFieldNumber = 1;
  inline ::google::protobuf::int32 mapid() const;
  inline void set_mapid(::google::protobuf::int32 value);
  
  // required int32 step = 2;
  inline bool has_step() const;
  inline void clear_step();
  static const int kStepFieldNumber = 2;
  inline ::google::protobuf::int32 step() const;
  inline void set_step(::google::protobuf::int32 value);
  
  // repeated .protobuf.hang.Moster moster = 3;
  inline int moster_size() const;
  inline void clear_moster();
  static const int kMosterFieldNumber = 3;
  inline const ::protobuf::hang::Moster& moster(int index) const;
  inline ::protobuf::hang::Moster* mutable_moster(int index);
  inline ::protobuf::hang::Moster* add_moster();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::hang::Moster >&
      moster() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::hang::Moster >*
      mutable_moster();
  
  // required int64 rand = 4;
  inline bool has_rand() const;
  inline void clear_rand();
  static const int kRandFieldNumber = 4;
  inline ::google::protobuf::int64 rand() const;
  inline void set_rand(::google::protobuf::int64 value);
  
  // repeated .protobuf.common.KVint3264 goldHeap = 5;
  inline int goldheap_size() const;
  inline void clear_goldheap();
  static const int kGoldHeapFieldNumber = 5;
  inline const ::protobuf::common::KVint3264& goldheap(int index) const;
  inline ::protobuf::common::KVint3264* mutable_goldheap(int index);
  inline ::protobuf::common::KVint3264* add_goldheap();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 >&
      goldheap() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 >*
      mutable_goldheap();
  
  // repeated .protobuf.common.KVint3264 expHeap = 6;
  inline int expheap_size() const;
  inline void clear_expheap();
  static const int kExpHeapFieldNumber = 6;
  inline const ::protobuf::common::KVint3264& expheap(int index) const;
  inline ::protobuf::common::KVint3264* mutable_expheap(int index);
  inline ::protobuf::common::KVint3264* add_expheap();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 >&
      expheap() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 >*
      mutable_expheap();
  
  // required int32 box = 7;
  inline bool has_box() const;
  inline void clear_box();
  static const int kBoxFieldNumber = 7;
  inline ::google::protobuf::int32 box() const;
  inline void set_box(::google::protobuf::int32 value);
  
  // required int32 boss = 8;
  inline bool has_boss() const;
  inline void clear_boss();
  static const int kBossFieldNumber = 8;
  inline ::google::protobuf::int32 boss() const;
  inline void set_boss(::google::protobuf::int32 value);
  
  // required int32 hangMaxMap = 9;
  inline bool has_hangmaxmap() const;
  inline void clear_hangmaxmap();
  static const int kHangMaxMapFieldNumber = 9;
  inline ::google::protobuf::int32 hangmaxmap() const;
  inline void set_hangmaxmap(::google::protobuf::int32 value);
  
  // optional int32 time = 10;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 10;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);
  
  // optional int64 hangTime = 11;
  inline bool has_hangtime() const;
  inline void clear_hangtime();
  static const int kHangTimeFieldNumber = 11;
  inline ::google::protobuf::int64 hangtime() const;
  inline void set_hangtime(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:protobuf.hang.HangCurMap)
 private:
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_step();
  inline void clear_has_step();
  inline void set_has_rand();
  inline void clear_has_rand();
  inline void set_has_box();
  inline void clear_has_box();
  inline void set_has_boss();
  inline void clear_has_boss();
  inline void set_has_hangmaxmap();
  inline void clear_has_hangmaxmap();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_hangtime();
  inline void clear_has_hangtime();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 mapid_;
  ::google::protobuf::int32 step_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::hang::Moster > moster_;
  ::google::protobuf::int64 rand_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 > goldheap_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 > expheap_;
  ::google::protobuf::int32 box_;
  ::google::protobuf::int32 boss_;
  ::google::protobuf::int32 hangmaxmap_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::int64 hangtime_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  friend void  protobuf_AddDesc_hang_2eproto();
  friend void protobuf_AssignDesc_hang_2eproto();
  friend void protobuf_ShutdownFile_hang_2eproto();
  
  void InitAsDefaultInstance();
  static HangCurMap* default_instance_;
};
// -------------------------------------------------------------------

class OfflineGold : public ::google::protobuf::Message {
 public:
  OfflineGold();
  virtual ~OfflineGold();
  
  OfflineGold(const OfflineGold& from);
  
  inline OfflineGold& operator=(const OfflineGold& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OfflineGold& default_instance();
  
  void Swap(OfflineGold* other);
  
  // implements Message ----------------------------------------------
  
  OfflineGold* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OfflineGold& from);
  void MergeFrom(const OfflineGold& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protobuf.common.KVint3264 goldHeap = 1;
  inline int goldheap_size() const;
  inline void clear_goldheap();
  static const int kGoldHeapFieldNumber = 1;
  inline const ::protobuf::common::KVint3264& goldheap(int index) const;
  inline ::protobuf::common::KVint3264* mutable_goldheap(int index);
  inline ::protobuf::common::KVint3264* add_goldheap();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 >&
      goldheap() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 >*
      mutable_goldheap();
  
  // @@protoc_insertion_point(class_scope:protobuf.hang.OfflineGold)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 > goldheap_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_hang_2eproto();
  friend void protobuf_AssignDesc_hang_2eproto();
  friend void protobuf_ShutdownFile_hang_2eproto();
  
  void InitAsDefaultInstance();
  static OfflineGold* default_instance_;
};
// -------------------------------------------------------------------

class Moster : public ::google::protobuf::Message {
 public:
  Moster();
  virtual ~Moster();
  
  Moster(const Moster& from);
  
  inline Moster& operator=(const Moster& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Moster& default_instance();
  
  void Swap(Moster* other);
  
  // implements Message ----------------------------------------------
  
  Moster* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Moster& from);
  void MergeFrom(const Moster& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 mosterId = 1;
  inline bool has_mosterid() const;
  inline void clear_mosterid();
  static const int kMosterIdFieldNumber = 1;
  inline ::google::protobuf::int32 mosterid() const;
  inline void set_mosterid(::google::protobuf::int32 value);
  
  // required int32 gold = 2;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 2;
  inline ::google::protobuf::int32 gold() const;
  inline void set_gold(::google::protobuf::int32 value);
  
  // required int32 exp = 3;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 3;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);
  
  // repeated .protobuf.common.KVint3232 item = 4;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 4;
  inline const ::protobuf::common::KVint3232& item(int index) const;
  inline ::protobuf::common::KVint3232* mutable_item(int index);
  inline ::protobuf::common::KVint3232* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >*
      mutable_item();
  
  // @@protoc_insertion_point(class_scope:protobuf.hang.Moster)
 private:
  inline void set_has_mosterid();
  inline void clear_has_mosterid();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_exp();
  inline void clear_has_exp();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 mosterid_;
  ::google::protobuf::int32 gold_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 > item_;
  ::google::protobuf::int32 exp_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_hang_2eproto();
  friend void protobuf_AssignDesc_hang_2eproto();
  friend void protobuf_ShutdownFile_hang_2eproto();
  
  void InitAsDefaultInstance();
  static Moster* default_instance_;
};
// -------------------------------------------------------------------

class HangLineup : public ::google::protobuf::Message {
 public:
  HangLineup();
  virtual ~HangLineup();
  
  HangLineup(const HangLineup& from);
  
  inline HangLineup& operator=(const HangLineup& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const HangLineup& default_instance();
  
  void Swap(HangLineup* other);
  
  // implements Message ----------------------------------------------
  
  HangLineup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HangLineup& from);
  void MergeFrom(const HangLineup& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated int32 heros = 1;
  inline int heros_size() const;
  inline void clear_heros();
  static const int kHerosFieldNumber = 1;
  inline ::google::protobuf::int32 heros(int index) const;
  inline void set_heros(int index, ::google::protobuf::int32 value);
  inline void add_heros(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      heros() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_heros();
  
  // optional int32 power = 3;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 3;
  inline ::google::protobuf::int32 power() const;
  inline void set_power(::google::protobuf::int32 value);
  
  // optional string guidev = 4;
  inline bool has_guidev() const;
  inline void clear_guidev();
  static const int kGuidevFieldNumber = 4;
  inline const ::std::string& guidev() const;
  inline void set_guidev(const ::std::string& value);
  inline void set_guidev(const char* value);
  inline void set_guidev(const char* value, size_t size);
  inline ::std::string* mutable_guidev();
  inline ::std::string* release_guidev();
  
  // @@protoc_insertion_point(class_scope:protobuf.hang.HangLineup)
 private:
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_guidev();
  inline void clear_has_guidev();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > heros_;
  ::std::string* guidev_;
  ::google::protobuf::int32 power_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_hang_2eproto();
  friend void protobuf_AssignDesc_hang_2eproto();
  friend void protobuf_ShutdownFile_hang_2eproto();
  
  void InitAsDefaultInstance();
  static HangLineup* default_instance_;
};
// -------------------------------------------------------------------

class TakeHangBoxReq : public ::google::protobuf::Message {
 public:
  TakeHangBoxReq();
  virtual ~TakeHangBoxReq();
  
  TakeHangBoxReq(const TakeHangBoxReq& from);
  
  inline TakeHangBoxReq& operator=(const TakeHangBoxReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TakeHangBoxReq& default_instance();
  
  void Swap(TakeHangBoxReq* other);
  
  // implements Message ----------------------------------------------
  
  TakeHangBoxReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TakeHangBoxReq& from);
  void MergeFrom(const TakeHangBoxReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional .protobuf.common.GuideString guildStr = 2;
  inline bool has_guildstr() const;
  inline void clear_guildstr();
  static const int kGuildStrFieldNumber = 2;
  inline const ::protobuf::common::GuideString& guildstr() const;
  inline ::protobuf::common::GuideString* mutable_guildstr();
  inline ::protobuf::common::GuideString* release_guildstr();
  
  // @@protoc_insertion_point(class_scope:protobuf.hang.TakeHangBoxReq)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_guildstr();
  inline void clear_has_guildstr();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::protobuf::common::GuideString* guildstr_;
  ::google::protobuf::int32 type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_hang_2eproto();
  friend void protobuf_AssignDesc_hang_2eproto();
  friend void protobuf_ShutdownFile_hang_2eproto();
  
  void InitAsDefaultInstance();
  static TakeHangBoxReq* default_instance_;
};
// -------------------------------------------------------------------

class TakeHangBox : public ::google::protobuf::Message {
 public:
  TakeHangBox();
  virtual ~TakeHangBox();
  
  TakeHangBox(const TakeHangBox& from);
  
  inline TakeHangBox& operator=(const TakeHangBox& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TakeHangBox& default_instance();
  
  void Swap(TakeHangBox* other);
  
  // implements Message ----------------------------------------------
  
  TakeHangBox* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TakeHangBox& from);
  void MergeFrom(const TakeHangBox& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protobuf.common.KVint3264 items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::protobuf::common::KVint3264& items(int index) const;
  inline ::protobuf::common::KVint3264* mutable_items(int index);
  inline ::protobuf::common::KVint3264* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 >*
      mutable_items();
  
  // required int32 box = 2;
  inline bool has_box() const;
  inline void clear_box();
  static const int kBoxFieldNumber = 2;
  inline ::google::protobuf::int32 box() const;
  inline void set_box(::google::protobuf::int32 value);
  
  // optional int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional int64 hangTime = 4;
  inline bool has_hangtime() const;
  inline void clear_hangtime();
  static const int kHangTimeFieldNumber = 4;
  inline ::google::protobuf::int64 hangtime() const;
  inline void set_hangtime(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:protobuf.hang.TakeHangBox)
 private:
  inline void set_has_box();
  inline void clear_has_box();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_hangtime();
  inline void clear_has_hangtime();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 > items_;
  ::google::protobuf::int32 box_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int64 hangtime_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_hang_2eproto();
  friend void protobuf_AssignDesc_hang_2eproto();
  friend void protobuf_ShutdownFile_hang_2eproto();
  
  void InitAsDefaultInstance();
  static TakeHangBox* default_instance_;
};
// -------------------------------------------------------------------

class KillGbl : public ::google::protobuf::Message {
 public:
  KillGbl();
  virtual ~KillGbl();
  
  KillGbl(const KillGbl& from);
  
  inline KillGbl& operator=(const KillGbl& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const KillGbl& default_instance();
  
  void Swap(KillGbl* other);
  
  // implements Message ----------------------------------------------
  
  KillGbl* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KillGbl& from);
  void MergeFrom(const KillGbl& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protobuf.common.KVint3264 items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::protobuf::common::KVint3264& items(int index) const;
  inline ::protobuf::common::KVint3264* mutable_items(int index);
  inline ::protobuf::common::KVint3264* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 >*
      mutable_items();
  
  // required bool b = 2;
  inline bool has_b() const;
  inline void clear_b();
  static const int kBFieldNumber = 2;
  inline bool b() const;
  inline void set_b(bool value);
  
  // @@protoc_insertion_point(class_scope:protobuf.hang.KillGbl)
 private:
  inline void set_has_b();
  inline void clear_has_b();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 > items_;
  bool b_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_hang_2eproto();
  friend void protobuf_AssignDesc_hang_2eproto();
  friend void protobuf_ShutdownFile_hang_2eproto();
  
  void InitAsDefaultInstance();
  static KillGbl* default_instance_;
};
// -------------------------------------------------------------------

class KillGb2 : public ::google::protobuf::Message {
 public:
  KillGb2();
  virtual ~KillGb2();
  
  KillGb2(const KillGb2& from);
  
  inline KillGb2& operator=(const KillGb2& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const KillGb2& default_instance();
  
  void Swap(KillGb2* other);
  
  // implements Message ----------------------------------------------
  
  KillGb2* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KillGb2& from);
  void MergeFrom(const KillGb2& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protobuf.common.KVint3264 items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::protobuf::common::KVint3264& items(int index) const;
  inline ::protobuf::common::KVint3264* mutable_items(int index);
  inline ::protobuf::common::KVint3264* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 >*
      mutable_items();
  
  // required int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional int32 percent = 3;
  inline bool has_percent() const;
  inline void clear_percent();
  static const int kPercentFieldNumber = 3;
  inline ::google::protobuf::int32 percent() const;
  inline void set_percent(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protobuf.hang.KillGb2)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_percent();
  inline void clear_has_percent();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 > items_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 percent_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_hang_2eproto();
  friend void protobuf_AssignDesc_hang_2eproto();
  friend void protobuf_ShutdownFile_hang_2eproto();
  
  void InitAsDefaultInstance();
  static KillGb2* default_instance_;
};
// -------------------------------------------------------------------

class HangQuickInfo : public ::google::protobuf::Message {
 public:
  HangQuickInfo();
  virtual ~HangQuickInfo();
  
  HangQuickInfo(const HangQuickInfo& from);
  
  inline HangQuickInfo& operator=(const HangQuickInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const HangQuickInfo& default_instance();
  
  void Swap(HangQuickInfo* other);
  
  // implements Message ----------------------------------------------
  
  HangQuickInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HangQuickInfo& from);
  void MergeFrom(const HangQuickInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 lastTime = 1;
  inline bool has_lasttime() const;
  inline void clear_lasttime();
  static const int kLastTimeFieldNumber = 1;
  inline ::google::protobuf::int64 lasttime() const;
  inline void set_lasttime(::google::protobuf::int64 value);
  
  // required int64 updateTime = 2;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 2;
  inline ::google::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google::protobuf::int64 value);
  
  // optional int32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);
  
  // optional int32 period = 4;
  inline bool has_period() const;
  inline void clear_period();
  static const int kPeriodFieldNumber = 4;
  inline ::google::protobuf::int32 period() const;
  inline void set_period(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protobuf.hang.HangQuickInfo)
 private:
  inline void set_has_lasttime();
  inline void clear_has_lasttime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_period();
  inline void clear_has_period();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 lasttime_;
  ::google::protobuf::int64 updatetime_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::int32 period_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_hang_2eproto();
  friend void protobuf_AssignDesc_hang_2eproto();
  friend void protobuf_ShutdownFile_hang_2eproto();
  
  void InitAsDefaultInstance();
  static HangQuickInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// EntryHangMap

// optional int32 id = 1;
inline bool EntryHangMap::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EntryHangMap::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EntryHangMap::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EntryHangMap::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 EntryHangMap::id() const {
  return id_;
}
inline void EntryHangMap::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string guidev = 2;
inline bool EntryHangMap::has_guidev() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EntryHangMap::set_has_guidev() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EntryHangMap::clear_has_guidev() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EntryHangMap::clear_guidev() {
  if (guidev_ != &::google::protobuf::internal::kEmptyString) {
    guidev_->clear();
  }
  clear_has_guidev();
}
inline const ::std::string& EntryHangMap::guidev() const {
  return *guidev_;
}
inline void EntryHangMap::set_guidev(const ::std::string& value) {
  set_has_guidev();
  if (guidev_ == &::google::protobuf::internal::kEmptyString) {
    guidev_ = new ::std::string;
  }
  guidev_->assign(value);
}
inline void EntryHangMap::set_guidev(const char* value) {
  set_has_guidev();
  if (guidev_ == &::google::protobuf::internal::kEmptyString) {
    guidev_ = new ::std::string;
  }
  guidev_->assign(value);
}
inline void EntryHangMap::set_guidev(const char* value, size_t size) {
  set_has_guidev();
  if (guidev_ == &::google::protobuf::internal::kEmptyString) {
    guidev_ = new ::std::string;
  }
  guidev_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EntryHangMap::mutable_guidev() {
  set_has_guidev();
  if (guidev_ == &::google::protobuf::internal::kEmptyString) {
    guidev_ = new ::std::string;
  }
  return guidev_;
}
inline ::std::string* EntryHangMap::release_guidev() {
  clear_has_guidev();
  if (guidev_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guidev_;
    guidev_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// HangCurMap

// required int32 mapId = 1;
inline bool HangCurMap::has_mapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HangCurMap::set_has_mapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HangCurMap::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HangCurMap::clear_mapid() {
  mapid_ = 0;
  clear_has_mapid();
}
inline ::google::protobuf::int32 HangCurMap::mapid() const {
  return mapid_;
}
inline void HangCurMap::set_mapid(::google::protobuf::int32 value) {
  set_has_mapid();
  mapid_ = value;
}

// required int32 step = 2;
inline bool HangCurMap::has_step() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HangCurMap::set_has_step() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HangCurMap::clear_has_step() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HangCurMap::clear_step() {
  step_ = 0;
  clear_has_step();
}
inline ::google::protobuf::int32 HangCurMap::step() const {
  return step_;
}
inline void HangCurMap::set_step(::google::protobuf::int32 value) {
  set_has_step();
  step_ = value;
}

// repeated .protobuf.hang.Moster moster = 3;
inline int HangCurMap::moster_size() const {
  return moster_.size();
}
inline void HangCurMap::clear_moster() {
  moster_.Clear();
}
inline const ::protobuf::hang::Moster& HangCurMap::moster(int index) const {
  return moster_.Get(index);
}
inline ::protobuf::hang::Moster* HangCurMap::mutable_moster(int index) {
  return moster_.Mutable(index);
}
inline ::protobuf::hang::Moster* HangCurMap::add_moster() {
  return moster_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::hang::Moster >&
HangCurMap::moster() const {
  return moster_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::hang::Moster >*
HangCurMap::mutable_moster() {
  return &moster_;
}

// required int64 rand = 4;
inline bool HangCurMap::has_rand() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HangCurMap::set_has_rand() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HangCurMap::clear_has_rand() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HangCurMap::clear_rand() {
  rand_ = GOOGLE_LONGLONG(0);
  clear_has_rand();
}
inline ::google::protobuf::int64 HangCurMap::rand() const {
  return rand_;
}
inline void HangCurMap::set_rand(::google::protobuf::int64 value) {
  set_has_rand();
  rand_ = value;
}

// repeated .protobuf.common.KVint3264 goldHeap = 5;
inline int HangCurMap::goldheap_size() const {
  return goldheap_.size();
}
inline void HangCurMap::clear_goldheap() {
  goldheap_.Clear();
}
inline const ::protobuf::common::KVint3264& HangCurMap::goldheap(int index) const {
  return goldheap_.Get(index);
}
inline ::protobuf::common::KVint3264* HangCurMap::mutable_goldheap(int index) {
  return goldheap_.Mutable(index);
}
inline ::protobuf::common::KVint3264* HangCurMap::add_goldheap() {
  return goldheap_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 >&
HangCurMap::goldheap() const {
  return goldheap_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 >*
HangCurMap::mutable_goldheap() {
  return &goldheap_;
}

// repeated .protobuf.common.KVint3264 expHeap = 6;
inline int HangCurMap::expheap_size() const {
  return expheap_.size();
}
inline void HangCurMap::clear_expheap() {
  expheap_.Clear();
}
inline const ::protobuf::common::KVint3264& HangCurMap::expheap(int index) const {
  return expheap_.Get(index);
}
inline ::protobuf::common::KVint3264* HangCurMap::mutable_expheap(int index) {
  return expheap_.Mutable(index);
}
inline ::protobuf::common::KVint3264* HangCurMap::add_expheap() {
  return expheap_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 >&
HangCurMap::expheap() const {
  return expheap_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 >*
HangCurMap::mutable_expheap() {
  return &expheap_;
}

// required int32 box = 7;
inline bool HangCurMap::has_box() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void HangCurMap::set_has_box() {
  _has_bits_[0] |= 0x00000040u;
}
inline void HangCurMap::clear_has_box() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void HangCurMap::clear_box() {
  box_ = 0;
  clear_has_box();
}
inline ::google::protobuf::int32 HangCurMap::box() const {
  return box_;
}
inline void HangCurMap::set_box(::google::protobuf::int32 value) {
  set_has_box();
  box_ = value;
}

// required int32 boss = 8;
inline bool HangCurMap::has_boss() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void HangCurMap::set_has_boss() {
  _has_bits_[0] |= 0x00000080u;
}
inline void HangCurMap::clear_has_boss() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void HangCurMap::clear_boss() {
  boss_ = 0;
  clear_has_boss();
}
inline ::google::protobuf::int32 HangCurMap::boss() const {
  return boss_;
}
inline void HangCurMap::set_boss(::google::protobuf::int32 value) {
  set_has_boss();
  boss_ = value;
}

// required int32 hangMaxMap = 9;
inline bool HangCurMap::has_hangmaxmap() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void HangCurMap::set_has_hangmaxmap() {
  _has_bits_[0] |= 0x00000100u;
}
inline void HangCurMap::clear_has_hangmaxmap() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void HangCurMap::clear_hangmaxmap() {
  hangmaxmap_ = 0;
  clear_has_hangmaxmap();
}
inline ::google::protobuf::int32 HangCurMap::hangmaxmap() const {
  return hangmaxmap_;
}
inline void HangCurMap::set_hangmaxmap(::google::protobuf::int32 value) {
  set_has_hangmaxmap();
  hangmaxmap_ = value;
}

// optional int32 time = 10;
inline bool HangCurMap::has_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void HangCurMap::set_has_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void HangCurMap::clear_has_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void HangCurMap::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 HangCurMap::time() const {
  return time_;
}
inline void HangCurMap::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// optional int64 hangTime = 11;
inline bool HangCurMap::has_hangtime() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void HangCurMap::set_has_hangtime() {
  _has_bits_[0] |= 0x00000400u;
}
inline void HangCurMap::clear_has_hangtime() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void HangCurMap::clear_hangtime() {
  hangtime_ = GOOGLE_LONGLONG(0);
  clear_has_hangtime();
}
inline ::google::protobuf::int64 HangCurMap::hangtime() const {
  return hangtime_;
}
inline void HangCurMap::set_hangtime(::google::protobuf::int64 value) {
  set_has_hangtime();
  hangtime_ = value;
}

// -------------------------------------------------------------------

// OfflineGold

// repeated .protobuf.common.KVint3264 goldHeap = 1;
inline int OfflineGold::goldheap_size() const {
  return goldheap_.size();
}
inline void OfflineGold::clear_goldheap() {
  goldheap_.Clear();
}
inline const ::protobuf::common::KVint3264& OfflineGold::goldheap(int index) const {
  return goldheap_.Get(index);
}
inline ::protobuf::common::KVint3264* OfflineGold::mutable_goldheap(int index) {
  return goldheap_.Mutable(index);
}
inline ::protobuf::common::KVint3264* OfflineGold::add_goldheap() {
  return goldheap_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 >&
OfflineGold::goldheap() const {
  return goldheap_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 >*
OfflineGold::mutable_goldheap() {
  return &goldheap_;
}

// -------------------------------------------------------------------

// Moster

// required int32 mosterId = 1;
inline bool Moster::has_mosterid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Moster::set_has_mosterid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Moster::clear_has_mosterid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Moster::clear_mosterid() {
  mosterid_ = 0;
  clear_has_mosterid();
}
inline ::google::protobuf::int32 Moster::mosterid() const {
  return mosterid_;
}
inline void Moster::set_mosterid(::google::protobuf::int32 value) {
  set_has_mosterid();
  mosterid_ = value;
}

// required int32 gold = 2;
inline bool Moster::has_gold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Moster::set_has_gold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Moster::clear_has_gold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Moster::clear_gold() {
  gold_ = 0;
  clear_has_gold();
}
inline ::google::protobuf::int32 Moster::gold() const {
  return gold_;
}
inline void Moster::set_gold(::google::protobuf::int32 value) {
  set_has_gold();
  gold_ = value;
}

// required int32 exp = 3;
inline bool Moster::has_exp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Moster::set_has_exp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Moster::clear_has_exp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Moster::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 Moster::exp() const {
  return exp_;
}
inline void Moster::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// repeated .protobuf.common.KVint3232 item = 4;
inline int Moster::item_size() const {
  return item_.size();
}
inline void Moster::clear_item() {
  item_.Clear();
}
inline const ::protobuf::common::KVint3232& Moster::item(int index) const {
  return item_.Get(index);
}
inline ::protobuf::common::KVint3232* Moster::mutable_item(int index) {
  return item_.Mutable(index);
}
inline ::protobuf::common::KVint3232* Moster::add_item() {
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >&
Moster::item() const {
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >*
Moster::mutable_item() {
  return &item_;
}

// -------------------------------------------------------------------

// HangLineup

// repeated int32 heros = 1;
inline int HangLineup::heros_size() const {
  return heros_.size();
}
inline void HangLineup::clear_heros() {
  heros_.Clear();
}
inline ::google::protobuf::int32 HangLineup::heros(int index) const {
  return heros_.Get(index);
}
inline void HangLineup::set_heros(int index, ::google::protobuf::int32 value) {
  heros_.Set(index, value);
}
inline void HangLineup::add_heros(::google::protobuf::int32 value) {
  heros_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HangLineup::heros() const {
  return heros_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HangLineup::mutable_heros() {
  return &heros_;
}

// optional int32 power = 3;
inline bool HangLineup::has_power() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HangLineup::set_has_power() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HangLineup::clear_has_power() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HangLineup::clear_power() {
  power_ = 0;
  clear_has_power();
}
inline ::google::protobuf::int32 HangLineup::power() const {
  return power_;
}
inline void HangLineup::set_power(::google::protobuf::int32 value) {
  set_has_power();
  power_ = value;
}

// optional string guidev = 4;
inline bool HangLineup::has_guidev() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HangLineup::set_has_guidev() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HangLineup::clear_has_guidev() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HangLineup::clear_guidev() {
  if (guidev_ != &::google::protobuf::internal::kEmptyString) {
    guidev_->clear();
  }
  clear_has_guidev();
}
inline const ::std::string& HangLineup::guidev() const {
  return *guidev_;
}
inline void HangLineup::set_guidev(const ::std::string& value) {
  set_has_guidev();
  if (guidev_ == &::google::protobuf::internal::kEmptyString) {
    guidev_ = new ::std::string;
  }
  guidev_->assign(value);
}
inline void HangLineup::set_guidev(const char* value) {
  set_has_guidev();
  if (guidev_ == &::google::protobuf::internal::kEmptyString) {
    guidev_ = new ::std::string;
  }
  guidev_->assign(value);
}
inline void HangLineup::set_guidev(const char* value, size_t size) {
  set_has_guidev();
  if (guidev_ == &::google::protobuf::internal::kEmptyString) {
    guidev_ = new ::std::string;
  }
  guidev_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HangLineup::mutable_guidev() {
  set_has_guidev();
  if (guidev_ == &::google::protobuf::internal::kEmptyString) {
    guidev_ = new ::std::string;
  }
  return guidev_;
}
inline ::std::string* HangLineup::release_guidev() {
  clear_has_guidev();
  if (guidev_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guidev_;
    guidev_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// TakeHangBoxReq

// required int32 type = 1;
inline bool TakeHangBoxReq::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TakeHangBoxReq::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TakeHangBoxReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TakeHangBoxReq::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 TakeHangBoxReq::type() const {
  return type_;
}
inline void TakeHangBoxReq::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional .protobuf.common.GuideString guildStr = 2;
inline bool TakeHangBoxReq::has_guildstr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TakeHangBoxReq::set_has_guildstr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TakeHangBoxReq::clear_has_guildstr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TakeHangBoxReq::clear_guildstr() {
  if (guildstr_ != NULL) guildstr_->::protobuf::common::GuideString::Clear();
  clear_has_guildstr();
}
inline const ::protobuf::common::GuideString& TakeHangBoxReq::guildstr() const {
  return guildstr_ != NULL ? *guildstr_ : *default_instance_->guildstr_;
}
inline ::protobuf::common::GuideString* TakeHangBoxReq::mutable_guildstr() {
  set_has_guildstr();
  if (guildstr_ == NULL) guildstr_ = new ::protobuf::common::GuideString;
  return guildstr_;
}
inline ::protobuf::common::GuideString* TakeHangBoxReq::release_guildstr() {
  clear_has_guildstr();
  ::protobuf::common::GuideString* temp = guildstr_;
  guildstr_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// TakeHangBox

// repeated .protobuf.common.KVint3264 items = 1;
inline int TakeHangBox::items_size() const {
  return items_.size();
}
inline void TakeHangBox::clear_items() {
  items_.Clear();
}
inline const ::protobuf::common::KVint3264& TakeHangBox::items(int index) const {
  return items_.Get(index);
}
inline ::protobuf::common::KVint3264* TakeHangBox::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::protobuf::common::KVint3264* TakeHangBox::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 >&
TakeHangBox::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 >*
TakeHangBox::mutable_items() {
  return &items_;
}

// required int32 box = 2;
inline bool TakeHangBox::has_box() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TakeHangBox::set_has_box() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TakeHangBox::clear_has_box() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TakeHangBox::clear_box() {
  box_ = 0;
  clear_has_box();
}
inline ::google::protobuf::int32 TakeHangBox::box() const {
  return box_;
}
inline void TakeHangBox::set_box(::google::protobuf::int32 value) {
  set_has_box();
  box_ = value;
}

// optional int32 type = 3;
inline bool TakeHangBox::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TakeHangBox::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TakeHangBox::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TakeHangBox::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 TakeHangBox::type() const {
  return type_;
}
inline void TakeHangBox::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int64 hangTime = 4;
inline bool TakeHangBox::has_hangtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TakeHangBox::set_has_hangtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TakeHangBox::clear_has_hangtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TakeHangBox::clear_hangtime() {
  hangtime_ = GOOGLE_LONGLONG(0);
  clear_has_hangtime();
}
inline ::google::protobuf::int64 TakeHangBox::hangtime() const {
  return hangtime_;
}
inline void TakeHangBox::set_hangtime(::google::protobuf::int64 value) {
  set_has_hangtime();
  hangtime_ = value;
}

// -------------------------------------------------------------------

// KillGbl

// repeated .protobuf.common.KVint3264 items = 1;
inline int KillGbl::items_size() const {
  return items_.size();
}
inline void KillGbl::clear_items() {
  items_.Clear();
}
inline const ::protobuf::common::KVint3264& KillGbl::items(int index) const {
  return items_.Get(index);
}
inline ::protobuf::common::KVint3264* KillGbl::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::protobuf::common::KVint3264* KillGbl::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 >&
KillGbl::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 >*
KillGbl::mutable_items() {
  return &items_;
}

// required bool b = 2;
inline bool KillGbl::has_b() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KillGbl::set_has_b() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KillGbl::clear_has_b() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KillGbl::clear_b() {
  b_ = false;
  clear_has_b();
}
inline bool KillGbl::b() const {
  return b_;
}
inline void KillGbl::set_b(bool value) {
  set_has_b();
  b_ = value;
}

// -------------------------------------------------------------------

// KillGb2

// repeated .protobuf.common.KVint3264 items = 1;
inline int KillGb2::items_size() const {
  return items_.size();
}
inline void KillGb2::clear_items() {
  items_.Clear();
}
inline const ::protobuf::common::KVint3264& KillGb2::items(int index) const {
  return items_.Get(index);
}
inline ::protobuf::common::KVint3264* KillGb2::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::protobuf::common::KVint3264* KillGb2::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 >&
KillGb2::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 >*
KillGb2::mutable_items() {
  return &items_;
}

// required int32 type = 2;
inline bool KillGb2::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KillGb2::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KillGb2::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KillGb2::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 KillGb2::type() const {
  return type_;
}
inline void KillGb2::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 percent = 3;
inline bool KillGb2::has_percent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KillGb2::set_has_percent() {
  _has_bits_[0] |= 0x00000004u;
}
inline void KillGb2::clear_has_percent() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void KillGb2::clear_percent() {
  percent_ = 0;
  clear_has_percent();
}
inline ::google::protobuf::int32 KillGb2::percent() const {
  return percent_;
}
inline void KillGb2::set_percent(::google::protobuf::int32 value) {
  set_has_percent();
  percent_ = value;
}

// -------------------------------------------------------------------

// HangQuickInfo

// required int64 lastTime = 1;
inline bool HangQuickInfo::has_lasttime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HangQuickInfo::set_has_lasttime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HangQuickInfo::clear_has_lasttime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HangQuickInfo::clear_lasttime() {
  lasttime_ = GOOGLE_LONGLONG(0);
  clear_has_lasttime();
}
inline ::google::protobuf::int64 HangQuickInfo::lasttime() const {
  return lasttime_;
}
inline void HangQuickInfo::set_lasttime(::google::protobuf::int64 value) {
  set_has_lasttime();
  lasttime_ = value;
}

// required int64 updateTime = 2;
inline bool HangQuickInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HangQuickInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HangQuickInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HangQuickInfo::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::int64 HangQuickInfo::updatetime() const {
  return updatetime_;
}
inline void HangQuickInfo::set_updatetime(::google::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
}

// optional int32 count = 3;
inline bool HangQuickInfo::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HangQuickInfo::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HangQuickInfo::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HangQuickInfo::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 HangQuickInfo::count() const {
  return count_;
}
inline void HangQuickInfo::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// optional int32 period = 4;
inline bool HangQuickInfo::has_period() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HangQuickInfo::set_has_period() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HangQuickInfo::clear_has_period() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HangQuickInfo::clear_period() {
  period_ = 0;
  clear_has_period();
}
inline ::google::protobuf::int32 HangQuickInfo::period() const {
  return period_;
}
inline void HangQuickInfo::set_period(::google::protobuf::int32 value) {
  set_has_period();
  period_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace hang
}  // namespace protobuf

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_hang_2eproto__INCLUDED
