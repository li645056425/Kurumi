// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "summon.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protobuf {
namespace summon {

namespace {

const ::google::protobuf::Descriptor* Summon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Summon_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroReplace_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroReplace_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddHeroReplace_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddHeroReplace_reflection_ = NULL;
const ::google::protobuf::Descriptor* SummonCamp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SummonCamp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SummonSelfChose_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SummonSelfChose_reflection_ = NULL;
const ::google::protobuf::Descriptor* WishList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WishList_reflection_ = NULL;
const ::google::protobuf::Descriptor* WishListInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WishListInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_summon_2eproto() {
  protobuf_AddDesc_summon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "summon.proto");
  GOOGLE_CHECK(file != NULL);
  Summon_descriptor_ = file->message_type(0);
  static const int Summon_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Summon, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Summon, hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Summon, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Summon, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Summon, freenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Summon, king_),
  };
  Summon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Summon_descriptor_,
      Summon::default_instance_,
      Summon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Summon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Summon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Summon));
  HeroReplace_descriptor_ = file->message_type(1);
  static const int HeroReplace_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroReplace, hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroReplace, items_),
  };
  HeroReplace_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroReplace_descriptor_,
      HeroReplace::default_instance_,
      HeroReplace_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroReplace, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroReplace, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroReplace));
  AddHeroReplace_descriptor_ = file->message_type(2);
  static const int AddHeroReplace_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddHeroReplace, hero_),
  };
  AddHeroReplace_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddHeroReplace_descriptor_,
      AddHeroReplace::default_instance_,
      AddHeroReplace_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddHeroReplace, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddHeroReplace, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddHeroReplace));
  SummonCamp_descriptor_ = file->message_type(3);
  static const int SummonCamp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummonCamp, nexttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummonCamp, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummonCamp, campfreenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummonCamp, nextcampid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummonCamp, freenumber_),
  };
  SummonCamp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SummonCamp_descriptor_,
      SummonCamp::default_instance_,
      SummonCamp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummonCamp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummonCamp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SummonCamp));
  SummonSelfChose_descriptor_ = file->message_type(4);
  static const int SummonSelfChose_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummonSelfChose, selfchoseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummonSelfChose, selfchosenonecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummonSelfChose, freenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummonSelfChose, daycout_),
  };
  SummonSelfChose_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SummonSelfChose_descriptor_,
      SummonSelfChose::default_instance_,
      SummonSelfChose_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummonSelfChose, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummonSelfChose, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SummonSelfChose));
  WishList_descriptor_ = file->message_type(5);
  static const int WishList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WishList, wishinfo_),
  };
  WishList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WishList_descriptor_,
      WishList::default_instance_,
      WishList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WishList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WishList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WishList));
  WishListInfo_descriptor_ = file->message_type(6);
  static const int WishListInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WishListInfo, factiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WishListInfo, herolist_),
  };
  WishListInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WishListInfo_descriptor_,
      WishListInfo::default_instance_,
      WishListInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WishListInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WishListInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WishListInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_summon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Summon_descriptor_, &Summon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroReplace_descriptor_, &HeroReplace::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddHeroReplace_descriptor_, &AddHeroReplace::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SummonCamp_descriptor_, &SummonCamp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SummonSelfChose_descriptor_, &SummonSelfChose::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WishList_descriptor_, &WishList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WishListInfo_descriptor_, &WishListInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_summon_2eproto() {
  delete Summon::default_instance_;
  delete Summon_reflection_;
  delete HeroReplace::default_instance_;
  delete HeroReplace_reflection_;
  delete AddHeroReplace::default_instance_;
  delete AddHeroReplace_reflection_;
  delete SummonCamp::default_instance_;
  delete SummonCamp_reflection_;
  delete SummonSelfChose::default_instance_;
  delete SummonSelfChose_reflection_;
  delete WishList::default_instance_;
  delete WishList_reflection_;
  delete WishListInfo::default_instance_;
  delete WishListInfo_reflection_;
}

void protobuf_AddDesc_summon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf::common::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014summon.proto\022\017protobuf.summon\032\014common."
    "proto\"\262\001\n\006Summon\022\014\n\004type\030\001 \002(\005\022#\n\004hero\030\002"
    " \003(\0132\025.protobuf.common.Hero\022)\n\005items\030\003 \003"
    "(\0132\032.protobuf.common.KVint3232\022\014\n\004time\030\004"
    " \001(\003\022.\n\nfreeNumber\030\005 \003(\0132\032.protobuf.comm"
    "on.KVint3232\022\014\n\004king\030\006 \001(\005\"]\n\013HeroReplac"
    "e\022#\n\004hero\030\001 \002(\0132\025.protobuf.common.Hero\022)"
    "\n\005items\030\002 \002(\0132\032.protobuf.common.KVint323"
    "2\"5\n\016AddHeroReplace\022#\n\004hero\030\001 \003(\0132\025.prot"
    "obuf.common.Hero\"\207\001\n\nSummonCamp\022\020\n\010nextT"
    "ime\030\001 \001(\003\022\016\n\006campId\030\002 \001(\005\022\023\n\013campFreeNum"
    "\030\003 \001(\005\022\022\n\nnextCampId\030\004 \001(\005\022.\n\nfreeNumber"
    "\030\005 \003(\0132\032.protobuf.common.KVint3232\"g\n\017Su"
    "mmonSelfChose\022\023\n\013selfChoseId\030\001 \001(\005\022\032\n\022se"
    "lfChoseNoneCount\030\002 \001(\005\022\022\n\nfreeNumber\030\003 \001"
    "(\005\022\017\n\007dayCout\030\004 \001(\005\";\n\010WishList\022/\n\010wishI"
    "nfo\030\001 \003(\0132\035.protobuf.summon.WishListInfo"
    "\"5\n\014WishListInfo\022\023\n\013factionType\030\001 \001(\005\022\020\n"
    "\010heroList\030\002 \003(\005B\"\n\023xag.idgo.core.protoB\013"
    "SummonProto", 771);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "summon.proto", &protobuf_RegisterTypes);
  Summon::default_instance_ = new Summon();
  HeroReplace::default_instance_ = new HeroReplace();
  AddHeroReplace::default_instance_ = new AddHeroReplace();
  SummonCamp::default_instance_ = new SummonCamp();
  SummonSelfChose::default_instance_ = new SummonSelfChose();
  WishList::default_instance_ = new WishList();
  WishListInfo::default_instance_ = new WishListInfo();
  Summon::default_instance_->InitAsDefaultInstance();
  HeroReplace::default_instance_->InitAsDefaultInstance();
  AddHeroReplace::default_instance_->InitAsDefaultInstance();
  SummonCamp::default_instance_->InitAsDefaultInstance();
  SummonSelfChose::default_instance_->InitAsDefaultInstance();
  WishList::default_instance_->InitAsDefaultInstance();
  WishListInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_summon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_summon_2eproto {
  StaticDescriptorInitializer_summon_2eproto() {
    protobuf_AddDesc_summon_2eproto();
  }
} static_descriptor_initializer_summon_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Summon::kTypeFieldNumber;
const int Summon::kHeroFieldNumber;
const int Summon::kItemsFieldNumber;
const int Summon::kTimeFieldNumber;
const int Summon::kFreeNumberFieldNumber;
const int Summon::kKingFieldNumber;
#endif  // !_MSC_VER

Summon::Summon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Summon::InitAsDefaultInstance() {
}

Summon::Summon(const Summon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Summon::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  king_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Summon::~Summon() {
  SharedDtor();
}

void Summon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Summon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Summon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Summon_descriptor_;
}

const Summon& Summon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_summon_2eproto();  return *default_instance_;
}

Summon* Summon::default_instance_ = NULL;

Summon* Summon::New() const {
  return new Summon;
}

void Summon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    time_ = GOOGLE_LONGLONG(0);
    king_ = 0;
  }
  hero_.Clear();
  items_.Clear();
  freenumber_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Summon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hero;
        break;
      }
      
      // repeated .protobuf.common.Hero hero = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hero()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hero;
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }
      
      // repeated .protobuf.common.KVint3232 items = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }
      
      // optional int64 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_freeNumber;
        break;
      }
      
      // repeated .protobuf.common.KVint3232 freeNumber = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_freeNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_freenumber()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_freeNumber;
        if (input->ExpectTag(48)) goto parse_king;
        break;
      }
      
      // optional int32 king = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_king:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &king_)));
          set_has_king();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Summon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // repeated .protobuf.common.Hero hero = 2;
  for (int i = 0; i < this->hero_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->hero(i), output);
  }
  
  // repeated .protobuf.common.KVint3232 items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }
  
  // optional int64 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->time(), output);
  }
  
  // repeated .protobuf.common.KVint3232 freeNumber = 5;
  for (int i = 0; i < this->freenumber_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->freenumber(i), output);
  }
  
  // optional int32 king = 6;
  if (has_king()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->king(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Summon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // repeated .protobuf.common.Hero hero = 2;
  for (int i = 0; i < this->hero_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->hero(i), target);
  }
  
  // repeated .protobuf.common.KVint3232 items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }
  
  // optional int64 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->time(), target);
  }
  
  // repeated .protobuf.common.KVint3232 freeNumber = 5;
  for (int i = 0; i < this->freenumber_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->freenumber(i), target);
  }
  
  // optional int32 king = 6;
  if (has_king()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->king(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Summon::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int64 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }
    
    // optional int32 king = 6;
    if (has_king()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->king());
    }
    
  }
  // repeated .protobuf.common.Hero hero = 2;
  total_size += 1 * this->hero_size();
  for (int i = 0; i < this->hero_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hero(i));
  }
  
  // repeated .protobuf.common.KVint3232 items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  // repeated .protobuf.common.KVint3232 freeNumber = 5;
  total_size += 1 * this->freenumber_size();
  for (int i = 0; i < this->freenumber_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->freenumber(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Summon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Summon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Summon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Summon::MergeFrom(const Summon& from) {
  GOOGLE_CHECK_NE(&from, this);
  hero_.MergeFrom(from.hero_);
  items_.MergeFrom(from.items_);
  freenumber_.MergeFrom(from.freenumber_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_king()) {
      set_king(from.king());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Summon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Summon::CopyFrom(const Summon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Summon::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < hero_size(); i++) {
    if (!this->hero(i).IsInitialized()) return false;
  }
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  for (int i = 0; i < freenumber_size(); i++) {
    if (!this->freenumber(i).IsInitialized()) return false;
  }
  return true;
}

void Summon::Swap(Summon* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    hero_.Swap(&other->hero_);
    items_.Swap(&other->items_);
    std::swap(time_, other->time_);
    freenumber_.Swap(&other->freenumber_);
    std::swap(king_, other->king_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Summon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Summon_descriptor_;
  metadata.reflection = Summon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroReplace::kHeroFieldNumber;
const int HeroReplace::kItemsFieldNumber;
#endif  // !_MSC_VER

HeroReplace::HeroReplace()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeroReplace::InitAsDefaultInstance() {
  hero_ = const_cast< ::protobuf::common::Hero*>(&::protobuf::common::Hero::default_instance());
  items_ = const_cast< ::protobuf::common::KVint3232*>(&::protobuf::common::KVint3232::default_instance());
}

HeroReplace::HeroReplace(const HeroReplace& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeroReplace::SharedCtor() {
  _cached_size_ = 0;
  hero_ = NULL;
  items_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroReplace::~HeroReplace() {
  SharedDtor();
}

void HeroReplace::SharedDtor() {
  if (this != default_instance_) {
    delete hero_;
    delete items_;
  }
}

void HeroReplace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroReplace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroReplace_descriptor_;
}

const HeroReplace& HeroReplace::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_summon_2eproto();  return *default_instance_;
}

HeroReplace* HeroReplace::default_instance_ = NULL;

HeroReplace* HeroReplace::New() const {
  return new HeroReplace;
}

void HeroReplace::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_hero()) {
      if (hero_ != NULL) hero_->::protobuf::common::Hero::Clear();
    }
    if (has_items()) {
      if (items_ != NULL) items_->::protobuf::common::KVint3232::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroReplace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protobuf.common.Hero hero = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hero()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }
      
      // required .protobuf.common.KVint3232 items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeroReplace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protobuf.common.Hero hero = 1;
  if (has_hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hero(), output);
  }
  
  // required .protobuf.common.KVint3232 items = 2;
  if (has_items()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeroReplace::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protobuf.common.Hero hero = 1;
  if (has_hero()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hero(), target);
  }
  
  // required .protobuf.common.KVint3232 items = 2;
  if (has_items()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeroReplace::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protobuf.common.Hero hero = 1;
    if (has_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hero());
    }
    
    // required .protobuf.common.KVint3232 items = 2;
    if (has_items()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroReplace::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroReplace* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroReplace*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroReplace::MergeFrom(const HeroReplace& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero()) {
      mutable_hero()->::protobuf::common::Hero::MergeFrom(from.hero());
    }
    if (from.has_items()) {
      mutable_items()->::protobuf::common::KVint3232::MergeFrom(from.items());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroReplace::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroReplace::CopyFrom(const HeroReplace& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroReplace::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_hero()) {
    if (!this->hero().IsInitialized()) return false;
  }
  if (has_items()) {
    if (!this->items().IsInitialized()) return false;
  }
  return true;
}

void HeroReplace::Swap(HeroReplace* other) {
  if (other != this) {
    std::swap(hero_, other->hero_);
    std::swap(items_, other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroReplace::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroReplace_descriptor_;
  metadata.reflection = HeroReplace_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddHeroReplace::kHeroFieldNumber;
#endif  // !_MSC_VER

AddHeroReplace::AddHeroReplace()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddHeroReplace::InitAsDefaultInstance() {
}

AddHeroReplace::AddHeroReplace(const AddHeroReplace& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddHeroReplace::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddHeroReplace::~AddHeroReplace() {
  SharedDtor();
}

void AddHeroReplace::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddHeroReplace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddHeroReplace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddHeroReplace_descriptor_;
}

const AddHeroReplace& AddHeroReplace::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_summon_2eproto();  return *default_instance_;
}

AddHeroReplace* AddHeroReplace::default_instance_ = NULL;

AddHeroReplace* AddHeroReplace::New() const {
  return new AddHeroReplace;
}

void AddHeroReplace::Clear() {
  hero_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddHeroReplace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.common.Hero hero = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hero()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_hero;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddHeroReplace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.common.Hero hero = 1;
  for (int i = 0; i < this->hero_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hero(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddHeroReplace::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.common.Hero hero = 1;
  for (int i = 0; i < this->hero_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hero(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddHeroReplace::ByteSize() const {
  int total_size = 0;
  
  // repeated .protobuf.common.Hero hero = 1;
  total_size += 1 * this->hero_size();
  for (int i = 0; i < this->hero_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hero(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddHeroReplace::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddHeroReplace* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddHeroReplace*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddHeroReplace::MergeFrom(const AddHeroReplace& from) {
  GOOGLE_CHECK_NE(&from, this);
  hero_.MergeFrom(from.hero_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddHeroReplace::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddHeroReplace::CopyFrom(const AddHeroReplace& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddHeroReplace::IsInitialized() const {
  
  for (int i = 0; i < hero_size(); i++) {
    if (!this->hero(i).IsInitialized()) return false;
  }
  return true;
}

void AddHeroReplace::Swap(AddHeroReplace* other) {
  if (other != this) {
    hero_.Swap(&other->hero_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddHeroReplace::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddHeroReplace_descriptor_;
  metadata.reflection = AddHeroReplace_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SummonCamp::kNextTimeFieldNumber;
const int SummonCamp::kCampIdFieldNumber;
const int SummonCamp::kCampFreeNumFieldNumber;
const int SummonCamp::kNextCampIdFieldNumber;
const int SummonCamp::kFreeNumberFieldNumber;
#endif  // !_MSC_VER

SummonCamp::SummonCamp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SummonCamp::InitAsDefaultInstance() {
}

SummonCamp::SummonCamp(const SummonCamp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SummonCamp::SharedCtor() {
  _cached_size_ = 0;
  nexttime_ = GOOGLE_LONGLONG(0);
  campid_ = 0;
  campfreenum_ = 0;
  nextcampid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SummonCamp::~SummonCamp() {
  SharedDtor();
}

void SummonCamp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SummonCamp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SummonCamp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SummonCamp_descriptor_;
}

const SummonCamp& SummonCamp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_summon_2eproto();  return *default_instance_;
}

SummonCamp* SummonCamp::default_instance_ = NULL;

SummonCamp* SummonCamp::New() const {
  return new SummonCamp;
}

void SummonCamp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nexttime_ = GOOGLE_LONGLONG(0);
    campid_ = 0;
    campfreenum_ = 0;
    nextcampid_ = 0;
  }
  freenumber_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SummonCamp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 nextTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nexttime_)));
          set_has_nexttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_campId;
        break;
      }
      
      // optional int32 campId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_campId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_campFreeNum;
        break;
      }
      
      // optional int32 campFreeNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_campFreeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &campfreenum_)));
          set_has_campfreenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nextCampId;
        break;
      }
      
      // optional int32 nextCampId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextCampId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nextcampid_)));
          set_has_nextcampid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_freeNumber;
        break;
      }
      
      // repeated .protobuf.common.KVint3232 freeNumber = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_freeNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_freenumber()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_freeNumber;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SummonCamp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 nextTime = 1;
  if (has_nexttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->nexttime(), output);
  }
  
  // optional int32 campId = 2;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->campid(), output);
  }
  
  // optional int32 campFreeNum = 3;
  if (has_campfreenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->campfreenum(), output);
  }
  
  // optional int32 nextCampId = 4;
  if (has_nextcampid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->nextcampid(), output);
  }
  
  // repeated .protobuf.common.KVint3232 freeNumber = 5;
  for (int i = 0; i < this->freenumber_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->freenumber(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SummonCamp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 nextTime = 1;
  if (has_nexttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->nexttime(), target);
  }
  
  // optional int32 campId = 2;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->campid(), target);
  }
  
  // optional int32 campFreeNum = 3;
  if (has_campfreenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->campfreenum(), target);
  }
  
  // optional int32 nextCampId = 4;
  if (has_nextcampid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->nextcampid(), target);
  }
  
  // repeated .protobuf.common.KVint3232 freeNumber = 5;
  for (int i = 0; i < this->freenumber_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->freenumber(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SummonCamp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 nextTime = 1;
    if (has_nexttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->nexttime());
    }
    
    // optional int32 campId = 2;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->campid());
    }
    
    // optional int32 campFreeNum = 3;
    if (has_campfreenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->campfreenum());
    }
    
    // optional int32 nextCampId = 4;
    if (has_nextcampid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nextcampid());
    }
    
  }
  // repeated .protobuf.common.KVint3232 freeNumber = 5;
  total_size += 1 * this->freenumber_size();
  for (int i = 0; i < this->freenumber_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->freenumber(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SummonCamp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SummonCamp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SummonCamp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SummonCamp::MergeFrom(const SummonCamp& from) {
  GOOGLE_CHECK_NE(&from, this);
  freenumber_.MergeFrom(from.freenumber_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nexttime()) {
      set_nexttime(from.nexttime());
    }
    if (from.has_campid()) {
      set_campid(from.campid());
    }
    if (from.has_campfreenum()) {
      set_campfreenum(from.campfreenum());
    }
    if (from.has_nextcampid()) {
      set_nextcampid(from.nextcampid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SummonCamp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SummonCamp::CopyFrom(const SummonCamp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SummonCamp::IsInitialized() const {
  
  for (int i = 0; i < freenumber_size(); i++) {
    if (!this->freenumber(i).IsInitialized()) return false;
  }
  return true;
}

void SummonCamp::Swap(SummonCamp* other) {
  if (other != this) {
    std::swap(nexttime_, other->nexttime_);
    std::swap(campid_, other->campid_);
    std::swap(campfreenum_, other->campfreenum_);
    std::swap(nextcampid_, other->nextcampid_);
    freenumber_.Swap(&other->freenumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SummonCamp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SummonCamp_descriptor_;
  metadata.reflection = SummonCamp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SummonSelfChose::kSelfChoseIdFieldNumber;
const int SummonSelfChose::kSelfChoseNoneCountFieldNumber;
const int SummonSelfChose::kFreeNumberFieldNumber;
const int SummonSelfChose::kDayCoutFieldNumber;
#endif  // !_MSC_VER

SummonSelfChose::SummonSelfChose()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SummonSelfChose::InitAsDefaultInstance() {
}

SummonSelfChose::SummonSelfChose(const SummonSelfChose& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SummonSelfChose::SharedCtor() {
  _cached_size_ = 0;
  selfchoseid_ = 0;
  selfchosenonecount_ = 0;
  freenumber_ = 0;
  daycout_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SummonSelfChose::~SummonSelfChose() {
  SharedDtor();
}

void SummonSelfChose::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SummonSelfChose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SummonSelfChose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SummonSelfChose_descriptor_;
}

const SummonSelfChose& SummonSelfChose::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_summon_2eproto();  return *default_instance_;
}

SummonSelfChose* SummonSelfChose::default_instance_ = NULL;

SummonSelfChose* SummonSelfChose::New() const {
  return new SummonSelfChose;
}

void SummonSelfChose::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    selfchoseid_ = 0;
    selfchosenonecount_ = 0;
    freenumber_ = 0;
    daycout_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SummonSelfChose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 selfChoseId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selfchoseid_)));
          set_has_selfchoseid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_selfChoseNoneCount;
        break;
      }
      
      // optional int32 selfChoseNoneCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selfChoseNoneCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selfchosenonecount_)));
          set_has_selfchosenonecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_freeNumber;
        break;
      }
      
      // optional int32 freeNumber = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freeNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freenumber_)));
          set_has_freenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dayCout;
        break;
      }
      
      // optional int32 dayCout = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dayCout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &daycout_)));
          set_has_daycout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SummonSelfChose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 selfChoseId = 1;
  if (has_selfchoseid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->selfchoseid(), output);
  }
  
  // optional int32 selfChoseNoneCount = 2;
  if (has_selfchosenonecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->selfchosenonecount(), output);
  }
  
  // optional int32 freeNumber = 3;
  if (has_freenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->freenumber(), output);
  }
  
  // optional int32 dayCout = 4;
  if (has_daycout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->daycout(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SummonSelfChose::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 selfChoseId = 1;
  if (has_selfchoseid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->selfchoseid(), target);
  }
  
  // optional int32 selfChoseNoneCount = 2;
  if (has_selfchosenonecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->selfchosenonecount(), target);
  }
  
  // optional int32 freeNumber = 3;
  if (has_freenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->freenumber(), target);
  }
  
  // optional int32 dayCout = 4;
  if (has_daycout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->daycout(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SummonSelfChose::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 selfChoseId = 1;
    if (has_selfchoseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selfchoseid());
    }
    
    // optional int32 selfChoseNoneCount = 2;
    if (has_selfchosenonecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selfchosenonecount());
    }
    
    // optional int32 freeNumber = 3;
    if (has_freenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->freenumber());
    }
    
    // optional int32 dayCout = 4;
    if (has_daycout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daycout());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SummonSelfChose::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SummonSelfChose* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SummonSelfChose*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SummonSelfChose::MergeFrom(const SummonSelfChose& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfchoseid()) {
      set_selfchoseid(from.selfchoseid());
    }
    if (from.has_selfchosenonecount()) {
      set_selfchosenonecount(from.selfchosenonecount());
    }
    if (from.has_freenumber()) {
      set_freenumber(from.freenumber());
    }
    if (from.has_daycout()) {
      set_daycout(from.daycout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SummonSelfChose::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SummonSelfChose::CopyFrom(const SummonSelfChose& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SummonSelfChose::IsInitialized() const {
  
  return true;
}

void SummonSelfChose::Swap(SummonSelfChose* other) {
  if (other != this) {
    std::swap(selfchoseid_, other->selfchoseid_);
    std::swap(selfchosenonecount_, other->selfchosenonecount_);
    std::swap(freenumber_, other->freenumber_);
    std::swap(daycout_, other->daycout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SummonSelfChose::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SummonSelfChose_descriptor_;
  metadata.reflection = SummonSelfChose_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WishList::kWishInfoFieldNumber;
#endif  // !_MSC_VER

WishList::WishList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WishList::InitAsDefaultInstance() {
}

WishList::WishList(const WishList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WishList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WishList::~WishList() {
  SharedDtor();
}

void WishList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WishList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WishList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WishList_descriptor_;
}

const WishList& WishList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_summon_2eproto();  return *default_instance_;
}

WishList* WishList::default_instance_ = NULL;

WishList* WishList::New() const {
  return new WishList;
}

void WishList::Clear() {
  wishinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WishList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.summon.WishListInfo wishInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wishInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wishinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_wishInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WishList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.summon.WishListInfo wishInfo = 1;
  for (int i = 0; i < this->wishinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->wishinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WishList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.summon.WishListInfo wishInfo = 1;
  for (int i = 0; i < this->wishinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->wishinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WishList::ByteSize() const {
  int total_size = 0;
  
  // repeated .protobuf.summon.WishListInfo wishInfo = 1;
  total_size += 1 * this->wishinfo_size();
  for (int i = 0; i < this->wishinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wishinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WishList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WishList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WishList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WishList::MergeFrom(const WishList& from) {
  GOOGLE_CHECK_NE(&from, this);
  wishinfo_.MergeFrom(from.wishinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WishList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WishList::CopyFrom(const WishList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WishList::IsInitialized() const {
  
  return true;
}

void WishList::Swap(WishList* other) {
  if (other != this) {
    wishinfo_.Swap(&other->wishinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WishList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WishList_descriptor_;
  metadata.reflection = WishList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WishListInfo::kFactionTypeFieldNumber;
const int WishListInfo::kHeroListFieldNumber;
#endif  // !_MSC_VER

WishListInfo::WishListInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WishListInfo::InitAsDefaultInstance() {
}

WishListInfo::WishListInfo(const WishListInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WishListInfo::SharedCtor() {
  _cached_size_ = 0;
  factiontype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WishListInfo::~WishListInfo() {
  SharedDtor();
}

void WishListInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WishListInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WishListInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WishListInfo_descriptor_;
}

const WishListInfo& WishListInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_summon_2eproto();  return *default_instance_;
}

WishListInfo* WishListInfo::default_instance_ = NULL;

WishListInfo* WishListInfo::New() const {
  return new WishListInfo;
}

void WishListInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    factiontype_ = 0;
  }
  herolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WishListInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 factionType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factiontype_)));
          set_has_factiontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_heroList;
        break;
      }
      
      // repeated int32 heroList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_herolist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_herolist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_heroList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WishListInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 factionType = 1;
  if (has_factiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->factiontype(), output);
  }
  
  // repeated int32 heroList = 2;
  for (int i = 0; i < this->herolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->herolist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WishListInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 factionType = 1;
  if (has_factiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->factiontype(), target);
  }
  
  // repeated int32 heroList = 2;
  for (int i = 0; i < this->herolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->herolist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WishListInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 factionType = 1;
    if (has_factiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factiontype());
    }
    
  }
  // repeated int32 heroList = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->herolist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->herolist(i));
    }
    total_size += 1 * this->herolist_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WishListInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WishListInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WishListInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WishListInfo::MergeFrom(const WishListInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  herolist_.MergeFrom(from.herolist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_factiontype()) {
      set_factiontype(from.factiontype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WishListInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WishListInfo::CopyFrom(const WishListInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WishListInfo::IsInitialized() const {
  
  return true;
}

void WishListInfo::Swap(WishListInfo* other) {
  if (other != this) {
    std::swap(factiontype_, other->factiontype_);
    herolist_.Swap(&other->herolist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WishListInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WishListInfo_descriptor_;
  metadata.reflection = WishListInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace summon
}  // namespace protobuf

// @@protoc_insertion_point(global_scope)
