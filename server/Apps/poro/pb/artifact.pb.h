// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: artifact.proto

#ifndef PROTOBUF_artifact_2eproto__INCLUDED
#define PROTOBUF_artifact_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf {
namespace artifact {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_artifact_2eproto();
void protobuf_AssignDesc_artifact_2eproto();
void protobuf_ShutdownFile_artifact_2eproto();

class ArtifactInfo;
class ArtifactInfoList;
class RunesInfo;
class RunesInfoList;
class RunesCompoundInfo;

// ===================================================================

class ArtifactInfo : public ::google::protobuf::Message {
 public:
  ArtifactInfo();
  virtual ~ArtifactInfo();
  
  ArtifactInfo(const ArtifactInfo& from);
  
  inline ArtifactInfo& operator=(const ArtifactInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ArtifactInfo& default_instance();
  
  void Swap(ArtifactInfo* other);
  
  // implements Message ----------------------------------------------
  
  ArtifactInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArtifactInfo& from);
  void MergeFrom(const ArtifactInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);
  
  // required int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // required int32 lv = 3;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 3;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);
  
  // repeated .protobuf.common.KVint32string map = 4;
  inline int map_size() const;
  inline void clear_map();
  static const int kMapFieldNumber = 4;
  inline const ::protobuf::common::KVint32string& map(int index) const;
  inline ::protobuf::common::KVint32string* mutable_map(int index);
  inline ::protobuf::common::KVint32string* add_map();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint32string >&
      map() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint32string >*
      mutable_map();
  
  // required int32 heroId = 5;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIdFieldNumber = 5;
  inline ::google::protobuf::int32 heroid() const;
  inline void set_heroid(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protobuf.artifact.ArtifactInfo)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_heroid();
  inline void clear_has_heroid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 key_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint32string > map_;
  ::google::protobuf::int32 lv_;
  ::google::protobuf::int32 heroid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_artifact_2eproto();
  friend void protobuf_AssignDesc_artifact_2eproto();
  friend void protobuf_ShutdownFile_artifact_2eproto();
  
  void InitAsDefaultInstance();
  static ArtifactInfo* default_instance_;
};
// -------------------------------------------------------------------

class ArtifactInfoList : public ::google::protobuf::Message {
 public:
  ArtifactInfoList();
  virtual ~ArtifactInfoList();
  
  ArtifactInfoList(const ArtifactInfoList& from);
  
  inline ArtifactInfoList& operator=(const ArtifactInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ArtifactInfoList& default_instance();
  
  void Swap(ArtifactInfoList* other);
  
  // implements Message ----------------------------------------------
  
  ArtifactInfoList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArtifactInfoList& from);
  void MergeFrom(const ArtifactInfoList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protobuf.artifact.ArtifactInfo artifact = 1;
  inline int artifact_size() const;
  inline void clear_artifact();
  static const int kArtifactFieldNumber = 1;
  inline const ::protobuf::artifact::ArtifactInfo& artifact(int index) const;
  inline ::protobuf::artifact::ArtifactInfo* mutable_artifact(int index);
  inline ::protobuf::artifact::ArtifactInfo* add_artifact();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::artifact::ArtifactInfo >&
      artifact() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::artifact::ArtifactInfo >*
      mutable_artifact();
  
  // @@protoc_insertion_point(class_scope:protobuf.artifact.ArtifactInfoList)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protobuf::artifact::ArtifactInfo > artifact_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_artifact_2eproto();
  friend void protobuf_AssignDesc_artifact_2eproto();
  friend void protobuf_ShutdownFile_artifact_2eproto();
  
  void InitAsDefaultInstance();
  static ArtifactInfoList* default_instance_;
};
// -------------------------------------------------------------------

class RunesInfo : public ::google::protobuf::Message {
 public:
  RunesInfo();
  virtual ~RunesInfo();
  
  RunesInfo(const RunesInfo& from);
  
  inline RunesInfo& operator=(const RunesInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RunesInfo& default_instance();
  
  void Swap(RunesInfo* other);
  
  // implements Message ----------------------------------------------
  
  RunesInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RunesInfo& from);
  void MergeFrom(const RunesInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);
  
  // required int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // required int32 heroId = 3;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIdFieldNumber = 3;
  inline ::google::protobuf::int32 heroid() const;
  inline void set_heroid(::google::protobuf::int32 value);
  
  // repeated .protobuf.common.KVint32string map = 4;
  inline int map_size() const;
  inline void clear_map();
  static const int kMapFieldNumber = 4;
  inline const ::protobuf::common::KVint32string& map(int index) const;
  inline ::protobuf::common::KVint32string* mutable_map(int index);
  inline ::protobuf::common::KVint32string* add_map();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint32string >&
      map() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint32string >*
      mutable_map();
  
  // repeated int32 skills = 5;
  inline int skills_size() const;
  inline void clear_skills();
  static const int kSkillsFieldNumber = 5;
  inline ::google::protobuf::int32 skills(int index) const;
  inline void set_skills(int index, ::google::protobuf::int32 value);
  inline void add_skills(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      skills() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_skills();
  
  // repeated .protobuf.common.KVint32string tmpMap = 6;
  inline int tmpmap_size() const;
  inline void clear_tmpmap();
  static const int kTmpMapFieldNumber = 6;
  inline const ::protobuf::common::KVint32string& tmpmap(int index) const;
  inline ::protobuf::common::KVint32string* mutable_tmpmap(int index);
  inline ::protobuf::common::KVint32string* add_tmpmap();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint32string >&
      tmpmap() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint32string >*
      mutable_tmpmap();
  
  // repeated int32 tmpSkills = 7;
  inline int tmpskills_size() const;
  inline void clear_tmpskills();
  static const int kTmpSkillsFieldNumber = 7;
  inline ::google::protobuf::int32 tmpskills(int index) const;
  inline void set_tmpskills(int index, ::google::protobuf::int32 value);
  inline void add_tmpskills(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      tmpskills() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_tmpskills();
  
  // @@protoc_insertion_point(class_scope:protobuf.artifact.RunesInfo)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_heroid();
  inline void clear_has_heroid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 key_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint32string > map_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > skills_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint32string > tmpmap_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > tmpskills_;
  ::google::protobuf::int32 heroid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_artifact_2eproto();
  friend void protobuf_AssignDesc_artifact_2eproto();
  friend void protobuf_ShutdownFile_artifact_2eproto();
  
  void InitAsDefaultInstance();
  static RunesInfo* default_instance_;
};
// -------------------------------------------------------------------

class RunesInfoList : public ::google::protobuf::Message {
 public:
  RunesInfoList();
  virtual ~RunesInfoList();
  
  RunesInfoList(const RunesInfoList& from);
  
  inline RunesInfoList& operator=(const RunesInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RunesInfoList& default_instance();
  
  void Swap(RunesInfoList* other);
  
  // implements Message ----------------------------------------------
  
  RunesInfoList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RunesInfoList& from);
  void MergeFrom(const RunesInfoList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protobuf.artifact.RunesInfo runesInfo = 1;
  inline int runesinfo_size() const;
  inline void clear_runesinfo();
  static const int kRunesInfoFieldNumber = 1;
  inline const ::protobuf::artifact::RunesInfo& runesinfo(int index) const;
  inline ::protobuf::artifact::RunesInfo* mutable_runesinfo(int index);
  inline ::protobuf::artifact::RunesInfo* add_runesinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::artifact::RunesInfo >&
      runesinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::artifact::RunesInfo >*
      mutable_runesinfo();
  
  // @@protoc_insertion_point(class_scope:protobuf.artifact.RunesInfoList)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protobuf::artifact::RunesInfo > runesinfo_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_artifact_2eproto();
  friend void protobuf_AssignDesc_artifact_2eproto();
  friend void protobuf_ShutdownFile_artifact_2eproto();
  
  void InitAsDefaultInstance();
  static RunesInfoList* default_instance_;
};
// -------------------------------------------------------------------

class RunesCompoundInfo : public ::google::protobuf::Message {
 public:
  RunesCompoundInfo();
  virtual ~RunesCompoundInfo();
  
  RunesCompoundInfo(const RunesCompoundInfo& from);
  
  inline RunesCompoundInfo& operator=(const RunesCompoundInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RunesCompoundInfo& default_instance();
  
  void Swap(RunesCompoundInfo* other);
  
  // implements Message ----------------------------------------------
  
  RunesCompoundInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RunesCompoundInfo& from);
  void MergeFrom(const RunesCompoundInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .protobuf.artifact.RunesInfo runesInfo = 1;
  inline bool has_runesinfo() const;
  inline void clear_runesinfo();
  static const int kRunesInfoFieldNumber = 1;
  inline const ::protobuf::artifact::RunesInfo& runesinfo() const;
  inline ::protobuf::artifact::RunesInfo* mutable_runesinfo();
  inline ::protobuf::artifact::RunesInfo* release_runesinfo();
  
  // repeated int32 delKey = 2;
  inline int delkey_size() const;
  inline void clear_delkey();
  static const int kDelKeyFieldNumber = 2;
  inline ::google::protobuf::int32 delkey(int index) const;
  inline void set_delkey(int index, ::google::protobuf::int32 value);
  inline void add_delkey(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      delkey() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_delkey();
  
  // @@protoc_insertion_point(class_scope:protobuf.artifact.RunesCompoundInfo)
 private:
  inline void set_has_runesinfo();
  inline void clear_has_runesinfo();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::protobuf::artifact::RunesInfo* runesinfo_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > delkey_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_artifact_2eproto();
  friend void protobuf_AssignDesc_artifact_2eproto();
  friend void protobuf_ShutdownFile_artifact_2eproto();
  
  void InitAsDefaultInstance();
  static RunesCompoundInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// ArtifactInfo

// required int32 key = 1;
inline bool ArtifactInfo::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArtifactInfo::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArtifactInfo::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArtifactInfo::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::google::protobuf::int32 ArtifactInfo::key() const {
  return key_;
}
inline void ArtifactInfo::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
}

// required int32 id = 2;
inline bool ArtifactInfo::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArtifactInfo::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArtifactInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArtifactInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ArtifactInfo::id() const {
  return id_;
}
inline void ArtifactInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 lv = 3;
inline bool ArtifactInfo::has_lv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ArtifactInfo::set_has_lv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ArtifactInfo::clear_has_lv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ArtifactInfo::clear_lv() {
  lv_ = 0;
  clear_has_lv();
}
inline ::google::protobuf::int32 ArtifactInfo::lv() const {
  return lv_;
}
inline void ArtifactInfo::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
}

// repeated .protobuf.common.KVint32string map = 4;
inline int ArtifactInfo::map_size() const {
  return map_.size();
}
inline void ArtifactInfo::clear_map() {
  map_.Clear();
}
inline const ::protobuf::common::KVint32string& ArtifactInfo::map(int index) const {
  return map_.Get(index);
}
inline ::protobuf::common::KVint32string* ArtifactInfo::mutable_map(int index) {
  return map_.Mutable(index);
}
inline ::protobuf::common::KVint32string* ArtifactInfo::add_map() {
  return map_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint32string >&
ArtifactInfo::map() const {
  return map_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint32string >*
ArtifactInfo::mutable_map() {
  return &map_;
}

// required int32 heroId = 5;
inline bool ArtifactInfo::has_heroid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ArtifactInfo::set_has_heroid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ArtifactInfo::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ArtifactInfo::clear_heroid() {
  heroid_ = 0;
  clear_has_heroid();
}
inline ::google::protobuf::int32 ArtifactInfo::heroid() const {
  return heroid_;
}
inline void ArtifactInfo::set_heroid(::google::protobuf::int32 value) {
  set_has_heroid();
  heroid_ = value;
}

// -------------------------------------------------------------------

// ArtifactInfoList

// repeated .protobuf.artifact.ArtifactInfo artifact = 1;
inline int ArtifactInfoList::artifact_size() const {
  return artifact_.size();
}
inline void ArtifactInfoList::clear_artifact() {
  artifact_.Clear();
}
inline const ::protobuf::artifact::ArtifactInfo& ArtifactInfoList::artifact(int index) const {
  return artifact_.Get(index);
}
inline ::protobuf::artifact::ArtifactInfo* ArtifactInfoList::mutable_artifact(int index) {
  return artifact_.Mutable(index);
}
inline ::protobuf::artifact::ArtifactInfo* ArtifactInfoList::add_artifact() {
  return artifact_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::artifact::ArtifactInfo >&
ArtifactInfoList::artifact() const {
  return artifact_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::artifact::ArtifactInfo >*
ArtifactInfoList::mutable_artifact() {
  return &artifact_;
}

// -------------------------------------------------------------------

// RunesInfo

// required int32 key = 1;
inline bool RunesInfo::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RunesInfo::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RunesInfo::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RunesInfo::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::google::protobuf::int32 RunesInfo::key() const {
  return key_;
}
inline void RunesInfo::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
}

// required int32 id = 2;
inline bool RunesInfo::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RunesInfo::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RunesInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RunesInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 RunesInfo::id() const {
  return id_;
}
inline void RunesInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 heroId = 3;
inline bool RunesInfo::has_heroid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RunesInfo::set_has_heroid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RunesInfo::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RunesInfo::clear_heroid() {
  heroid_ = 0;
  clear_has_heroid();
}
inline ::google::protobuf::int32 RunesInfo::heroid() const {
  return heroid_;
}
inline void RunesInfo::set_heroid(::google::protobuf::int32 value) {
  set_has_heroid();
  heroid_ = value;
}

// repeated .protobuf.common.KVint32string map = 4;
inline int RunesInfo::map_size() const {
  return map_.size();
}
inline void RunesInfo::clear_map() {
  map_.Clear();
}
inline const ::protobuf::common::KVint32string& RunesInfo::map(int index) const {
  return map_.Get(index);
}
inline ::protobuf::common::KVint32string* RunesInfo::mutable_map(int index) {
  return map_.Mutable(index);
}
inline ::protobuf::common::KVint32string* RunesInfo::add_map() {
  return map_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint32string >&
RunesInfo::map() const {
  return map_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint32string >*
RunesInfo::mutable_map() {
  return &map_;
}

// repeated int32 skills = 5;
inline int RunesInfo::skills_size() const {
  return skills_.size();
}
inline void RunesInfo::clear_skills() {
  skills_.Clear();
}
inline ::google::protobuf::int32 RunesInfo::skills(int index) const {
  return skills_.Get(index);
}
inline void RunesInfo::set_skills(int index, ::google::protobuf::int32 value) {
  skills_.Set(index, value);
}
inline void RunesInfo::add_skills(::google::protobuf::int32 value) {
  skills_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RunesInfo::skills() const {
  return skills_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RunesInfo::mutable_skills() {
  return &skills_;
}

// repeated .protobuf.common.KVint32string tmpMap = 6;
inline int RunesInfo::tmpmap_size() const {
  return tmpmap_.size();
}
inline void RunesInfo::clear_tmpmap() {
  tmpmap_.Clear();
}
inline const ::protobuf::common::KVint32string& RunesInfo::tmpmap(int index) const {
  return tmpmap_.Get(index);
}
inline ::protobuf::common::KVint32string* RunesInfo::mutable_tmpmap(int index) {
  return tmpmap_.Mutable(index);
}
inline ::protobuf::common::KVint32string* RunesInfo::add_tmpmap() {
  return tmpmap_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint32string >&
RunesInfo::tmpmap() const {
  return tmpmap_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint32string >*
RunesInfo::mutable_tmpmap() {
  return &tmpmap_;
}

// repeated int32 tmpSkills = 7;
inline int RunesInfo::tmpskills_size() const {
  return tmpskills_.size();
}
inline void RunesInfo::clear_tmpskills() {
  tmpskills_.Clear();
}
inline ::google::protobuf::int32 RunesInfo::tmpskills(int index) const {
  return tmpskills_.Get(index);
}
inline void RunesInfo::set_tmpskills(int index, ::google::protobuf::int32 value) {
  tmpskills_.Set(index, value);
}
inline void RunesInfo::add_tmpskills(::google::protobuf::int32 value) {
  tmpskills_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RunesInfo::tmpskills() const {
  return tmpskills_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RunesInfo::mutable_tmpskills() {
  return &tmpskills_;
}

// -------------------------------------------------------------------

// RunesInfoList

// repeated .protobuf.artifact.RunesInfo runesInfo = 1;
inline int RunesInfoList::runesinfo_size() const {
  return runesinfo_.size();
}
inline void RunesInfoList::clear_runesinfo() {
  runesinfo_.Clear();
}
inline const ::protobuf::artifact::RunesInfo& RunesInfoList::runesinfo(int index) const {
  return runesinfo_.Get(index);
}
inline ::protobuf::artifact::RunesInfo* RunesInfoList::mutable_runesinfo(int index) {
  return runesinfo_.Mutable(index);
}
inline ::protobuf::artifact::RunesInfo* RunesInfoList::add_runesinfo() {
  return runesinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::artifact::RunesInfo >&
RunesInfoList::runesinfo() const {
  return runesinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::artifact::RunesInfo >*
RunesInfoList::mutable_runesinfo() {
  return &runesinfo_;
}

// -------------------------------------------------------------------

// RunesCompoundInfo

// required .protobuf.artifact.RunesInfo runesInfo = 1;
inline bool RunesCompoundInfo::has_runesinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RunesCompoundInfo::set_has_runesinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RunesCompoundInfo::clear_has_runesinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RunesCompoundInfo::clear_runesinfo() {
  if (runesinfo_ != NULL) runesinfo_->::protobuf::artifact::RunesInfo::Clear();
  clear_has_runesinfo();
}
inline const ::protobuf::artifact::RunesInfo& RunesCompoundInfo::runesinfo() const {
  return runesinfo_ != NULL ? *runesinfo_ : *default_instance_->runesinfo_;
}
inline ::protobuf::artifact::RunesInfo* RunesCompoundInfo::mutable_runesinfo() {
  set_has_runesinfo();
  if (runesinfo_ == NULL) runesinfo_ = new ::protobuf::artifact::RunesInfo;
  return runesinfo_;
}
inline ::protobuf::artifact::RunesInfo* RunesCompoundInfo::release_runesinfo() {
  clear_has_runesinfo();
  ::protobuf::artifact::RunesInfo* temp = runesinfo_;
  runesinfo_ = NULL;
  return temp;
}

// repeated int32 delKey = 2;
inline int RunesCompoundInfo::delkey_size() const {
  return delkey_.size();
}
inline void RunesCompoundInfo::clear_delkey() {
  delkey_.Clear();
}
inline ::google::protobuf::int32 RunesCompoundInfo::delkey(int index) const {
  return delkey_.Get(index);
}
inline void RunesCompoundInfo::set_delkey(int index, ::google::protobuf::int32 value) {
  delkey_.Set(index, value);
}
inline void RunesCompoundInfo::add_delkey(::google::protobuf::int32 value) {
  delkey_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RunesCompoundInfo::delkey() const {
  return delkey_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RunesCompoundInfo::mutable_delkey() {
  return &delkey_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace artifact
}  // namespace protobuf

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_artifact_2eproto__INCLUDED
