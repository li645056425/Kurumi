// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "playerInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protobuf {
namespace playerInfo {

namespace {

const ::google::protobuf::Descriptor* AlterName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AlterName_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyAlterName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyAlterName_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyUpdateInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyUpdateInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExpAndLv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExpAndLv_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerGuild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerGuild_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyLoginInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyLoginInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObsessedState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObsessedState_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyLoginState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyLoginState_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyAlterHead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyAlterHead_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeadList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeadList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommonPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommonPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Achievement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Achievement_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyHeroSkin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyHeroSkin_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroSkinList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroSkinList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_playerInfo_2eproto() {
  protobuf_AddDesc_playerInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "playerInfo.proto");
  GOOGLE_CHECK(file != NULL);
  AlterName_descriptor_ = file->message_type(0);
  static const int AlterName_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlterName, name_),
  };
  AlterName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AlterName_descriptor_,
      AlterName::default_instance_,
      AlterName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlterName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlterName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AlterName));
  ReplyAlterName_descriptor_ = file->message_type(1);
  static const int ReplyAlterName_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAlterName, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAlterName, name_),
  };
  ReplyAlterName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyAlterName_descriptor_,
      ReplyAlterName::default_instance_,
      ReplyAlterName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAlterName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAlterName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyAlterName));
  UpdateInfo_descriptor_ = file->message_type(2);
  static const int UpdateInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateInfo, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateInfo, kvint_),
  };
  UpdateInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateInfo_descriptor_,
      UpdateInfo::default_instance_,
      UpdateInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateInfo));
  ReplyUpdateInfo_descriptor_ = file->message_type(3);
  static const int ReplyUpdateInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyUpdateInfo, key_),
  };
  ReplyUpdateInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyUpdateInfo_descriptor_,
      ReplyUpdateInfo::default_instance_,
      ReplyUpdateInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyUpdateInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyUpdateInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyUpdateInfo));
  ExpAndLv_descriptor_ = file->message_type(4);
  static const int ExpAndLv_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpAndLv, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpAndLv, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpAndLv, diamond_),
  };
  ExpAndLv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExpAndLv_descriptor_,
      ExpAndLv::default_instance_,
      ExpAndLv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpAndLv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpAndLv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExpAndLv));
  AccountInfo_descriptor_ = file->message_type(5);
  static const int AccountInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, account_),
  };
  AccountInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountInfo_descriptor_,
      AccountInfo::default_instance_,
      AccountInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountInfo));
  LoginInfo_descriptor_ = file->message_type(6);
  static const int LoginInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInfo, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInfo, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInfo, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInfo, machineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInfo, relogin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInfo, uid_),
  };
  LoginInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginInfo_descriptor_,
      LoginInfo::default_instance_,
      LoginInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginInfo));
  PlayerGuild_descriptor_ = file->message_type(7);
  static const int PlayerGuild_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGuild, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGuild, guildmillfinishtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGuild, guildcheckintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGuild, refreshattackcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGuild, refreshfreecnttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGuild, science_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGuild, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGuild, guildicon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGuild, guildlasticon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGuild, isset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGuild, id_),
  };
  PlayerGuild_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerGuild_descriptor_,
      PlayerGuild::default_instance_,
      PlayerGuild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGuild, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGuild, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerGuild));
  ReplyLoginInfo_descriptor_ = file->message_type(8);
  static const int ReplyLoginInfo_offsets_[39] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginInfo, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginInfo, playerlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginInfo, playerexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginInfo, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginInfo, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginInfo, alternametimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginInfo, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginInfo, vipexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginInfo, heroebag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginInfo, expandtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginInfo, expandtimes2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginInfo, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginInfo, hangmaxmap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginInfo, killgblcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginInfo, killsupermostercnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginInfo, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginInfo, guildinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginInfo, blakmarkettime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginInfo, basesummontime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginInfo, seniorsummontime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginInfo, goldmetallurgytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginInfo, summonenergy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginInfo, lineuptemplates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginInfo, tavernfinishtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginInfo, guidance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginInfo, ishidevip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginInfo, wishrefreshtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginInfo, goldstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginInfo, town_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginInfo, iskillboss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginInfo, headframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginInfo, charactername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginInfo, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginInfo, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginInfo, playercheck_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginInfo, obsessedstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginInfo, power_),
  };
  ReplyLoginInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyLoginInfo_descriptor_,
      ReplyLoginInfo::default_instance_,
      ReplyLoginInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyLoginInfo));
  ObsessedState_descriptor_ = file->message_type(9);
  static const int ObsessedState_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObsessedState, loginmine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObsessedState, servertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObsessedState, obsessedopen_),
  };
  ObsessedState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObsessedState_descriptor_,
      ObsessedState::default_instance_,
      ObsessedState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObsessedState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObsessedState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObsessedState));
  ReplyLoginState_descriptor_ = file->message_type(10);
  static const int ReplyLoginState_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginState, championstarttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginState, championfirst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginState, exchargemarketfinish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginState, blakmarkettime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginState, basesummontime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginState, seniorsummontime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginState, goldmetallurgytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginState, tavernfinishtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginState, wishrefreshtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginState, timezone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginState, battle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginState, dungeonid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginState, dungeontime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginState, nextdungeon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginState, servername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginState, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginState, triggertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginState, newtime_),
  };
  ReplyLoginState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyLoginState_descriptor_,
      ReplyLoginState::default_instance_,
      ReplyLoginState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyLoginState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyLoginState));
  ReplyAlterHead_descriptor_ = file->message_type(11);
  static const int ReplyAlterHead_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAlterHead, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAlterHead, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAlterHead, lastusetime_),
  };
  ReplyAlterHead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyAlterHead_descriptor_,
      ReplyAlterHead::default_instance_,
      ReplyAlterHead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAlterHead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAlterHead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyAlterHead));
  HeadList_descriptor_ = file->message_type(12);
  static const int HeadList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadList, heads_),
  };
  HeadList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeadList_descriptor_,
      HeadList::default_instance_,
      HeadList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeadList));
  CommonPlayerInfo_descriptor_ = file->message_type(13);
  static const int CommonPlayerInfo_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPlayerInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPlayerInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPlayerInfo, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPlayerInfo, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPlayerInfo, playerexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPlayerInfo, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPlayerInfo, isfreind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPlayerInfo, achievement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPlayerInfo, guildobjid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPlayerInfo, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPlayerInfo, guildicon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPlayerInfo, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPlayerInfo, defineer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPlayerInfo, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPlayerInfo, headframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPlayerInfo, charactername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPlayerInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPlayerInfo, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPlayerInfo, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPlayerInfo, squadshow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPlayerInfo, hangmaxmap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPlayerInfo, identity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPlayerInfo, enemylineup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPlayerInfo, power_),
  };
  CommonPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommonPlayerInfo_descriptor_,
      CommonPlayerInfo::default_instance_,
      CommonPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommonPlayerInfo));
  Achievement_descriptor_ = file->message_type(14);
  static const int Achievement_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achievement, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achievement, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achievement, value_),
  };
  Achievement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Achievement_descriptor_,
      Achievement::default_instance_,
      Achievement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achievement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achievement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Achievement));
  ReplyHeroSkin_descriptor_ = file->message_type(15);
  static const int ReplyHeroSkin_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyHeroSkin, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyHeroSkin, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyHeroSkin, sparenum_),
  };
  ReplyHeroSkin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyHeroSkin_descriptor_,
      ReplyHeroSkin::default_instance_,
      ReplyHeroSkin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyHeroSkin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyHeroSkin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyHeroSkin));
  HeroSkinList_descriptor_ = file->message_type(16);
  static const int HeroSkinList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroSkinList, skins_),
  };
  HeroSkinList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroSkinList_descriptor_,
      HeroSkinList::default_instance_,
      HeroSkinList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroSkinList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroSkinList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroSkinList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_playerInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AlterName_descriptor_, &AlterName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyAlterName_descriptor_, &ReplyAlterName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateInfo_descriptor_, &UpdateInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyUpdateInfo_descriptor_, &ReplyUpdateInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExpAndLv_descriptor_, &ExpAndLv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountInfo_descriptor_, &AccountInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginInfo_descriptor_, &LoginInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerGuild_descriptor_, &PlayerGuild::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyLoginInfo_descriptor_, &ReplyLoginInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObsessedState_descriptor_, &ObsessedState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyLoginState_descriptor_, &ReplyLoginState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyAlterHead_descriptor_, &ReplyAlterHead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeadList_descriptor_, &HeadList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommonPlayerInfo_descriptor_, &CommonPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Achievement_descriptor_, &Achievement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyHeroSkin_descriptor_, &ReplyHeroSkin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroSkinList_descriptor_, &HeroSkinList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_playerInfo_2eproto() {
  delete AlterName::default_instance_;
  delete AlterName_reflection_;
  delete ReplyAlterName::default_instance_;
  delete ReplyAlterName_reflection_;
  delete UpdateInfo::default_instance_;
  delete UpdateInfo_reflection_;
  delete ReplyUpdateInfo::default_instance_;
  delete ReplyUpdateInfo_reflection_;
  delete ExpAndLv::default_instance_;
  delete ExpAndLv_reflection_;
  delete AccountInfo::default_instance_;
  delete AccountInfo_reflection_;
  delete LoginInfo::default_instance_;
  delete LoginInfo_reflection_;
  delete PlayerGuild::default_instance_;
  delete PlayerGuild_reflection_;
  delete ReplyLoginInfo::default_instance_;
  delete ReplyLoginInfo_reflection_;
  delete ObsessedState::default_instance_;
  delete ObsessedState_reflection_;
  delete ReplyLoginState::default_instance_;
  delete ReplyLoginState_reflection_;
  delete ReplyAlterHead::default_instance_;
  delete ReplyAlterHead_reflection_;
  delete HeadList::default_instance_;
  delete HeadList_reflection_;
  delete CommonPlayerInfo::default_instance_;
  delete CommonPlayerInfo_reflection_;
  delete Achievement::default_instance_;
  delete Achievement_reflection_;
  delete ReplyHeroSkin::default_instance_;
  delete ReplyHeroSkin_reflection_;
  delete HeroSkinList::default_instance_;
  delete HeroSkinList_reflection_;
}

void protobuf_AddDesc_playerInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf::common::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020playerInfo.proto\022\023protobuf.playerInfo\032"
    "\014common.proto\"\031\n\tAlterName\022\014\n\004name\030\001 \002(\t"
    "\"/\n\016ReplyAlterName\022\017\n\007diamond\030\001 \002(\005\022\014\n\004n"
    "ame\030\002 \002(\t\"6\n\nUpdateInfo\022\013\n\003key\030\001 \002(\005\022\014\n\004"
    "name\030\002 \001(\t\022\r\n\005kvInt\030\003 \001(\005\"\036\n\017ReplyUpdate"
    "Info\022\013\n\003key\030\001 \002(\005\"4\n\010ExpAndLv\022\013\n\003exp\030\001 \002"
    "(\003\022\n\n\002lv\030\002 \001(\005\022\017\n\007diamond\030\003 \001(\003\"\?\n\013Accou"
    "ntInfo\0220\n\007account\030\001 \003(\0132\037.protobuf.commo"
    "n.KVstringstring\"n\n\tLoginInfo\022\017\n\007account"
    "\030\001 \002(\t\022\r\n\005token\030\002 \002(\t\022\020\n\010serverid\030\003 \002(\005\022"
    "\021\n\tmachineid\030\004 \002(\t\022\017\n\007reLogin\030\005 \002(\010\022\013\n\003u"
    "id\030\006 \001(\t\"\220\002\n\013PlayerGuild\022\017\n\007guildid\030\001 \002("
    "\005\022\033\n\023GuildMillFinishTime\030\003 \001(\003\022\030\n\020GuildC"
    "heckInTime\030\004 \002(\003\022\030\n\020refreshattackcnt\030\005 \001"
    "(\005\022\032\n\022refreshfreecnttime\030\006 \001(\003\022+\n\007scienc"
    "e\030\007 \003(\0132\032.protobuf.common.KVint3232\022\021\n\tg"
    "uildname\030\010 \001(\t\022\021\n\tguildicon\030\t \001(\t\022\025\n\rgui"
    "ldlasticon\030\n \001(\t\022\r\n\005isSet\030\013 \001(\010\022\n\n\002id\030\014 "
    "\001(\t\"\265\007\n\016ReplyLoginInfo\022\013\n\003gid\030\001 \002(\005\022\014\n\004n"
    "ame\030\002 \002(\t\022\023\n\013playerLevel\030\003 \002(\005\022\021\n\tplayer"
    "Exp\030\004 \002(\003\022\017\n\007diamond\030\006 \002(\003\022\014\n\004gold\030\007 \002(\003"
    "\022\026\n\016alterNameTimes\030\010 \002(\005\022\020\n\010vipLevel\030\t \002"
    "(\005\022\016\n\006vipExp\030\n \002(\005\022\020\n\010heroeBag\030\013 \002(\005\022\023\n\013"
    "expandTimes\030\014 \002(\005\022\024\n\014expandTimes2\030! \002(\005\022"
    "\020\n\010objectid\030\r \002(\t\022\022\n\nhangMaxMap\030\016 \002(\005\022\022\n"
    "\nkillGblCnt\030\017 \002(\010\022\032\n\022killSuperMosterCnt\030"
    "\020 \002(\010\022\014\n\004head\030\021 \002(\t\0223\n\tguildinfo\030\022 \002(\0132 "
    ".protobuf.playerInfo.PlayerGuild\022\026\n\016blak"
    "MarketTime\030\023 \001(\003\022\026\n\016baseSummonTime\030\024 \001(\003"
    "\022\030\n\020seniorSummonTime\030\025 \001(\003\022\032\n\022goldMetall"
    "urgyTime\030\026 \001(\003\022\024\n\014summonEnergy\030\027 \001(\003\0228\n\017"
    "lineupTemplates\030\030 \003(\0132\037.protobuf.common."
    "LineupTemplate\0225\n\021tavernFinishTimes\030\031 \003("
    "\0132\032.protobuf.common.KVint3264\022\020\n\010guidanc"
    "e\030\032 \001(\t\022\021\n\tisHideVip\030\033 \001(\010\022\027\n\017wishRefres"
    "hTime\030\034 \001(\003\022.\n\ngoldStatus\030\035 \003(\0132\032.protob"
    "uf.common.KVint3232\022\014\n\004town\030\036 \001(\005\022\022\n\nisK"
    "illBoss\030\037 \001(\010\022\021\n\theadFrame\030  \001(\005\022\025\n\rchar"
    "acterName\030\" \001(\t\022\013\n\003sex\030# \001(\005\022\014\n\004city\030$ \001"
    "(\t\022\020\n\010serverid\030% \001(\005\022\023\n\013playerCheck\030& \001("
    "\010\0229\n\robsessedState\030\' \001(\0132\".protobuf.play"
    "erInfo.ObsessedState\022\r\n\005power\030( \001(\005\"L\n\rO"
    "bsessedState\022\021\n\tlogInMine\030\001 \001(\005\022\022\n\nserve"
    "rTime\030\002 \001(\003\022\024\n\014obsessedOpen\030\003 \001(\010\"\304\003\n\017Re"
    "plyLoginState\022\031\n\021championStartTime\030\001 \001(\003"
    "\022\025\n\rchampionFirst\030\002 \001(\010\022\034\n\024exchargeMarke"
    "tFinish\030\003 \001(\003\022\026\n\016blakMarketTime\030\004 \001(\003\022\026\n"
    "\016baseSummonTime\030\005 \001(\003\022\030\n\020seniorSummonTim"
    "e\030\006 \001(\003\022\032\n\022goldMetallurgyTime\030\007 \001(\003\0225\n\021t"
    "avernFinishTimes\030\010 \003(\0132\032.protobuf.common"
    ".KVint3264\022\027\n\017wishRefreshTime\030\t \001(\003\022\020\n\010t"
    "imezone\030\n \001(\005\022\016\n\006battle\030\013 \001(\010\022\021\n\tdungeon"
    "id\030\014 \001(\005\022\023\n\013dungeontime\030\r \001(\003\022\023\n\013nextdun"
    "geon\030\016 \001(\005\022\022\n\nserverName\030\017 \001(\t\022\022\n\ncreate"
    "Time\030\020 \001(\003\022\023\n\013triggerTime\030\021 \001(\003\022\017\n\007newTi"
    "me\030\022 \001(\003\"\?\n\016ReplyAlterHead\022\n\n\002id\030\001 \002(\t\022\014"
    "\n\004time\030\002 \002(\003\022\023\n\013lastUseTime\030\003 \001(\003\">\n\010Hea"
    "dList\0222\n\005heads\030\001 \003(\0132#.protobuf.playerIn"
    "fo.ReplyAlterHead\"\272\004\n\020CommonPlayerInfo\022\r"
    "\n\005level\030\001 \002(\005\022\014\n\004name\030\002 \002(\t\022\014\n\004head\030\003 \002("
    "\t\022\013\n\003gid\030\004 \002(\005\022\021\n\tplayerExp\030\005 \002(\003\022\020\n\010pla"
    "yerId\030\006 \002(\t\022\020\n\010isFreind\030\007 \002(\010\0225\n\013achieve"
    "ment\030\010 \003(\0132 .protobuf.playerInfo.Achieve"
    "ment\022\022\n\nguildObjId\030\017 \001(\t\022\017\n\007guildId\030\t \001("
    "\005\022\021\n\tguildIcon\030\n \001(\t\022\021\n\tguildName\030\013 \001(\t\022"
    "/\n\010defineer\030\014 \001(\0132\035.protobuf.common.Line"
    "upDetail\022\020\n\010vipLevel\030\r \001(\005\022\021\n\theadFrame\030"
    "\016 \001(\005\022\025\n\rcharacterName\030\020 \001(\t\022\013\n\003sex\030\021 \001("
    "\005\022\014\n\004city\030\022 \001(\t\022\020\n\010serverid\030\023 \001(\005\0222\n\tsqu"
    "adShow\030\024 \001(\0132\037.protobuf.common.LineupTem"
    "plate\022\022\n\nhangMaxMap\030\025 \001(\005\022\020\n\010identity\030\026 "
    "\001(\005\0222\n\013enemyLineup\030\027 \001(\0132\035.protobuf.comm"
    "on.LineupDetail\022\r\n\005power\030\030 \001(\003\"8\n\013Achiev"
    "ement\022\n\n\002id\030\001 \002(\005\022\016\n\006status\030\002 \002(\005\022\r\n\005val"
    "ue\030\003 \002(\005\":\n\rReplyHeroSkin\022\n\n\002id\030\001 \002(\005\022\013\n"
    "\003num\030\002 \002(\005\022\020\n\010spareNum\030\003 \002(\005\"A\n\014HeroSkin"
    "List\0221\n\005skins\030\001 \003(\0132\".protobuf.playerInf"
    "o.ReplyHeroSkinB&\n\023xag.idgo.core.protoB\017"
    "PlayerInfoProto", 3135);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "playerInfo.proto", &protobuf_RegisterTypes);
  AlterName::default_instance_ = new AlterName();
  ReplyAlterName::default_instance_ = new ReplyAlterName();
  UpdateInfo::default_instance_ = new UpdateInfo();
  ReplyUpdateInfo::default_instance_ = new ReplyUpdateInfo();
  ExpAndLv::default_instance_ = new ExpAndLv();
  AccountInfo::default_instance_ = new AccountInfo();
  LoginInfo::default_instance_ = new LoginInfo();
  PlayerGuild::default_instance_ = new PlayerGuild();
  ReplyLoginInfo::default_instance_ = new ReplyLoginInfo();
  ObsessedState::default_instance_ = new ObsessedState();
  ReplyLoginState::default_instance_ = new ReplyLoginState();
  ReplyAlterHead::default_instance_ = new ReplyAlterHead();
  HeadList::default_instance_ = new HeadList();
  CommonPlayerInfo::default_instance_ = new CommonPlayerInfo();
  Achievement::default_instance_ = new Achievement();
  ReplyHeroSkin::default_instance_ = new ReplyHeroSkin();
  HeroSkinList::default_instance_ = new HeroSkinList();
  AlterName::default_instance_->InitAsDefaultInstance();
  ReplyAlterName::default_instance_->InitAsDefaultInstance();
  UpdateInfo::default_instance_->InitAsDefaultInstance();
  ReplyUpdateInfo::default_instance_->InitAsDefaultInstance();
  ExpAndLv::default_instance_->InitAsDefaultInstance();
  AccountInfo::default_instance_->InitAsDefaultInstance();
  LoginInfo::default_instance_->InitAsDefaultInstance();
  PlayerGuild::default_instance_->InitAsDefaultInstance();
  ReplyLoginInfo::default_instance_->InitAsDefaultInstance();
  ObsessedState::default_instance_->InitAsDefaultInstance();
  ReplyLoginState::default_instance_->InitAsDefaultInstance();
  ReplyAlterHead::default_instance_->InitAsDefaultInstance();
  HeadList::default_instance_->InitAsDefaultInstance();
  CommonPlayerInfo::default_instance_->InitAsDefaultInstance();
  Achievement::default_instance_->InitAsDefaultInstance();
  ReplyHeroSkin::default_instance_->InitAsDefaultInstance();
  HeroSkinList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_playerInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_playerInfo_2eproto {
  StaticDescriptorInitializer_playerInfo_2eproto() {
    protobuf_AddDesc_playerInfo_2eproto();
  }
} static_descriptor_initializer_playerInfo_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int AlterName::kNameFieldNumber;
#endif  // !_MSC_VER

AlterName::AlterName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AlterName::InitAsDefaultInstance() {
}

AlterName::AlterName(const AlterName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AlterName::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AlterName::~AlterName() {
  SharedDtor();
}

void AlterName::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void AlterName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlterName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlterName_descriptor_;
}

const AlterName& AlterName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playerInfo_2eproto();  return *default_instance_;
}

AlterName* AlterName::default_instance_ = NULL;

AlterName* AlterName::New() const {
  return new AlterName;
}

void AlterName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AlterName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AlterName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AlterName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AlterName::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlterName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AlterName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AlterName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AlterName::MergeFrom(const AlterName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AlterName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlterName::CopyFrom(const AlterName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlterName::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void AlterName::Swap(AlterName* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AlterName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AlterName_descriptor_;
  metadata.reflection = AlterName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyAlterName::kDiamondFieldNumber;
const int ReplyAlterName::kNameFieldNumber;
#endif  // !_MSC_VER

ReplyAlterName::ReplyAlterName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReplyAlterName::InitAsDefaultInstance() {
}

ReplyAlterName::ReplyAlterName(const ReplyAlterName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReplyAlterName::SharedCtor() {
  _cached_size_ = 0;
  diamond_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyAlterName::~ReplyAlterName() {
  SharedDtor();
}

void ReplyAlterName::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ReplyAlterName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyAlterName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyAlterName_descriptor_;
}

const ReplyAlterName& ReplyAlterName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playerInfo_2eproto();  return *default_instance_;
}

ReplyAlterName* ReplyAlterName::default_instance_ = NULL;

ReplyAlterName* ReplyAlterName::New() const {
  return new ReplyAlterName;
}

void ReplyAlterName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    diamond_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyAlterName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 diamond = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReplyAlterName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 diamond = 1;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->diamond(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReplyAlterName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 diamond = 1;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->diamond(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReplyAlterName::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 diamond = 1;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diamond());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyAlterName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyAlterName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyAlterName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyAlterName::MergeFrom(const ReplyAlterName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyAlterName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyAlterName::CopyFrom(const ReplyAlterName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyAlterName::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ReplyAlterName::Swap(ReplyAlterName* other) {
  if (other != this) {
    std::swap(diamond_, other->diamond_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyAlterName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyAlterName_descriptor_;
  metadata.reflection = ReplyAlterName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateInfo::kKeyFieldNumber;
const int UpdateInfo::kNameFieldNumber;
const int UpdateInfo::kKvIntFieldNumber;
#endif  // !_MSC_VER

UpdateInfo::UpdateInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateInfo::InitAsDefaultInstance() {
}

UpdateInfo::UpdateInfo(const UpdateInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateInfo::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  kvint_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateInfo::~UpdateInfo() {
  SharedDtor();
}

void UpdateInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void UpdateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateInfo_descriptor_;
}

const UpdateInfo& UpdateInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playerInfo_2eproto();  return *default_instance_;
}

UpdateInfo* UpdateInfo::default_instance_ = NULL;

UpdateInfo* UpdateInfo::New() const {
  return new UpdateInfo;
}

void UpdateInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    kvint_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_kvInt;
        break;
      }
      
      // optional int32 kvInt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kvInt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kvint_)));
          set_has_kvint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional int32 kvInt = 3;
  if (has_kvint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->kvint(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional int32 kvInt = 3;
  if (has_kvint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->kvint(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 kvInt = 3;
    if (has_kvint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kvint());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateInfo::MergeFrom(const UpdateInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_kvint()) {
      set_kvint(from.kvint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateInfo::CopyFrom(const UpdateInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void UpdateInfo::Swap(UpdateInfo* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(name_, other->name_);
    std::swap(kvint_, other->kvint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateInfo_descriptor_;
  metadata.reflection = UpdateInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyUpdateInfo::kKeyFieldNumber;
#endif  // !_MSC_VER

ReplyUpdateInfo::ReplyUpdateInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReplyUpdateInfo::InitAsDefaultInstance() {
}

ReplyUpdateInfo::ReplyUpdateInfo(const ReplyUpdateInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReplyUpdateInfo::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyUpdateInfo::~ReplyUpdateInfo() {
  SharedDtor();
}

void ReplyUpdateInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReplyUpdateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyUpdateInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyUpdateInfo_descriptor_;
}

const ReplyUpdateInfo& ReplyUpdateInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playerInfo_2eproto();  return *default_instance_;
}

ReplyUpdateInfo* ReplyUpdateInfo::default_instance_ = NULL;

ReplyUpdateInfo* ReplyUpdateInfo::New() const {
  return new ReplyUpdateInfo;
}

void ReplyUpdateInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyUpdateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReplyUpdateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReplyUpdateInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReplyUpdateInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyUpdateInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyUpdateInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyUpdateInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyUpdateInfo::MergeFrom(const ReplyUpdateInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyUpdateInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyUpdateInfo::CopyFrom(const ReplyUpdateInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyUpdateInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ReplyUpdateInfo::Swap(ReplyUpdateInfo* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyUpdateInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyUpdateInfo_descriptor_;
  metadata.reflection = ReplyUpdateInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExpAndLv::kExpFieldNumber;
const int ExpAndLv::kLvFieldNumber;
const int ExpAndLv::kDiamondFieldNumber;
#endif  // !_MSC_VER

ExpAndLv::ExpAndLv()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExpAndLv::InitAsDefaultInstance() {
}

ExpAndLv::ExpAndLv(const ExpAndLv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExpAndLv::SharedCtor() {
  _cached_size_ = 0;
  exp_ = GOOGLE_LONGLONG(0);
  lv_ = 0;
  diamond_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExpAndLv::~ExpAndLv() {
  SharedDtor();
}

void ExpAndLv::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExpAndLv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExpAndLv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExpAndLv_descriptor_;
}

const ExpAndLv& ExpAndLv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playerInfo_2eproto();  return *default_instance_;
}

ExpAndLv* ExpAndLv::default_instance_ = NULL;

ExpAndLv* ExpAndLv::New() const {
  return new ExpAndLv;
}

void ExpAndLv::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    exp_ = GOOGLE_LONGLONG(0);
    lv_ = 0;
    diamond_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExpAndLv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 exp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lv;
        break;
      }
      
      // optional int32 lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_diamond;
        break;
      }
      
      // optional int64 diamond = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExpAndLv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 exp = 1;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->exp(), output);
  }
  
  // optional int32 lv = 2;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lv(), output);
  }
  
  // optional int64 diamond = 3;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->diamond(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExpAndLv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 exp = 1;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->exp(), target);
  }
  
  // optional int32 lv = 2;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lv(), target);
  }
  
  // optional int64 diamond = 3;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->diamond(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExpAndLv::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 exp = 1;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp());
    }
    
    // optional int32 lv = 2;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }
    
    // optional int64 diamond = 3;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->diamond());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExpAndLv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExpAndLv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExpAndLv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExpAndLv::MergeFrom(const ExpAndLv& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExpAndLv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpAndLv::CopyFrom(const ExpAndLv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpAndLv::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ExpAndLv::Swap(ExpAndLv* other) {
  if (other != this) {
    std::swap(exp_, other->exp_);
    std::swap(lv_, other->lv_);
    std::swap(diamond_, other->diamond_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExpAndLv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExpAndLv_descriptor_;
  metadata.reflection = ExpAndLv_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountInfo::kAccountFieldNumber;
#endif  // !_MSC_VER

AccountInfo::AccountInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountInfo::InitAsDefaultInstance() {
}

AccountInfo::AccountInfo(const AccountInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountInfo::~AccountInfo() {
  SharedDtor();
}

void AccountInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AccountInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountInfo_descriptor_;
}

const AccountInfo& AccountInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playerInfo_2eproto();  return *default_instance_;
}

AccountInfo* AccountInfo::default_instance_ = NULL;

AccountInfo* AccountInfo::New() const {
  return new AccountInfo;
}

void AccountInfo::Clear() {
  account_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.common.KVstringstring account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_account;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.common.KVstringstring account = 1;
  for (int i = 0; i < this->account_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->account(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.common.KVstringstring account = 1;
  for (int i = 0; i < this->account_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->account(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountInfo::ByteSize() const {
  int total_size = 0;
  
  // repeated .protobuf.common.KVstringstring account = 1;
  total_size += 1 * this->account_size();
  for (int i = 0; i < this->account_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->account(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountInfo::MergeFrom(const AccountInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  account_.MergeFrom(from.account_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountInfo::CopyFrom(const AccountInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountInfo::IsInitialized() const {
  
  for (int i = 0; i < account_size(); i++) {
    if (!this->account(i).IsInitialized()) return false;
  }
  return true;
}

void AccountInfo::Swap(AccountInfo* other) {
  if (other != this) {
    account_.Swap(&other->account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountInfo_descriptor_;
  metadata.reflection = AccountInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginInfo::kAccountFieldNumber;
const int LoginInfo::kTokenFieldNumber;
const int LoginInfo::kServeridFieldNumber;
const int LoginInfo::kMachineidFieldNumber;
const int LoginInfo::kReLoginFieldNumber;
const int LoginInfo::kUidFieldNumber;
#endif  // !_MSC_VER

LoginInfo::LoginInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginInfo::InitAsDefaultInstance() {
}

LoginInfo::LoginInfo(const LoginInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginInfo::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serverid_ = 0;
  machineid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  relogin_ = false;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginInfo::~LoginInfo() {
  SharedDtor();
}

void LoginInfo::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (machineid_ != &::google::protobuf::internal::kEmptyString) {
    delete machineid_;
  }
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (this != default_instance_) {
  }
}

void LoginInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginInfo_descriptor_;
}

const LoginInfo& LoginInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playerInfo_2eproto();  return *default_instance_;
}

LoginInfo* LoginInfo::default_instance_ = NULL;

LoginInfo* LoginInfo::New() const {
  return new LoginInfo;
}

void LoginInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    serverid_ = 0;
    if (has_machineid()) {
      if (machineid_ != &::google::protobuf::internal::kEmptyString) {
        machineid_->clear();
      }
    }
    relogin_ = false;
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }
      
      // required string token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_serverid;
        break;
      }
      
      // required int32 serverid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_machineid;
        break;
      }
      
      // required string machineid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machineid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machineid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->machineid().data(), this->machineid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_reLogin;
        break;
      }
      
      // required bool reLogin = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reLogin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &relogin_)));
          set_has_relogin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_uid;
        break;
      }
      
      // optional string uid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }
  
  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->token(), output);
  }
  
  // required int32 serverid = 3;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->serverid(), output);
  }
  
  // required string machineid = 4;
  if (has_machineid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machineid().data(), this->machineid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->machineid(), output);
  }
  
  // required bool reLogin = 5;
  if (has_relogin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->relogin(), output);
  }
  
  // optional string uid = 6;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->uid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }
  
  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }
  
  // required int32 serverid = 3;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->serverid(), target);
  }
  
  // required string machineid = 4;
  if (has_machineid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machineid().data(), this->machineid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->machineid(), target);
  }
  
  // required bool reLogin = 5;
  if (has_relogin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->relogin(), target);
  }
  
  // optional string uid = 6;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->uid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }
    
    // required string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }
    
    // required int32 serverid = 3;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }
    
    // required string machineid = 4;
    if (has_machineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machineid());
    }
    
    // required bool reLogin = 5;
    if (has_relogin()) {
      total_size += 1 + 1;
    }
    
    // optional string uid = 6;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginInfo::MergeFrom(const LoginInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_machineid()) {
      set_machineid(from.machineid());
    }
    if (from.has_relogin()) {
      set_relogin(from.relogin());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginInfo::CopyFrom(const LoginInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void LoginInfo::Swap(LoginInfo* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(token_, other->token_);
    std::swap(serverid_, other->serverid_);
    std::swap(machineid_, other->machineid_);
    std::swap(relogin_, other->relogin_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginInfo_descriptor_;
  metadata.reflection = LoginInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerGuild::kGuildidFieldNumber;
const int PlayerGuild::kGuildMillFinishTimeFieldNumber;
const int PlayerGuild::kGuildCheckInTimeFieldNumber;
const int PlayerGuild::kRefreshattackcntFieldNumber;
const int PlayerGuild::kRefreshfreecnttimeFieldNumber;
const int PlayerGuild::kScienceFieldNumber;
const int PlayerGuild::kGuildnameFieldNumber;
const int PlayerGuild::kGuildiconFieldNumber;
const int PlayerGuild::kGuildlasticonFieldNumber;
const int PlayerGuild::kIsSetFieldNumber;
const int PlayerGuild::kIdFieldNumber;
#endif  // !_MSC_VER

PlayerGuild::PlayerGuild()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerGuild::InitAsDefaultInstance() {
}

PlayerGuild::PlayerGuild(const PlayerGuild& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerGuild::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = 0;
  guildmillfinishtime_ = GOOGLE_LONGLONG(0);
  guildcheckintime_ = GOOGLE_LONGLONG(0);
  refreshattackcnt_ = 0;
  refreshfreecnttime_ = GOOGLE_LONGLONG(0);
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guildicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guildlasticon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isset_ = false;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerGuild::~PlayerGuild() {
  SharedDtor();
}

void PlayerGuild::SharedDtor() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (guildicon_ != &::google::protobuf::internal::kEmptyString) {
    delete guildicon_;
  }
  if (guildlasticon_ != &::google::protobuf::internal::kEmptyString) {
    delete guildlasticon_;
  }
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void PlayerGuild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerGuild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerGuild_descriptor_;
}

const PlayerGuild& PlayerGuild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playerInfo_2eproto();  return *default_instance_;
}

PlayerGuild* PlayerGuild::default_instance_ = NULL;

PlayerGuild* PlayerGuild::New() const {
  return new PlayerGuild;
}

void PlayerGuild::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = 0;
    guildmillfinishtime_ = GOOGLE_LONGLONG(0);
    guildcheckintime_ = GOOGLE_LONGLONG(0);
    refreshattackcnt_ = 0;
    refreshfreecnttime_ = GOOGLE_LONGLONG(0);
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
    if (has_guildicon()) {
      if (guildicon_ != &::google::protobuf::internal::kEmptyString) {
        guildicon_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_guildlasticon()) {
      if (guildlasticon_ != &::google::protobuf::internal::kEmptyString) {
        guildlasticon_->clear();
      }
    }
    isset_ = false;
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
  }
  science_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerGuild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 guildid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_GuildMillFinishTime;
        break;
      }
      
      // optional int64 GuildMillFinishTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GuildMillFinishTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guildmillfinishtime_)));
          set_has_guildmillfinishtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_GuildCheckInTime;
        break;
      }
      
      // required int64 GuildCheckInTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GuildCheckInTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guildcheckintime_)));
          set_has_guildcheckintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_refreshattackcnt;
        break;
      }
      
      // optional int32 refreshattackcnt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refreshattackcnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refreshattackcnt_)));
          set_has_refreshattackcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_refreshfreecnttime;
        break;
      }
      
      // optional int64 refreshfreecnttime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refreshfreecnttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &refreshfreecnttime_)));
          set_has_refreshfreecnttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_science;
        break;
      }
      
      // repeated .protobuf.common.KVint3232 science = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_science:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_science()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_science;
        if (input->ExpectTag(66)) goto parse_guildname;
        break;
      }
      
      // optional string guildname = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_guildicon;
        break;
      }
      
      // optional string guildicon = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildicon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildicon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildicon().data(), this->guildicon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_guildlasticon;
        break;
      }
      
      // optional string guildlasticon = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildlasticon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildlasticon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildlasticon().data(), this->guildlasticon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_isSet;
        break;
      }
      
      // optional bool isSet = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isSet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isset_)));
          set_has_isset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_id;
        break;
      }
      
      // optional string id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerGuild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 guildid = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->guildid(), output);
  }
  
  // optional int64 GuildMillFinishTime = 3;
  if (has_guildmillfinishtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->guildmillfinishtime(), output);
  }
  
  // required int64 GuildCheckInTime = 4;
  if (has_guildcheckintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->guildcheckintime(), output);
  }
  
  // optional int32 refreshattackcnt = 5;
  if (has_refreshattackcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->refreshattackcnt(), output);
  }
  
  // optional int64 refreshfreecnttime = 6;
  if (has_refreshfreecnttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->refreshfreecnttime(), output);
  }
  
  // repeated .protobuf.common.KVint3232 science = 7;
  for (int i = 0; i < this->science_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->science(i), output);
  }
  
  // optional string guildname = 8;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->guildname(), output);
  }
  
  // optional string guildicon = 9;
  if (has_guildicon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildicon().data(), this->guildicon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->guildicon(), output);
  }
  
  // optional string guildlasticon = 10;
  if (has_guildlasticon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildlasticon().data(), this->guildlasticon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->guildlasticon(), output);
  }
  
  // optional bool isSet = 11;
  if (has_isset()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->isset(), output);
  }
  
  // optional string id = 12;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerGuild::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 guildid = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->guildid(), target);
  }
  
  // optional int64 GuildMillFinishTime = 3;
  if (has_guildmillfinishtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->guildmillfinishtime(), target);
  }
  
  // required int64 GuildCheckInTime = 4;
  if (has_guildcheckintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->guildcheckintime(), target);
  }
  
  // optional int32 refreshattackcnt = 5;
  if (has_refreshattackcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->refreshattackcnt(), target);
  }
  
  // optional int64 refreshfreecnttime = 6;
  if (has_refreshfreecnttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->refreshfreecnttime(), target);
  }
  
  // repeated .protobuf.common.KVint3232 science = 7;
  for (int i = 0; i < this->science_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->science(i), target);
  }
  
  // optional string guildname = 8;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->guildname(), target);
  }
  
  // optional string guildicon = 9;
  if (has_guildicon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildicon().data(), this->guildicon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->guildicon(), target);
  }
  
  // optional string guildlasticon = 10;
  if (has_guildlasticon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildlasticon().data(), this->guildlasticon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->guildlasticon(), target);
  }
  
  // optional bool isSet = 11;
  if (has_isset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->isset(), target);
  }
  
  // optional string id = 12;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerGuild::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 guildid = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildid());
    }
    
    // optional int64 GuildMillFinishTime = 3;
    if (has_guildmillfinishtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guildmillfinishtime());
    }
    
    // required int64 GuildCheckInTime = 4;
    if (has_guildcheckintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guildcheckintime());
    }
    
    // optional int32 refreshattackcnt = 5;
    if (has_refreshattackcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refreshattackcnt());
    }
    
    // optional int64 refreshfreecnttime = 6;
    if (has_refreshfreecnttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->refreshfreecnttime());
    }
    
    // optional string guildname = 8;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }
    
    // optional string guildicon = 9;
    if (has_guildicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildicon());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string guildlasticon = 10;
    if (has_guildlasticon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildlasticon());
    }
    
    // optional bool isSet = 11;
    if (has_isset()) {
      total_size += 1 + 1;
    }
    
    // optional string id = 12;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
  }
  // repeated .protobuf.common.KVint3232 science = 7;
  total_size += 1 * this->science_size();
  for (int i = 0; i < this->science_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->science(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerGuild::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerGuild* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerGuild*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerGuild::MergeFrom(const PlayerGuild& from) {
  GOOGLE_CHECK_NE(&from, this);
  science_.MergeFrom(from.science_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_guildmillfinishtime()) {
      set_guildmillfinishtime(from.guildmillfinishtime());
    }
    if (from.has_guildcheckintime()) {
      set_guildcheckintime(from.guildcheckintime());
    }
    if (from.has_refreshattackcnt()) {
      set_refreshattackcnt(from.refreshattackcnt());
    }
    if (from.has_refreshfreecnttime()) {
      set_refreshfreecnttime(from.refreshfreecnttime());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_guildicon()) {
      set_guildicon(from.guildicon());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_guildlasticon()) {
      set_guildlasticon(from.guildlasticon());
    }
    if (from.has_isset()) {
      set_isset(from.isset());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerGuild::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerGuild::CopyFrom(const PlayerGuild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerGuild::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  for (int i = 0; i < science_size(); i++) {
    if (!this->science(i).IsInitialized()) return false;
  }
  return true;
}

void PlayerGuild::Swap(PlayerGuild* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(guildmillfinishtime_, other->guildmillfinishtime_);
    std::swap(guildcheckintime_, other->guildcheckintime_);
    std::swap(refreshattackcnt_, other->refreshattackcnt_);
    std::swap(refreshfreecnttime_, other->refreshfreecnttime_);
    science_.Swap(&other->science_);
    std::swap(guildname_, other->guildname_);
    std::swap(guildicon_, other->guildicon_);
    std::swap(guildlasticon_, other->guildlasticon_);
    std::swap(isset_, other->isset_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerGuild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerGuild_descriptor_;
  metadata.reflection = PlayerGuild_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyLoginInfo::kGidFieldNumber;
const int ReplyLoginInfo::kNameFieldNumber;
const int ReplyLoginInfo::kPlayerLevelFieldNumber;
const int ReplyLoginInfo::kPlayerExpFieldNumber;
const int ReplyLoginInfo::kDiamondFieldNumber;
const int ReplyLoginInfo::kGoldFieldNumber;
const int ReplyLoginInfo::kAlterNameTimesFieldNumber;
const int ReplyLoginInfo::kVipLevelFieldNumber;
const int ReplyLoginInfo::kVipExpFieldNumber;
const int ReplyLoginInfo::kHeroeBagFieldNumber;
const int ReplyLoginInfo::kExpandTimesFieldNumber;
const int ReplyLoginInfo::kExpandTimes2FieldNumber;
const int ReplyLoginInfo::kObjectidFieldNumber;
const int ReplyLoginInfo::kHangMaxMapFieldNumber;
const int ReplyLoginInfo::kKillGblCntFieldNumber;
const int ReplyLoginInfo::kKillSuperMosterCntFieldNumber;
const int ReplyLoginInfo::kHeadFieldNumber;
const int ReplyLoginInfo::kGuildinfoFieldNumber;
const int ReplyLoginInfo::kBlakMarketTimeFieldNumber;
const int ReplyLoginInfo::kBaseSummonTimeFieldNumber;
const int ReplyLoginInfo::kSeniorSummonTimeFieldNumber;
const int ReplyLoginInfo::kGoldMetallurgyTimeFieldNumber;
const int ReplyLoginInfo::kSummonEnergyFieldNumber;
const int ReplyLoginInfo::kLineupTemplatesFieldNumber;
const int ReplyLoginInfo::kTavernFinishTimesFieldNumber;
const int ReplyLoginInfo::kGuidanceFieldNumber;
const int ReplyLoginInfo::kIsHideVipFieldNumber;
const int ReplyLoginInfo::kWishRefreshTimeFieldNumber;
const int ReplyLoginInfo::kGoldStatusFieldNumber;
const int ReplyLoginInfo::kTownFieldNumber;
const int ReplyLoginInfo::kIsKillBossFieldNumber;
const int ReplyLoginInfo::kHeadFrameFieldNumber;
const int ReplyLoginInfo::kCharacterNameFieldNumber;
const int ReplyLoginInfo::kSexFieldNumber;
const int ReplyLoginInfo::kCityFieldNumber;
const int ReplyLoginInfo::kServeridFieldNumber;
const int ReplyLoginInfo::kPlayerCheckFieldNumber;
const int ReplyLoginInfo::kObsessedStateFieldNumber;
const int ReplyLoginInfo::kPowerFieldNumber;
#endif  // !_MSC_VER

ReplyLoginInfo::ReplyLoginInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReplyLoginInfo::InitAsDefaultInstance() {
  guildinfo_ = const_cast< ::protobuf::playerInfo::PlayerGuild*>(&::protobuf::playerInfo::PlayerGuild::default_instance());
  obsessedstate_ = const_cast< ::protobuf::playerInfo::ObsessedState*>(&::protobuf::playerInfo::ObsessedState::default_instance());
}

ReplyLoginInfo::ReplyLoginInfo(const ReplyLoginInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReplyLoginInfo::SharedCtor() {
  _cached_size_ = 0;
  gid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playerlevel_ = 0;
  playerexp_ = GOOGLE_LONGLONG(0);
  diamond_ = GOOGLE_LONGLONG(0);
  gold_ = GOOGLE_LONGLONG(0);
  alternametimes_ = 0;
  viplevel_ = 0;
  vipexp_ = 0;
  heroebag_ = 0;
  expandtimes_ = 0;
  expandtimes2_ = 0;
  objectid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hangmaxmap_ = 0;
  killgblcnt_ = false;
  killsupermostercnt_ = false;
  head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guildinfo_ = NULL;
  blakmarkettime_ = GOOGLE_LONGLONG(0);
  basesummontime_ = GOOGLE_LONGLONG(0);
  seniorsummontime_ = GOOGLE_LONGLONG(0);
  goldmetallurgytime_ = GOOGLE_LONGLONG(0);
  summonenergy_ = GOOGLE_LONGLONG(0);
  guidance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ishidevip_ = false;
  wishrefreshtime_ = GOOGLE_LONGLONG(0);
  town_ = 0;
  iskillboss_ = false;
  headframe_ = 0;
  charactername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serverid_ = 0;
  playercheck_ = false;
  obsessedstate_ = NULL;
  power_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyLoginInfo::~ReplyLoginInfo() {
  SharedDtor();
}

void ReplyLoginInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (objectid_ != &::google::protobuf::internal::kEmptyString) {
    delete objectid_;
  }
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    delete head_;
  }
  if (guidance_ != &::google::protobuf::internal::kEmptyString) {
    delete guidance_;
  }
  if (charactername_ != &::google::protobuf::internal::kEmptyString) {
    delete charactername_;
  }
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    delete city_;
  }
  if (this != default_instance_) {
    delete guildinfo_;
    delete obsessedstate_;
  }
}

void ReplyLoginInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyLoginInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyLoginInfo_descriptor_;
}

const ReplyLoginInfo& ReplyLoginInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playerInfo_2eproto();  return *default_instance_;
}

ReplyLoginInfo* ReplyLoginInfo::default_instance_ = NULL;

ReplyLoginInfo* ReplyLoginInfo::New() const {
  return new ReplyLoginInfo;
}

void ReplyLoginInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gid_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    playerlevel_ = 0;
    playerexp_ = GOOGLE_LONGLONG(0);
    diamond_ = GOOGLE_LONGLONG(0);
    gold_ = GOOGLE_LONGLONG(0);
    alternametimes_ = 0;
    viplevel_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    vipexp_ = 0;
    heroebag_ = 0;
    expandtimes_ = 0;
    expandtimes2_ = 0;
    if (has_objectid()) {
      if (objectid_ != &::google::protobuf::internal::kEmptyString) {
        objectid_->clear();
      }
    }
    hangmaxmap_ = 0;
    killgblcnt_ = false;
    killsupermostercnt_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_head()) {
      if (head_ != &::google::protobuf::internal::kEmptyString) {
        head_->clear();
      }
    }
    if (has_guildinfo()) {
      if (guildinfo_ != NULL) guildinfo_->::protobuf::playerInfo::PlayerGuild::Clear();
    }
    blakmarkettime_ = GOOGLE_LONGLONG(0);
    basesummontime_ = GOOGLE_LONGLONG(0);
    seniorsummontime_ = GOOGLE_LONGLONG(0);
    goldmetallurgytime_ = GOOGLE_LONGLONG(0);
    summonenergy_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    if (has_guidance()) {
      if (guidance_ != &::google::protobuf::internal::kEmptyString) {
        guidance_->clear();
      }
    }
    ishidevip_ = false;
    wishrefreshtime_ = GOOGLE_LONGLONG(0);
    town_ = 0;
    iskillboss_ = false;
    headframe_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_charactername()) {
      if (charactername_ != &::google::protobuf::internal::kEmptyString) {
        charactername_->clear();
      }
    }
    sex_ = 0;
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::kEmptyString) {
        city_->clear();
      }
    }
    serverid_ = 0;
    playercheck_ = false;
    if (has_obsessedstate()) {
      if (obsessedstate_ != NULL) obsessedstate_->::protobuf::playerInfo::ObsessedState::Clear();
    }
    power_ = 0;
  }
  lineuptemplates_.Clear();
  tavernfinishtimes_.Clear();
  goldstatus_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyLoginInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playerLevel;
        break;
      }
      
      // required int32 playerLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerlevel_)));
          set_has_playerlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_playerExp;
        break;
      }
      
      // required int64 playerExp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerexp_)));
          set_has_playerexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_diamond;
        break;
      }
      
      // required int64 diamond = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_gold;
        break;
      }
      
      // required int64 gold = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_alterNameTimes;
        break;
      }
      
      // required int32 alterNameTimes = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alterNameTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alternametimes_)));
          set_has_alternametimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_vipLevel;
        break;
      }
      
      // required int32 vipLevel = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_vipExp;
        break;
      }
      
      // required int32 vipExp = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vipexp_)));
          set_has_vipexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_heroeBag;
        break;
      }
      
      // required int32 heroeBag = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroeBag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &heroebag_)));
          set_has_heroebag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_expandTimes;
        break;
      }
      
      // required int32 expandTimes = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expandTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expandtimes_)));
          set_has_expandtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_objectid;
        break;
      }
      
      // required string objectid = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_objectid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_objectid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->objectid().data(), this->objectid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_hangMaxMap;
        break;
      }
      
      // required int32 hangMaxMap = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hangMaxMap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hangmaxmap_)));
          set_has_hangmaxmap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_killGblCnt;
        break;
      }
      
      // required bool killGblCnt = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killGblCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &killgblcnt_)));
          set_has_killgblcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_killSuperMosterCnt;
        break;
      }
      
      // required bool killSuperMosterCnt = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killSuperMosterCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &killsupermostercnt_)));
          set_has_killsupermostercnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_head;
        break;
      }
      
      // required string head = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_head()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->head().data(), this->head().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_guildinfo;
        break;
      }
      
      // required .protobuf.playerInfo.PlayerGuild guildinfo = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guildinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_blakMarketTime;
        break;
      }
      
      // optional int64 blakMarketTime = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blakMarketTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &blakmarkettime_)));
          set_has_blakmarkettime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_baseSummonTime;
        break;
      }
      
      // optional int64 baseSummonTime = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baseSummonTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &basesummontime_)));
          set_has_basesummontime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_seniorSummonTime;
        break;
      }
      
      // optional int64 seniorSummonTime = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seniorSummonTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &seniorsummontime_)));
          set_has_seniorsummontime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_goldMetallurgyTime;
        break;
      }
      
      // optional int64 goldMetallurgyTime = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goldMetallurgyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &goldmetallurgytime_)));
          set_has_goldmetallurgytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_summonEnergy;
        break;
      }
      
      // optional int64 summonEnergy = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_summonEnergy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &summonenergy_)));
          set_has_summonenergy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_lineupTemplates;
        break;
      }
      
      // repeated .protobuf.common.LineupTemplate lineupTemplates = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lineupTemplates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lineuptemplates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_lineupTemplates;
        if (input->ExpectTag(202)) goto parse_tavernFinishTimes;
        break;
      }
      
      // repeated .protobuf.common.KVint3264 tavernFinishTimes = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tavernFinishTimes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tavernfinishtimes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_tavernFinishTimes;
        if (input->ExpectTag(210)) goto parse_guidance;
        break;
      }
      
      // optional string guidance = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guidance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guidance()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guidance().data(), this->guidance().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_isHideVip;
        break;
      }
      
      // optional bool isHideVip = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isHideVip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishidevip_)));
          set_has_ishidevip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_wishRefreshTime;
        break;
      }
      
      // optional int64 wishRefreshTime = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wishRefreshTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &wishrefreshtime_)));
          set_has_wishrefreshtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_goldStatus;
        break;
      }
      
      // repeated .protobuf.common.KVint3232 goldStatus = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goldStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goldstatus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_goldStatus;
        if (input->ExpectTag(240)) goto parse_town;
        break;
      }
      
      // optional int32 town = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_town:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &town_)));
          set_has_town();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_isKillBoss;
        break;
      }
      
      // optional bool isKillBoss = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isKillBoss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iskillboss_)));
          set_has_iskillboss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_headFrame;
        break;
      }
      
      // optional int32 headFrame = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headFrame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headframe_)));
          set_has_headframe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_expandTimes2;
        break;
      }
      
      // required int32 expandTimes2 = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expandTimes2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expandtimes2_)));
          set_has_expandtimes2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_characterName;
        break;
      }
      
      // optional string characterName = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_characterName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charactername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->charactername().data(), this->charactername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_sex;
        break;
      }
      
      // optional int32 sex = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_city;
        break;
      }
      
      // optional string city = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_serverid;
        break;
      }
      
      // optional int32 serverid = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_playerCheck;
        break;
      }
      
      // optional bool playerCheck = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerCheck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &playercheck_)));
          set_has_playercheck();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(314)) goto parse_obsessedState;
        break;
      }
      
      // optional .protobuf.playerInfo.ObsessedState obsessedState = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_obsessedState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_obsessedstate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_power;
        break;
      }
      
      // optional int32 power = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReplyLoginInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 gid = 1;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gid(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // required int32 playerLevel = 3;
  if (has_playerlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->playerlevel(), output);
  }
  
  // required int64 playerExp = 4;
  if (has_playerexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->playerexp(), output);
  }
  
  // required int64 diamond = 6;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->diamond(), output);
  }
  
  // required int64 gold = 7;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->gold(), output);
  }
  
  // required int32 alterNameTimes = 8;
  if (has_alternametimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->alternametimes(), output);
  }
  
  // required int32 vipLevel = 9;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->viplevel(), output);
  }
  
  // required int32 vipExp = 10;
  if (has_vipexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->vipexp(), output);
  }
  
  // required int32 heroeBag = 11;
  if (has_heroebag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->heroebag(), output);
  }
  
  // required int32 expandTimes = 12;
  if (has_expandtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->expandtimes(), output);
  }
  
  // required string objectid = 13;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->objectid().data(), this->objectid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->objectid(), output);
  }
  
  // required int32 hangMaxMap = 14;
  if (has_hangmaxmap()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->hangmaxmap(), output);
  }
  
  // required bool killGblCnt = 15;
  if (has_killgblcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->killgblcnt(), output);
  }
  
  // required bool killSuperMosterCnt = 16;
  if (has_killsupermostercnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->killsupermostercnt(), output);
  }
  
  // required string head = 17;
  if (has_head()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head().data(), this->head().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->head(), output);
  }
  
  // required .protobuf.playerInfo.PlayerGuild guildinfo = 18;
  if (has_guildinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->guildinfo(), output);
  }
  
  // optional int64 blakMarketTime = 19;
  if (has_blakmarkettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->blakmarkettime(), output);
  }
  
  // optional int64 baseSummonTime = 20;
  if (has_basesummontime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->basesummontime(), output);
  }
  
  // optional int64 seniorSummonTime = 21;
  if (has_seniorsummontime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->seniorsummontime(), output);
  }
  
  // optional int64 goldMetallurgyTime = 22;
  if (has_goldmetallurgytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->goldmetallurgytime(), output);
  }
  
  // optional int64 summonEnergy = 23;
  if (has_summonenergy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(23, this->summonenergy(), output);
  }
  
  // repeated .protobuf.common.LineupTemplate lineupTemplates = 24;
  for (int i = 0; i < this->lineuptemplates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->lineuptemplates(i), output);
  }
  
  // repeated .protobuf.common.KVint3264 tavernFinishTimes = 25;
  for (int i = 0; i < this->tavernfinishtimes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->tavernfinishtimes(i), output);
  }
  
  // optional string guidance = 26;
  if (has_guidance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guidance().data(), this->guidance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      26, this->guidance(), output);
  }
  
  // optional bool isHideVip = 27;
  if (has_ishidevip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->ishidevip(), output);
  }
  
  // optional int64 wishRefreshTime = 28;
  if (has_wishrefreshtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(28, this->wishrefreshtime(), output);
  }
  
  // repeated .protobuf.common.KVint3232 goldStatus = 29;
  for (int i = 0; i < this->goldstatus_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->goldstatus(i), output);
  }
  
  // optional int32 town = 30;
  if (has_town()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->town(), output);
  }
  
  // optional bool isKillBoss = 31;
  if (has_iskillboss()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->iskillboss(), output);
  }
  
  // optional int32 headFrame = 32;
  if (has_headframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->headframe(), output);
  }
  
  // required int32 expandTimes2 = 33;
  if (has_expandtimes2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->expandtimes2(), output);
  }
  
  // optional string characterName = 34;
  if (has_charactername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charactername().data(), this->charactername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      34, this->charactername(), output);
  }
  
  // optional int32 sex = 35;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->sex(), output);
  }
  
  // optional string city = 36;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      36, this->city(), output);
  }
  
  // optional int32 serverid = 37;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->serverid(), output);
  }
  
  // optional bool playerCheck = 38;
  if (has_playercheck()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(38, this->playercheck(), output);
  }
  
  // optional .protobuf.playerInfo.ObsessedState obsessedState = 39;
  if (has_obsessedstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, this->obsessedstate(), output);
  }
  
  // optional int32 power = 40;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->power(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReplyLoginInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 gid = 1;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gid(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // required int32 playerLevel = 3;
  if (has_playerlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->playerlevel(), target);
  }
  
  // required int64 playerExp = 4;
  if (has_playerexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->playerexp(), target);
  }
  
  // required int64 diamond = 6;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->diamond(), target);
  }
  
  // required int64 gold = 7;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->gold(), target);
  }
  
  // required int32 alterNameTimes = 8;
  if (has_alternametimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->alternametimes(), target);
  }
  
  // required int32 vipLevel = 9;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->viplevel(), target);
  }
  
  // required int32 vipExp = 10;
  if (has_vipexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->vipexp(), target);
  }
  
  // required int32 heroeBag = 11;
  if (has_heroebag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->heroebag(), target);
  }
  
  // required int32 expandTimes = 12;
  if (has_expandtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->expandtimes(), target);
  }
  
  // required string objectid = 13;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->objectid().data(), this->objectid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->objectid(), target);
  }
  
  // required int32 hangMaxMap = 14;
  if (has_hangmaxmap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->hangmaxmap(), target);
  }
  
  // required bool killGblCnt = 15;
  if (has_killgblcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->killgblcnt(), target);
  }
  
  // required bool killSuperMosterCnt = 16;
  if (has_killsupermostercnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->killsupermostercnt(), target);
  }
  
  // required string head = 17;
  if (has_head()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head().data(), this->head().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->head(), target);
  }
  
  // required .protobuf.playerInfo.PlayerGuild guildinfo = 18;
  if (has_guildinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->guildinfo(), target);
  }
  
  // optional int64 blakMarketTime = 19;
  if (has_blakmarkettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->blakmarkettime(), target);
  }
  
  // optional int64 baseSummonTime = 20;
  if (has_basesummontime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->basesummontime(), target);
  }
  
  // optional int64 seniorSummonTime = 21;
  if (has_seniorsummontime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->seniorsummontime(), target);
  }
  
  // optional int64 goldMetallurgyTime = 22;
  if (has_goldmetallurgytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->goldmetallurgytime(), target);
  }
  
  // optional int64 summonEnergy = 23;
  if (has_summonenergy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(23, this->summonenergy(), target);
  }
  
  // repeated .protobuf.common.LineupTemplate lineupTemplates = 24;
  for (int i = 0; i < this->lineuptemplates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->lineuptemplates(i), target);
  }
  
  // repeated .protobuf.common.KVint3264 tavernFinishTimes = 25;
  for (int i = 0; i < this->tavernfinishtimes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->tavernfinishtimes(i), target);
  }
  
  // optional string guidance = 26;
  if (has_guidance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guidance().data(), this->guidance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->guidance(), target);
  }
  
  // optional bool isHideVip = 27;
  if (has_ishidevip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->ishidevip(), target);
  }
  
  // optional int64 wishRefreshTime = 28;
  if (has_wishrefreshtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(28, this->wishrefreshtime(), target);
  }
  
  // repeated .protobuf.common.KVint3232 goldStatus = 29;
  for (int i = 0; i < this->goldstatus_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->goldstatus(i), target);
  }
  
  // optional int32 town = 30;
  if (has_town()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->town(), target);
  }
  
  // optional bool isKillBoss = 31;
  if (has_iskillboss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->iskillboss(), target);
  }
  
  // optional int32 headFrame = 32;
  if (has_headframe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->headframe(), target);
  }
  
  // required int32 expandTimes2 = 33;
  if (has_expandtimes2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->expandtimes2(), target);
  }
  
  // optional string characterName = 34;
  if (has_charactername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charactername().data(), this->charactername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        34, this->charactername(), target);
  }
  
  // optional int32 sex = 35;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->sex(), target);
  }
  
  // optional string city = 36;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        36, this->city(), target);
  }
  
  // optional int32 serverid = 37;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->serverid(), target);
  }
  
  // optional bool playerCheck = 38;
  if (has_playercheck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(38, this->playercheck(), target);
  }
  
  // optional .protobuf.playerInfo.ObsessedState obsessedState = 39;
  if (has_obsessedstate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        39, this->obsessedstate(), target);
  }
  
  // optional int32 power = 40;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->power(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReplyLoginInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gid = 1;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gid());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required int32 playerLevel = 3;
    if (has_playerlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerlevel());
    }
    
    // required int64 playerExp = 4;
    if (has_playerexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerexp());
    }
    
    // required int64 diamond = 6;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->diamond());
    }
    
    // required int64 gold = 7;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }
    
    // required int32 alterNameTimes = 8;
    if (has_alternametimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->alternametimes());
    }
    
    // required int32 vipLevel = 9;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 vipExp = 10;
    if (has_vipexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vipexp());
    }
    
    // required int32 heroeBag = 11;
    if (has_heroebag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->heroebag());
    }
    
    // required int32 expandTimes = 12;
    if (has_expandtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expandtimes());
    }
    
    // required int32 expandTimes2 = 33;
    if (has_expandtimes2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expandtimes2());
    }
    
    // required string objectid = 13;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->objectid());
    }
    
    // required int32 hangMaxMap = 14;
    if (has_hangmaxmap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hangmaxmap());
    }
    
    // required bool killGblCnt = 15;
    if (has_killgblcnt()) {
      total_size += 1 + 1;
    }
    
    // required bool killSuperMosterCnt = 16;
    if (has_killsupermostercnt()) {
      total_size += 2 + 1;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required string head = 17;
    if (has_head()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->head());
    }
    
    // required .protobuf.playerInfo.PlayerGuild guildinfo = 18;
    if (has_guildinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guildinfo());
    }
    
    // optional int64 blakMarketTime = 19;
    if (has_blakmarkettime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->blakmarkettime());
    }
    
    // optional int64 baseSummonTime = 20;
    if (has_basesummontime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->basesummontime());
    }
    
    // optional int64 seniorSummonTime = 21;
    if (has_seniorsummontime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->seniorsummontime());
    }
    
    // optional int64 goldMetallurgyTime = 22;
    if (has_goldmetallurgytime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->goldmetallurgytime());
    }
    
    // optional int64 summonEnergy = 23;
    if (has_summonenergy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->summonenergy());
    }
    
  }
  if (_has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    // optional string guidance = 26;
    if (has_guidance()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guidance());
    }
    
    // optional bool isHideVip = 27;
    if (has_ishidevip()) {
      total_size += 2 + 1;
    }
    
    // optional int64 wishRefreshTime = 28;
    if (has_wishrefreshtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->wishrefreshtime());
    }
    
    // optional int32 town = 30;
    if (has_town()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->town());
    }
    
    // optional bool isKillBoss = 31;
    if (has_iskillboss()) {
      total_size += 2 + 1;
    }
    
    // optional int32 headFrame = 32;
    if (has_headframe()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headframe());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional string characterName = 34;
    if (has_charactername()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charactername());
    }
    
    // optional int32 sex = 35;
    if (has_sex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }
    
    // optional string city = 36;
    if (has_city()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }
    
    // optional int32 serverid = 37;
    if (has_serverid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }
    
    // optional bool playerCheck = 38;
    if (has_playercheck()) {
      total_size += 2 + 1;
    }
    
    // optional .protobuf.playerInfo.ObsessedState obsessedState = 39;
    if (has_obsessedstate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->obsessedstate());
    }
    
    // optional int32 power = 40;
    if (has_power()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }
    
  }
  // repeated .protobuf.common.LineupTemplate lineupTemplates = 24;
  total_size += 2 * this->lineuptemplates_size();
  for (int i = 0; i < this->lineuptemplates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lineuptemplates(i));
  }
  
  // repeated .protobuf.common.KVint3264 tavernFinishTimes = 25;
  total_size += 2 * this->tavernfinishtimes_size();
  for (int i = 0; i < this->tavernfinishtimes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tavernfinishtimes(i));
  }
  
  // repeated .protobuf.common.KVint3232 goldStatus = 29;
  total_size += 2 * this->goldstatus_size();
  for (int i = 0; i < this->goldstatus_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goldstatus(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyLoginInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyLoginInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyLoginInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyLoginInfo::MergeFrom(const ReplyLoginInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  lineuptemplates_.MergeFrom(from.lineuptemplates_);
  tavernfinishtimes_.MergeFrom(from.tavernfinishtimes_);
  goldstatus_.MergeFrom(from.goldstatus_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_playerlevel()) {
      set_playerlevel(from.playerlevel());
    }
    if (from.has_playerexp()) {
      set_playerexp(from.playerexp());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_alternametimes()) {
      set_alternametimes(from.alternametimes());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_vipexp()) {
      set_vipexp(from.vipexp());
    }
    if (from.has_heroebag()) {
      set_heroebag(from.heroebag());
    }
    if (from.has_expandtimes()) {
      set_expandtimes(from.expandtimes());
    }
    if (from.has_expandtimes2()) {
      set_expandtimes2(from.expandtimes2());
    }
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_hangmaxmap()) {
      set_hangmaxmap(from.hangmaxmap());
    }
    if (from.has_killgblcnt()) {
      set_killgblcnt(from.killgblcnt());
    }
    if (from.has_killsupermostercnt()) {
      set_killsupermostercnt(from.killsupermostercnt());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_head()) {
      set_head(from.head());
    }
    if (from.has_guildinfo()) {
      mutable_guildinfo()->::protobuf::playerInfo::PlayerGuild::MergeFrom(from.guildinfo());
    }
    if (from.has_blakmarkettime()) {
      set_blakmarkettime(from.blakmarkettime());
    }
    if (from.has_basesummontime()) {
      set_basesummontime(from.basesummontime());
    }
    if (from.has_seniorsummontime()) {
      set_seniorsummontime(from.seniorsummontime());
    }
    if (from.has_goldmetallurgytime()) {
      set_goldmetallurgytime(from.goldmetallurgytime());
    }
    if (from.has_summonenergy()) {
      set_summonenergy(from.summonenergy());
    }
  }
  if (from._has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    if (from.has_guidance()) {
      set_guidance(from.guidance());
    }
    if (from.has_ishidevip()) {
      set_ishidevip(from.ishidevip());
    }
    if (from.has_wishrefreshtime()) {
      set_wishrefreshtime(from.wishrefreshtime());
    }
    if (from.has_town()) {
      set_town(from.town());
    }
    if (from.has_iskillboss()) {
      set_iskillboss(from.iskillboss());
    }
    if (from.has_headframe()) {
      set_headframe(from.headframe());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_charactername()) {
      set_charactername(from.charactername());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_playercheck()) {
      set_playercheck(from.playercheck());
    }
    if (from.has_obsessedstate()) {
      mutable_obsessedstate()->::protobuf::playerInfo::ObsessedState::MergeFrom(from.obsessedstate());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyLoginInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyLoginInfo::CopyFrom(const ReplyLoginInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyLoginInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0003ffff) != 0x0003ffff) return false;
  
  if (has_guildinfo()) {
    if (!this->guildinfo().IsInitialized()) return false;
  }
  for (int i = 0; i < lineuptemplates_size(); i++) {
    if (!this->lineuptemplates(i).IsInitialized()) return false;
  }
  for (int i = 0; i < tavernfinishtimes_size(); i++) {
    if (!this->tavernfinishtimes(i).IsInitialized()) return false;
  }
  for (int i = 0; i < goldstatus_size(); i++) {
    if (!this->goldstatus(i).IsInitialized()) return false;
  }
  return true;
}

void ReplyLoginInfo::Swap(ReplyLoginInfo* other) {
  if (other != this) {
    std::swap(gid_, other->gid_);
    std::swap(name_, other->name_);
    std::swap(playerlevel_, other->playerlevel_);
    std::swap(playerexp_, other->playerexp_);
    std::swap(diamond_, other->diamond_);
    std::swap(gold_, other->gold_);
    std::swap(alternametimes_, other->alternametimes_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(vipexp_, other->vipexp_);
    std::swap(heroebag_, other->heroebag_);
    std::swap(expandtimes_, other->expandtimes_);
    std::swap(expandtimes2_, other->expandtimes2_);
    std::swap(objectid_, other->objectid_);
    std::swap(hangmaxmap_, other->hangmaxmap_);
    std::swap(killgblcnt_, other->killgblcnt_);
    std::swap(killsupermostercnt_, other->killsupermostercnt_);
    std::swap(head_, other->head_);
    std::swap(guildinfo_, other->guildinfo_);
    std::swap(blakmarkettime_, other->blakmarkettime_);
    std::swap(basesummontime_, other->basesummontime_);
    std::swap(seniorsummontime_, other->seniorsummontime_);
    std::swap(goldmetallurgytime_, other->goldmetallurgytime_);
    std::swap(summonenergy_, other->summonenergy_);
    lineuptemplates_.Swap(&other->lineuptemplates_);
    tavernfinishtimes_.Swap(&other->tavernfinishtimes_);
    std::swap(guidance_, other->guidance_);
    std::swap(ishidevip_, other->ishidevip_);
    std::swap(wishrefreshtime_, other->wishrefreshtime_);
    goldstatus_.Swap(&other->goldstatus_);
    std::swap(town_, other->town_);
    std::swap(iskillboss_, other->iskillboss_);
    std::swap(headframe_, other->headframe_);
    std::swap(charactername_, other->charactername_);
    std::swap(sex_, other->sex_);
    std::swap(city_, other->city_);
    std::swap(serverid_, other->serverid_);
    std::swap(playercheck_, other->playercheck_);
    std::swap(obsessedstate_, other->obsessedstate_);
    std::swap(power_, other->power_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyLoginInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyLoginInfo_descriptor_;
  metadata.reflection = ReplyLoginInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObsessedState::kLogInMineFieldNumber;
const int ObsessedState::kServerTimeFieldNumber;
const int ObsessedState::kObsessedOpenFieldNumber;
#endif  // !_MSC_VER

ObsessedState::ObsessedState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ObsessedState::InitAsDefaultInstance() {
}

ObsessedState::ObsessedState(const ObsessedState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ObsessedState::SharedCtor() {
  _cached_size_ = 0;
  loginmine_ = 0;
  servertime_ = GOOGLE_LONGLONG(0);
  obsessedopen_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObsessedState::~ObsessedState() {
  SharedDtor();
}

void ObsessedState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ObsessedState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObsessedState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObsessedState_descriptor_;
}

const ObsessedState& ObsessedState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playerInfo_2eproto();  return *default_instance_;
}

ObsessedState* ObsessedState::default_instance_ = NULL;

ObsessedState* ObsessedState::New() const {
  return new ObsessedState;
}

void ObsessedState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    loginmine_ = 0;
    servertime_ = GOOGLE_LONGLONG(0);
    obsessedopen_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObsessedState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 logInMine = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loginmine_)));
          set_has_loginmine();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_serverTime;
        break;
      }
      
      // optional int64 serverTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &servertime_)));
          set_has_servertime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_obsessedOpen;
        break;
      }
      
      // optional bool obsessedOpen = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_obsessedOpen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &obsessedopen_)));
          set_has_obsessedopen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObsessedState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 logInMine = 1;
  if (has_loginmine()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->loginmine(), output);
  }
  
  // optional int64 serverTime = 2;
  if (has_servertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->servertime(), output);
  }
  
  // optional bool obsessedOpen = 3;
  if (has_obsessedopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->obsessedopen(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObsessedState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 logInMine = 1;
  if (has_loginmine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->loginmine(), target);
  }
  
  // optional int64 serverTime = 2;
  if (has_servertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->servertime(), target);
  }
  
  // optional bool obsessedOpen = 3;
  if (has_obsessedopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->obsessedopen(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObsessedState::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 logInMine = 1;
    if (has_loginmine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loginmine());
    }
    
    // optional int64 serverTime = 2;
    if (has_servertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->servertime());
    }
    
    // optional bool obsessedOpen = 3;
    if (has_obsessedopen()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObsessedState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObsessedState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObsessedState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObsessedState::MergeFrom(const ObsessedState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_loginmine()) {
      set_loginmine(from.loginmine());
    }
    if (from.has_servertime()) {
      set_servertime(from.servertime());
    }
    if (from.has_obsessedopen()) {
      set_obsessedopen(from.obsessedopen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObsessedState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObsessedState::CopyFrom(const ObsessedState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObsessedState::IsInitialized() const {
  
  return true;
}

void ObsessedState::Swap(ObsessedState* other) {
  if (other != this) {
    std::swap(loginmine_, other->loginmine_);
    std::swap(servertime_, other->servertime_);
    std::swap(obsessedopen_, other->obsessedopen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObsessedState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObsessedState_descriptor_;
  metadata.reflection = ObsessedState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyLoginState::kChampionStartTimeFieldNumber;
const int ReplyLoginState::kChampionFirstFieldNumber;
const int ReplyLoginState::kExchargeMarketFinishFieldNumber;
const int ReplyLoginState::kBlakMarketTimeFieldNumber;
const int ReplyLoginState::kBaseSummonTimeFieldNumber;
const int ReplyLoginState::kSeniorSummonTimeFieldNumber;
const int ReplyLoginState::kGoldMetallurgyTimeFieldNumber;
const int ReplyLoginState::kTavernFinishTimesFieldNumber;
const int ReplyLoginState::kWishRefreshTimeFieldNumber;
const int ReplyLoginState::kTimezoneFieldNumber;
const int ReplyLoginState::kBattleFieldNumber;
const int ReplyLoginState::kDungeonidFieldNumber;
const int ReplyLoginState::kDungeontimeFieldNumber;
const int ReplyLoginState::kNextdungeonFieldNumber;
const int ReplyLoginState::kServerNameFieldNumber;
const int ReplyLoginState::kCreateTimeFieldNumber;
const int ReplyLoginState::kTriggerTimeFieldNumber;
const int ReplyLoginState::kNewTimeFieldNumber;
#endif  // !_MSC_VER

ReplyLoginState::ReplyLoginState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReplyLoginState::InitAsDefaultInstance() {
}

ReplyLoginState::ReplyLoginState(const ReplyLoginState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReplyLoginState::SharedCtor() {
  _cached_size_ = 0;
  championstarttime_ = GOOGLE_LONGLONG(0);
  championfirst_ = false;
  exchargemarketfinish_ = GOOGLE_LONGLONG(0);
  blakmarkettime_ = GOOGLE_LONGLONG(0);
  basesummontime_ = GOOGLE_LONGLONG(0);
  seniorsummontime_ = GOOGLE_LONGLONG(0);
  goldmetallurgytime_ = GOOGLE_LONGLONG(0);
  wishrefreshtime_ = GOOGLE_LONGLONG(0);
  timezone_ = 0;
  battle_ = false;
  dungeonid_ = 0;
  dungeontime_ = GOOGLE_LONGLONG(0);
  nextdungeon_ = 0;
  servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  createtime_ = GOOGLE_LONGLONG(0);
  triggertime_ = GOOGLE_LONGLONG(0);
  newtime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyLoginState::~ReplyLoginState() {
  SharedDtor();
}

void ReplyLoginState::SharedDtor() {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    delete servername_;
  }
  if (this != default_instance_) {
  }
}

void ReplyLoginState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyLoginState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyLoginState_descriptor_;
}

const ReplyLoginState& ReplyLoginState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playerInfo_2eproto();  return *default_instance_;
}

ReplyLoginState* ReplyLoginState::default_instance_ = NULL;

ReplyLoginState* ReplyLoginState::New() const {
  return new ReplyLoginState;
}

void ReplyLoginState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    championstarttime_ = GOOGLE_LONGLONG(0);
    championfirst_ = false;
    exchargemarketfinish_ = GOOGLE_LONGLONG(0);
    blakmarkettime_ = GOOGLE_LONGLONG(0);
    basesummontime_ = GOOGLE_LONGLONG(0);
    seniorsummontime_ = GOOGLE_LONGLONG(0);
    goldmetallurgytime_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    wishrefreshtime_ = GOOGLE_LONGLONG(0);
    timezone_ = 0;
    battle_ = false;
    dungeonid_ = 0;
    dungeontime_ = GOOGLE_LONGLONG(0);
    nextdungeon_ = 0;
    if (has_servername()) {
      if (servername_ != &::google::protobuf::internal::kEmptyString) {
        servername_->clear();
      }
    }
    createtime_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    triggertime_ = GOOGLE_LONGLONG(0);
    newtime_ = GOOGLE_LONGLONG(0);
  }
  tavernfinishtimes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyLoginState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 championStartTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &championstarttime_)));
          set_has_championstarttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_championFirst;
        break;
      }
      
      // optional bool championFirst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_championFirst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &championfirst_)));
          set_has_championfirst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exchargeMarketFinish;
        break;
      }
      
      // optional int64 exchargeMarketFinish = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exchargeMarketFinish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exchargemarketfinish_)));
          set_has_exchargemarketfinish();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_blakMarketTime;
        break;
      }
      
      // optional int64 blakMarketTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blakMarketTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &blakmarkettime_)));
          set_has_blakmarkettime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_baseSummonTime;
        break;
      }
      
      // optional int64 baseSummonTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baseSummonTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &basesummontime_)));
          set_has_basesummontime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_seniorSummonTime;
        break;
      }
      
      // optional int64 seniorSummonTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seniorSummonTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &seniorsummontime_)));
          set_has_seniorsummontime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_goldMetallurgyTime;
        break;
      }
      
      // optional int64 goldMetallurgyTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goldMetallurgyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &goldmetallurgytime_)));
          set_has_goldmetallurgytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_tavernFinishTimes;
        break;
      }
      
      // repeated .protobuf.common.KVint3264 tavernFinishTimes = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tavernFinishTimes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tavernfinishtimes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_tavernFinishTimes;
        if (input->ExpectTag(72)) goto parse_wishRefreshTime;
        break;
      }
      
      // optional int64 wishRefreshTime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wishRefreshTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &wishrefreshtime_)));
          set_has_wishrefreshtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_timezone;
        break;
      }
      
      // optional int32 timezone = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timezone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timezone_)));
          set_has_timezone();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_battle;
        break;
      }
      
      // optional bool battle = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &battle_)));
          set_has_battle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_dungeonid;
        break;
      }
      
      // optional int32 dungeonid = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dungeonid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dungeonid_)));
          set_has_dungeonid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_dungeontime;
        break;
      }
      
      // optional int64 dungeontime = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dungeontime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dungeontime_)));
          set_has_dungeontime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_nextdungeon;
        break;
      }
      
      // optional int32 nextdungeon = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextdungeon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nextdungeon_)));
          set_has_nextdungeon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_serverName;
        break;
      }
      
      // optional string serverName = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serverName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->servername().data(), this->servername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_createTime;
        break;
      }
      
      // optional int64 createTime = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_triggerTime;
        break;
      }
      
      // optional int64 triggerTime = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_triggerTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &triggertime_)));
          set_has_triggertime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_newTime;
        break;
      }
      
      // optional int64 newTime = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &newtime_)));
          set_has_newtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReplyLoginState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 championStartTime = 1;
  if (has_championstarttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->championstarttime(), output);
  }
  
  // optional bool championFirst = 2;
  if (has_championfirst()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->championfirst(), output);
  }
  
  // optional int64 exchargeMarketFinish = 3;
  if (has_exchargemarketfinish()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->exchargemarketfinish(), output);
  }
  
  // optional int64 blakMarketTime = 4;
  if (has_blakmarkettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->blakmarkettime(), output);
  }
  
  // optional int64 baseSummonTime = 5;
  if (has_basesummontime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->basesummontime(), output);
  }
  
  // optional int64 seniorSummonTime = 6;
  if (has_seniorsummontime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->seniorsummontime(), output);
  }
  
  // optional int64 goldMetallurgyTime = 7;
  if (has_goldmetallurgytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->goldmetallurgytime(), output);
  }
  
  // repeated .protobuf.common.KVint3264 tavernFinishTimes = 8;
  for (int i = 0; i < this->tavernfinishtimes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->tavernfinishtimes(i), output);
  }
  
  // optional int64 wishRefreshTime = 9;
  if (has_wishrefreshtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->wishrefreshtime(), output);
  }
  
  // optional int32 timezone = 10;
  if (has_timezone()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->timezone(), output);
  }
  
  // optional bool battle = 11;
  if (has_battle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->battle(), output);
  }
  
  // optional int32 dungeonid = 12;
  if (has_dungeonid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->dungeonid(), output);
  }
  
  // optional int64 dungeontime = 13;
  if (has_dungeontime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->dungeontime(), output);
  }
  
  // optional int32 nextdungeon = 14;
  if (has_nextdungeon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->nextdungeon(), output);
  }
  
  // optional string serverName = 15;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->servername(), output);
  }
  
  // optional int64 createTime = 16;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->createtime(), output);
  }
  
  // optional int64 triggerTime = 17;
  if (has_triggertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->triggertime(), output);
  }
  
  // optional int64 newTime = 18;
  if (has_newtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->newtime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReplyLoginState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 championStartTime = 1;
  if (has_championstarttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->championstarttime(), target);
  }
  
  // optional bool championFirst = 2;
  if (has_championfirst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->championfirst(), target);
  }
  
  // optional int64 exchargeMarketFinish = 3;
  if (has_exchargemarketfinish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->exchargemarketfinish(), target);
  }
  
  // optional int64 blakMarketTime = 4;
  if (has_blakmarkettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->blakmarkettime(), target);
  }
  
  // optional int64 baseSummonTime = 5;
  if (has_basesummontime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->basesummontime(), target);
  }
  
  // optional int64 seniorSummonTime = 6;
  if (has_seniorsummontime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->seniorsummontime(), target);
  }
  
  // optional int64 goldMetallurgyTime = 7;
  if (has_goldmetallurgytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->goldmetallurgytime(), target);
  }
  
  // repeated .protobuf.common.KVint3264 tavernFinishTimes = 8;
  for (int i = 0; i < this->tavernfinishtimes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->tavernfinishtimes(i), target);
  }
  
  // optional int64 wishRefreshTime = 9;
  if (has_wishrefreshtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->wishrefreshtime(), target);
  }
  
  // optional int32 timezone = 10;
  if (has_timezone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->timezone(), target);
  }
  
  // optional bool battle = 11;
  if (has_battle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->battle(), target);
  }
  
  // optional int32 dungeonid = 12;
  if (has_dungeonid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->dungeonid(), target);
  }
  
  // optional int64 dungeontime = 13;
  if (has_dungeontime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->dungeontime(), target);
  }
  
  // optional int32 nextdungeon = 14;
  if (has_nextdungeon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->nextdungeon(), target);
  }
  
  // optional string serverName = 15;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->servername(), target);
  }
  
  // optional int64 createTime = 16;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->createtime(), target);
  }
  
  // optional int64 triggerTime = 17;
  if (has_triggertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->triggertime(), target);
  }
  
  // optional int64 newTime = 18;
  if (has_newtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->newtime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReplyLoginState::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 championStartTime = 1;
    if (has_championstarttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->championstarttime());
    }
    
    // optional bool championFirst = 2;
    if (has_championfirst()) {
      total_size += 1 + 1;
    }
    
    // optional int64 exchargeMarketFinish = 3;
    if (has_exchargemarketfinish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exchargemarketfinish());
    }
    
    // optional int64 blakMarketTime = 4;
    if (has_blakmarkettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->blakmarkettime());
    }
    
    // optional int64 baseSummonTime = 5;
    if (has_basesummontime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->basesummontime());
    }
    
    // optional int64 seniorSummonTime = 6;
    if (has_seniorsummontime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->seniorsummontime());
    }
    
    // optional int64 goldMetallurgyTime = 7;
    if (has_goldmetallurgytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->goldmetallurgytime());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 wishRefreshTime = 9;
    if (has_wishrefreshtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->wishrefreshtime());
    }
    
    // optional int32 timezone = 10;
    if (has_timezone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timezone());
    }
    
    // optional bool battle = 11;
    if (has_battle()) {
      total_size += 1 + 1;
    }
    
    // optional int32 dungeonid = 12;
    if (has_dungeonid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dungeonid());
    }
    
    // optional int64 dungeontime = 13;
    if (has_dungeontime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dungeontime());
    }
    
    // optional int32 nextdungeon = 14;
    if (has_nextdungeon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nextdungeon());
    }
    
    // optional string serverName = 15;
    if (has_servername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servername());
    }
    
    // optional int64 createTime = 16;
    if (has_createtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int64 triggerTime = 17;
    if (has_triggertime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->triggertime());
    }
    
    // optional int64 newTime = 18;
    if (has_newtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->newtime());
    }
    
  }
  // repeated .protobuf.common.KVint3264 tavernFinishTimes = 8;
  total_size += 1 * this->tavernfinishtimes_size();
  for (int i = 0; i < this->tavernfinishtimes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tavernfinishtimes(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyLoginState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyLoginState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyLoginState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyLoginState::MergeFrom(const ReplyLoginState& from) {
  GOOGLE_CHECK_NE(&from, this);
  tavernfinishtimes_.MergeFrom(from.tavernfinishtimes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_championstarttime()) {
      set_championstarttime(from.championstarttime());
    }
    if (from.has_championfirst()) {
      set_championfirst(from.championfirst());
    }
    if (from.has_exchargemarketfinish()) {
      set_exchargemarketfinish(from.exchargemarketfinish());
    }
    if (from.has_blakmarkettime()) {
      set_blakmarkettime(from.blakmarkettime());
    }
    if (from.has_basesummontime()) {
      set_basesummontime(from.basesummontime());
    }
    if (from.has_seniorsummontime()) {
      set_seniorsummontime(from.seniorsummontime());
    }
    if (from.has_goldmetallurgytime()) {
      set_goldmetallurgytime(from.goldmetallurgytime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_wishrefreshtime()) {
      set_wishrefreshtime(from.wishrefreshtime());
    }
    if (from.has_timezone()) {
      set_timezone(from.timezone());
    }
    if (from.has_battle()) {
      set_battle(from.battle());
    }
    if (from.has_dungeonid()) {
      set_dungeonid(from.dungeonid());
    }
    if (from.has_dungeontime()) {
      set_dungeontime(from.dungeontime());
    }
    if (from.has_nextdungeon()) {
      set_nextdungeon(from.nextdungeon());
    }
    if (from.has_servername()) {
      set_servername(from.servername());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_triggertime()) {
      set_triggertime(from.triggertime());
    }
    if (from.has_newtime()) {
      set_newtime(from.newtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyLoginState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyLoginState::CopyFrom(const ReplyLoginState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyLoginState::IsInitialized() const {
  
  for (int i = 0; i < tavernfinishtimes_size(); i++) {
    if (!this->tavernfinishtimes(i).IsInitialized()) return false;
  }
  return true;
}

void ReplyLoginState::Swap(ReplyLoginState* other) {
  if (other != this) {
    std::swap(championstarttime_, other->championstarttime_);
    std::swap(championfirst_, other->championfirst_);
    std::swap(exchargemarketfinish_, other->exchargemarketfinish_);
    std::swap(blakmarkettime_, other->blakmarkettime_);
    std::swap(basesummontime_, other->basesummontime_);
    std::swap(seniorsummontime_, other->seniorsummontime_);
    std::swap(goldmetallurgytime_, other->goldmetallurgytime_);
    tavernfinishtimes_.Swap(&other->tavernfinishtimes_);
    std::swap(wishrefreshtime_, other->wishrefreshtime_);
    std::swap(timezone_, other->timezone_);
    std::swap(battle_, other->battle_);
    std::swap(dungeonid_, other->dungeonid_);
    std::swap(dungeontime_, other->dungeontime_);
    std::swap(nextdungeon_, other->nextdungeon_);
    std::swap(servername_, other->servername_);
    std::swap(createtime_, other->createtime_);
    std::swap(triggertime_, other->triggertime_);
    std::swap(newtime_, other->newtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyLoginState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyLoginState_descriptor_;
  metadata.reflection = ReplyLoginState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyAlterHead::kIdFieldNumber;
const int ReplyAlterHead::kTimeFieldNumber;
const int ReplyAlterHead::kLastUseTimeFieldNumber;
#endif  // !_MSC_VER

ReplyAlterHead::ReplyAlterHead()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReplyAlterHead::InitAsDefaultInstance() {
}

ReplyAlterHead::ReplyAlterHead(const ReplyAlterHead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReplyAlterHead::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = GOOGLE_LONGLONG(0);
  lastusetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyAlterHead::~ReplyAlterHead() {
  SharedDtor();
}

void ReplyAlterHead::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void ReplyAlterHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyAlterHead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyAlterHead_descriptor_;
}

const ReplyAlterHead& ReplyAlterHead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playerInfo_2eproto();  return *default_instance_;
}

ReplyAlterHead* ReplyAlterHead::default_instance_ = NULL;

ReplyAlterHead* ReplyAlterHead::New() const {
  return new ReplyAlterHead;
}

void ReplyAlterHead::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    time_ = GOOGLE_LONGLONG(0);
    lastusetime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyAlterHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }
      
      // required int64 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lastUseTime;
        break;
      }
      
      // optional int64 lastUseTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastUseTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lastusetime_)));
          set_has_lastusetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReplyAlterHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }
  
  // required int64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time(), output);
  }
  
  // optional int64 lastUseTime = 3;
  if (has_lastusetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->lastusetime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReplyAlterHead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }
  
  // required int64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time(), target);
  }
  
  // optional int64 lastUseTime = 3;
  if (has_lastusetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->lastusetime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReplyAlterHead::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
    // required int64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }
    
    // optional int64 lastUseTime = 3;
    if (has_lastusetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lastusetime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyAlterHead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyAlterHead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyAlterHead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyAlterHead::MergeFrom(const ReplyAlterHead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_lastusetime()) {
      set_lastusetime(from.lastusetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyAlterHead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyAlterHead::CopyFrom(const ReplyAlterHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyAlterHead::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ReplyAlterHead::Swap(ReplyAlterHead* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(time_, other->time_);
    std::swap(lastusetime_, other->lastusetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyAlterHead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyAlterHead_descriptor_;
  metadata.reflection = ReplyAlterHead_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeadList::kHeadsFieldNumber;
#endif  // !_MSC_VER

HeadList::HeadList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeadList::InitAsDefaultInstance() {
}

HeadList::HeadList(const HeadList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeadList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeadList::~HeadList() {
  SharedDtor();
}

void HeadList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeadList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeadList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeadList_descriptor_;
}

const HeadList& HeadList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playerInfo_2eproto();  return *default_instance_;
}

HeadList* HeadList::default_instance_ = NULL;

HeadList* HeadList::New() const {
  return new HeadList;
}

void HeadList::Clear() {
  heads_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeadList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.playerInfo.ReplyAlterHead heads = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heads:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_heads()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_heads;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeadList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.playerInfo.ReplyAlterHead heads = 1;
  for (int i = 0; i < this->heads_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->heads(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeadList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.playerInfo.ReplyAlterHead heads = 1;
  for (int i = 0; i < this->heads_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->heads(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeadList::ByteSize() const {
  int total_size = 0;
  
  // repeated .protobuf.playerInfo.ReplyAlterHead heads = 1;
  total_size += 1 * this->heads_size();
  for (int i = 0; i < this->heads_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heads(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeadList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeadList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeadList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeadList::MergeFrom(const HeadList& from) {
  GOOGLE_CHECK_NE(&from, this);
  heads_.MergeFrom(from.heads_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeadList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeadList::CopyFrom(const HeadList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeadList::IsInitialized() const {
  
  for (int i = 0; i < heads_size(); i++) {
    if (!this->heads(i).IsInitialized()) return false;
  }
  return true;
}

void HeadList::Swap(HeadList* other) {
  if (other != this) {
    heads_.Swap(&other->heads_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeadList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeadList_descriptor_;
  metadata.reflection = HeadList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommonPlayerInfo::kLevelFieldNumber;
const int CommonPlayerInfo::kNameFieldNumber;
const int CommonPlayerInfo::kHeadFieldNumber;
const int CommonPlayerInfo::kGidFieldNumber;
const int CommonPlayerInfo::kPlayerExpFieldNumber;
const int CommonPlayerInfo::kPlayerIdFieldNumber;
const int CommonPlayerInfo::kIsFreindFieldNumber;
const int CommonPlayerInfo::kAchievementFieldNumber;
const int CommonPlayerInfo::kGuildObjIdFieldNumber;
const int CommonPlayerInfo::kGuildIdFieldNumber;
const int CommonPlayerInfo::kGuildIconFieldNumber;
const int CommonPlayerInfo::kGuildNameFieldNumber;
const int CommonPlayerInfo::kDefineerFieldNumber;
const int CommonPlayerInfo::kVipLevelFieldNumber;
const int CommonPlayerInfo::kHeadFrameFieldNumber;
const int CommonPlayerInfo::kCharacterNameFieldNumber;
const int CommonPlayerInfo::kSexFieldNumber;
const int CommonPlayerInfo::kCityFieldNumber;
const int CommonPlayerInfo::kServeridFieldNumber;
const int CommonPlayerInfo::kSquadShowFieldNumber;
const int CommonPlayerInfo::kHangMaxMapFieldNumber;
const int CommonPlayerInfo::kIdentityFieldNumber;
const int CommonPlayerInfo::kEnemyLineupFieldNumber;
const int CommonPlayerInfo::kPowerFieldNumber;
#endif  // !_MSC_VER

CommonPlayerInfo::CommonPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommonPlayerInfo::InitAsDefaultInstance() {
  defineer_ = const_cast< ::protobuf::common::LineupDetail*>(&::protobuf::common::LineupDetail::default_instance());
  squadshow_ = const_cast< ::protobuf::common::LineupTemplate*>(&::protobuf::common::LineupTemplate::default_instance());
  enemylineup_ = const_cast< ::protobuf::common::LineupDetail*>(&::protobuf::common::LineupDetail::default_instance());
}

CommonPlayerInfo::CommonPlayerInfo(const CommonPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommonPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gid_ = 0;
  playerexp_ = GOOGLE_LONGLONG(0);
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isfreind_ = false;
  guildobjid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guildid_ = 0;
  guildicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  defineer_ = NULL;
  viplevel_ = 0;
  headframe_ = 0;
  charactername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serverid_ = 0;
  squadshow_ = NULL;
  hangmaxmap_ = 0;
  identity_ = 0;
  enemylineup_ = NULL;
  power_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommonPlayerInfo::~CommonPlayerInfo() {
  SharedDtor();
}

void CommonPlayerInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    delete head_;
  }
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (guildobjid_ != &::google::protobuf::internal::kEmptyString) {
    delete guildobjid_;
  }
  if (guildicon_ != &::google::protobuf::internal::kEmptyString) {
    delete guildicon_;
  }
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (charactername_ != &::google::protobuf::internal::kEmptyString) {
    delete charactername_;
  }
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    delete city_;
  }
  if (this != default_instance_) {
    delete defineer_;
    delete squadshow_;
    delete enemylineup_;
  }
}

void CommonPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonPlayerInfo_descriptor_;
}

const CommonPlayerInfo& CommonPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playerInfo_2eproto();  return *default_instance_;
}

CommonPlayerInfo* CommonPlayerInfo::default_instance_ = NULL;

CommonPlayerInfo* CommonPlayerInfo::New() const {
  return new CommonPlayerInfo;
}

void CommonPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_head()) {
      if (head_ != &::google::protobuf::internal::kEmptyString) {
        head_->clear();
      }
    }
    gid_ = 0;
    playerexp_ = GOOGLE_LONGLONG(0);
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    isfreind_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_guildobjid()) {
      if (guildobjid_ != &::google::protobuf::internal::kEmptyString) {
        guildobjid_->clear();
      }
    }
    guildid_ = 0;
    if (has_guildicon()) {
      if (guildicon_ != &::google::protobuf::internal::kEmptyString) {
        guildicon_->clear();
      }
    }
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
    if (has_defineer()) {
      if (defineer_ != NULL) defineer_->::protobuf::common::LineupDetail::Clear();
    }
    viplevel_ = 0;
    headframe_ = 0;
    if (has_charactername()) {
      if (charactername_ != &::google::protobuf::internal::kEmptyString) {
        charactername_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    sex_ = 0;
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::kEmptyString) {
        city_->clear();
      }
    }
    serverid_ = 0;
    if (has_squadshow()) {
      if (squadshow_ != NULL) squadshow_->::protobuf::common::LineupTemplate::Clear();
    }
    hangmaxmap_ = 0;
    identity_ = 0;
    if (has_enemylineup()) {
      if (enemylineup_ != NULL) enemylineup_->::protobuf::common::LineupDetail::Clear();
    }
    power_ = GOOGLE_LONGLONG(0);
  }
  achievement_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommonPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_head;
        break;
      }
      
      // required string head = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_head()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->head().data(), this->head().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gid;
        break;
      }
      
      // required int32 gid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_playerExp;
        break;
      }
      
      // required int64 playerExp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerexp_)));
          set_has_playerexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_playerId;
        break;
      }
      
      // required string playerId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_isFreind;
        break;
      }
      
      // required bool isFreind = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isFreind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfreind_)));
          set_has_isfreind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_achievement;
        break;
      }
      
      // repeated .protobuf.playerInfo.Achievement achievement = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_achievement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_achievement()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_achievement;
        if (input->ExpectTag(72)) goto parse_guildId;
        break;
      }
      
      // optional int32 guildId = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_guildIcon;
        break;
      }
      
      // optional string guildIcon = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildIcon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildicon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildicon().data(), this->guildicon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_guildName;
        break;
      }
      
      // optional string guildName = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_defineer;
        break;
      }
      
      // optional .protobuf.common.LineupDetail defineer = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defineer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_defineer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_vipLevel;
        break;
      }
      
      // optional int32 vipLevel = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_headFrame;
        break;
      }
      
      // optional int32 headFrame = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headFrame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headframe_)));
          set_has_headframe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_guildObjId;
        break;
      }
      
      // optional string guildObjId = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildObjId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildobjid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildobjid().data(), this->guildobjid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_characterName;
        break;
      }
      
      // optional string characterName = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_characterName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charactername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->charactername().data(), this->charactername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_sex;
        break;
      }
      
      // optional int32 sex = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_city;
        break;
      }
      
      // optional string city = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_serverid;
        break;
      }
      
      // optional int32 serverid = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_squadShow;
        break;
      }
      
      // optional .protobuf.common.LineupTemplate squadShow = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_squadShow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_squadshow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_hangMaxMap;
        break;
      }
      
      // optional int32 hangMaxMap = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hangMaxMap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hangmaxmap_)));
          set_has_hangmaxmap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_identity;
        break;
      }
      
      // optional int32 identity = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_identity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &identity_)));
          set_has_identity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_enemyLineup;
        break;
      }
      
      // optional .protobuf.common.LineupDetail enemyLineup = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enemyLineup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enemylineup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_power;
        break;
      }
      
      // optional int64 power = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommonPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // required string head = 3;
  if (has_head()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head().data(), this->head().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->head(), output);
  }
  
  // required int32 gid = 4;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gid(), output);
  }
  
  // required int64 playerExp = 5;
  if (has_playerexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->playerexp(), output);
  }
  
  // required string playerId = 6;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->playerid(), output);
  }
  
  // required bool isFreind = 7;
  if (has_isfreind()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isfreind(), output);
  }
  
  // repeated .protobuf.playerInfo.Achievement achievement = 8;
  for (int i = 0; i < this->achievement_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->achievement(i), output);
  }
  
  // optional int32 guildId = 9;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->guildid(), output);
  }
  
  // optional string guildIcon = 10;
  if (has_guildicon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildicon().data(), this->guildicon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->guildicon(), output);
  }
  
  // optional string guildName = 11;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->guildname(), output);
  }
  
  // optional .protobuf.common.LineupDetail defineer = 12;
  if (has_defineer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->defineer(), output);
  }
  
  // optional int32 vipLevel = 13;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->viplevel(), output);
  }
  
  // optional int32 headFrame = 14;
  if (has_headframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->headframe(), output);
  }
  
  // optional string guildObjId = 15;
  if (has_guildobjid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildobjid().data(), this->guildobjid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->guildobjid(), output);
  }
  
  // optional string characterName = 16;
  if (has_charactername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charactername().data(), this->charactername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->charactername(), output);
  }
  
  // optional int32 sex = 17;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->sex(), output);
  }
  
  // optional string city = 18;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->city(), output);
  }
  
  // optional int32 serverid = 19;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->serverid(), output);
  }
  
  // optional .protobuf.common.LineupTemplate squadShow = 20;
  if (has_squadshow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->squadshow(), output);
  }
  
  // optional int32 hangMaxMap = 21;
  if (has_hangmaxmap()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->hangmaxmap(), output);
  }
  
  // optional int32 identity = 22;
  if (has_identity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->identity(), output);
  }
  
  // optional .protobuf.common.LineupDetail enemyLineup = 23;
  if (has_enemylineup()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->enemylineup(), output);
  }
  
  // optional int64 power = 24;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(24, this->power(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommonPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // required string head = 3;
  if (has_head()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head().data(), this->head().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->head(), target);
  }
  
  // required int32 gid = 4;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gid(), target);
  }
  
  // required int64 playerExp = 5;
  if (has_playerexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->playerexp(), target);
  }
  
  // required string playerId = 6;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->playerid(), target);
  }
  
  // required bool isFreind = 7;
  if (has_isfreind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isfreind(), target);
  }
  
  // repeated .protobuf.playerInfo.Achievement achievement = 8;
  for (int i = 0; i < this->achievement_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->achievement(i), target);
  }
  
  // optional int32 guildId = 9;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->guildid(), target);
  }
  
  // optional string guildIcon = 10;
  if (has_guildicon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildicon().data(), this->guildicon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->guildicon(), target);
  }
  
  // optional string guildName = 11;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->guildname(), target);
  }
  
  // optional .protobuf.common.LineupDetail defineer = 12;
  if (has_defineer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->defineer(), target);
  }
  
  // optional int32 vipLevel = 13;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->viplevel(), target);
  }
  
  // optional int32 headFrame = 14;
  if (has_headframe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->headframe(), target);
  }
  
  // optional string guildObjId = 15;
  if (has_guildobjid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildobjid().data(), this->guildobjid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->guildobjid(), target);
  }
  
  // optional string characterName = 16;
  if (has_charactername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charactername().data(), this->charactername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->charactername(), target);
  }
  
  // optional int32 sex = 17;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->sex(), target);
  }
  
  // optional string city = 18;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->city(), target);
  }
  
  // optional int32 serverid = 19;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->serverid(), target);
  }
  
  // optional .protobuf.common.LineupTemplate squadShow = 20;
  if (has_squadshow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->squadshow(), target);
  }
  
  // optional int32 hangMaxMap = 21;
  if (has_hangmaxmap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->hangmaxmap(), target);
  }
  
  // optional int32 identity = 22;
  if (has_identity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->identity(), target);
  }
  
  // optional .protobuf.common.LineupDetail enemyLineup = 23;
  if (has_enemylineup()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->enemylineup(), target);
  }
  
  // optional int64 power = 24;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(24, this->power(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommonPlayerInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string head = 3;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->head());
    }
    
    // required int32 gid = 4;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gid());
    }
    
    // required int64 playerExp = 5;
    if (has_playerexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerexp());
    }
    
    // required string playerId = 6;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }
    
    // required bool isFreind = 7;
    if (has_isfreind()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string guildObjId = 15;
    if (has_guildobjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildobjid());
    }
    
    // optional int32 guildId = 9;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildid());
    }
    
    // optional string guildIcon = 10;
    if (has_guildicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildicon());
    }
    
    // optional string guildName = 11;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }
    
    // optional .protobuf.common.LineupDetail defineer = 12;
    if (has_defineer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->defineer());
    }
    
    // optional int32 vipLevel = 13;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }
    
    // optional int32 headFrame = 14;
    if (has_headframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headframe());
    }
    
    // optional string characterName = 16;
    if (has_charactername()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charactername());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 sex = 17;
    if (has_sex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }
    
    // optional string city = 18;
    if (has_city()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }
    
    // optional int32 serverid = 19;
    if (has_serverid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }
    
    // optional .protobuf.common.LineupTemplate squadShow = 20;
    if (has_squadshow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->squadshow());
    }
    
    // optional int32 hangMaxMap = 21;
    if (has_hangmaxmap()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hangmaxmap());
    }
    
    // optional int32 identity = 22;
    if (has_identity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->identity());
    }
    
    // optional .protobuf.common.LineupDetail enemyLineup = 23;
    if (has_enemylineup()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->enemylineup());
    }
    
    // optional int64 power = 24;
    if (has_power()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->power());
    }
    
  }
  // repeated .protobuf.playerInfo.Achievement achievement = 8;
  total_size += 1 * this->achievement_size();
  for (int i = 0; i < this->achievement_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->achievement(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommonPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommonPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommonPlayerInfo::MergeFrom(const CommonPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  achievement_.MergeFrom(from.achievement_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_head()) {
      set_head(from.head());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_playerexp()) {
      set_playerexp(from.playerexp());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_isfreind()) {
      set_isfreind(from.isfreind());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_guildobjid()) {
      set_guildobjid(from.guildobjid());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_guildicon()) {
      set_guildicon(from.guildicon());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_defineer()) {
      mutable_defineer()->::protobuf::common::LineupDetail::MergeFrom(from.defineer());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_headframe()) {
      set_headframe(from.headframe());
    }
    if (from.has_charactername()) {
      set_charactername(from.charactername());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_squadshow()) {
      mutable_squadshow()->::protobuf::common::LineupTemplate::MergeFrom(from.squadshow());
    }
    if (from.has_hangmaxmap()) {
      set_hangmaxmap(from.hangmaxmap());
    }
    if (from.has_identity()) {
      set_identity(from.identity());
    }
    if (from.has_enemylineup()) {
      mutable_enemylineup()->::protobuf::common::LineupDetail::MergeFrom(from.enemylineup());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommonPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonPlayerInfo::CopyFrom(const CommonPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonPlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  for (int i = 0; i < achievement_size(); i++) {
    if (!this->achievement(i).IsInitialized()) return false;
  }
  if (has_defineer()) {
    if (!this->defineer().IsInitialized()) return false;
  }
  if (has_squadshow()) {
    if (!this->squadshow().IsInitialized()) return false;
  }
  if (has_enemylineup()) {
    if (!this->enemylineup().IsInitialized()) return false;
  }
  return true;
}

void CommonPlayerInfo::Swap(CommonPlayerInfo* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(name_, other->name_);
    std::swap(head_, other->head_);
    std::swap(gid_, other->gid_);
    std::swap(playerexp_, other->playerexp_);
    std::swap(playerid_, other->playerid_);
    std::swap(isfreind_, other->isfreind_);
    achievement_.Swap(&other->achievement_);
    std::swap(guildobjid_, other->guildobjid_);
    std::swap(guildid_, other->guildid_);
    std::swap(guildicon_, other->guildicon_);
    std::swap(guildname_, other->guildname_);
    std::swap(defineer_, other->defineer_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(headframe_, other->headframe_);
    std::swap(charactername_, other->charactername_);
    std::swap(sex_, other->sex_);
    std::swap(city_, other->city_);
    std::swap(serverid_, other->serverid_);
    std::swap(squadshow_, other->squadshow_);
    std::swap(hangmaxmap_, other->hangmaxmap_);
    std::swap(identity_, other->identity_);
    std::swap(enemylineup_, other->enemylineup_);
    std::swap(power_, other->power_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommonPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommonPlayerInfo_descriptor_;
  metadata.reflection = CommonPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Achievement::kIdFieldNumber;
const int Achievement::kStatusFieldNumber;
const int Achievement::kValueFieldNumber;
#endif  // !_MSC_VER

Achievement::Achievement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Achievement::InitAsDefaultInstance() {
}

Achievement::Achievement(const Achievement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Achievement::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  status_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Achievement::~Achievement() {
  SharedDtor();
}

void Achievement::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Achievement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Achievement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Achievement_descriptor_;
}

const Achievement& Achievement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playerInfo_2eproto();  return *default_instance_;
}

Achievement* Achievement::default_instance_ = NULL;

Achievement* Achievement::New() const {
  return new Achievement;
}

void Achievement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    status_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Achievement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }
      
      // required int32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }
      
      // required int32 value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Achievement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // required int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }
  
  // required int32 value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Achievement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // required int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }
  
  // required int32 value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Achievement::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // required int32 value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Achievement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Achievement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Achievement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Achievement::MergeFrom(const Achievement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Achievement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Achievement::CopyFrom(const Achievement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Achievement::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void Achievement::Swap(Achievement* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(status_, other->status_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Achievement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Achievement_descriptor_;
  metadata.reflection = Achievement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyHeroSkin::kIdFieldNumber;
const int ReplyHeroSkin::kNumFieldNumber;
const int ReplyHeroSkin::kSpareNumFieldNumber;
#endif  // !_MSC_VER

ReplyHeroSkin::ReplyHeroSkin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReplyHeroSkin::InitAsDefaultInstance() {
}

ReplyHeroSkin::ReplyHeroSkin(const ReplyHeroSkin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReplyHeroSkin::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  num_ = 0;
  sparenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyHeroSkin::~ReplyHeroSkin() {
  SharedDtor();
}

void ReplyHeroSkin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReplyHeroSkin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyHeroSkin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyHeroSkin_descriptor_;
}

const ReplyHeroSkin& ReplyHeroSkin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playerInfo_2eproto();  return *default_instance_;
}

ReplyHeroSkin* ReplyHeroSkin::default_instance_ = NULL;

ReplyHeroSkin* ReplyHeroSkin::New() const {
  return new ReplyHeroSkin;
}

void ReplyHeroSkin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    num_ = 0;
    sparenum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyHeroSkin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }
      
      // required int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_spareNum;
        break;
      }
      
      // required int32 spareNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spareNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sparenum_)));
          set_has_sparenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReplyHeroSkin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // required int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }
  
  // required int32 spareNum = 3;
  if (has_sparenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sparenum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReplyHeroSkin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // required int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }
  
  // required int32 spareNum = 3;
  if (has_sparenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sparenum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReplyHeroSkin::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }
    
    // required int32 spareNum = 3;
    if (has_sparenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sparenum());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyHeroSkin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyHeroSkin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyHeroSkin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyHeroSkin::MergeFrom(const ReplyHeroSkin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_sparenum()) {
      set_sparenum(from.sparenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyHeroSkin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyHeroSkin::CopyFrom(const ReplyHeroSkin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyHeroSkin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void ReplyHeroSkin::Swap(ReplyHeroSkin* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(sparenum_, other->sparenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyHeroSkin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyHeroSkin_descriptor_;
  metadata.reflection = ReplyHeroSkin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroSkinList::kSkinsFieldNumber;
#endif  // !_MSC_VER

HeroSkinList::HeroSkinList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeroSkinList::InitAsDefaultInstance() {
}

HeroSkinList::HeroSkinList(const HeroSkinList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeroSkinList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroSkinList::~HeroSkinList() {
  SharedDtor();
}

void HeroSkinList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeroSkinList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroSkinList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroSkinList_descriptor_;
}

const HeroSkinList& HeroSkinList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_playerInfo_2eproto();  return *default_instance_;
}

HeroSkinList* HeroSkinList::default_instance_ = NULL;

HeroSkinList* HeroSkinList::New() const {
  return new HeroSkinList;
}

void HeroSkinList::Clear() {
  skins_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroSkinList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.playerInfo.ReplyHeroSkin skins = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skins:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skins()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_skins;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeroSkinList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.playerInfo.ReplyHeroSkin skins = 1;
  for (int i = 0; i < this->skins_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->skins(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeroSkinList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.playerInfo.ReplyHeroSkin skins = 1;
  for (int i = 0; i < this->skins_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->skins(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeroSkinList::ByteSize() const {
  int total_size = 0;
  
  // repeated .protobuf.playerInfo.ReplyHeroSkin skins = 1;
  total_size += 1 * this->skins_size();
  for (int i = 0; i < this->skins_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skins(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroSkinList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroSkinList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroSkinList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroSkinList::MergeFrom(const HeroSkinList& from) {
  GOOGLE_CHECK_NE(&from, this);
  skins_.MergeFrom(from.skins_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroSkinList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroSkinList::CopyFrom(const HeroSkinList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroSkinList::IsInitialized() const {
  
  for (int i = 0; i < skins_size(); i++) {
    if (!this->skins(i).IsInitialized()) return false;
  }
  return true;
}

void HeroSkinList::Swap(HeroSkinList* other) {
  if (other != this) {
    skins_.Swap(&other->skins_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroSkinList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroSkinList_descriptor_;
  metadata.reflection = HeroSkinList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace playerInfo
}  // namespace protobuf

// @@protoc_insertion_point(global_scope)
