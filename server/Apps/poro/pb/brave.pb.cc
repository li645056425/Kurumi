// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "brave.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protobuf {
namespace brave {

namespace {

const ::google::protobuf::Descriptor* braveBoxList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  braveBoxList_reflection_ = NULL;
const ::google::protobuf::Descriptor* BraveInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BraveInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* enemyinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  enemyinfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_brave_2eproto() {
  protobuf_AddDesc_brave_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "brave.proto");
  GOOGLE_CHECK(file != NULL);
  braveBoxList_descriptor_ = file->message_type(0);
  static const int braveBoxList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(braveBoxList, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(braveBoxList, items_),
  };
  braveBoxList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      braveBoxList_descriptor_,
      braveBoxList::default_instance_,
      braveBoxList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(braveBoxList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(braveBoxList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(braveBoxList));
  BraveInfo_descriptor_ = file->message_type(1);
  static const int BraveInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveInfo, showinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveInfo, attacklineup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveInfo, herohps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveInfo, heroens_),
  };
  BraveInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BraveInfo_descriptor_,
      BraveInfo::default_instance_,
      BraveInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BraveInfo));
  enemyinfo_descriptor_ = file->message_type(2);
  static const int enemyinfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enemyinfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enemyinfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enemyinfo, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enemyinfo, lasthp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enemyinfo, servername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enemyinfo, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enemyinfo, headframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enemyinfo, buflist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enemyinfo, selected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enemyinfo, herolist_),
  };
  enemyinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      enemyinfo_descriptor_,
      enemyinfo::default_instance_,
      enemyinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enemyinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enemyinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(enemyinfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_brave_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    braveBoxList_descriptor_, &braveBoxList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BraveInfo_descriptor_, &BraveInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    enemyinfo_descriptor_, &enemyinfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_brave_2eproto() {
  delete braveBoxList::default_instance_;
  delete braveBoxList_reflection_;
  delete BraveInfo::default_instance_;
  delete BraveInfo_reflection_;
  delete enemyinfo::default_instance_;
  delete enemyinfo_reflection_;
}

void protobuf_AddDesc_brave_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf::common::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013brave.proto\022\016protobuf.brave\032\014common.pr"
    "oto\"H\n\014braveBoxList\022\r\n\005state\030\001 \003(\010\022)\n\005it"
    "ems\030\002 \003(\0132\032.protobuf.common.KVint3232\"\311\001"
    "\n\tBraveInfo\022+\n\010showinfo\030\001 \003(\0132\031.protobuf"
    ".brave.enemyinfo\0225\n\014attackLineup\030\002 \002(\0132\037"
    ".protobuf.common.LineupTemplate\022+\n\007heroh"
    "ps\030\003 \003(\0132\032.protobuf.common.KVint3264\022+\n\007"
    "heroEns\030\004 \003(\0132\032.protobuf.common.KVint323"
    "2\"\315\001\n\tenemyinfo\022\r\n\005level\030\001 \002(\005\022\014\n\004name\030\002"
    " \002(\t\022\014\n\004head\030\003 \002(\t\022\016\n\006lasthp\030\004 \002(\005\022\022\n\nse"
    "rverName\030\005 \001(\t\022\r\n\005power\030\007 \001(\005\022\021\n\theadFra"
    "me\030\010 \001(\005\022\017\n\007buflist\030\t \003(\005\022\020\n\010selected\030\n "
    "\001(\005\022,\n\010herolist\030\013 \003(\0132\032.protobuf.common."
    "KVint3232B!\n\023xag.idgo.core.protoB\nBraveP"
    "roto", 564);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "brave.proto", &protobuf_RegisterTypes);
  braveBoxList::default_instance_ = new braveBoxList();
  BraveInfo::default_instance_ = new BraveInfo();
  enemyinfo::default_instance_ = new enemyinfo();
  braveBoxList::default_instance_->InitAsDefaultInstance();
  BraveInfo::default_instance_->InitAsDefaultInstance();
  enemyinfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_brave_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_brave_2eproto {
  StaticDescriptorInitializer_brave_2eproto() {
    protobuf_AddDesc_brave_2eproto();
  }
} static_descriptor_initializer_brave_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int braveBoxList::kStateFieldNumber;
const int braveBoxList::kItemsFieldNumber;
#endif  // !_MSC_VER

braveBoxList::braveBoxList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void braveBoxList::InitAsDefaultInstance() {
}

braveBoxList::braveBoxList(const braveBoxList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void braveBoxList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

braveBoxList::~braveBoxList() {
  SharedDtor();
}

void braveBoxList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void braveBoxList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* braveBoxList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return braveBoxList_descriptor_;
}

const braveBoxList& braveBoxList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brave_2eproto();  return *default_instance_;
}

braveBoxList* braveBoxList::default_instance_ = NULL;

braveBoxList* braveBoxList::New() const {
  return new braveBoxList;
}

void braveBoxList::Clear() {
  state_.Clear();
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool braveBoxList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bool state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 8, input, this->mutable_state())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_state())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_state;
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }
      
      // repeated .protobuf.common.KVint3232 items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void braveBoxList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated bool state = 1;
  for (int i = 0; i < this->state_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      1, this->state(i), output);
  }
  
  // repeated .protobuf.common.KVint3232 items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* braveBoxList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated bool state = 1;
  for (int i = 0; i < this->state_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(1, this->state(i), target);
  }
  
  // repeated .protobuf.common.KVint3232 items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int braveBoxList::ByteSize() const {
  int total_size = 0;
  
  // repeated bool state = 1;
  {
    int data_size = 0;
    data_size = 1 * this->state_size();
    total_size += 1 * this->state_size() + data_size;
  }
  
  // repeated .protobuf.common.KVint3232 items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void braveBoxList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const braveBoxList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const braveBoxList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void braveBoxList::MergeFrom(const braveBoxList& from) {
  GOOGLE_CHECK_NE(&from, this);
  state_.MergeFrom(from.state_);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void braveBoxList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void braveBoxList::CopyFrom(const braveBoxList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool braveBoxList::IsInitialized() const {
  
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void braveBoxList::Swap(braveBoxList* other) {
  if (other != this) {
    state_.Swap(&other->state_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata braveBoxList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = braveBoxList_descriptor_;
  metadata.reflection = braveBoxList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BraveInfo::kShowinfoFieldNumber;
const int BraveInfo::kAttackLineupFieldNumber;
const int BraveInfo::kHerohpsFieldNumber;
const int BraveInfo::kHeroEnsFieldNumber;
#endif  // !_MSC_VER

BraveInfo::BraveInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BraveInfo::InitAsDefaultInstance() {
  attacklineup_ = const_cast< ::protobuf::common::LineupTemplate*>(&::protobuf::common::LineupTemplate::default_instance());
}

BraveInfo::BraveInfo(const BraveInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BraveInfo::SharedCtor() {
  _cached_size_ = 0;
  attacklineup_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BraveInfo::~BraveInfo() {
  SharedDtor();
}

void BraveInfo::SharedDtor() {
  if (this != default_instance_) {
    delete attacklineup_;
  }
}

void BraveInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BraveInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BraveInfo_descriptor_;
}

const BraveInfo& BraveInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brave_2eproto();  return *default_instance_;
}

BraveInfo* BraveInfo::default_instance_ = NULL;

BraveInfo* BraveInfo::New() const {
  return new BraveInfo;
}

void BraveInfo::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_attacklineup()) {
      if (attacklineup_ != NULL) attacklineup_->::protobuf::common::LineupTemplate::Clear();
    }
  }
  showinfo_.Clear();
  herohps_.Clear();
  heroens_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BraveInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.brave.enemyinfo showinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_showinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_showinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_showinfo;
        if (input->ExpectTag(18)) goto parse_attackLineup;
        break;
      }
      
      // required .protobuf.common.LineupTemplate attackLineup = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attackLineup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attacklineup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_herohps;
        break;
      }
      
      // repeated .protobuf.common.KVint3264 herohps = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_herohps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_herohps()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_herohps;
        if (input->ExpectTag(34)) goto parse_heroEns;
        break;
      }
      
      // repeated .protobuf.common.KVint3232 heroEns = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heroEns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_heroens()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_heroEns;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BraveInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.brave.enemyinfo showinfo = 1;
  for (int i = 0; i < this->showinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->showinfo(i), output);
  }
  
  // required .protobuf.common.LineupTemplate attackLineup = 2;
  if (has_attacklineup()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attacklineup(), output);
  }
  
  // repeated .protobuf.common.KVint3264 herohps = 3;
  for (int i = 0; i < this->herohps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->herohps(i), output);
  }
  
  // repeated .protobuf.common.KVint3232 heroEns = 4;
  for (int i = 0; i < this->heroens_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->heroens(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BraveInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.brave.enemyinfo showinfo = 1;
  for (int i = 0; i < this->showinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->showinfo(i), target);
  }
  
  // required .protobuf.common.LineupTemplate attackLineup = 2;
  if (has_attacklineup()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attacklineup(), target);
  }
  
  // repeated .protobuf.common.KVint3264 herohps = 3;
  for (int i = 0; i < this->herohps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->herohps(i), target);
  }
  
  // repeated .protobuf.common.KVint3232 heroEns = 4;
  for (int i = 0; i < this->heroens_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->heroens(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BraveInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .protobuf.common.LineupTemplate attackLineup = 2;
    if (has_attacklineup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attacklineup());
    }
    
  }
  // repeated .protobuf.brave.enemyinfo showinfo = 1;
  total_size += 1 * this->showinfo_size();
  for (int i = 0; i < this->showinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->showinfo(i));
  }
  
  // repeated .protobuf.common.KVint3264 herohps = 3;
  total_size += 1 * this->herohps_size();
  for (int i = 0; i < this->herohps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->herohps(i));
  }
  
  // repeated .protobuf.common.KVint3232 heroEns = 4;
  total_size += 1 * this->heroens_size();
  for (int i = 0; i < this->heroens_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heroens(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BraveInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BraveInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BraveInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BraveInfo::MergeFrom(const BraveInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  showinfo_.MergeFrom(from.showinfo_);
  herohps_.MergeFrom(from.herohps_);
  heroens_.MergeFrom(from.heroens_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_attacklineup()) {
      mutable_attacklineup()->::protobuf::common::LineupTemplate::MergeFrom(from.attacklineup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BraveInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BraveInfo::CopyFrom(const BraveInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BraveInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  for (int i = 0; i < showinfo_size(); i++) {
    if (!this->showinfo(i).IsInitialized()) return false;
  }
  if (has_attacklineup()) {
    if (!this->attacklineup().IsInitialized()) return false;
  }
  for (int i = 0; i < herohps_size(); i++) {
    if (!this->herohps(i).IsInitialized()) return false;
  }
  for (int i = 0; i < heroens_size(); i++) {
    if (!this->heroens(i).IsInitialized()) return false;
  }
  return true;
}

void BraveInfo::Swap(BraveInfo* other) {
  if (other != this) {
    showinfo_.Swap(&other->showinfo_);
    std::swap(attacklineup_, other->attacklineup_);
    herohps_.Swap(&other->herohps_);
    heroens_.Swap(&other->heroens_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BraveInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BraveInfo_descriptor_;
  metadata.reflection = BraveInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int enemyinfo::kLevelFieldNumber;
const int enemyinfo::kNameFieldNumber;
const int enemyinfo::kHeadFieldNumber;
const int enemyinfo::kLasthpFieldNumber;
const int enemyinfo::kServerNameFieldNumber;
const int enemyinfo::kPowerFieldNumber;
const int enemyinfo::kHeadFrameFieldNumber;
const int enemyinfo::kBuflistFieldNumber;
const int enemyinfo::kSelectedFieldNumber;
const int enemyinfo::kHerolistFieldNumber;
#endif  // !_MSC_VER

enemyinfo::enemyinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void enemyinfo::InitAsDefaultInstance() {
}

enemyinfo::enemyinfo(const enemyinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void enemyinfo::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lasthp_ = 0;
  servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  power_ = 0;
  headframe_ = 0;
  selected_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

enemyinfo::~enemyinfo() {
  SharedDtor();
}

void enemyinfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    delete head_;
  }
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    delete servername_;
  }
  if (this != default_instance_) {
  }
}

void enemyinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* enemyinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enemyinfo_descriptor_;
}

const enemyinfo& enemyinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_brave_2eproto();  return *default_instance_;
}

enemyinfo* enemyinfo::default_instance_ = NULL;

enemyinfo* enemyinfo::New() const {
  return new enemyinfo;
}

void enemyinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_head()) {
      if (head_ != &::google::protobuf::internal::kEmptyString) {
        head_->clear();
      }
    }
    lasthp_ = 0;
    if (has_servername()) {
      if (servername_ != &::google::protobuf::internal::kEmptyString) {
        servername_->clear();
      }
    }
    power_ = 0;
    headframe_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    selected_ = 0;
  }
  buflist_.Clear();
  herolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool enemyinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_head;
        break;
      }
      
      // required string head = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_head()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->head().data(), this->head().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lasthp;
        break;
      }
      
      // required int32 lasthp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lasthp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lasthp_)));
          set_has_lasthp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_serverName;
        break;
      }
      
      // optional string serverName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serverName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->servername().data(), this->servername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_power;
        break;
      }
      
      // optional int32 power = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_headFrame;
        break;
      }
      
      // optional int32 headFrame = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headFrame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headframe_)));
          set_has_headframe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_buflist;
        break;
      }
      
      // repeated int32 buflist = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buflist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_buflist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_buflist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_buflist;
        if (input->ExpectTag(80)) goto parse_selected;
        break;
      }
      
      // optional int32 selected = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selected_)));
          set_has_selected();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_herolist;
        break;
      }
      
      // repeated .protobuf.common.KVint3232 herolist = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_herolist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_herolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_herolist;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void enemyinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // required string head = 3;
  if (has_head()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head().data(), this->head().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->head(), output);
  }
  
  // required int32 lasthp = 4;
  if (has_lasthp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lasthp(), output);
  }
  
  // optional string serverName = 5;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->servername(), output);
  }
  
  // optional int32 power = 7;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->power(), output);
  }
  
  // optional int32 headFrame = 8;
  if (has_headframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->headframe(), output);
  }
  
  // repeated int32 buflist = 9;
  for (int i = 0; i < this->buflist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->buflist(i), output);
  }
  
  // optional int32 selected = 10;
  if (has_selected()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->selected(), output);
  }
  
  // repeated .protobuf.common.KVint3232 herolist = 11;
  for (int i = 0; i < this->herolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->herolist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* enemyinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // required string head = 3;
  if (has_head()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head().data(), this->head().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->head(), target);
  }
  
  // required int32 lasthp = 4;
  if (has_lasthp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lasthp(), target);
  }
  
  // optional string serverName = 5;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->servername(), target);
  }
  
  // optional int32 power = 7;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->power(), target);
  }
  
  // optional int32 headFrame = 8;
  if (has_headframe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->headframe(), target);
  }
  
  // repeated int32 buflist = 9;
  for (int i = 0; i < this->buflist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->buflist(i), target);
  }
  
  // optional int32 selected = 10;
  if (has_selected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->selected(), target);
  }
  
  // repeated .protobuf.common.KVint3232 herolist = 11;
  for (int i = 0; i < this->herolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->herolist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int enemyinfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string head = 3;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->head());
    }
    
    // required int32 lasthp = 4;
    if (has_lasthp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lasthp());
    }
    
    // optional string serverName = 5;
    if (has_servername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servername());
    }
    
    // optional int32 power = 7;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }
    
    // optional int32 headFrame = 8;
    if (has_headframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headframe());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 selected = 10;
    if (has_selected()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selected());
    }
    
  }
  // repeated int32 buflist = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->buflist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->buflist(i));
    }
    total_size += 1 * this->buflist_size() + data_size;
  }
  
  // repeated .protobuf.common.KVint3232 herolist = 11;
  total_size += 1 * this->herolist_size();
  for (int i = 0; i < this->herolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->herolist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void enemyinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const enemyinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const enemyinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void enemyinfo::MergeFrom(const enemyinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  buflist_.MergeFrom(from.buflist_);
  herolist_.MergeFrom(from.herolist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_head()) {
      set_head(from.head());
    }
    if (from.has_lasthp()) {
      set_lasthp(from.lasthp());
    }
    if (from.has_servername()) {
      set_servername(from.servername());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_headframe()) {
      set_headframe(from.headframe());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_selected()) {
      set_selected(from.selected());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void enemyinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void enemyinfo::CopyFrom(const enemyinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool enemyinfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  for (int i = 0; i < herolist_size(); i++) {
    if (!this->herolist(i).IsInitialized()) return false;
  }
  return true;
}

void enemyinfo::Swap(enemyinfo* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(name_, other->name_);
    std::swap(head_, other->head_);
    std::swap(lasthp_, other->lasthp_);
    std::swap(servername_, other->servername_);
    std::swap(power_, other->power_);
    std::swap(headframe_, other->headframe_);
    buflist_.Swap(&other->buflist_);
    std::swap(selected_, other->selected_);
    herolist_.Swap(&other->herolist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata enemyinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = enemyinfo_descriptor_;
  metadata.reflection = enemyinfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace brave
}  // namespace protobuf

// @@protoc_insertion_point(global_scope)
