// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "arena.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protobuf {
namespace arena {

namespace {

const ::google::protobuf::Descriptor* iconinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  iconinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* playerInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  playerInfoList_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleHistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleHistory_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleHistoryList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleHistoryList_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleLineupDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleLineupDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_arena_2eproto() {
  protobuf_AddDesc_arena_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "arena.proto");
  GOOGLE_CHECK(file != NULL);
  iconinfo_descriptor_ = file->message_type(0);
  static const int iconinfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, rankpoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, headframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, attacker_),
  };
  iconinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      iconinfo_descriptor_,
      iconinfo::default_instance_,
      iconinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iconinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(iconinfo));
  playerInfoList_descriptor_ = file->message_type(1);
  static const int playerInfoList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerInfoList, showinfo_),
  };
  playerInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      playerInfoList_descriptor_,
      playerInfoList::default_instance_,
      playerInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playerInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(playerInfoList));
  BattleHistory_descriptor_ = file->message_type(2);
  static const int BattleHistory_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHistory, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHistory, attackname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHistory, attacklvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHistory, attackhead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHistory, attackid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHistory, atheadframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHistory, defenseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHistory, defensename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHistory, defenselvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHistory, defensehead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHistory, deheadframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHistory, victory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHistory, attackpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHistory, defensepoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHistory, time_),
  };
  BattleHistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleHistory_descriptor_,
      BattleHistory::default_instance_,
      BattleHistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleHistory));
  BattleHistoryList_descriptor_ = file->message_type(3);
  static const int BattleHistoryList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHistoryList, battles_),
  };
  BattleHistoryList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleHistoryList_descriptor_,
      BattleHistoryList::default_instance_,
      BattleHistoryList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHistoryList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHistoryList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleHistoryList));
  BattleLineupDetail_descriptor_ = file->message_type(4);
  static const int BattleLineupDetail_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleLineupDetail, seed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleLineupDetail, attacker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleLineupDetail, defineer_),
  };
  BattleLineupDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleLineupDetail_descriptor_,
      BattleLineupDetail::default_instance_,
      BattleLineupDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleLineupDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleLineupDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleLineupDetail));
  ArenaInfo_descriptor_ = file->message_type(5);
  static const int ArenaInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, battletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, myrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, mypoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, finishtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, finishtime1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, maxrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, todayaattacktimes_),
  };
  ArenaInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaInfo_descriptor_,
      ArenaInfo::default_instance_,
      ArenaInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_arena_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    iconinfo_descriptor_, &iconinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    playerInfoList_descriptor_, &playerInfoList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleHistory_descriptor_, &BattleHistory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleHistoryList_descriptor_, &BattleHistoryList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleLineupDetail_descriptor_, &BattleLineupDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaInfo_descriptor_, &ArenaInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_arena_2eproto() {
  delete iconinfo::default_instance_;
  delete iconinfo_reflection_;
  delete playerInfoList::default_instance_;
  delete playerInfoList_reflection_;
  delete BattleHistory::default_instance_;
  delete BattleHistory_reflection_;
  delete BattleHistoryList::default_instance_;
  delete BattleHistoryList_reflection_;
  delete BattleLineupDetail::default_instance_;
  delete BattleLineupDetail_reflection_;
  delete ArenaInfo::default_instance_;
  delete ArenaInfo_reflection_;
}

void protobuf_AddDesc_arena_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf::common::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013arena.proto\022\016protobuf.arena\032\014common.pr"
    "oto\"\274\001\n\010iconinfo\022\r\n\005level\030\001 \002(\005\022\014\n\004name\030"
    "\002 \002(\t\022\014\n\004head\030\003 \002(\t\022\020\n\010playerid\030\004 \001(\t\022\014\n"
    "\004rank\030\005 \001(\005\022\022\n\nrankPoints\030\006 \001(\003\022\r\n\005power"
    "\030\007 \001(\005\022\021\n\theadFrame\030\010 \001(\005\022/\n\010attacker\030\t "
    "\001(\0132\035.protobuf.common.LineupDetail\"<\n\016pl"
    "ayerInfoList\022*\n\010showinfo\030\001 \003(\0132\030.protobu"
    "f.arena.iconinfo\"\255\002\n\rBattleHistory\022\n\n\002id"
    "\030\001 \002(\t\022\022\n\nattackName\030\002 \002(\t\022\021\n\tattackLvl\030"
    "\003 \002(\005\022\022\n\nattackHead\030\004 \002(\t\022\020\n\010attackId\030\005 "
    "\002(\t\022\023\n\013atHeadFrame\030\006 \001(\005\022\021\n\tdefenseId\030\007 "
    "\002(\t\022\023\n\013defenseName\030\010 \002(\t\022\022\n\ndefenseLvl\030\t"
    " \002(\005\022\023\n\013defenseHead\030\n \002(\t\022\023\n\013deHeadFrame"
    "\030\013 \001(\005\022\017\n\007victory\030\016 \002(\010\022\023\n\013attackPoint\030\017"
    " \001(\005\022\024\n\014defensePoint\030\020 \001(\005\022\014\n\004time\030\021 \002(\003"
    "\"C\n\021BattleHistoryList\022.\n\007battles\030\001 \003(\0132\035"
    ".protobuf.arena.BattleHistory\"\204\001\n\022Battle"
    "LineupDetail\022\014\n\004seed\030\001 \002(\003\022/\n\010attacker\030\002"
    " \002(\0132\035.protobuf.common.LineupDetail\022/\n\010d"
    "efineer\030\003 \002(\0132\035.protobuf.common.LineupDe"
    "tail\"\267\001\n\tArenaInfo\022\022\n\nbattletype\030\001 \002(\005\022\016"
    "\n\006myrank\030\002 \001(\005\022\017\n\007mypoint\030\003 \001(\003\022\022\n\nfinis"
    "hTime\030\005 \001(\003\022\021\n\tbeginTime\030\006 \001(\003\022\023\n\013finish"
    "Time1\030\007 \001(\003\022\r\n\005power\030\010 \001(\005\022\017\n\007maxRank\030\t "
    "\001(\005\022\031\n\021todayaAttackTimes\030\n \001(\005B!\n\023xag.id"
    "go.core.protoB\nArenaProto", 1025);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "arena.proto", &protobuf_RegisterTypes);
  iconinfo::default_instance_ = new iconinfo();
  playerInfoList::default_instance_ = new playerInfoList();
  BattleHistory::default_instance_ = new BattleHistory();
  BattleHistoryList::default_instance_ = new BattleHistoryList();
  BattleLineupDetail::default_instance_ = new BattleLineupDetail();
  ArenaInfo::default_instance_ = new ArenaInfo();
  iconinfo::default_instance_->InitAsDefaultInstance();
  playerInfoList::default_instance_->InitAsDefaultInstance();
  BattleHistory::default_instance_->InitAsDefaultInstance();
  BattleHistoryList::default_instance_->InitAsDefaultInstance();
  BattleLineupDetail::default_instance_->InitAsDefaultInstance();
  ArenaInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_arena_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_arena_2eproto {
  StaticDescriptorInitializer_arena_2eproto() {
    protobuf_AddDesc_arena_2eproto();
  }
} static_descriptor_initializer_arena_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int iconinfo::kLevelFieldNumber;
const int iconinfo::kNameFieldNumber;
const int iconinfo::kHeadFieldNumber;
const int iconinfo::kPlayeridFieldNumber;
const int iconinfo::kRankFieldNumber;
const int iconinfo::kRankPointsFieldNumber;
const int iconinfo::kPowerFieldNumber;
const int iconinfo::kHeadFrameFieldNumber;
const int iconinfo::kAttackerFieldNumber;
#endif  // !_MSC_VER

iconinfo::iconinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void iconinfo::InitAsDefaultInstance() {
  attacker_ = const_cast< ::protobuf::common::LineupDetail*>(&::protobuf::common::LineupDetail::default_instance());
}

iconinfo::iconinfo(const iconinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void iconinfo::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rank_ = 0;
  rankpoints_ = GOOGLE_LONGLONG(0);
  power_ = 0;
  headframe_ = 0;
  attacker_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

iconinfo::~iconinfo() {
  SharedDtor();
}

void iconinfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    delete head_;
  }
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (this != default_instance_) {
    delete attacker_;
  }
}

void iconinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* iconinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return iconinfo_descriptor_;
}

const iconinfo& iconinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arena_2eproto();  return *default_instance_;
}

iconinfo* iconinfo::default_instance_ = NULL;

iconinfo* iconinfo::New() const {
  return new iconinfo;
}

void iconinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_head()) {
      if (head_ != &::google::protobuf::internal::kEmptyString) {
        head_->clear();
      }
    }
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    rank_ = 0;
    rankpoints_ = GOOGLE_LONGLONG(0);
    power_ = 0;
    headframe_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_attacker()) {
      if (attacker_ != NULL) attacker_->::protobuf::common::LineupDetail::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool iconinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_head;
        break;
      }
      
      // required string head = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_head()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->head().data(), this->head().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_playerid;
        break;
      }
      
      // optional string playerid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rank;
        break;
      }
      
      // optional int32 rank = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rankPoints;
        break;
      }
      
      // optional int64 rankPoints = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rankPoints:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rankpoints_)));
          set_has_rankpoints();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_power;
        break;
      }
      
      // optional int32 power = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_headFrame;
        break;
      }
      
      // optional int32 headFrame = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headFrame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headframe_)));
          set_has_headframe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_attacker;
        break;
      }
      
      // optional .protobuf.common.LineupDetail attacker = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attacker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attacker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void iconinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // required string head = 3;
  if (has_head()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head().data(), this->head().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->head(), output);
  }
  
  // optional string playerid = 4;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->playerid(), output);
  }
  
  // optional int32 rank = 5;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rank(), output);
  }
  
  // optional int64 rankPoints = 6;
  if (has_rankpoints()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->rankpoints(), output);
  }
  
  // optional int32 power = 7;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->power(), output);
  }
  
  // optional int32 headFrame = 8;
  if (has_headframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->headframe(), output);
  }
  
  // optional .protobuf.common.LineupDetail attacker = 9;
  if (has_attacker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->attacker(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* iconinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // required string head = 3;
  if (has_head()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head().data(), this->head().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->head(), target);
  }
  
  // optional string playerid = 4;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->playerid(), target);
  }
  
  // optional int32 rank = 5;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rank(), target);
  }
  
  // optional int64 rankPoints = 6;
  if (has_rankpoints()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->rankpoints(), target);
  }
  
  // optional int32 power = 7;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->power(), target);
  }
  
  // optional int32 headFrame = 8;
  if (has_headframe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->headframe(), target);
  }
  
  // optional .protobuf.common.LineupDetail attacker = 9;
  if (has_attacker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->attacker(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int iconinfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string head = 3;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->head());
    }
    
    // optional string playerid = 4;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }
    
    // optional int32 rank = 5;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }
    
    // optional int64 rankPoints = 6;
    if (has_rankpoints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rankpoints());
    }
    
    // optional int32 power = 7;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }
    
    // optional int32 headFrame = 8;
    if (has_headframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headframe());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .protobuf.common.LineupDetail attacker = 9;
    if (has_attacker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attacker());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void iconinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const iconinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const iconinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void iconinfo::MergeFrom(const iconinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_head()) {
      set_head(from.head());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_rankpoints()) {
      set_rankpoints(from.rankpoints());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_headframe()) {
      set_headframe(from.headframe());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_attacker()) {
      mutable_attacker()->::protobuf::common::LineupDetail::MergeFrom(from.attacker());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void iconinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void iconinfo::CopyFrom(const iconinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool iconinfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_attacker()) {
    if (!this->attacker().IsInitialized()) return false;
  }
  return true;
}

void iconinfo::Swap(iconinfo* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(name_, other->name_);
    std::swap(head_, other->head_);
    std::swap(playerid_, other->playerid_);
    std::swap(rank_, other->rank_);
    std::swap(rankpoints_, other->rankpoints_);
    std::swap(power_, other->power_);
    std::swap(headframe_, other->headframe_);
    std::swap(attacker_, other->attacker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata iconinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = iconinfo_descriptor_;
  metadata.reflection = iconinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int playerInfoList::kShowinfoFieldNumber;
#endif  // !_MSC_VER

playerInfoList::playerInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void playerInfoList::InitAsDefaultInstance() {
}

playerInfoList::playerInfoList(const playerInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void playerInfoList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

playerInfoList::~playerInfoList() {
  SharedDtor();
}

void playerInfoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void playerInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* playerInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return playerInfoList_descriptor_;
}

const playerInfoList& playerInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arena_2eproto();  return *default_instance_;
}

playerInfoList* playerInfoList::default_instance_ = NULL;

playerInfoList* playerInfoList::New() const {
  return new playerInfoList;
}

void playerInfoList::Clear() {
  showinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool playerInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.arena.iconinfo showinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_showinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_showinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_showinfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void playerInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.arena.iconinfo showinfo = 1;
  for (int i = 0; i < this->showinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->showinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* playerInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.arena.iconinfo showinfo = 1;
  for (int i = 0; i < this->showinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->showinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int playerInfoList::ByteSize() const {
  int total_size = 0;
  
  // repeated .protobuf.arena.iconinfo showinfo = 1;
  total_size += 1 * this->showinfo_size();
  for (int i = 0; i < this->showinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->showinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void playerInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const playerInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const playerInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void playerInfoList::MergeFrom(const playerInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  showinfo_.MergeFrom(from.showinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void playerInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void playerInfoList::CopyFrom(const playerInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool playerInfoList::IsInitialized() const {
  
  for (int i = 0; i < showinfo_size(); i++) {
    if (!this->showinfo(i).IsInitialized()) return false;
  }
  return true;
}

void playerInfoList::Swap(playerInfoList* other) {
  if (other != this) {
    showinfo_.Swap(&other->showinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata playerInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = playerInfoList_descriptor_;
  metadata.reflection = playerInfoList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleHistory::kIdFieldNumber;
const int BattleHistory::kAttackNameFieldNumber;
const int BattleHistory::kAttackLvlFieldNumber;
const int BattleHistory::kAttackHeadFieldNumber;
const int BattleHistory::kAttackIdFieldNumber;
const int BattleHistory::kAtHeadFrameFieldNumber;
const int BattleHistory::kDefenseIdFieldNumber;
const int BattleHistory::kDefenseNameFieldNumber;
const int BattleHistory::kDefenseLvlFieldNumber;
const int BattleHistory::kDefenseHeadFieldNumber;
const int BattleHistory::kDeHeadFrameFieldNumber;
const int BattleHistory::kVictoryFieldNumber;
const int BattleHistory::kAttackPointFieldNumber;
const int BattleHistory::kDefensePointFieldNumber;
const int BattleHistory::kTimeFieldNumber;
#endif  // !_MSC_VER

BattleHistory::BattleHistory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleHistory::InitAsDefaultInstance() {
}

BattleHistory::BattleHistory(const BattleHistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleHistory::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  attackname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  attacklvl_ = 0;
  attackhead_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  attackid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  atheadframe_ = 0;
  defenseid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  defensename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  defenselvl_ = 0;
  defensehead_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deheadframe_ = 0;
  victory_ = false;
  attackpoint_ = 0;
  defensepoint_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleHistory::~BattleHistory() {
  SharedDtor();
}

void BattleHistory::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (attackname_ != &::google::protobuf::internal::kEmptyString) {
    delete attackname_;
  }
  if (attackhead_ != &::google::protobuf::internal::kEmptyString) {
    delete attackhead_;
  }
  if (attackid_ != &::google::protobuf::internal::kEmptyString) {
    delete attackid_;
  }
  if (defenseid_ != &::google::protobuf::internal::kEmptyString) {
    delete defenseid_;
  }
  if (defensename_ != &::google::protobuf::internal::kEmptyString) {
    delete defensename_;
  }
  if (defensehead_ != &::google::protobuf::internal::kEmptyString) {
    delete defensehead_;
  }
  if (this != default_instance_) {
  }
}

void BattleHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleHistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleHistory_descriptor_;
}

const BattleHistory& BattleHistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arena_2eproto();  return *default_instance_;
}

BattleHistory* BattleHistory::default_instance_ = NULL;

BattleHistory* BattleHistory::New() const {
  return new BattleHistory;
}

void BattleHistory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_attackname()) {
      if (attackname_ != &::google::protobuf::internal::kEmptyString) {
        attackname_->clear();
      }
    }
    attacklvl_ = 0;
    if (has_attackhead()) {
      if (attackhead_ != &::google::protobuf::internal::kEmptyString) {
        attackhead_->clear();
      }
    }
    if (has_attackid()) {
      if (attackid_ != &::google::protobuf::internal::kEmptyString) {
        attackid_->clear();
      }
    }
    atheadframe_ = 0;
    if (has_defenseid()) {
      if (defenseid_ != &::google::protobuf::internal::kEmptyString) {
        defenseid_->clear();
      }
    }
    if (has_defensename()) {
      if (defensename_ != &::google::protobuf::internal::kEmptyString) {
        defensename_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    defenselvl_ = 0;
    if (has_defensehead()) {
      if (defensehead_ != &::google::protobuf::internal::kEmptyString) {
        defensehead_->clear();
      }
    }
    deheadframe_ = 0;
    victory_ = false;
    attackpoint_ = 0;
    defensepoint_ = 0;
    time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attackName;
        break;
      }
      
      // required string attackName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attackName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attackname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->attackname().data(), this->attackname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_attackLvl;
        break;
      }
      
      // required int32 attackLvl = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attackLvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attacklvl_)));
          set_has_attacklvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_attackHead;
        break;
      }
      
      // required string attackHead = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attackHead:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attackhead()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->attackhead().data(), this->attackhead().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_attackId;
        break;
      }
      
      // required string attackId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attackId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attackid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->attackid().data(), this->attackid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_atHeadFrame;
        break;
      }
      
      // optional int32 atHeadFrame = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atHeadFrame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &atheadframe_)));
          set_has_atheadframe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_defenseId;
        break;
      }
      
      // required string defenseId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defenseId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_defenseid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->defenseid().data(), this->defenseid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_defenseName;
        break;
      }
      
      // required string defenseName = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defenseName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_defensename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->defensename().data(), this->defensename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_defenseLvl;
        break;
      }
      
      // required int32 defenseLvl = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defenseLvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defenselvl_)));
          set_has_defenselvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_defenseHead;
        break;
      }
      
      // required string defenseHead = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defenseHead:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_defensehead()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->defensehead().data(), this->defensehead().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_deHeadFrame;
        break;
      }
      
      // optional int32 deHeadFrame = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deHeadFrame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deheadframe_)));
          set_has_deheadframe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_victory;
        break;
      }
      
      // required bool victory = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_victory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &victory_)));
          set_has_victory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_attackPoint;
        break;
      }
      
      // optional int32 attackPoint = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attackPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attackpoint_)));
          set_has_attackpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_defensePoint;
        break;
      }
      
      // optional int32 defensePoint = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defensePoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defensepoint_)));
          set_has_defensepoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_time;
        break;
      }
      
      // required int64 time = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }
  
  // required string attackName = 2;
  if (has_attackname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attackname().data(), this->attackname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->attackname(), output);
  }
  
  // required int32 attackLvl = 3;
  if (has_attacklvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->attacklvl(), output);
  }
  
  // required string attackHead = 4;
  if (has_attackhead()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attackhead().data(), this->attackhead().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->attackhead(), output);
  }
  
  // required string attackId = 5;
  if (has_attackid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attackid().data(), this->attackid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->attackid(), output);
  }
  
  // optional int32 atHeadFrame = 6;
  if (has_atheadframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->atheadframe(), output);
  }
  
  // required string defenseId = 7;
  if (has_defenseid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->defenseid().data(), this->defenseid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->defenseid(), output);
  }
  
  // required string defenseName = 8;
  if (has_defensename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->defensename().data(), this->defensename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->defensename(), output);
  }
  
  // required int32 defenseLvl = 9;
  if (has_defenselvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->defenselvl(), output);
  }
  
  // required string defenseHead = 10;
  if (has_defensehead()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->defensehead().data(), this->defensehead().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->defensehead(), output);
  }
  
  // optional int32 deHeadFrame = 11;
  if (has_deheadframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->deheadframe(), output);
  }
  
  // required bool victory = 14;
  if (has_victory()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->victory(), output);
  }
  
  // optional int32 attackPoint = 15;
  if (has_attackpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->attackpoint(), output);
  }
  
  // optional int32 defensePoint = 16;
  if (has_defensepoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->defensepoint(), output);
  }
  
  // required int64 time = 17;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleHistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }
  
  // required string attackName = 2;
  if (has_attackname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attackname().data(), this->attackname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->attackname(), target);
  }
  
  // required int32 attackLvl = 3;
  if (has_attacklvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->attacklvl(), target);
  }
  
  // required string attackHead = 4;
  if (has_attackhead()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attackhead().data(), this->attackhead().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->attackhead(), target);
  }
  
  // required string attackId = 5;
  if (has_attackid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attackid().data(), this->attackid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->attackid(), target);
  }
  
  // optional int32 atHeadFrame = 6;
  if (has_atheadframe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->atheadframe(), target);
  }
  
  // required string defenseId = 7;
  if (has_defenseid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->defenseid().data(), this->defenseid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->defenseid(), target);
  }
  
  // required string defenseName = 8;
  if (has_defensename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->defensename().data(), this->defensename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->defensename(), target);
  }
  
  // required int32 defenseLvl = 9;
  if (has_defenselvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->defenselvl(), target);
  }
  
  // required string defenseHead = 10;
  if (has_defensehead()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->defensehead().data(), this->defensehead().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->defensehead(), target);
  }
  
  // optional int32 deHeadFrame = 11;
  if (has_deheadframe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->deheadframe(), target);
  }
  
  // required bool victory = 14;
  if (has_victory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->victory(), target);
  }
  
  // optional int32 attackPoint = 15;
  if (has_attackpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->attackpoint(), target);
  }
  
  // optional int32 defensePoint = 16;
  if (has_defensepoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->defensepoint(), target);
  }
  
  // required int64 time = 17;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleHistory::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
    // required string attackName = 2;
    if (has_attackname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attackname());
    }
    
    // required int32 attackLvl = 3;
    if (has_attacklvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attacklvl());
    }
    
    // required string attackHead = 4;
    if (has_attackhead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attackhead());
    }
    
    // required string attackId = 5;
    if (has_attackid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attackid());
    }
    
    // optional int32 atHeadFrame = 6;
    if (has_atheadframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->atheadframe());
    }
    
    // required string defenseId = 7;
    if (has_defenseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->defenseid());
    }
    
    // required string defenseName = 8;
    if (has_defensename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->defensename());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 defenseLvl = 9;
    if (has_defenselvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defenselvl());
    }
    
    // required string defenseHead = 10;
    if (has_defensehead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->defensehead());
    }
    
    // optional int32 deHeadFrame = 11;
    if (has_deheadframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deheadframe());
    }
    
    // required bool victory = 14;
    if (has_victory()) {
      total_size += 1 + 1;
    }
    
    // optional int32 attackPoint = 15;
    if (has_attackpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attackpoint());
    }
    
    // optional int32 defensePoint = 16;
    if (has_defensepoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defensepoint());
    }
    
    // required int64 time = 17;
    if (has_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleHistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleHistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleHistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleHistory::MergeFrom(const BattleHistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_attackname()) {
      set_attackname(from.attackname());
    }
    if (from.has_attacklvl()) {
      set_attacklvl(from.attacklvl());
    }
    if (from.has_attackhead()) {
      set_attackhead(from.attackhead());
    }
    if (from.has_attackid()) {
      set_attackid(from.attackid());
    }
    if (from.has_atheadframe()) {
      set_atheadframe(from.atheadframe());
    }
    if (from.has_defenseid()) {
      set_defenseid(from.defenseid());
    }
    if (from.has_defensename()) {
      set_defensename(from.defensename());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_defenselvl()) {
      set_defenselvl(from.defenselvl());
    }
    if (from.has_defensehead()) {
      set_defensehead(from.defensehead());
    }
    if (from.has_deheadframe()) {
      set_deheadframe(from.deheadframe());
    }
    if (from.has_victory()) {
      set_victory(from.victory());
    }
    if (from.has_attackpoint()) {
      set_attackpoint(from.attackpoint());
    }
    if (from.has_defensepoint()) {
      set_defensepoint(from.defensepoint());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleHistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleHistory::CopyFrom(const BattleHistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleHistory::IsInitialized() const {
  if ((_has_bits_[0] & 0x00004bdf) != 0x00004bdf) return false;
  
  return true;
}

void BattleHistory::Swap(BattleHistory* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(attackname_, other->attackname_);
    std::swap(attacklvl_, other->attacklvl_);
    std::swap(attackhead_, other->attackhead_);
    std::swap(attackid_, other->attackid_);
    std::swap(atheadframe_, other->atheadframe_);
    std::swap(defenseid_, other->defenseid_);
    std::swap(defensename_, other->defensename_);
    std::swap(defenselvl_, other->defenselvl_);
    std::swap(defensehead_, other->defensehead_);
    std::swap(deheadframe_, other->deheadframe_);
    std::swap(victory_, other->victory_);
    std::swap(attackpoint_, other->attackpoint_);
    std::swap(defensepoint_, other->defensepoint_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleHistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleHistory_descriptor_;
  metadata.reflection = BattleHistory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleHistoryList::kBattlesFieldNumber;
#endif  // !_MSC_VER

BattleHistoryList::BattleHistoryList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleHistoryList::InitAsDefaultInstance() {
}

BattleHistoryList::BattleHistoryList(const BattleHistoryList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleHistoryList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleHistoryList::~BattleHistoryList() {
  SharedDtor();
}

void BattleHistoryList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleHistoryList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleHistoryList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleHistoryList_descriptor_;
}

const BattleHistoryList& BattleHistoryList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arena_2eproto();  return *default_instance_;
}

BattleHistoryList* BattleHistoryList::default_instance_ = NULL;

BattleHistoryList* BattleHistoryList::New() const {
  return new BattleHistoryList;
}

void BattleHistoryList::Clear() {
  battles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleHistoryList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.arena.BattleHistory battles = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_battles;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleHistoryList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.arena.BattleHistory battles = 1;
  for (int i = 0; i < this->battles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->battles(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleHistoryList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.arena.BattleHistory battles = 1;
  for (int i = 0; i < this->battles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->battles(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleHistoryList::ByteSize() const {
  int total_size = 0;
  
  // repeated .protobuf.arena.BattleHistory battles = 1;
  total_size += 1 * this->battles_size();
  for (int i = 0; i < this->battles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battles(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleHistoryList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleHistoryList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleHistoryList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleHistoryList::MergeFrom(const BattleHistoryList& from) {
  GOOGLE_CHECK_NE(&from, this);
  battles_.MergeFrom(from.battles_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleHistoryList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleHistoryList::CopyFrom(const BattleHistoryList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleHistoryList::IsInitialized() const {
  
  for (int i = 0; i < battles_size(); i++) {
    if (!this->battles(i).IsInitialized()) return false;
  }
  return true;
}

void BattleHistoryList::Swap(BattleHistoryList* other) {
  if (other != this) {
    battles_.Swap(&other->battles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleHistoryList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleHistoryList_descriptor_;
  metadata.reflection = BattleHistoryList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleLineupDetail::kSeedFieldNumber;
const int BattleLineupDetail::kAttackerFieldNumber;
const int BattleLineupDetail::kDefineerFieldNumber;
#endif  // !_MSC_VER

BattleLineupDetail::BattleLineupDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleLineupDetail::InitAsDefaultInstance() {
  attacker_ = const_cast< ::protobuf::common::LineupDetail*>(&::protobuf::common::LineupDetail::default_instance());
  defineer_ = const_cast< ::protobuf::common::LineupDetail*>(&::protobuf::common::LineupDetail::default_instance());
}

BattleLineupDetail::BattleLineupDetail(const BattleLineupDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleLineupDetail::SharedCtor() {
  _cached_size_ = 0;
  seed_ = GOOGLE_LONGLONG(0);
  attacker_ = NULL;
  defineer_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleLineupDetail::~BattleLineupDetail() {
  SharedDtor();
}

void BattleLineupDetail::SharedDtor() {
  if (this != default_instance_) {
    delete attacker_;
    delete defineer_;
  }
}

void BattleLineupDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleLineupDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleLineupDetail_descriptor_;
}

const BattleLineupDetail& BattleLineupDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arena_2eproto();  return *default_instance_;
}

BattleLineupDetail* BattleLineupDetail::default_instance_ = NULL;

BattleLineupDetail* BattleLineupDetail::New() const {
  return new BattleLineupDetail;
}

void BattleLineupDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seed_ = GOOGLE_LONGLONG(0);
    if (has_attacker()) {
      if (attacker_ != NULL) attacker_->::protobuf::common::LineupDetail::Clear();
    }
    if (has_defineer()) {
      if (defineer_ != NULL) defineer_->::protobuf::common::LineupDetail::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleLineupDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 seed = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &seed_)));
          set_has_seed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attacker;
        break;
      }
      
      // required .protobuf.common.LineupDetail attacker = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attacker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attacker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_defineer;
        break;
      }
      
      // required .protobuf.common.LineupDetail defineer = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defineer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_defineer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleLineupDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 seed = 1;
  if (has_seed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->seed(), output);
  }
  
  // required .protobuf.common.LineupDetail attacker = 2;
  if (has_attacker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attacker(), output);
  }
  
  // required .protobuf.common.LineupDetail defineer = 3;
  if (has_defineer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->defineer(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleLineupDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 seed = 1;
  if (has_seed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->seed(), target);
  }
  
  // required .protobuf.common.LineupDetail attacker = 2;
  if (has_attacker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attacker(), target);
  }
  
  // required .protobuf.common.LineupDetail defineer = 3;
  if (has_defineer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->defineer(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleLineupDetail::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 seed = 1;
    if (has_seed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->seed());
    }
    
    // required .protobuf.common.LineupDetail attacker = 2;
    if (has_attacker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attacker());
    }
    
    // required .protobuf.common.LineupDetail defineer = 3;
    if (has_defineer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->defineer());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleLineupDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleLineupDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleLineupDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleLineupDetail::MergeFrom(const BattleLineupDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seed()) {
      set_seed(from.seed());
    }
    if (from.has_attacker()) {
      mutable_attacker()->::protobuf::common::LineupDetail::MergeFrom(from.attacker());
    }
    if (from.has_defineer()) {
      mutable_defineer()->::protobuf::common::LineupDetail::MergeFrom(from.defineer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleLineupDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleLineupDetail::CopyFrom(const BattleLineupDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleLineupDetail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_attacker()) {
    if (!this->attacker().IsInitialized()) return false;
  }
  if (has_defineer()) {
    if (!this->defineer().IsInitialized()) return false;
  }
  return true;
}

void BattleLineupDetail::Swap(BattleLineupDetail* other) {
  if (other != this) {
    std::swap(seed_, other->seed_);
    std::swap(attacker_, other->attacker_);
    std::swap(defineer_, other->defineer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleLineupDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleLineupDetail_descriptor_;
  metadata.reflection = BattleLineupDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaInfo::kBattletypeFieldNumber;
const int ArenaInfo::kMyrankFieldNumber;
const int ArenaInfo::kMypointFieldNumber;
const int ArenaInfo::kFinishTimeFieldNumber;
const int ArenaInfo::kBeginTimeFieldNumber;
const int ArenaInfo::kFinishTime1FieldNumber;
const int ArenaInfo::kPowerFieldNumber;
const int ArenaInfo::kMaxRankFieldNumber;
const int ArenaInfo::kTodayaAttackTimesFieldNumber;
#endif  // !_MSC_VER

ArenaInfo::ArenaInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaInfo::InitAsDefaultInstance() {
}

ArenaInfo::ArenaInfo(const ArenaInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaInfo::SharedCtor() {
  _cached_size_ = 0;
  battletype_ = 0;
  myrank_ = 0;
  mypoint_ = GOOGLE_LONGLONG(0);
  finishtime_ = GOOGLE_LONGLONG(0);
  begintime_ = GOOGLE_LONGLONG(0);
  finishtime1_ = GOOGLE_LONGLONG(0);
  power_ = 0;
  maxrank_ = 0;
  todayaattacktimes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaInfo::~ArenaInfo() {
  SharedDtor();
}

void ArenaInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArenaInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaInfo_descriptor_;
}

const ArenaInfo& ArenaInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arena_2eproto();  return *default_instance_;
}

ArenaInfo* ArenaInfo::default_instance_ = NULL;

ArenaInfo* ArenaInfo::New() const {
  return new ArenaInfo;
}

void ArenaInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battletype_ = 0;
    myrank_ = 0;
    mypoint_ = GOOGLE_LONGLONG(0);
    finishtime_ = GOOGLE_LONGLONG(0);
    begintime_ = GOOGLE_LONGLONG(0);
    finishtime1_ = GOOGLE_LONGLONG(0);
    power_ = 0;
    maxrank_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    todayaattacktimes_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 battletype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battletype_)));
          set_has_battletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_myrank;
        break;
      }
      
      // optional int32 myrank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_myrank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &myrank_)));
          set_has_myrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mypoint;
        break;
      }
      
      // optional int64 mypoint = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mypoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mypoint_)));
          set_has_mypoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_finishTime;
        break;
      }
      
      // optional int64 finishTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finishTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &finishtime_)));
          set_has_finishtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_beginTime;
        break;
      }
      
      // optional int64 beginTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_finishTime1;
        break;
      }
      
      // optional int64 finishTime1 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finishTime1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &finishtime1_)));
          set_has_finishtime1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_power;
        break;
      }
      
      // optional int32 power = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_maxRank;
        break;
      }
      
      // optional int32 maxRank = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxrank_)));
          set_has_maxrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_todayaAttackTimes;
        break;
      }
      
      // optional int32 todayaAttackTimes = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_todayaAttackTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &todayaattacktimes_)));
          set_has_todayaattacktimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 battletype = 1;
  if (has_battletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->battletype(), output);
  }
  
  // optional int32 myrank = 2;
  if (has_myrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->myrank(), output);
  }
  
  // optional int64 mypoint = 3;
  if (has_mypoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->mypoint(), output);
  }
  
  // optional int64 finishTime = 5;
  if (has_finishtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->finishtime(), output);
  }
  
  // optional int64 beginTime = 6;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->begintime(), output);
  }
  
  // optional int64 finishTime1 = 7;
  if (has_finishtime1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->finishtime1(), output);
  }
  
  // optional int32 power = 8;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->power(), output);
  }
  
  // optional int32 maxRank = 9;
  if (has_maxrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->maxrank(), output);
  }
  
  // optional int32 todayaAttackTimes = 10;
  if (has_todayaattacktimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->todayaattacktimes(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 battletype = 1;
  if (has_battletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->battletype(), target);
  }
  
  // optional int32 myrank = 2;
  if (has_myrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->myrank(), target);
  }
  
  // optional int64 mypoint = 3;
  if (has_mypoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->mypoint(), target);
  }
  
  // optional int64 finishTime = 5;
  if (has_finishtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->finishtime(), target);
  }
  
  // optional int64 beginTime = 6;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->begintime(), target);
  }
  
  // optional int64 finishTime1 = 7;
  if (has_finishtime1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->finishtime1(), target);
  }
  
  // optional int32 power = 8;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->power(), target);
  }
  
  // optional int32 maxRank = 9;
  if (has_maxrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->maxrank(), target);
  }
  
  // optional int32 todayaAttackTimes = 10;
  if (has_todayaattacktimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->todayaattacktimes(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 battletype = 1;
    if (has_battletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battletype());
    }
    
    // optional int32 myrank = 2;
    if (has_myrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->myrank());
    }
    
    // optional int64 mypoint = 3;
    if (has_mypoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mypoint());
    }
    
    // optional int64 finishTime = 5;
    if (has_finishtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->finishtime());
    }
    
    // optional int64 beginTime = 6;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->begintime());
    }
    
    // optional int64 finishTime1 = 7;
    if (has_finishtime1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->finishtime1());
    }
    
    // optional int32 power = 8;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }
    
    // optional int32 maxRank = 9;
    if (has_maxrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxrank());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 todayaAttackTimes = 10;
    if (has_todayaattacktimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->todayaattacktimes());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaInfo::MergeFrom(const ArenaInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battletype()) {
      set_battletype(from.battletype());
    }
    if (from.has_myrank()) {
      set_myrank(from.myrank());
    }
    if (from.has_mypoint()) {
      set_mypoint(from.mypoint());
    }
    if (from.has_finishtime()) {
      set_finishtime(from.finishtime());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_finishtime1()) {
      set_finishtime1(from.finishtime1());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_maxrank()) {
      set_maxrank(from.maxrank());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_todayaattacktimes()) {
      set_todayaattacktimes(from.todayaattacktimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaInfo::CopyFrom(const ArenaInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ArenaInfo::Swap(ArenaInfo* other) {
  if (other != this) {
    std::swap(battletype_, other->battletype_);
    std::swap(myrank_, other->myrank_);
    std::swap(mypoint_, other->mypoint_);
    std::swap(finishtime_, other->finishtime_);
    std::swap(begintime_, other->begintime_);
    std::swap(finishtime1_, other->finishtime1_);
    std::swap(power_, other->power_);
    std::swap(maxrank_, other->maxrank_);
    std::swap(todayaattacktimes_, other->todayaattacktimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaInfo_descriptor_;
  metadata.reflection = ArenaInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace arena
}  // namespace protobuf

// @@protoc_insertion_point(global_scope)
