// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "library.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protobuf {
namespace library {

namespace {

const ::google::protobuf::Descriptor* LibraryInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LibraryInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* LibraryHeros_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LibraryHeros_reflection_ = NULL;
const ::google::protobuf::Descriptor* LibraryHeroInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LibraryHeroInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* LibraryAddHero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LibraryAddHero_reflection_ = NULL;
const ::google::protobuf::Descriptor* LibraryAllHero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LibraryAllHero_reflection_ = NULL;
const ::google::protobuf::Descriptor* LibrarySampleHero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LibrarySampleHero_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_library_2eproto() {
  protobuf_AddDesc_library_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "library.proto");
  GOOGLE_CHECK(file != NULL);
  LibraryInfo_descriptor_ = file->message_type(0);
  static const int LibraryInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LibraryInfo, libraryhero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LibraryInfo, heroaid_),
  };
  LibraryInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LibraryInfo_descriptor_,
      LibraryInfo::default_instance_,
      LibraryInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LibraryInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LibraryInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LibraryInfo));
  LibraryHeros_descriptor_ = file->message_type(1);
  static const int LibraryHeros_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LibraryHeros, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LibraryHeros, heros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LibraryHeros, haveaddposition_),
  };
  LibraryHeros_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LibraryHeros_descriptor_,
      LibraryHeros::default_instance_,
      LibraryHeros_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LibraryHeros, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LibraryHeros, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LibraryHeros));
  LibraryHeroInfo_descriptor_ = file->message_type(2);
  static const int LibraryHeroInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LibraryHeroInfo, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LibraryHeroInfo, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LibraryHeroInfo, tier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LibraryHeroInfo, resonancelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LibraryHeroInfo, haveaddposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LibraryHeroInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LibraryHeroInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LibraryHeroInfo, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LibraryHeroInfo, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LibraryHeroInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LibraryHeroInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LibraryHeroInfo, name_),
  };
  LibraryHeroInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LibraryHeroInfo_descriptor_,
      LibraryHeroInfo::default_instance_,
      LibraryHeroInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LibraryHeroInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LibraryHeroInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LibraryHeroInfo));
  LibraryAddHero_descriptor_ = file->message_type(3);
  static const int LibraryAddHero_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LibraryAddHero, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LibraryAddHero, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LibraryAddHero, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LibraryAddHero, fromtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LibraryAddHero, fromplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LibraryAddHero, fromserverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LibraryAddHero, fromid_),
  };
  LibraryAddHero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LibraryAddHero_descriptor_,
      LibraryAddHero::default_instance_,
      LibraryAddHero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LibraryAddHero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LibraryAddHero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LibraryAddHero));
  LibraryAllHero_descriptor_ = file->message_type(4);
  static const int LibraryAllHero_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LibraryAllHero, samplehero_),
  };
  LibraryAllHero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LibraryAllHero_descriptor_,
      LibraryAllHero::default_instance_,
      LibraryAllHero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LibraryAllHero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LibraryAllHero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LibraryAllHero));
  LibrarySampleHero_descriptor_ = file->message_type(5);
  static const int LibrarySampleHero_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LibrarySampleHero, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LibrarySampleHero, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LibrarySampleHero, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LibrarySampleHero, fromplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LibrarySampleHero, fromplayername_),
  };
  LibrarySampleHero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LibrarySampleHero_descriptor_,
      LibrarySampleHero::default_instance_,
      LibrarySampleHero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LibrarySampleHero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LibrarySampleHero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LibrarySampleHero));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_library_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LibraryInfo_descriptor_, &LibraryInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LibraryHeros_descriptor_, &LibraryHeros::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LibraryHeroInfo_descriptor_, &LibraryHeroInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LibraryAddHero_descriptor_, &LibraryAddHero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LibraryAllHero_descriptor_, &LibraryAllHero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LibrarySampleHero_descriptor_, &LibrarySampleHero::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_library_2eproto() {
  delete LibraryInfo::default_instance_;
  delete LibraryInfo_reflection_;
  delete LibraryHeros::default_instance_;
  delete LibraryHeros_reflection_;
  delete LibraryHeroInfo::default_instance_;
  delete LibraryHeroInfo_reflection_;
  delete LibraryAddHero::default_instance_;
  delete LibraryAddHero_reflection_;
  delete LibraryAllHero::default_instance_;
  delete LibraryAllHero_reflection_;
  delete LibrarySampleHero::default_instance_;
  delete LibrarySampleHero_reflection_;
}

void protobuf_AddDesc_library_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf::common::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rlibrary.proto\022\020protobuf.library\032\014commo"
    "n.proto\"v\n\013LibraryInfo\0223\n\013libraryHero\030\001 "
    "\003(\0132\036.protobuf.library.LibraryHeros\0222\n\007h"
    "eroAid\030\002 \003(\0132!.protobuf.library.LibraryH"
    "eroInfo\"i\n\014LibraryHeros\022\016\n\006number\030\001 \001(\005\022"
    "0\n\005heros\030\002 \003(\0132!.protobuf.library.Librar"
    "yHeroInfo\022\027\n\017haveAddPosition\030\003 \001(\010\"\321\001\n\017L"
    "ibraryHeroInfo\022\016\n\006heroId\030\001 \002(\005\022\n\n\002lv\030\002 \002"
    "(\005\022\014\n\004tier\030\003 \002(\005\022\023\n\013resonanceLv\030\004 \001(\005\022\027\n"
    "\017haveAddPosition\030\005 \001(\010\022\n\n\002id\030\006 \001(\005\022\014\n\004ty"
    "pe\030\007 \001(\005\022\020\n\010playerId\030\010 \001(\t\022\020\n\010serverId\030\t"
    " \001(\005\022\013\n\003sex\030\n \001(\005\022\r\n\005state\030\013 \001(\005\022\014\n\004name"
    "\030\014 \001(\t\"\214\001\n\016LibraryAddHero\022\014\n\004type\030\001 \002(\005\022"
    "\016\n\006number\030\002 \001(\005\022\016\n\006heroId\030\003 \001(\005\022\020\n\010fromT"
    "ype\030\004 \001(\005\022\024\n\014fromPlayerId\030\005 \001(\t\022\024\n\014fromS"
    "erverId\030\006 \001(\005\022\016\n\006fromId\030\007 \001(\005\"I\n\016Library"
    "AllHero\0227\n\nsampleHero\030\001 \003(\0132#.protobuf.l"
    "ibrary.LibrarySampleHero\"l\n\021LibrarySampl"
    "eHero\022\016\n\006heroId\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\022\r\n\005gra"
    "de\030\003 \001(\005\022\024\n\014fromPlayerId\030\004 \001(\t\022\026\n\016fromPl"
    "ayerName\030\005 \001(\tB\036\n\023xag.idgo.core.protoB\007L"
    "ibrary", 846);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "library.proto", &protobuf_RegisterTypes);
  LibraryInfo::default_instance_ = new LibraryInfo();
  LibraryHeros::default_instance_ = new LibraryHeros();
  LibraryHeroInfo::default_instance_ = new LibraryHeroInfo();
  LibraryAddHero::default_instance_ = new LibraryAddHero();
  LibraryAllHero::default_instance_ = new LibraryAllHero();
  LibrarySampleHero::default_instance_ = new LibrarySampleHero();
  LibraryInfo::default_instance_->InitAsDefaultInstance();
  LibraryHeros::default_instance_->InitAsDefaultInstance();
  LibraryHeroInfo::default_instance_->InitAsDefaultInstance();
  LibraryAddHero::default_instance_->InitAsDefaultInstance();
  LibraryAllHero::default_instance_->InitAsDefaultInstance();
  LibrarySampleHero::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_library_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_library_2eproto {
  StaticDescriptorInitializer_library_2eproto() {
    protobuf_AddDesc_library_2eproto();
  }
} static_descriptor_initializer_library_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int LibraryInfo::kLibraryHeroFieldNumber;
const int LibraryInfo::kHeroAidFieldNumber;
#endif  // !_MSC_VER

LibraryInfo::LibraryInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LibraryInfo::InitAsDefaultInstance() {
}

LibraryInfo::LibraryInfo(const LibraryInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LibraryInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LibraryInfo::~LibraryInfo() {
  SharedDtor();
}

void LibraryInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LibraryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LibraryInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LibraryInfo_descriptor_;
}

const LibraryInfo& LibraryInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_library_2eproto();  return *default_instance_;
}

LibraryInfo* LibraryInfo::default_instance_ = NULL;

LibraryInfo* LibraryInfo::New() const {
  return new LibraryInfo;
}

void LibraryInfo::Clear() {
  libraryhero_.Clear();
  heroaid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LibraryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.library.LibraryHeros libraryHero = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_libraryHero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_libraryhero()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_libraryHero;
        if (input->ExpectTag(18)) goto parse_heroAid;
        break;
      }
      
      // repeated .protobuf.library.LibraryHeroInfo heroAid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heroAid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_heroaid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_heroAid;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LibraryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.library.LibraryHeros libraryHero = 1;
  for (int i = 0; i < this->libraryhero_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->libraryhero(i), output);
  }
  
  // repeated .protobuf.library.LibraryHeroInfo heroAid = 2;
  for (int i = 0; i < this->heroaid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->heroaid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LibraryInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.library.LibraryHeros libraryHero = 1;
  for (int i = 0; i < this->libraryhero_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->libraryhero(i), target);
  }
  
  // repeated .protobuf.library.LibraryHeroInfo heroAid = 2;
  for (int i = 0; i < this->heroaid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->heroaid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LibraryInfo::ByteSize() const {
  int total_size = 0;
  
  // repeated .protobuf.library.LibraryHeros libraryHero = 1;
  total_size += 1 * this->libraryhero_size();
  for (int i = 0; i < this->libraryhero_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->libraryhero(i));
  }
  
  // repeated .protobuf.library.LibraryHeroInfo heroAid = 2;
  total_size += 1 * this->heroaid_size();
  for (int i = 0; i < this->heroaid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heroaid(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LibraryInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LibraryInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LibraryInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LibraryInfo::MergeFrom(const LibraryInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  libraryhero_.MergeFrom(from.libraryhero_);
  heroaid_.MergeFrom(from.heroaid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LibraryInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LibraryInfo::CopyFrom(const LibraryInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LibraryInfo::IsInitialized() const {
  
  for (int i = 0; i < libraryhero_size(); i++) {
    if (!this->libraryhero(i).IsInitialized()) return false;
  }
  for (int i = 0; i < heroaid_size(); i++) {
    if (!this->heroaid(i).IsInitialized()) return false;
  }
  return true;
}

void LibraryInfo::Swap(LibraryInfo* other) {
  if (other != this) {
    libraryhero_.Swap(&other->libraryhero_);
    heroaid_.Swap(&other->heroaid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LibraryInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LibraryInfo_descriptor_;
  metadata.reflection = LibraryInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LibraryHeros::kNumberFieldNumber;
const int LibraryHeros::kHerosFieldNumber;
const int LibraryHeros::kHaveAddPositionFieldNumber;
#endif  // !_MSC_VER

LibraryHeros::LibraryHeros()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LibraryHeros::InitAsDefaultInstance() {
}

LibraryHeros::LibraryHeros(const LibraryHeros& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LibraryHeros::SharedCtor() {
  _cached_size_ = 0;
  number_ = 0;
  haveaddposition_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LibraryHeros::~LibraryHeros() {
  SharedDtor();
}

void LibraryHeros::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LibraryHeros::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LibraryHeros::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LibraryHeros_descriptor_;
}

const LibraryHeros& LibraryHeros::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_library_2eproto();  return *default_instance_;
}

LibraryHeros* LibraryHeros::default_instance_ = NULL;

LibraryHeros* LibraryHeros::New() const {
  return new LibraryHeros;
}

void LibraryHeros::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    number_ = 0;
    haveaddposition_ = false;
  }
  heros_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LibraryHeros::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_heros;
        break;
      }
      
      // repeated .protobuf.library.LibraryHeroInfo heros = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_heros()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_heros;
        if (input->ExpectTag(24)) goto parse_haveAddPosition;
        break;
      }
      
      // optional bool haveAddPosition = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_haveAddPosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &haveaddposition_)));
          set_has_haveaddposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LibraryHeros::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->number(), output);
  }
  
  // repeated .protobuf.library.LibraryHeroInfo heros = 2;
  for (int i = 0; i < this->heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->heros(i), output);
  }
  
  // optional bool haveAddPosition = 3;
  if (has_haveaddposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->haveaddposition(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LibraryHeros::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 number = 1;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->number(), target);
  }
  
  // repeated .protobuf.library.LibraryHeroInfo heros = 2;
  for (int i = 0; i < this->heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->heros(i), target);
  }
  
  // optional bool haveAddPosition = 3;
  if (has_haveaddposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->haveaddposition(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LibraryHeros::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 number = 1;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }
    
    // optional bool haveAddPosition = 3;
    if (has_haveaddposition()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .protobuf.library.LibraryHeroInfo heros = 2;
  total_size += 1 * this->heros_size();
  for (int i = 0; i < this->heros_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heros(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LibraryHeros::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LibraryHeros* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LibraryHeros*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LibraryHeros::MergeFrom(const LibraryHeros& from) {
  GOOGLE_CHECK_NE(&from, this);
  heros_.MergeFrom(from.heros_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_haveaddposition()) {
      set_haveaddposition(from.haveaddposition());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LibraryHeros::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LibraryHeros::CopyFrom(const LibraryHeros& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LibraryHeros::IsInitialized() const {
  
  for (int i = 0; i < heros_size(); i++) {
    if (!this->heros(i).IsInitialized()) return false;
  }
  return true;
}

void LibraryHeros::Swap(LibraryHeros* other) {
  if (other != this) {
    std::swap(number_, other->number_);
    heros_.Swap(&other->heros_);
    std::swap(haveaddposition_, other->haveaddposition_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LibraryHeros::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LibraryHeros_descriptor_;
  metadata.reflection = LibraryHeros_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LibraryHeroInfo::kHeroIdFieldNumber;
const int LibraryHeroInfo::kLvFieldNumber;
const int LibraryHeroInfo::kTierFieldNumber;
const int LibraryHeroInfo::kResonanceLvFieldNumber;
const int LibraryHeroInfo::kHaveAddPositionFieldNumber;
const int LibraryHeroInfo::kIdFieldNumber;
const int LibraryHeroInfo::kTypeFieldNumber;
const int LibraryHeroInfo::kPlayerIdFieldNumber;
const int LibraryHeroInfo::kServerIdFieldNumber;
const int LibraryHeroInfo::kSexFieldNumber;
const int LibraryHeroInfo::kStateFieldNumber;
const int LibraryHeroInfo::kNameFieldNumber;
#endif  // !_MSC_VER

LibraryHeroInfo::LibraryHeroInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LibraryHeroInfo::InitAsDefaultInstance() {
}

LibraryHeroInfo::LibraryHeroInfo(const LibraryHeroInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LibraryHeroInfo::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0;
  lv_ = 0;
  tier_ = 0;
  resonancelv_ = 0;
  haveaddposition_ = false;
  id_ = 0;
  type_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serverid_ = 0;
  sex_ = 0;
  state_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LibraryHeroInfo::~LibraryHeroInfo() {
  SharedDtor();
}

void LibraryHeroInfo::SharedDtor() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void LibraryHeroInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LibraryHeroInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LibraryHeroInfo_descriptor_;
}

const LibraryHeroInfo& LibraryHeroInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_library_2eproto();  return *default_instance_;
}

LibraryHeroInfo* LibraryHeroInfo::default_instance_ = NULL;

LibraryHeroInfo* LibraryHeroInfo::New() const {
  return new LibraryHeroInfo;
}

void LibraryHeroInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = 0;
    lv_ = 0;
    tier_ = 0;
    resonancelv_ = 0;
    haveaddposition_ = false;
    id_ = 0;
    type_ = 0;
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    serverid_ = 0;
    sex_ = 0;
    state_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LibraryHeroInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 heroId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lv;
        break;
      }
      
      // required int32 lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tier;
        break;
      }
      
      // required int32 tier = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tier_)));
          set_has_tier();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_resonanceLv;
        break;
      }
      
      // optional int32 resonanceLv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resonanceLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resonancelv_)));
          set_has_resonancelv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_haveAddPosition;
        break;
      }
      
      // optional bool haveAddPosition = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_haveAddPosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &haveaddposition_)));
          set_has_haveaddposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_id;
        break;
      }
      
      // optional int32 id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_type;
        break;
      }
      
      // optional int32 type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_playerId;
        break;
      }
      
      // optional string playerId = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_serverId;
        break;
      }
      
      // optional int32 serverId = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_sex;
        break;
      }
      
      // optional int32 sex = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_state;
        break;
      }
      
      // optional int32 state = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_name;
        break;
      }
      
      // optional string name = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LibraryHeroInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 heroId = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->heroid(), output);
  }
  
  // required int32 lv = 2;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lv(), output);
  }
  
  // required int32 tier = 3;
  if (has_tier()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tier(), output);
  }
  
  // optional int32 resonanceLv = 4;
  if (has_resonancelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->resonancelv(), output);
  }
  
  // optional bool haveAddPosition = 5;
  if (has_haveaddposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->haveaddposition(), output);
  }
  
  // optional int32 id = 6;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->id(), output);
  }
  
  // optional int32 type = 7;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->type(), output);
  }
  
  // optional string playerId = 8;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->playerid(), output);
  }
  
  // optional int32 serverId = 9;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->serverid(), output);
  }
  
  // optional int32 sex = 10;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->sex(), output);
  }
  
  // optional int32 state = 11;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->state(), output);
  }
  
  // optional string name = 12;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LibraryHeroInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 heroId = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->heroid(), target);
  }
  
  // required int32 lv = 2;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lv(), target);
  }
  
  // required int32 tier = 3;
  if (has_tier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tier(), target);
  }
  
  // optional int32 resonanceLv = 4;
  if (has_resonancelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->resonancelv(), target);
  }
  
  // optional bool haveAddPosition = 5;
  if (has_haveaddposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->haveaddposition(), target);
  }
  
  // optional int32 id = 6;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->id(), target);
  }
  
  // optional int32 type = 7;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->type(), target);
  }
  
  // optional string playerId = 8;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->playerid(), target);
  }
  
  // optional int32 serverId = 9;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->serverid(), target);
  }
  
  // optional int32 sex = 10;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->sex(), target);
  }
  
  // optional int32 state = 11;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->state(), target);
  }
  
  // optional string name = 12;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LibraryHeroInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 heroId = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->heroid());
    }
    
    // required int32 lv = 2;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }
    
    // required int32 tier = 3;
    if (has_tier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tier());
    }
    
    // optional int32 resonanceLv = 4;
    if (has_resonancelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resonancelv());
    }
    
    // optional bool haveAddPosition = 5;
    if (has_haveaddposition()) {
      total_size += 1 + 1;
    }
    
    // optional int32 id = 6;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 type = 7;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional string playerId = 8;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 serverId = 9;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }
    
    // optional int32 sex = 10;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }
    
    // optional int32 state = 11;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }
    
    // optional string name = 12;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LibraryHeroInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LibraryHeroInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LibraryHeroInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LibraryHeroInfo::MergeFrom(const LibraryHeroInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_tier()) {
      set_tier(from.tier());
    }
    if (from.has_resonancelv()) {
      set_resonancelv(from.resonancelv());
    }
    if (from.has_haveaddposition()) {
      set_haveaddposition(from.haveaddposition());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LibraryHeroInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LibraryHeroInfo::CopyFrom(const LibraryHeroInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LibraryHeroInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void LibraryHeroInfo::Swap(LibraryHeroInfo* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(lv_, other->lv_);
    std::swap(tier_, other->tier_);
    std::swap(resonancelv_, other->resonancelv_);
    std::swap(haveaddposition_, other->haveaddposition_);
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(playerid_, other->playerid_);
    std::swap(serverid_, other->serverid_);
    std::swap(sex_, other->sex_);
    std::swap(state_, other->state_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LibraryHeroInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LibraryHeroInfo_descriptor_;
  metadata.reflection = LibraryHeroInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LibraryAddHero::kTypeFieldNumber;
const int LibraryAddHero::kNumberFieldNumber;
const int LibraryAddHero::kHeroIdFieldNumber;
const int LibraryAddHero::kFromTypeFieldNumber;
const int LibraryAddHero::kFromPlayerIdFieldNumber;
const int LibraryAddHero::kFromServerIdFieldNumber;
const int LibraryAddHero::kFromIdFieldNumber;
#endif  // !_MSC_VER

LibraryAddHero::LibraryAddHero()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LibraryAddHero::InitAsDefaultInstance() {
}

LibraryAddHero::LibraryAddHero(const LibraryAddHero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LibraryAddHero::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  number_ = 0;
  heroid_ = 0;
  fromtype_ = 0;
  fromplayerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fromserverid_ = 0;
  fromid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LibraryAddHero::~LibraryAddHero() {
  SharedDtor();
}

void LibraryAddHero::SharedDtor() {
  if (fromplayerid_ != &::google::protobuf::internal::kEmptyString) {
    delete fromplayerid_;
  }
  if (this != default_instance_) {
  }
}

void LibraryAddHero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LibraryAddHero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LibraryAddHero_descriptor_;
}

const LibraryAddHero& LibraryAddHero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_library_2eproto();  return *default_instance_;
}

LibraryAddHero* LibraryAddHero::default_instance_ = NULL;

LibraryAddHero* LibraryAddHero::New() const {
  return new LibraryAddHero;
}

void LibraryAddHero::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    number_ = 0;
    heroid_ = 0;
    fromtype_ = 0;
    if (has_fromplayerid()) {
      if (fromplayerid_ != &::google::protobuf::internal::kEmptyString) {
        fromplayerid_->clear();
      }
    }
    fromserverid_ = 0;
    fromid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LibraryAddHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_number;
        break;
      }
      
      // optional int32 number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_heroId;
        break;
      }
      
      // optional int32 heroId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fromType;
        break;
      }
      
      // optional int32 fromType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fromType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fromtype_)));
          set_has_fromtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_fromPlayerId;
        break;
      }
      
      // optional string fromPlayerId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fromPlayerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromplayerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fromplayerid().data(), this->fromplayerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_fromServerId;
        break;
      }
      
      // optional int32 fromServerId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fromServerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fromserverid_)));
          set_has_fromserverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_fromId;
        break;
      }
      
      // optional int32 fromId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fromId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fromid_)));
          set_has_fromid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LibraryAddHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // optional int32 number = 2;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->number(), output);
  }
  
  // optional int32 heroId = 3;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->heroid(), output);
  }
  
  // optional int32 fromType = 4;
  if (has_fromtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fromtype(), output);
  }
  
  // optional string fromPlayerId = 5;
  if (has_fromplayerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fromplayerid().data(), this->fromplayerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->fromplayerid(), output);
  }
  
  // optional int32 fromServerId = 6;
  if (has_fromserverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->fromserverid(), output);
  }
  
  // optional int32 fromId = 7;
  if (has_fromid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->fromid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LibraryAddHero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // optional int32 number = 2;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->number(), target);
  }
  
  // optional int32 heroId = 3;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->heroid(), target);
  }
  
  // optional int32 fromType = 4;
  if (has_fromtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->fromtype(), target);
  }
  
  // optional string fromPlayerId = 5;
  if (has_fromplayerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fromplayerid().data(), this->fromplayerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->fromplayerid(), target);
  }
  
  // optional int32 fromServerId = 6;
  if (has_fromserverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->fromserverid(), target);
  }
  
  // optional int32 fromId = 7;
  if (has_fromid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->fromid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LibraryAddHero::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int32 number = 2;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }
    
    // optional int32 heroId = 3;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->heroid());
    }
    
    // optional int32 fromType = 4;
    if (has_fromtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fromtype());
    }
    
    // optional string fromPlayerId = 5;
    if (has_fromplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fromplayerid());
    }
    
    // optional int32 fromServerId = 6;
    if (has_fromserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fromserverid());
    }
    
    // optional int32 fromId = 7;
    if (has_fromid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fromid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LibraryAddHero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LibraryAddHero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LibraryAddHero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LibraryAddHero::MergeFrom(const LibraryAddHero& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_fromtype()) {
      set_fromtype(from.fromtype());
    }
    if (from.has_fromplayerid()) {
      set_fromplayerid(from.fromplayerid());
    }
    if (from.has_fromserverid()) {
      set_fromserverid(from.fromserverid());
    }
    if (from.has_fromid()) {
      set_fromid(from.fromid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LibraryAddHero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LibraryAddHero::CopyFrom(const LibraryAddHero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LibraryAddHero::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void LibraryAddHero::Swap(LibraryAddHero* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(number_, other->number_);
    std::swap(heroid_, other->heroid_);
    std::swap(fromtype_, other->fromtype_);
    std::swap(fromplayerid_, other->fromplayerid_);
    std::swap(fromserverid_, other->fromserverid_);
    std::swap(fromid_, other->fromid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LibraryAddHero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LibraryAddHero_descriptor_;
  metadata.reflection = LibraryAddHero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LibraryAllHero::kSampleHeroFieldNumber;
#endif  // !_MSC_VER

LibraryAllHero::LibraryAllHero()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LibraryAllHero::InitAsDefaultInstance() {
}

LibraryAllHero::LibraryAllHero(const LibraryAllHero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LibraryAllHero::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LibraryAllHero::~LibraryAllHero() {
  SharedDtor();
}

void LibraryAllHero::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LibraryAllHero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LibraryAllHero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LibraryAllHero_descriptor_;
}

const LibraryAllHero& LibraryAllHero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_library_2eproto();  return *default_instance_;
}

LibraryAllHero* LibraryAllHero::default_instance_ = NULL;

LibraryAllHero* LibraryAllHero::New() const {
  return new LibraryAllHero;
}

void LibraryAllHero::Clear() {
  samplehero_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LibraryAllHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.library.LibrarySampleHero sampleHero = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sampleHero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_samplehero()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_sampleHero;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LibraryAllHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.library.LibrarySampleHero sampleHero = 1;
  for (int i = 0; i < this->samplehero_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->samplehero(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LibraryAllHero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.library.LibrarySampleHero sampleHero = 1;
  for (int i = 0; i < this->samplehero_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->samplehero(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LibraryAllHero::ByteSize() const {
  int total_size = 0;
  
  // repeated .protobuf.library.LibrarySampleHero sampleHero = 1;
  total_size += 1 * this->samplehero_size();
  for (int i = 0; i < this->samplehero_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->samplehero(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LibraryAllHero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LibraryAllHero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LibraryAllHero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LibraryAllHero::MergeFrom(const LibraryAllHero& from) {
  GOOGLE_CHECK_NE(&from, this);
  samplehero_.MergeFrom(from.samplehero_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LibraryAllHero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LibraryAllHero::CopyFrom(const LibraryAllHero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LibraryAllHero::IsInitialized() const {
  
  return true;
}

void LibraryAllHero::Swap(LibraryAllHero* other) {
  if (other != this) {
    samplehero_.Swap(&other->samplehero_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LibraryAllHero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LibraryAllHero_descriptor_;
  metadata.reflection = LibraryAllHero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LibrarySampleHero::kHeroIdFieldNumber;
const int LibrarySampleHero::kIdFieldNumber;
const int LibrarySampleHero::kGradeFieldNumber;
const int LibrarySampleHero::kFromPlayerIdFieldNumber;
const int LibrarySampleHero::kFromPlayerNameFieldNumber;
#endif  // !_MSC_VER

LibrarySampleHero::LibrarySampleHero()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LibrarySampleHero::InitAsDefaultInstance() {
}

LibrarySampleHero::LibrarySampleHero(const LibrarySampleHero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LibrarySampleHero::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0;
  id_ = 0;
  grade_ = 0;
  fromplayerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fromplayername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LibrarySampleHero::~LibrarySampleHero() {
  SharedDtor();
}

void LibrarySampleHero::SharedDtor() {
  if (fromplayerid_ != &::google::protobuf::internal::kEmptyString) {
    delete fromplayerid_;
  }
  if (fromplayername_ != &::google::protobuf::internal::kEmptyString) {
    delete fromplayername_;
  }
  if (this != default_instance_) {
  }
}

void LibrarySampleHero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LibrarySampleHero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LibrarySampleHero_descriptor_;
}

const LibrarySampleHero& LibrarySampleHero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_library_2eproto();  return *default_instance_;
}

LibrarySampleHero* LibrarySampleHero::default_instance_ = NULL;

LibrarySampleHero* LibrarySampleHero::New() const {
  return new LibrarySampleHero;
}

void LibrarySampleHero::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = 0;
    id_ = 0;
    grade_ = 0;
    if (has_fromplayerid()) {
      if (fromplayerid_ != &::google::protobuf::internal::kEmptyString) {
        fromplayerid_->clear();
      }
    }
    if (has_fromplayername()) {
      if (fromplayername_ != &::google::protobuf::internal::kEmptyString) {
        fromplayername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LibrarySampleHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 heroId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_grade;
        break;
      }
      
      // optional int32 grade = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_fromPlayerId;
        break;
      }
      
      // optional string fromPlayerId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fromPlayerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromplayerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fromplayerid().data(), this->fromplayerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_fromPlayerName;
        break;
      }
      
      // optional string fromPlayerName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fromPlayerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromplayername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fromplayername().data(), this->fromplayername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LibrarySampleHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 heroId = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->heroid(), output);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  // optional int32 grade = 3;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->grade(), output);
  }
  
  // optional string fromPlayerId = 4;
  if (has_fromplayerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fromplayerid().data(), this->fromplayerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->fromplayerid(), output);
  }
  
  // optional string fromPlayerName = 5;
  if (has_fromplayername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fromplayername().data(), this->fromplayername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->fromplayername(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LibrarySampleHero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 heroId = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->heroid(), target);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  // optional int32 grade = 3;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->grade(), target);
  }
  
  // optional string fromPlayerId = 4;
  if (has_fromplayerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fromplayerid().data(), this->fromplayerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->fromplayerid(), target);
  }
  
  // optional string fromPlayerName = 5;
  if (has_fromplayername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fromplayername().data(), this->fromplayername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->fromplayername(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LibrarySampleHero::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 heroId = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->heroid());
    }
    
    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 grade = 3;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }
    
    // optional string fromPlayerId = 4;
    if (has_fromplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fromplayerid());
    }
    
    // optional string fromPlayerName = 5;
    if (has_fromplayername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fromplayername());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LibrarySampleHero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LibrarySampleHero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LibrarySampleHero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LibrarySampleHero::MergeFrom(const LibrarySampleHero& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_fromplayerid()) {
      set_fromplayerid(from.fromplayerid());
    }
    if (from.has_fromplayername()) {
      set_fromplayername(from.fromplayername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LibrarySampleHero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LibrarySampleHero::CopyFrom(const LibrarySampleHero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LibrarySampleHero::IsInitialized() const {
  
  return true;
}

void LibrarySampleHero::Swap(LibrarySampleHero* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(id_, other->id_);
    std::swap(grade_, other->grade_);
    std::swap(fromplayerid_, other->fromplayerid_);
    std::swap(fromplayername_, other->fromplayername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LibrarySampleHero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LibrarySampleHero_descriptor_;
  metadata.reflection = LibrarySampleHero_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace library
}  // namespace protobuf

// @@protoc_insertion_point(global_scope)
