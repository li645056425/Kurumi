// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "guild.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protobuf {
namespace guild {

namespace {

const ::google::protobuf::Descriptor* GuildEnterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildEnterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRecordInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRecordInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildBossDamage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildBossDamage_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerDamage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerDamage_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildApplyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildApplyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildBaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildBaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildPlayers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildPlayers_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildListInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildListInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildDyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildDyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BossDamage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BossDamage_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildBossInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildBossInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MillRobbery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MillRobbery_reflection_ = NULL;
const ::google::protobuf::Descriptor* MillMyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MillMyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MillOtherInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MillOtherInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MillLvlInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MillLvlInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DonationHistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DonationHistory_reflection_ = NULL;
const ::google::protobuf::Descriptor* MillExpHistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MillExpHistory_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModGuildInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModGuildInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DynIcon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DynIcon_reflection_ = NULL;
const ::google::protobuf::Descriptor* DynIconList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DynIconList_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterHall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterHall_reflection_ = NULL;
const ::google::protobuf::Descriptor* LineupShow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LineupShow_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnemyInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnemyInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnemyInfoReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnemyInfoReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnemyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnemyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnemyLineupShow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnemyLineupShow_reflection_ = NULL;
const ::google::protobuf::Descriptor* RankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecordReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecordReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* Record_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Record_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetLineup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetLineup_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecordDetailReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecordDetailReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecordDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecordDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroShow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroShow_reflection_ = NULL;
const ::google::protobuf::Descriptor* FinalRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FinalRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* FinalGuildShow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FinalGuildShow_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterFinal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterFinal_reflection_ = NULL;
const ::google::protobuf::Descriptor* Bet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Bet_reflection_ = NULL;
const ::google::protobuf::Descriptor* Box_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Box_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RecordType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_guild_2eproto() {
  protobuf_AddDesc_guild_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "guild.proto");
  GOOGLE_CHECK(file != NULL);
  GuildEnterInfo_descriptor_ = file->message_type(0);
  static const int GuildEnterInfo_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildEnterInfo, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildEnterInfo, otherslist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildEnterInfo, robberyothercnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildEnterInfo, lastrefreshtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildEnterInfo, refreshattackcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildEnterInfo, refreshfreecnttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildEnterInfo, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildEnterInfo, blood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildEnterInfo, identity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildEnterInfo, milllvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildEnterInfo, millexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildEnterInfo, isset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildEnterInfo, isjoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildEnterInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildEnterInfo, battletime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildEnterInfo, battlebox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildEnterInfo, lineup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildEnterInfo, isentryfinal_),
  };
  GuildEnterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildEnterInfo_descriptor_,
      GuildEnterInfo::default_instance_,
      GuildEnterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildEnterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildEnterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildEnterInfo));
  GuildPlayer_descriptor_ = file->message_type(1);
  static const int GuildPlayer_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPlayer, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPlayer, playericon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPlayer, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPlayer, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPlayer, identity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPlayer, entertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPlayer, lastlogintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPlayer, playerlvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPlayer, headframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPlayer, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPlayer, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPlayer, sex_),
  };
  GuildPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildPlayer_descriptor_,
      GuildPlayer::default_instance_,
      GuildPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildPlayer));
  GuildRecordInfo_descriptor_ = file->message_type(2);
  static const int GuildRecordInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRecordInfo, recordinfo_),
  };
  GuildRecordInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRecordInfo_descriptor_,
      GuildRecordInfo::default_instance_,
      GuildRecordInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRecordInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRecordInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRecordInfo));
  GuildRecord_descriptor_ = file->message_type(3);
  static const int GuildRecord_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRecord, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRecord, recordtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRecord, runname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRecord, byname_),
  };
  GuildRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRecord_descriptor_,
      GuildRecord::default_instance_,
      GuildRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRecord));
  GuildBossDamage_descriptor_ = file->message_type(4);
  static const int GuildBossDamage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBossDamage, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBossDamage, bossdamage_),
  };
  GuildBossDamage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildBossDamage_descriptor_,
      GuildBossDamage::default_instance_,
      GuildBossDamage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBossDamage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBossDamage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildBossDamage));
  PlayerDamage_descriptor_ = file->message_type(5);
  static const int PlayerDamage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDamage, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDamage, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDamage, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDamage, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDamage, attackcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDamage, totaldamage_),
  };
  PlayerDamage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerDamage_descriptor_,
      PlayerDamage::default_instance_,
      PlayerDamage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDamage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDamage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerDamage));
  GuildApplyInfo_descriptor_ = file->message_type(6);
  static const int GuildApplyInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildApplyInfo, playerinfo_),
  };
  GuildApplyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildApplyInfo_descriptor_,
      GuildApplyInfo::default_instance_,
      GuildApplyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildApplyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildApplyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildApplyInfo));
  GuildBaseInfo_descriptor_ = file->message_type(7);
  static const int GuildBaseInfo_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBaseInfo, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBaseInfo, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBaseInfo, guildicon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBaseInfo, notice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBaseInfo, limitgrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBaseInfo, needapproval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBaseInfo, lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBaseInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBaseInfo, playercnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBaseInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBaseInfo, finalrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBaseInfo, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBaseInfo, servername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBaseInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBaseInfo, yesterdayexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBaseInfo, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBaseInfo, joinnotice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBaseInfo, residueexp_),
  };
  GuildBaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildBaseInfo_descriptor_,
      GuildBaseInfo::default_instance_,
      GuildBaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildBaseInfo));
  GuildPlayers_descriptor_ = file->message_type(8);
  static const int GuildPlayers_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPlayers, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPlayers, players_),
  };
  GuildPlayers_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildPlayers_descriptor_,
      GuildPlayers::default_instance_,
      GuildPlayers_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPlayers, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPlayers, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildPlayers));
  GuildListInfo_descriptor_ = file->message_type(9);
  static const int GuildListInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildListInfo, myrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildListInfo, infos_),
  };
  GuildListInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildListInfo_descriptor_,
      GuildListInfo::default_instance_,
      GuildListInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildListInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildListInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildListInfo));
  GuildDyInfo_descriptor_ = file->message_type(10);
  static const int GuildDyInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDyInfo, curexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDyInfo, curlvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDyInfo, items_),
  };
  GuildDyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildDyInfo_descriptor_,
      GuildDyInfo::default_instance_,
      GuildDyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildDyInfo));
  BossDamage_descriptor_ = file->message_type(11);
  static const int BossDamage_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDamage, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDamage, attackcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDamage, totaldamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDamage, received_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDamage, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDamage, playerhead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDamage, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDamage, playerlvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDamage, identity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDamage, headframe_),
  };
  BossDamage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BossDamage_descriptor_,
      BossDamage::default_instance_,
      BossDamage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDamage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDamage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BossDamage));
  GuildBossInfo_descriptor_ = file->message_type(12);
  static const int GuildBossInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBossInfo, refreshattackcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBossInfo, refreshfreecnttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBossInfo, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBossInfo, blood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBossInfo, isopen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBossInfo, playerdamages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBossInfo, freeexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBossInfo, exp_),
  };
  GuildBossInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildBossInfo_descriptor_,
      GuildBossInfo::default_instance_,
      GuildBossInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBossInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBossInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildBossInfo));
  MillRobbery_descriptor_ = file->message_type(13);
  static const int MillRobbery_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillRobbery, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillRobbery, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillRobbery, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillRobbery, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillRobbery, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillRobbery, playerlvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillRobbery, playerhead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillRobbery, millid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillRobbery, milllvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillRobbery, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillRobbery, robberyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillRobbery, headframe_),
  };
  MillRobbery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MillRobbery_descriptor_,
      MillRobbery::default_instance_,
      MillRobbery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillRobbery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillRobbery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MillRobbery));
  MillMyInfo_descriptor_ = file->message_type(14);
  static const int MillMyInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillMyInfo, millid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillMyInfo, milllvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillMyInfo, millfinishtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillMyInfo, received_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillMyInfo, robberylist_),
  };
  MillMyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MillMyInfo_descriptor_,
      MillMyInfo::default_instance_,
      MillMyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillMyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillMyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MillMyInfo));
  MillOtherInfo_descriptor_ = file->message_type(15);
  static const int MillOtherInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillOtherInfo, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillOtherInfo, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillOtherInfo, guildinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillOtherInfo, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillOtherInfo, millid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillOtherInfo, milllvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillOtherInfo, robberyed_),
  };
  MillOtherInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MillOtherInfo_descriptor_,
      MillOtherInfo::default_instance_,
      MillOtherInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillOtherInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillOtherInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MillOtherInfo));
  MillLvlInfo_descriptor_ = file->message_type(16);
  static const int MillLvlInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillLvlInfo, milllvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillLvlInfo, millexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillLvlInfo, guildgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillLvlInfo, history_),
  };
  MillLvlInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MillLvlInfo_descriptor_,
      MillLvlInfo::default_instance_,
      MillLvlInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillLvlInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillLvlInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MillLvlInfo));
  DonationHistory_descriptor_ = file->message_type(17);
  static const int DonationHistory_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DonationHistory, history_),
  };
  DonationHistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DonationHistory_descriptor_,
      DonationHistory::default_instance_,
      DonationHistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DonationHistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DonationHistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DonationHistory));
  MillExpHistory_descriptor_ = file->message_type(18);
  static const int MillExpHistory_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillExpHistory, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillExpHistory, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillExpHistory, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillExpHistory, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillExpHistory, playerlvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillExpHistory, identity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillExpHistory, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillExpHistory, headframe_),
  };
  MillExpHistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MillExpHistory_descriptor_,
      MillExpHistory::default_instance_,
      MillExpHistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillExpHistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillExpHistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MillExpHistory));
  ModGuildInfo_descriptor_ = file->message_type(19);
  static const int ModGuildInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModGuildInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModGuildInfo, info_),
  };
  ModGuildInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModGuildInfo_descriptor_,
      ModGuildInfo::default_instance_,
      ModGuildInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModGuildInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModGuildInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModGuildInfo));
  DynIcon_descriptor_ = file->message_type(20);
  static const int DynIcon_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynIcon, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynIcon, outtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynIcon, usetime_),
  };
  DynIcon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DynIcon_descriptor_,
      DynIcon::default_instance_,
      DynIcon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynIcon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynIcon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DynIcon));
  DynIconList_descriptor_ = file->message_type(21);
  static const int DynIconList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynIconList, icons_),
  };
  DynIconList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DynIconList_descriptor_,
      DynIconList::default_instance_,
      DynIconList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynIconList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynIconList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DynIconList));
  EnterHall_descriptor_ = file->message_type(22);
  static const int EnterHall_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterHall, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterHall, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterHall, isjoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterHall, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterHall, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterHall, energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterHall, energytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterHall, lineup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterHall, contribution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterHall, issetother_),
  };
  EnterHall_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterHall_descriptor_,
      EnterHall::default_instance_,
      EnterHall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterHall, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterHall, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterHall));
  LineupShow_descriptor_ = file->message_type(23);
  static const int LineupShow_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineupShow, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineupShow, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineupShow, isjoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineupShow, ishide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineupShow, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineupShow, heros_),
  };
  LineupShow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LineupShow_descriptor_,
      LineupShow::default_instance_,
      LineupShow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineupShow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineupShow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LineupShow));
  EnemyInfoRequest_descriptor_ = file->message_type(24);
  static const int EnemyInfoRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnemyInfoRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnemyInfoRequest, refresh_),
  };
  EnemyInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnemyInfoRequest_descriptor_,
      EnemyInfoRequest::default_instance_,
      EnemyInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnemyInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnemyInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnemyInfoRequest));
  EnemyInfoReply_descriptor_ = file->message_type(25);
  static const int EnemyInfoReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnemyInfoReply, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnemyInfoReply, energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnemyInfoReply, energytime_),
  };
  EnemyInfoReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnemyInfoReply_descriptor_,
      EnemyInfoReply::default_instance_,
      EnemyInfoReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnemyInfoReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnemyInfoReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnemyInfoReply));
  EnemyInfo_descriptor_ = file->message_type(26);
  static const int EnemyInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnemyInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnemyInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnemyInfo, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnemyInfo, guildicon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnemyInfo, servername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnemyInfo, lineup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnemyInfo, finalrank_),
  };
  EnemyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnemyInfo_descriptor_,
      EnemyInfo::default_instance_,
      EnemyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnemyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnemyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnemyInfo));
  EnemyLineupShow_descriptor_ = file->message_type(27);
  static const int EnemyLineupShow_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnemyLineupShow, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnemyLineupShow, ishide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnemyLineupShow, heros_),
  };
  EnemyLineupShow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnemyLineupShow_descriptor_,
      EnemyLineupShow::default_instance_,
      EnemyLineupShow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnemyLineupShow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnemyLineupShow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnemyLineupShow));
  RankInfo_descriptor_ = file->message_type(28);
  static const int RankInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, headframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, wintime_),
  };
  RankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankInfo_descriptor_,
      RankInfo::default_instance_,
      RankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankInfo));
  RecordReply_descriptor_ = file->message_type(29);
  static const int RecordReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordReply, records_),
  };
  RecordReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecordReply_descriptor_,
      RecordReply::default_instance_,
      RecordReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecordReply));
  Record_descriptor_ = file->message_type(30);
  static const int Record_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, servername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, iswin_),
  };
  Record_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Record_descriptor_,
      Record::default_instance_,
      Record_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Record));
  ChatRecord_descriptor_ = file->message_type(31);
  static const int ChatRecord_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRecord, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRecord, atservername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRecord, atname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRecord, aticon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRecord, deservername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRecord, dename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRecord, deicon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRecord, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRecord, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRecord, iswin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRecord, wintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRecord, failtime_),
  };
  ChatRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatRecord_descriptor_,
      ChatRecord::default_instance_,
      ChatRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatRecord));
  SetLineup_descriptor_ = file->message_type(32);
  static const int SetLineup_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetLineup, ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetLineup, hides_),
  };
  SetLineup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetLineup_descriptor_,
      SetLineup::default_instance_,
      SetLineup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetLineup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetLineup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetLineup));
  RecordDetailReply_descriptor_ = file->message_type(33);
  static const int RecordDetailReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordDetailReply, records_),
  };
  RecordDetailReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecordDetailReply_descriptor_,
      RecordDetailReply::default_instance_,
      RecordDetailReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordDetailReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordDetailReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecordDetailReply));
  RecordDetail_descriptor_ = file->message_type(34);
  static const int RecordDetail_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordDetail, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordDetail, atlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordDetail, atname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordDetail, athead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordDetail, atheadframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordDetail, delv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordDetail, dename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordDetail, dehead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordDetail, deheadframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordDetail, atiswin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordDetail, atheros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordDetail, deheros_),
  };
  RecordDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecordDetail_descriptor_,
      RecordDetail::default_instance_,
      RecordDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecordDetail));
  HeroShow_descriptor_ = file->message_type(35);
  static const int HeroShow_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroShow, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroShow, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroShow, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroShow, isdie_),
  };
  HeroShow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroShow_descriptor_,
      HeroShow::default_instance_,
      HeroShow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroShow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroShow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroShow));
  FinalRecord_descriptor_ = file->message_type(36);
  static const int FinalRecord_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalRecord, atservername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalRecord, atname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalRecord, aticon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalRecord, deservername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalRecord, dename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalRecord, deicon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalRecord, iswin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalRecord, records_),
  };
  FinalRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FinalRecord_descriptor_,
      FinalRecord::default_instance_,
      FinalRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FinalRecord));
  FinalGuildShow_descriptor_ = file->message_type(37);
  static const int FinalGuildShow_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalGuildShow, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalGuildShow, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalGuildShow, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalGuildShow, servername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalGuildShow, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalGuildShow, lastrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalGuildShow, finalrank_),
  };
  FinalGuildShow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FinalGuildShow_descriptor_,
      FinalGuildShow::default_instance_,
      FinalGuildShow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalGuildShow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalGuildShow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FinalGuildShow));
  EnterFinal_descriptor_ = file->message_type(38);
  static const int EnterFinal_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterFinal, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterFinal, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterFinal, isrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterFinal, bet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterFinal, lineup_),
  };
  EnterFinal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterFinal_descriptor_,
      EnterFinal::default_instance_,
      EnterFinal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterFinal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterFinal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterFinal));
  Bet_descriptor_ = file->message_type(39);
  static const int Bet_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bet, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bet, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bet, rank_),
  };
  Bet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Bet_descriptor_,
      Bet::default_instance_,
      Bet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Bet));
  Box_descriptor_ = file->message_type(40);
  static const int Box_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Box, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Box, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Box, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Box, nexttype_),
  };
  Box_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Box_descriptor_,
      Box::default_instance_,
      Box_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Box, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Box, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Box));
  RecordType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_guild_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildEnterInfo_descriptor_, &GuildEnterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildPlayer_descriptor_, &GuildPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRecordInfo_descriptor_, &GuildRecordInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRecord_descriptor_, &GuildRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildBossDamage_descriptor_, &GuildBossDamage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerDamage_descriptor_, &PlayerDamage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildApplyInfo_descriptor_, &GuildApplyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildBaseInfo_descriptor_, &GuildBaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildPlayers_descriptor_, &GuildPlayers::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildListInfo_descriptor_, &GuildListInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildDyInfo_descriptor_, &GuildDyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BossDamage_descriptor_, &BossDamage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildBossInfo_descriptor_, &GuildBossInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MillRobbery_descriptor_, &MillRobbery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MillMyInfo_descriptor_, &MillMyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MillOtherInfo_descriptor_, &MillOtherInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MillLvlInfo_descriptor_, &MillLvlInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DonationHistory_descriptor_, &DonationHistory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MillExpHistory_descriptor_, &MillExpHistory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModGuildInfo_descriptor_, &ModGuildInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DynIcon_descriptor_, &DynIcon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DynIconList_descriptor_, &DynIconList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterHall_descriptor_, &EnterHall::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LineupShow_descriptor_, &LineupShow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnemyInfoRequest_descriptor_, &EnemyInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnemyInfoReply_descriptor_, &EnemyInfoReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnemyInfo_descriptor_, &EnemyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnemyLineupShow_descriptor_, &EnemyLineupShow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankInfo_descriptor_, &RankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecordReply_descriptor_, &RecordReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Record_descriptor_, &Record::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatRecord_descriptor_, &ChatRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetLineup_descriptor_, &SetLineup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecordDetailReply_descriptor_, &RecordDetailReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecordDetail_descriptor_, &RecordDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroShow_descriptor_, &HeroShow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FinalRecord_descriptor_, &FinalRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FinalGuildShow_descriptor_, &FinalGuildShow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterFinal_descriptor_, &EnterFinal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Bet_descriptor_, &Bet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Box_descriptor_, &Box::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_guild_2eproto() {
  delete GuildEnterInfo::default_instance_;
  delete GuildEnterInfo_reflection_;
  delete GuildPlayer::default_instance_;
  delete GuildPlayer_reflection_;
  delete GuildRecordInfo::default_instance_;
  delete GuildRecordInfo_reflection_;
  delete GuildRecord::default_instance_;
  delete GuildRecord_reflection_;
  delete GuildBossDamage::default_instance_;
  delete GuildBossDamage_reflection_;
  delete PlayerDamage::default_instance_;
  delete PlayerDamage_reflection_;
  delete GuildApplyInfo::default_instance_;
  delete GuildApplyInfo_reflection_;
  delete GuildBaseInfo::default_instance_;
  delete GuildBaseInfo_reflection_;
  delete GuildPlayers::default_instance_;
  delete GuildPlayers_reflection_;
  delete GuildListInfo::default_instance_;
  delete GuildListInfo_reflection_;
  delete GuildDyInfo::default_instance_;
  delete GuildDyInfo_reflection_;
  delete BossDamage::default_instance_;
  delete BossDamage_reflection_;
  delete GuildBossInfo::default_instance_;
  delete GuildBossInfo_reflection_;
  delete MillRobbery::default_instance_;
  delete MillRobbery_reflection_;
  delete MillMyInfo::default_instance_;
  delete MillMyInfo_reflection_;
  delete MillOtherInfo::default_instance_;
  delete MillOtherInfo_reflection_;
  delete MillLvlInfo::default_instance_;
  delete MillLvlInfo_reflection_;
  delete DonationHistory::default_instance_;
  delete DonationHistory_reflection_;
  delete MillExpHistory::default_instance_;
  delete MillExpHistory_reflection_;
  delete ModGuildInfo::default_instance_;
  delete ModGuildInfo_reflection_;
  delete DynIcon::default_instance_;
  delete DynIcon_reflection_;
  delete DynIconList::default_instance_;
  delete DynIconList_reflection_;
  delete EnterHall::default_instance_;
  delete EnterHall_reflection_;
  delete LineupShow::default_instance_;
  delete LineupShow_reflection_;
  delete EnemyInfoRequest::default_instance_;
  delete EnemyInfoRequest_reflection_;
  delete EnemyInfoReply::default_instance_;
  delete EnemyInfoReply_reflection_;
  delete EnemyInfo::default_instance_;
  delete EnemyInfo_reflection_;
  delete EnemyLineupShow::default_instance_;
  delete EnemyLineupShow_reflection_;
  delete RankInfo::default_instance_;
  delete RankInfo_reflection_;
  delete RecordReply::default_instance_;
  delete RecordReply_reflection_;
  delete Record::default_instance_;
  delete Record_reflection_;
  delete ChatRecord::default_instance_;
  delete ChatRecord_reflection_;
  delete SetLineup::default_instance_;
  delete SetLineup_reflection_;
  delete RecordDetailReply::default_instance_;
  delete RecordDetailReply_reflection_;
  delete RecordDetail::default_instance_;
  delete RecordDetail_reflection_;
  delete HeroShow::default_instance_;
  delete HeroShow_reflection_;
  delete FinalRecord::default_instance_;
  delete FinalRecord_reflection_;
  delete FinalGuildShow::default_instance_;
  delete FinalGuildShow_reflection_;
  delete EnterFinal::default_instance_;
  delete EnterFinal_reflection_;
  delete Bet::default_instance_;
  delete Bet_reflection_;
  delete Box::default_instance_;
  delete Box_reflection_;
}

void protobuf_AddDesc_guild_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf::common::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013guild.proto\022\016protobuf.guild\032\014common.pr"
    "oto\"\307\003\n\016GuildEnterInfo\022+\n\004info\030\001 \001(\0132\035.p"
    "rotobuf.guild.GuildBaseInfo\0221\n\notherslis"
    "t\030\002 \003(\0132\035.protobuf.guild.MillOtherInfo\022\027"
    "\n\017robberyothercnt\030\003 \002(\005\022\027\n\017lastrefreshti"
    "me\030\004 \002(\003\022\030\n\020refreshattackcnt\030\005 \001(\005\022\032\n\022re"
    "freshfreecnttime\030\006 \001(\003\022\016\n\006bossid\030\007 \001(\005\022\r"
    "\n\005blood\030\010 \001(\005\022\020\n\010identity\030\t \001(\005\022\017\n\007milll"
    "vl\030\n \001(\005\022\017\n\007millexp\030\013 \001(\005\022\r\n\005isSet\030\014 \001(\010"
    "\022\016\n\006isJoin\030\r \001(\010\022\r\n\005state\030\016 \001(\005\022\022\n\nbattl"
    "eTime\030\017 \001(\005\022\021\n\tbattleBox\030\020 \001(\005\022/\n\006lineup"
    "\030\021 \001(\0132\037.protobuf.common.LineupTemplate\022"
    "\024\n\014isEntryFinal\030\022 \001(\010\"\344\001\n\013GuildPlayer\022\020\n"
    "\010playerid\030\001 \002(\t\022\022\n\nplayericon\030\002 \002(\t\022\022\n\np"
    "layername\030\003 \002(\t\022\r\n\005power\030\004 \001(\005\022\020\n\010identi"
    "ty\030\005 \001(\005\022\021\n\tentertime\030\006 \001(\003\022\025\n\rlastlogin"
    "time\030\007 \001(\003\022\021\n\tplayerlvl\030\010 \001(\005\022\021\n\theadFra"
    "me\030\t \001(\005\022\013\n\003exp\030\n \001(\005\022\020\n\010serverId\030\013 \001(\005\022"
    "\013\n\003sex\030\014 \001(\005\"B\n\017GuildRecordInfo\022/\n\nrecor"
    "dInfo\030\001 \003(\0132\033.protobuf.guild.GuildRecord"
    "\"l\n\013GuildRecord\022\014\n\004time\030\001 \002(\003\022.\n\nrecordT"
    "ype\030\002 \001(\0162\032.protobuf.guild.RecordType\022\017\n"
    "\007runName\030\003 \001(\t\022\016\n\006byName\030\004 \001(\t\"S\n\017GuildB"
    "ossDamage\022\016\n\006bossId\030\001 \001(\005\0220\n\nbossDamage\030"
    "\002 \003(\0132\034.protobuf.guild.PlayerDamage\"p\n\014P"
    "layerDamage\022\014\n\004name\030\001 \001(\t\022\014\n\004icon\030\002 \001(\t\022"
    "\020\n\010playerId\030\003 \001(\t\022\n\n\002lv\030\004 \001(\005\022\021\n\tattackC"
    "nt\030\005 \001(\005\022\023\n\013totalDamage\030\006 \001(\003\"A\n\016GuildAp"
    "plyInfo\022/\n\nplayerInfo\030\001 \003(\0132\033.protobuf.g"
    "uild.GuildPlayer\"\315\002\n\rGuildBaseInfo\022\017\n\007gu"
    "ildid\030\001 \001(\005\022\021\n\tguildname\030\002 \001(\t\022\021\n\tguildi"
    "con\030\003 \001(\t\022\016\n\006notice\030\004 \001(\t\022\022\n\nlimitGrade\030"
    "\005 \001(\005\022\024\n\014needapproval\030\006 \001(\010\022\013\n\003lvl\030\007 \001(\005"
    "\022\013\n\003exp\030\010 \001(\005\022\021\n\tplayercnt\030\t \001(\005\022\014\n\004rank"
    "\030\n \001(\005\022\021\n\tfinalRank\030\013 \001(\005\022\r\n\005index\030\014 \001(\005"
    "\022\022\n\nserverName\030\r \001(\t\022\n\n\002id\030\016 \001(\t\022\024\n\014yest"
    "erdayExp\030\017 \001(\005\022\020\n\010language\030\020 \001(\t\022\022\n\njoin"
    "Notice\030\021 \001(\t\022\022\n\nresidueExp\030\022 \001(\005\"m\n\014Guil"
    "dPlayers\022/\n\010baseinfo\030\001 \001(\0132\035.protobuf.gu"
    "ild.GuildBaseInfo\022,\n\007players\030\005 \003(\0132\033.pro"
    "tobuf.guild.GuildPlayer\"M\n\rGuildListInfo"
    "\022\016\n\006myrank\030\002 \001(\005\022,\n\005infos\030\001 \003(\0132\035.protob"
    "uf.guild.GuildBaseInfo\"X\n\013GuildDyInfo\022\016\n"
    "\006curexp\030\001 \002(\005\022\016\n\006curlvl\030\002 \002(\005\022)\n\005items\030\003"
    " \003(\0132\032.protobuf.common.KVint3232\"\307\001\n\nBos"
    "sDamage\022\020\n\010playerid\030\001 \002(\t\022\021\n\tattackcnt\030\002"
    " \001(\005\022\023\n\013totaldamage\030\003 \002(\003\022\020\n\010received\030\004 "
    "\001(\010\022\022\n\nplayername\030\005 \002(\t\022\022\n\nplayerhead\030\006 "
    "\002(\t\022\r\n\005power\030\007 \002(\005\022\021\n\tplayerlvl\030\010 \002(\005\022\020\n"
    "\010identity\030\t \001(\005\022\021\n\theadFrame\030\n \001(\005\"\305\001\n\rG"
    "uildBossInfo\022\030\n\020refreshattackcnt\030\001 \001(\005\022\032"
    "\n\022refreshfreecnttime\030\002 \001(\003\022\016\n\006bossid\030\003 \001"
    "(\005\022\r\n\005blood\030\004 \001(\005\022\016\n\006isOpen\030\005 \001(\010\0221\n\rpla"
    "yerdamages\030\006 \003(\0132\032.protobuf.guild.BossDa"
    "mage\022\017\n\007freeExp\030\007 \001(\005\022\013\n\003exp\030\010 \001(\005\"\342\001\n\013M"
    "illRobbery\022\020\n\010playerid\030\001 \002(\t\022\014\n\004time\030\002 \002"
    "(\003\022\017\n\007guildid\030\003 \002(\005\022\021\n\tguildname\030\004 \002(\t\022\022"
    "\n\nplayername\030\005 \002(\t\022\021\n\tplayerlvl\030\006 \002(\005\022\022\n"
    "\nplayerhead\030\007 \002(\t\022\016\n\006millid\030\010 \002(\005\022\017\n\007mil"
    "llvl\030\t \002(\005\022\r\n\005state\030\n \002(\005\022\021\n\trobberyId\030\013"
    " \002(\003\022\021\n\theadFrame\030\014 \001(\005\"\245\001\n\nMillMyInfo\022\016"
    "\n\006millid\030\001 \002(\005\022\017\n\007milllvl\030\005 \002(\005\022\026\n\016millF"
    "inishTime\030\002 \001(\003\022,\n\010received\030\003 \003(\0132\032.prot"
    "obuf.common.KVint3232\0220\n\013robberylist\030\004 \003"
    "(\0132\033.protobuf.guild.MillRobbery\"\252\001\n\rMill"
    "OtherInfo\022\020\n\010playerid\030\001 \001(\t\022\022\n\nplayernam"
    "e\030\002 \001(\t\0220\n\tguildinfo\030\003 \002(\0132\035.protobuf.gu"
    "ild.GuildBaseInfo\022\r\n\005power\030\004 \001(\005\022\016\n\006mill"
    "id\030\005 \001(\005\022\017\n\007milllvl\030\006 \001(\005\022\021\n\trobberyed\030\007"
    " \001(\010\"s\n\013MillLvlInfo\022\017\n\007milllvl\030\001 \002(\005\022\017\n\007"
    "millexp\030\002 \002(\005\022\021\n\tguildgold\030\004 \002(\003\022/\n\007hist"
    "ory\030\003 \003(\0132\036.protobuf.guild.MillExpHistor"
    "y\"B\n\017DonationHistory\022/\n\007history\030\001 \003(\0132\036."
    "protobuf.guild.MillExpHistory\"\230\001\n\016MillEx"
    "pHistory\022\020\n\010playerid\030\001 \002(\t\022\022\n\nplayername"
    "\030\002 \002(\t\022\014\n\004gold\030\003 \002(\003\022\014\n\004time\030\004 \002(\003\022\021\n\tpl"
    "ayerlvl\030\005 \002(\005\022\020\n\010identity\030\006 \002(\005\022\014\n\004head\030"
    "\007 \002(\t\022\021\n\theadFrame\030\010 \001(\005\"I\n\014ModGuildInfo"
    "\022\014\n\004type\030\001 \002(\005\022+\n\004info\030\002 \002(\0132\035.protobuf."
    "guild.GuildBaseInfo\"9\n\007DynIcon\022\014\n\004icon\030\001"
    " \002(\t\022\017\n\007outtime\030\002 \002(\003\022\017\n\007usetime\030\003 \002(\003\"5"
    "\n\013DynIconList\022&\n\005icons\030\001 \003(\0132\027.protobuf."
    "guild.DynIcon\"\351\001\n\tEnterHall\022\r\n\005state\030\001 \002"
    "(\005\022\014\n\004time\030\002 \002(\003\022\016\n\006isJoin\030\003 \002(\010\022\014\n\004rank"
    "\030\004 \001(\005\022\r\n\005score\030\005 \001(\005\022\016\n\006energy\030\006 \001(\005\022\022\n"
    "\nenergyTime\030\007 \001(\003\022*\n\006lineup\030\010 \003(\0132\032.prot"
    "obuf.guild.LineupShow\022.\n\014contribution\030\t "
    "\003(\0132\030.protobuf.guild.RankInfo\022\022\n\nisSetOt"
    "her\030\n \001(\010\"\200\001\n\nLineupShow\022\n\n\002id\030\001 \002(\t\022\014\n\004"
    "name\030\002 \002(\t\022\016\n\006isJoin\030\003 \002(\010\022\016\n\006isHide\030\004 \002"
    "(\010\022\r\n\005power\030\005 \002(\005\022)\n\005heros\030\006 \003(\0132\032.proto"
    "buf.common.KVint3232\"/\n\020EnemyInfoRequest"
    "\022\n\n\002id\030\001 \002(\t\022\017\n\007refresh\030\002 \002(\010\"]\n\016EnemyIn"
    "foReply\022\'\n\004info\030\001 \001(\0132\031.protobuf.guild.E"
    "nemyInfo\022\016\n\006energy\030\006 \001(\005\022\022\n\nenergyTime\030\007"
    " \001(\003\"\246\001\n\tEnemyInfo\022\014\n\004rank\030\001 \002(\005\022\r\n\005scor"
    "e\030\002 \002(\005\022\021\n\tguildname\030\003 \002(\t\022\021\n\tguildicon\030"
    "\004 \002(\t\022\022\n\nserverName\030\005 \002(\t\022/\n\006lineup\030\006 \003("
    "\0132\037.protobuf.guild.EnemyLineupShow\022\021\n\tfi"
    "nalRank\030\007 \001(\005\"Z\n\017EnemyLineupShow\022\014\n\004name"
    "\030\001 \002(\t\022\016\n\006isHide\030\002 \002(\010\022)\n\005heros\030\003 \003(\0132\032."
    "protobuf.common.KVint3232\"e\n\010RankInfo\022\n\n"
    "\002id\030\001 \002(\t\022\r\n\005level\030\002 \002(\005\022\014\n\004name\030\003 \002(\t\022\014"
    "\n\004head\030\004 \002(\t\022\021\n\theadFrame\030\005 \002(\005\022\017\n\007winTi"
    "me\030\006 \002(\005\"6\n\013RecordReply\022\'\n\007records\030\001 \003(\013"
    "2\026.protobuf.guild.Record\"p\n\006Record\022\n\n\002id"
    "\030\001 \002(\t\022\022\n\nserverName\030\002 \002(\t\022\014\n\004name\030\003 \002(\t"
    "\022\014\n\004icon\030\004 \002(\t\022\r\n\005score\030\005 \002(\005\022\014\n\004time\030\006 "
    "\002(\003\022\r\n\005isWin\030\007 \002(\010\"\323\001\n\nChatRecord\022\n\n\002id\030"
    "\001 \002(\t\022\024\n\014atServerName\030\002 \002(\t\022\016\n\006atName\030\003 "
    "\002(\t\022\016\n\006atIcon\030\004 \002(\t\022\024\n\014deServerName\030\005 \002("
    "\t\022\016\n\006deName\030\006 \002(\t\022\016\n\006deIcon\030\007 \002(\t\022\r\n\005sco"
    "re\030\010 \002(\005\022\014\n\004time\030\t \002(\003\022\r\n\005isWin\030\n \002(\010\022\017\n"
    "\007winTime\030\013 \002(\005\022\020\n\010failTime\030\014 \002(\005\"\'\n\tSetL"
    "ineup\022\013\n\003ids\030\001 \003(\t\022\r\n\005hides\030\002 \003(\t\"B\n\021Rec"
    "ordDetailReply\022-\n\007records\030\001 \003(\0132\034.protob"
    "uf.guild.RecordDetail\"\207\002\n\014RecordDetail\022\n"
    "\n\002id\030\001 \002(\t\022\014\n\004atLv\030\002 \002(\005\022\016\n\006atName\030\003 \002(\t"
    "\022\016\n\006atHead\030\004 \002(\t\022\023\n\013atHeadFrame\030\005 \002(\005\022\014\n"
    "\004deLv\030\006 \002(\005\022\016\n\006deName\030\007 \002(\t\022\016\n\006deHead\030\010 "
    "\002(\t\022\023\n\013deHeadFrame\030\t \002(\005\022\017\n\007atIsWin\030\n \002("
    "\010\022)\n\007atHeros\030\013 \003(\0132\030.protobuf.guild.Hero"
    "Show\022)\n\007deHeros\030\014 \003(\0132\030.protobuf.guild.H"
    "eroShow\"@\n\010HeroShow\022\r\n\005index\030\001 \002(\005\022\n\n\002id"
    "\030\002 \002(\005\022\n\n\002lv\030\003 \002(\005\022\r\n\005isDie\030\004 \002(\010\"\267\001\n\013Fi"
    "nalRecord\022\024\n\014atServerName\030\001 \002(\t\022\016\n\006atNam"
    "e\030\002 \002(\t\022\016\n\006atIcon\030\003 \002(\t\022\024\n\014deServerName\030"
    "\004 \002(\t\022\016\n\006deName\030\005 \002(\t\022\016\n\006deIcon\030\006 \002(\t\022\r\n"
    "\005isWin\030\007 \002(\010\022-\n\007records\030\010 \003(\0132\034.protobuf"
    ".guild.RecordDetail\"\177\n\016FinalGuildShow\022\n\n"
    "\002id\030\001 \002(\t\022\014\n\004name\030\002 \002(\t\022\014\n\004icon\030\003 \002(\t\022\022\n"
    "\nserverName\030\004 \002(\t\022\014\n\004rank\030\005 \002(\005\022\020\n\010lastR"
    "ank\030\006 \001(\005\022\021\n\tfinalRank\030\007 \001(\005\"\213\001\n\nEnterFi"
    "nal\022\r\n\005state\030\001 \002(\005\022\014\n\004time\030\002 \001(\003\022\016\n\006isRa"
    "nk\030\003 \001(\010\022 \n\003bet\030\004 \001(\0132\023.protobuf.guild.B"
    "et\022.\n\006lineup\030\005 \003(\0132\036.protobuf.guild.Fina"
    "lGuildShow\",\n\003Bet\022\n\n\002id\030\001 \002(\t\022\013\n\003num\030\002 \002"
    "(\005\022\014\n\004rank\030\003 \002(\005\"^\n\003Box\022)\n\005items\030\001 \003(\0132\032"
    ".protobuf.common.KVint3264\022\014\n\004type\030\002 \002(\005"
    "\022\014\n\004rank\030\003 \002(\005\022\020\n\010nextType\030\004 \002(\005*\227\001\n\nRec"
    "ordType\022\t\n\005CREAT\020\000\022\017\n\013MODIFY_ICON\020\001\022\017\n\013M"
    "ODIFY_NAME\020\002\022\010\n\004MAIL\020\003\022\010\n\004JOIN\020\004\022\010\n\004SIGN"
    "\020\005\022\010\n\004EXIT\020\006\022\013\n\007LIFTING\020\007\022\013\n\007APPOINT\020\010\022\014"
    "\n\010TRANSFER\020\t\022\014\n\010KICK_OUT\020\nB!\n\023xag.idgo.c"
    "ore.protoB\nGuildProto", 5781);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "guild.proto", &protobuf_RegisterTypes);
  GuildEnterInfo::default_instance_ = new GuildEnterInfo();
  GuildPlayer::default_instance_ = new GuildPlayer();
  GuildRecordInfo::default_instance_ = new GuildRecordInfo();
  GuildRecord::default_instance_ = new GuildRecord();
  GuildBossDamage::default_instance_ = new GuildBossDamage();
  PlayerDamage::default_instance_ = new PlayerDamage();
  GuildApplyInfo::default_instance_ = new GuildApplyInfo();
  GuildBaseInfo::default_instance_ = new GuildBaseInfo();
  GuildPlayers::default_instance_ = new GuildPlayers();
  GuildListInfo::default_instance_ = new GuildListInfo();
  GuildDyInfo::default_instance_ = new GuildDyInfo();
  BossDamage::default_instance_ = new BossDamage();
  GuildBossInfo::default_instance_ = new GuildBossInfo();
  MillRobbery::default_instance_ = new MillRobbery();
  MillMyInfo::default_instance_ = new MillMyInfo();
  MillOtherInfo::default_instance_ = new MillOtherInfo();
  MillLvlInfo::default_instance_ = new MillLvlInfo();
  DonationHistory::default_instance_ = new DonationHistory();
  MillExpHistory::default_instance_ = new MillExpHistory();
  ModGuildInfo::default_instance_ = new ModGuildInfo();
  DynIcon::default_instance_ = new DynIcon();
  DynIconList::default_instance_ = new DynIconList();
  EnterHall::default_instance_ = new EnterHall();
  LineupShow::default_instance_ = new LineupShow();
  EnemyInfoRequest::default_instance_ = new EnemyInfoRequest();
  EnemyInfoReply::default_instance_ = new EnemyInfoReply();
  EnemyInfo::default_instance_ = new EnemyInfo();
  EnemyLineupShow::default_instance_ = new EnemyLineupShow();
  RankInfo::default_instance_ = new RankInfo();
  RecordReply::default_instance_ = new RecordReply();
  Record::default_instance_ = new Record();
  ChatRecord::default_instance_ = new ChatRecord();
  SetLineup::default_instance_ = new SetLineup();
  RecordDetailReply::default_instance_ = new RecordDetailReply();
  RecordDetail::default_instance_ = new RecordDetail();
  HeroShow::default_instance_ = new HeroShow();
  FinalRecord::default_instance_ = new FinalRecord();
  FinalGuildShow::default_instance_ = new FinalGuildShow();
  EnterFinal::default_instance_ = new EnterFinal();
  Bet::default_instance_ = new Bet();
  Box::default_instance_ = new Box();
  GuildEnterInfo::default_instance_->InitAsDefaultInstance();
  GuildPlayer::default_instance_->InitAsDefaultInstance();
  GuildRecordInfo::default_instance_->InitAsDefaultInstance();
  GuildRecord::default_instance_->InitAsDefaultInstance();
  GuildBossDamage::default_instance_->InitAsDefaultInstance();
  PlayerDamage::default_instance_->InitAsDefaultInstance();
  GuildApplyInfo::default_instance_->InitAsDefaultInstance();
  GuildBaseInfo::default_instance_->InitAsDefaultInstance();
  GuildPlayers::default_instance_->InitAsDefaultInstance();
  GuildListInfo::default_instance_->InitAsDefaultInstance();
  GuildDyInfo::default_instance_->InitAsDefaultInstance();
  BossDamage::default_instance_->InitAsDefaultInstance();
  GuildBossInfo::default_instance_->InitAsDefaultInstance();
  MillRobbery::default_instance_->InitAsDefaultInstance();
  MillMyInfo::default_instance_->InitAsDefaultInstance();
  MillOtherInfo::default_instance_->InitAsDefaultInstance();
  MillLvlInfo::default_instance_->InitAsDefaultInstance();
  DonationHistory::default_instance_->InitAsDefaultInstance();
  MillExpHistory::default_instance_->InitAsDefaultInstance();
  ModGuildInfo::default_instance_->InitAsDefaultInstance();
  DynIcon::default_instance_->InitAsDefaultInstance();
  DynIconList::default_instance_->InitAsDefaultInstance();
  EnterHall::default_instance_->InitAsDefaultInstance();
  LineupShow::default_instance_->InitAsDefaultInstance();
  EnemyInfoRequest::default_instance_->InitAsDefaultInstance();
  EnemyInfoReply::default_instance_->InitAsDefaultInstance();
  EnemyInfo::default_instance_->InitAsDefaultInstance();
  EnemyLineupShow::default_instance_->InitAsDefaultInstance();
  RankInfo::default_instance_->InitAsDefaultInstance();
  RecordReply::default_instance_->InitAsDefaultInstance();
  Record::default_instance_->InitAsDefaultInstance();
  ChatRecord::default_instance_->InitAsDefaultInstance();
  SetLineup::default_instance_->InitAsDefaultInstance();
  RecordDetailReply::default_instance_->InitAsDefaultInstance();
  RecordDetail::default_instance_->InitAsDefaultInstance();
  HeroShow::default_instance_->InitAsDefaultInstance();
  FinalRecord::default_instance_->InitAsDefaultInstance();
  FinalGuildShow::default_instance_->InitAsDefaultInstance();
  EnterFinal::default_instance_->InitAsDefaultInstance();
  Bet::default_instance_->InitAsDefaultInstance();
  Box::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_guild_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_guild_2eproto {
  StaticDescriptorInitializer_guild_2eproto() {
    protobuf_AddDesc_guild_2eproto();
  }
} static_descriptor_initializer_guild_2eproto_;

const ::google::protobuf::EnumDescriptor* RecordType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordType_descriptor_;
}
bool RecordType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int GuildEnterInfo::kInfoFieldNumber;
const int GuildEnterInfo::kOtherslistFieldNumber;
const int GuildEnterInfo::kRobberyothercntFieldNumber;
const int GuildEnterInfo::kLastrefreshtimeFieldNumber;
const int GuildEnterInfo::kRefreshattackcntFieldNumber;
const int GuildEnterInfo::kRefreshfreecnttimeFieldNumber;
const int GuildEnterInfo::kBossidFieldNumber;
const int GuildEnterInfo::kBloodFieldNumber;
const int GuildEnterInfo::kIdentityFieldNumber;
const int GuildEnterInfo::kMilllvlFieldNumber;
const int GuildEnterInfo::kMillexpFieldNumber;
const int GuildEnterInfo::kIsSetFieldNumber;
const int GuildEnterInfo::kIsJoinFieldNumber;
const int GuildEnterInfo::kStateFieldNumber;
const int GuildEnterInfo::kBattleTimeFieldNumber;
const int GuildEnterInfo::kBattleBoxFieldNumber;
const int GuildEnterInfo::kLineupFieldNumber;
const int GuildEnterInfo::kIsEntryFinalFieldNumber;
#endif  // !_MSC_VER

GuildEnterInfo::GuildEnterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildEnterInfo::InitAsDefaultInstance() {
  info_ = const_cast< ::protobuf::guild::GuildBaseInfo*>(&::protobuf::guild::GuildBaseInfo::default_instance());
  lineup_ = const_cast< ::protobuf::common::LineupTemplate*>(&::protobuf::common::LineupTemplate::default_instance());
}

GuildEnterInfo::GuildEnterInfo(const GuildEnterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildEnterInfo::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  robberyothercnt_ = 0;
  lastrefreshtime_ = GOOGLE_LONGLONG(0);
  refreshattackcnt_ = 0;
  refreshfreecnttime_ = GOOGLE_LONGLONG(0);
  bossid_ = 0;
  blood_ = 0;
  identity_ = 0;
  milllvl_ = 0;
  millexp_ = 0;
  isset_ = false;
  isjoin_ = false;
  state_ = 0;
  battletime_ = 0;
  battlebox_ = 0;
  lineup_ = NULL;
  isentryfinal_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildEnterInfo::~GuildEnterInfo() {
  SharedDtor();
}

void GuildEnterInfo::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
    delete lineup_;
  }
}

void GuildEnterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildEnterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildEnterInfo_descriptor_;
}

const GuildEnterInfo& GuildEnterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();  return *default_instance_;
}

GuildEnterInfo* GuildEnterInfo::default_instance_ = NULL;

GuildEnterInfo* GuildEnterInfo::New() const {
  return new GuildEnterInfo;
}

void GuildEnterInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::protobuf::guild::GuildBaseInfo::Clear();
    }
    robberyothercnt_ = 0;
    lastrefreshtime_ = GOOGLE_LONGLONG(0);
    refreshattackcnt_ = 0;
    refreshfreecnttime_ = GOOGLE_LONGLONG(0);
    bossid_ = 0;
    blood_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    identity_ = 0;
    milllvl_ = 0;
    millexp_ = 0;
    isset_ = false;
    isjoin_ = false;
    state_ = 0;
    battletime_ = 0;
    battlebox_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_lineup()) {
      if (lineup_ != NULL) lineup_->::protobuf::common::LineupTemplate::Clear();
    }
    isentryfinal_ = false;
  }
  otherslist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildEnterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protobuf.guild.GuildBaseInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_otherslist;
        break;
      }
      
      // repeated .protobuf.guild.MillOtherInfo otherslist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_otherslist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_otherslist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_otherslist;
        if (input->ExpectTag(24)) goto parse_robberyothercnt;
        break;
      }
      
      // required int32 robberyothercnt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_robberyothercnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &robberyothercnt_)));
          set_has_robberyothercnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lastrefreshtime;
        break;
      }
      
      // required int64 lastrefreshtime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastrefreshtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lastrefreshtime_)));
          set_has_lastrefreshtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_refreshattackcnt;
        break;
      }
      
      // optional int32 refreshattackcnt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refreshattackcnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refreshattackcnt_)));
          set_has_refreshattackcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_refreshfreecnttime;
        break;
      }
      
      // optional int64 refreshfreecnttime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refreshfreecnttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &refreshfreecnttime_)));
          set_has_refreshfreecnttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bossid;
        break;
      }
      
      // optional int32 bossid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_blood;
        break;
      }
      
      // optional int32 blood = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blood_)));
          set_has_blood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_identity;
        break;
      }
      
      // optional int32 identity = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_identity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &identity_)));
          set_has_identity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_milllvl;
        break;
      }
      
      // optional int32 milllvl = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_milllvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &milllvl_)));
          set_has_milllvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_millexp;
        break;
      }
      
      // optional int32 millexp = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_millexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &millexp_)));
          set_has_millexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_isSet;
        break;
      }
      
      // optional bool isSet = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isSet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isset_)));
          set_has_isset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_isJoin;
        break;
      }
      
      // optional bool isJoin = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isJoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isjoin_)));
          set_has_isjoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_state;
        break;
      }
      
      // optional int32 state = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_battleTime;
        break;
      }
      
      // optional int32 battleTime = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battleTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battletime_)));
          set_has_battletime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_battleBox;
        break;
      }
      
      // optional int32 battleBox = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battleBox:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battlebox_)));
          set_has_battlebox();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_lineup;
        break;
      }
      
      // optional .protobuf.common.LineupTemplate lineup = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lineup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lineup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_isEntryFinal;
        break;
      }
      
      // optional bool isEntryFinal = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isEntryFinal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isentryfinal_)));
          set_has_isentryfinal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildEnterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protobuf.guild.GuildBaseInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }
  
  // repeated .protobuf.guild.MillOtherInfo otherslist = 2;
  for (int i = 0; i < this->otherslist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->otherslist(i), output);
  }
  
  // required int32 robberyothercnt = 3;
  if (has_robberyothercnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->robberyothercnt(), output);
  }
  
  // required int64 lastrefreshtime = 4;
  if (has_lastrefreshtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->lastrefreshtime(), output);
  }
  
  // optional int32 refreshattackcnt = 5;
  if (has_refreshattackcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->refreshattackcnt(), output);
  }
  
  // optional int64 refreshfreecnttime = 6;
  if (has_refreshfreecnttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->refreshfreecnttime(), output);
  }
  
  // optional int32 bossid = 7;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->bossid(), output);
  }
  
  // optional int32 blood = 8;
  if (has_blood()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->blood(), output);
  }
  
  // optional int32 identity = 9;
  if (has_identity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->identity(), output);
  }
  
  // optional int32 milllvl = 10;
  if (has_milllvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->milllvl(), output);
  }
  
  // optional int32 millexp = 11;
  if (has_millexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->millexp(), output);
  }
  
  // optional bool isSet = 12;
  if (has_isset()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->isset(), output);
  }
  
  // optional bool isJoin = 13;
  if (has_isjoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->isjoin(), output);
  }
  
  // optional int32 state = 14;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->state(), output);
  }
  
  // optional int32 battleTime = 15;
  if (has_battletime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->battletime(), output);
  }
  
  // optional int32 battleBox = 16;
  if (has_battlebox()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->battlebox(), output);
  }
  
  // optional .protobuf.common.LineupTemplate lineup = 17;
  if (has_lineup()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->lineup(), output);
  }
  
  // optional bool isEntryFinal = 18;
  if (has_isentryfinal()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->isentryfinal(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildEnterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protobuf.guild.GuildBaseInfo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }
  
  // repeated .protobuf.guild.MillOtherInfo otherslist = 2;
  for (int i = 0; i < this->otherslist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->otherslist(i), target);
  }
  
  // required int32 robberyothercnt = 3;
  if (has_robberyothercnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->robberyothercnt(), target);
  }
  
  // required int64 lastrefreshtime = 4;
  if (has_lastrefreshtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->lastrefreshtime(), target);
  }
  
  // optional int32 refreshattackcnt = 5;
  if (has_refreshattackcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->refreshattackcnt(), target);
  }
  
  // optional int64 refreshfreecnttime = 6;
  if (has_refreshfreecnttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->refreshfreecnttime(), target);
  }
  
  // optional int32 bossid = 7;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->bossid(), target);
  }
  
  // optional int32 blood = 8;
  if (has_blood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->blood(), target);
  }
  
  // optional int32 identity = 9;
  if (has_identity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->identity(), target);
  }
  
  // optional int32 milllvl = 10;
  if (has_milllvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->milllvl(), target);
  }
  
  // optional int32 millexp = 11;
  if (has_millexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->millexp(), target);
  }
  
  // optional bool isSet = 12;
  if (has_isset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->isset(), target);
  }
  
  // optional bool isJoin = 13;
  if (has_isjoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->isjoin(), target);
  }
  
  // optional int32 state = 14;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->state(), target);
  }
  
  // optional int32 battleTime = 15;
  if (has_battletime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->battletime(), target);
  }
  
  // optional int32 battleBox = 16;
  if (has_battlebox()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->battlebox(), target);
  }
  
  // optional .protobuf.common.LineupTemplate lineup = 17;
  if (has_lineup()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->lineup(), target);
  }
  
  // optional bool isEntryFinal = 18;
  if (has_isentryfinal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->isentryfinal(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildEnterInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protobuf.guild.GuildBaseInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
    // required int32 robberyothercnt = 3;
    if (has_robberyothercnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->robberyothercnt());
    }
    
    // required int64 lastrefreshtime = 4;
    if (has_lastrefreshtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lastrefreshtime());
    }
    
    // optional int32 refreshattackcnt = 5;
    if (has_refreshattackcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refreshattackcnt());
    }
    
    // optional int64 refreshfreecnttime = 6;
    if (has_refreshfreecnttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->refreshfreecnttime());
    }
    
    // optional int32 bossid = 7;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bossid());
    }
    
    // optional int32 blood = 8;
    if (has_blood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blood());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 identity = 9;
    if (has_identity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->identity());
    }
    
    // optional int32 milllvl = 10;
    if (has_milllvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->milllvl());
    }
    
    // optional int32 millexp = 11;
    if (has_millexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->millexp());
    }
    
    // optional bool isSet = 12;
    if (has_isset()) {
      total_size += 1 + 1;
    }
    
    // optional bool isJoin = 13;
    if (has_isjoin()) {
      total_size += 1 + 1;
    }
    
    // optional int32 state = 14;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }
    
    // optional int32 battleTime = 15;
    if (has_battletime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battletime());
    }
    
    // optional int32 battleBox = 16;
    if (has_battlebox()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battlebox());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .protobuf.common.LineupTemplate lineup = 17;
    if (has_lineup()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lineup());
    }
    
    // optional bool isEntryFinal = 18;
    if (has_isentryfinal()) {
      total_size += 2 + 1;
    }
    
  }
  // repeated .protobuf.guild.MillOtherInfo otherslist = 2;
  total_size += 1 * this->otherslist_size();
  for (int i = 0; i < this->otherslist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->otherslist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildEnterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildEnterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildEnterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildEnterInfo::MergeFrom(const GuildEnterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  otherslist_.MergeFrom(from.otherslist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::protobuf::guild::GuildBaseInfo::MergeFrom(from.info());
    }
    if (from.has_robberyothercnt()) {
      set_robberyothercnt(from.robberyothercnt());
    }
    if (from.has_lastrefreshtime()) {
      set_lastrefreshtime(from.lastrefreshtime());
    }
    if (from.has_refreshattackcnt()) {
      set_refreshattackcnt(from.refreshattackcnt());
    }
    if (from.has_refreshfreecnttime()) {
      set_refreshfreecnttime(from.refreshfreecnttime());
    }
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_blood()) {
      set_blood(from.blood());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_identity()) {
      set_identity(from.identity());
    }
    if (from.has_milllvl()) {
      set_milllvl(from.milllvl());
    }
    if (from.has_millexp()) {
      set_millexp(from.millexp());
    }
    if (from.has_isset()) {
      set_isset(from.isset());
    }
    if (from.has_isjoin()) {
      set_isjoin(from.isjoin());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_battletime()) {
      set_battletime(from.battletime());
    }
    if (from.has_battlebox()) {
      set_battlebox(from.battlebox());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_lineup()) {
      mutable_lineup()->::protobuf::common::LineupTemplate::MergeFrom(from.lineup());
    }
    if (from.has_isentryfinal()) {
      set_isentryfinal(from.isentryfinal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildEnterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildEnterInfo::CopyFrom(const GuildEnterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildEnterInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;
  
  for (int i = 0; i < otherslist_size(); i++) {
    if (!this->otherslist(i).IsInitialized()) return false;
  }
  if (has_lineup()) {
    if (!this->lineup().IsInitialized()) return false;
  }
  return true;
}

void GuildEnterInfo::Swap(GuildEnterInfo* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    otherslist_.Swap(&other->otherslist_);
    std::swap(robberyothercnt_, other->robberyothercnt_);
    std::swap(lastrefreshtime_, other->lastrefreshtime_);
    std::swap(refreshattackcnt_, other->refreshattackcnt_);
    std::swap(refreshfreecnttime_, other->refreshfreecnttime_);
    std::swap(bossid_, other->bossid_);
    std::swap(blood_, other->blood_);
    std::swap(identity_, other->identity_);
    std::swap(milllvl_, other->milllvl_);
    std::swap(millexp_, other->millexp_);
    std::swap(isset_, other->isset_);
    std::swap(isjoin_, other->isjoin_);
    std::swap(state_, other->state_);
    std::swap(battletime_, other->battletime_);
    std::swap(battlebox_, other->battlebox_);
    std::swap(lineup_, other->lineup_);
    std::swap(isentryfinal_, other->isentryfinal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildEnterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildEnterInfo_descriptor_;
  metadata.reflection = GuildEnterInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildPlayer::kPlayeridFieldNumber;
const int GuildPlayer::kPlayericonFieldNumber;
const int GuildPlayer::kPlayernameFieldNumber;
const int GuildPlayer::kPowerFieldNumber;
const int GuildPlayer::kIdentityFieldNumber;
const int GuildPlayer::kEntertimeFieldNumber;
const int GuildPlayer::kLastlogintimeFieldNumber;
const int GuildPlayer::kPlayerlvlFieldNumber;
const int GuildPlayer::kHeadFrameFieldNumber;
const int GuildPlayer::kExpFieldNumber;
const int GuildPlayer::kServerIdFieldNumber;
const int GuildPlayer::kSexFieldNumber;
#endif  // !_MSC_VER

GuildPlayer::GuildPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildPlayer::InitAsDefaultInstance() {
}

GuildPlayer::GuildPlayer(const GuildPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildPlayer::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playericon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  power_ = 0;
  identity_ = 0;
  entertime_ = GOOGLE_LONGLONG(0);
  lastlogintime_ = GOOGLE_LONGLONG(0);
  playerlvl_ = 0;
  headframe_ = 0;
  exp_ = 0;
  serverid_ = 0;
  sex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildPlayer::~GuildPlayer() {
  SharedDtor();
}

void GuildPlayer::SharedDtor() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (playericon_ != &::google::protobuf::internal::kEmptyString) {
    delete playericon_;
  }
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (this != default_instance_) {
  }
}

void GuildPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildPlayer_descriptor_;
}

const GuildPlayer& GuildPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();  return *default_instance_;
}

GuildPlayer* GuildPlayer::default_instance_ = NULL;

GuildPlayer* GuildPlayer::New() const {
  return new GuildPlayer;
}

void GuildPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    if (has_playericon()) {
      if (playericon_ != &::google::protobuf::internal::kEmptyString) {
        playericon_->clear();
      }
    }
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
    power_ = 0;
    identity_ = 0;
    entertime_ = GOOGLE_LONGLONG(0);
    lastlogintime_ = GOOGLE_LONGLONG(0);
    playerlvl_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    headframe_ = 0;
    exp_ = 0;
    serverid_ = 0;
    sex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playericon;
        break;
      }
      
      // required string playericon = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playericon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playericon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playericon().data(), this->playericon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_playername;
        break;
      }
      
      // required string playername = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_power;
        break;
      }
      
      // optional int32 power = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_identity;
        break;
      }
      
      // optional int32 identity = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_identity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &identity_)));
          set_has_identity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_entertime;
        break;
      }
      
      // optional int64 entertime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entertime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &entertime_)));
          set_has_entertime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_lastlogintime;
        break;
      }
      
      // optional int64 lastlogintime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastlogintime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lastlogintime_)));
          set_has_lastlogintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_playerlvl;
        break;
      }
      
      // optional int32 playerlvl = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerlvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerlvl_)));
          set_has_playerlvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_headFrame;
        break;
      }
      
      // optional int32 headFrame = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headFrame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headframe_)));
          set_has_headframe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_exp;
        break;
      }
      
      // optional int32 exp = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_serverId;
        break;
      }
      
      // optional int32 serverId = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_sex;
        break;
      }
      
      // optional int32 sex = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->playerid(), output);
  }
  
  // required string playericon = 2;
  if (has_playericon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playericon().data(), this->playericon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->playericon(), output);
  }
  
  // required string playername = 3;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->playername(), output);
  }
  
  // optional int32 power = 4;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->power(), output);
  }
  
  // optional int32 identity = 5;
  if (has_identity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->identity(), output);
  }
  
  // optional int64 entertime = 6;
  if (has_entertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->entertime(), output);
  }
  
  // optional int64 lastlogintime = 7;
  if (has_lastlogintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->lastlogintime(), output);
  }
  
  // optional int32 playerlvl = 8;
  if (has_playerlvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->playerlvl(), output);
  }
  
  // optional int32 headFrame = 9;
  if (has_headframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->headframe(), output);
  }
  
  // optional int32 exp = 10;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->exp(), output);
  }
  
  // optional int32 serverId = 11;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->serverid(), output);
  }
  
  // optional int32 sex = 12;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->sex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playerid(), target);
  }
  
  // required string playericon = 2;
  if (has_playericon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playericon().data(), this->playericon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playericon(), target);
  }
  
  // required string playername = 3;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->playername(), target);
  }
  
  // optional int32 power = 4;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->power(), target);
  }
  
  // optional int32 identity = 5;
  if (has_identity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->identity(), target);
  }
  
  // optional int64 entertime = 6;
  if (has_entertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->entertime(), target);
  }
  
  // optional int64 lastlogintime = 7;
  if (has_lastlogintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->lastlogintime(), target);
  }
  
  // optional int32 playerlvl = 8;
  if (has_playerlvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->playerlvl(), target);
  }
  
  // optional int32 headFrame = 9;
  if (has_headframe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->headframe(), target);
  }
  
  // optional int32 exp = 10;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->exp(), target);
  }
  
  // optional int32 serverId = 11;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->serverid(), target);
  }
  
  // optional int32 sex = 12;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->sex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildPlayer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }
    
    // required string playericon = 2;
    if (has_playericon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playericon());
    }
    
    // required string playername = 3;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }
    
    // optional int32 power = 4;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }
    
    // optional int32 identity = 5;
    if (has_identity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->identity());
    }
    
    // optional int64 entertime = 6;
    if (has_entertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->entertime());
    }
    
    // optional int64 lastlogintime = 7;
    if (has_lastlogintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lastlogintime());
    }
    
    // optional int32 playerlvl = 8;
    if (has_playerlvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerlvl());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 headFrame = 9;
    if (has_headframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headframe());
    }
    
    // optional int32 exp = 10;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
    // optional int32 serverId = 11;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }
    
    // optional int32 sex = 12;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildPlayer::MergeFrom(const GuildPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_playericon()) {
      set_playericon(from.playericon());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_identity()) {
      set_identity(from.identity());
    }
    if (from.has_entertime()) {
      set_entertime(from.entertime());
    }
    if (from.has_lastlogintime()) {
      set_lastlogintime(from.lastlogintime());
    }
    if (from.has_playerlvl()) {
      set_playerlvl(from.playerlvl());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_headframe()) {
      set_headframe(from.headframe());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildPlayer::CopyFrom(const GuildPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildPlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void GuildPlayer::Swap(GuildPlayer* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(playericon_, other->playericon_);
    std::swap(playername_, other->playername_);
    std::swap(power_, other->power_);
    std::swap(identity_, other->identity_);
    std::swap(entertime_, other->entertime_);
    std::swap(lastlogintime_, other->lastlogintime_);
    std::swap(playerlvl_, other->playerlvl_);
    std::swap(headframe_, other->headframe_);
    std::swap(exp_, other->exp_);
    std::swap(serverid_, other->serverid_);
    std::swap(sex_, other->sex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildPlayer_descriptor_;
  metadata.reflection = GuildPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRecordInfo::kRecordInfoFieldNumber;
#endif  // !_MSC_VER

GuildRecordInfo::GuildRecordInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRecordInfo::InitAsDefaultInstance() {
}

GuildRecordInfo::GuildRecordInfo(const GuildRecordInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRecordInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRecordInfo::~GuildRecordInfo() {
  SharedDtor();
}

void GuildRecordInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildRecordInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRecordInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRecordInfo_descriptor_;
}

const GuildRecordInfo& GuildRecordInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();  return *default_instance_;
}

GuildRecordInfo* GuildRecordInfo::default_instance_ = NULL;

GuildRecordInfo* GuildRecordInfo::New() const {
  return new GuildRecordInfo;
}

void GuildRecordInfo::Clear() {
  recordinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRecordInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.guild.GuildRecord recordInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recordInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recordinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_recordInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildRecordInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.guild.GuildRecord recordInfo = 1;
  for (int i = 0; i < this->recordinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->recordinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRecordInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.guild.GuildRecord recordInfo = 1;
  for (int i = 0; i < this->recordinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->recordinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRecordInfo::ByteSize() const {
  int total_size = 0;
  
  // repeated .protobuf.guild.GuildRecord recordInfo = 1;
  total_size += 1 * this->recordinfo_size();
  for (int i = 0; i < this->recordinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recordinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRecordInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRecordInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRecordInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRecordInfo::MergeFrom(const GuildRecordInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  recordinfo_.MergeFrom(from.recordinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRecordInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRecordInfo::CopyFrom(const GuildRecordInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRecordInfo::IsInitialized() const {
  
  for (int i = 0; i < recordinfo_size(); i++) {
    if (!this->recordinfo(i).IsInitialized()) return false;
  }
  return true;
}

void GuildRecordInfo::Swap(GuildRecordInfo* other) {
  if (other != this) {
    recordinfo_.Swap(&other->recordinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRecordInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRecordInfo_descriptor_;
  metadata.reflection = GuildRecordInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRecord::kTimeFieldNumber;
const int GuildRecord::kRecordTypeFieldNumber;
const int GuildRecord::kRunNameFieldNumber;
const int GuildRecord::kByNameFieldNumber;
#endif  // !_MSC_VER

GuildRecord::GuildRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRecord::InitAsDefaultInstance() {
}

GuildRecord::GuildRecord(const GuildRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRecord::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  recordtype_ = 0;
  runname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  byname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRecord::~GuildRecord() {
  SharedDtor();
}

void GuildRecord::SharedDtor() {
  if (runname_ != &::google::protobuf::internal::kEmptyString) {
    delete runname_;
  }
  if (byname_ != &::google::protobuf::internal::kEmptyString) {
    delete byname_;
  }
  if (this != default_instance_) {
  }
}

void GuildRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRecord_descriptor_;
}

const GuildRecord& GuildRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();  return *default_instance_;
}

GuildRecord* GuildRecord::default_instance_ = NULL;

GuildRecord* GuildRecord::New() const {
  return new GuildRecord;
}

void GuildRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = GOOGLE_LONGLONG(0);
    recordtype_ = 0;
    if (has_runname()) {
      if (runname_ != &::google::protobuf::internal::kEmptyString) {
        runname_->clear();
      }
    }
    if (has_byname()) {
      if (byname_ != &::google::protobuf::internal::kEmptyString) {
        byname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_recordType;
        break;
      }
      
      // optional .protobuf.guild.RecordType recordType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recordType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protobuf::guild::RecordType_IsValid(value)) {
            set_recordtype(static_cast< protobuf::guild::RecordType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_runName;
        break;
      }
      
      // optional string runName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_runName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_runname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->runname().data(), this->runname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_byName;
        break;
      }
      
      // optional string byName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_byName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_byname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->byname().data(), this->byname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }
  
  // optional .protobuf.guild.RecordType recordType = 2;
  if (has_recordtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->recordtype(), output);
  }
  
  // optional string runName = 3;
  if (has_runname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->runname().data(), this->runname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->runname(), output);
  }
  
  // optional string byName = 4;
  if (has_byname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->byname().data(), this->byname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->byname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }
  
  // optional .protobuf.guild.RecordType recordType = 2;
  if (has_recordtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->recordtype(), target);
  }
  
  // optional string runName = 3;
  if (has_runname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->runname().data(), this->runname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->runname(), target);
  }
  
  // optional string byName = 4;
  if (has_byname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->byname().data(), this->byname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->byname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRecord::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }
    
    // optional .protobuf.guild.RecordType recordType = 2;
    if (has_recordtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->recordtype());
    }
    
    // optional string runName = 3;
    if (has_runname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->runname());
    }
    
    // optional string byName = 4;
    if (has_byname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->byname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRecord::MergeFrom(const GuildRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_recordtype()) {
      set_recordtype(from.recordtype());
    }
    if (from.has_runname()) {
      set_runname(from.runname());
    }
    if (from.has_byname()) {
      set_byname(from.byname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRecord::CopyFrom(const GuildRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GuildRecord::Swap(GuildRecord* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(recordtype_, other->recordtype_);
    std::swap(runname_, other->runname_);
    std::swap(byname_, other->byname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRecord_descriptor_;
  metadata.reflection = GuildRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildBossDamage::kBossIdFieldNumber;
const int GuildBossDamage::kBossDamageFieldNumber;
#endif  // !_MSC_VER

GuildBossDamage::GuildBossDamage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildBossDamage::InitAsDefaultInstance() {
}

GuildBossDamage::GuildBossDamage(const GuildBossDamage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildBossDamage::SharedCtor() {
  _cached_size_ = 0;
  bossid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildBossDamage::~GuildBossDamage() {
  SharedDtor();
}

void GuildBossDamage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildBossDamage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildBossDamage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildBossDamage_descriptor_;
}

const GuildBossDamage& GuildBossDamage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();  return *default_instance_;
}

GuildBossDamage* GuildBossDamage::default_instance_ = NULL;

GuildBossDamage* GuildBossDamage::New() const {
  return new GuildBossDamage;
}

void GuildBossDamage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bossid_ = 0;
  }
  bossdamage_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildBossDamage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bossId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bossDamage;
        break;
      }
      
      // repeated .protobuf.guild.PlayerDamage bossDamage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bossDamage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bossdamage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bossDamage;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildBossDamage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 bossId = 1;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bossid(), output);
  }
  
  // repeated .protobuf.guild.PlayerDamage bossDamage = 2;
  for (int i = 0; i < this->bossdamage_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bossdamage(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildBossDamage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 bossId = 1;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bossid(), target);
  }
  
  // repeated .protobuf.guild.PlayerDamage bossDamage = 2;
  for (int i = 0; i < this->bossdamage_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bossdamage(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildBossDamage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bossId = 1;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bossid());
    }
    
  }
  // repeated .protobuf.guild.PlayerDamage bossDamage = 2;
  total_size += 1 * this->bossdamage_size();
  for (int i = 0; i < this->bossdamage_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bossdamage(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildBossDamage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildBossDamage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildBossDamage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildBossDamage::MergeFrom(const GuildBossDamage& from) {
  GOOGLE_CHECK_NE(&from, this);
  bossdamage_.MergeFrom(from.bossdamage_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildBossDamage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildBossDamage::CopyFrom(const GuildBossDamage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildBossDamage::IsInitialized() const {
  
  return true;
}

void GuildBossDamage::Swap(GuildBossDamage* other) {
  if (other != this) {
    std::swap(bossid_, other->bossid_);
    bossdamage_.Swap(&other->bossdamage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildBossDamage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildBossDamage_descriptor_;
  metadata.reflection = GuildBossDamage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerDamage::kNameFieldNumber;
const int PlayerDamage::kIconFieldNumber;
const int PlayerDamage::kPlayerIdFieldNumber;
const int PlayerDamage::kLvFieldNumber;
const int PlayerDamage::kAttackCntFieldNumber;
const int PlayerDamage::kTotalDamageFieldNumber;
#endif  // !_MSC_VER

PlayerDamage::PlayerDamage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerDamage::InitAsDefaultInstance() {
}

PlayerDamage::PlayerDamage(const PlayerDamage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerDamage::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lv_ = 0;
  attackcnt_ = 0;
  totaldamage_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerDamage::~PlayerDamage() {
  SharedDtor();
}

void PlayerDamage::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (this != default_instance_) {
  }
}

void PlayerDamage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerDamage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerDamage_descriptor_;
}

const PlayerDamage& PlayerDamage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();  return *default_instance_;
}

PlayerDamage* PlayerDamage::default_instance_ = NULL;

PlayerDamage* PlayerDamage::New() const {
  return new PlayerDamage;
}

void PlayerDamage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    lv_ = 0;
    attackcnt_ = 0;
    totaldamage_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerDamage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_icon;
        break;
      }
      
      // optional string icon = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_playerId;
        break;
      }
      
      // optional string playerId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lv;
        break;
      }
      
      // optional int32 lv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_attackCnt;
        break;
      }
      
      // optional int32 attackCnt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attackCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attackcnt_)));
          set_has_attackcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_totalDamage;
        break;
      }
      
      // optional int64 totalDamage = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalDamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totaldamage_)));
          set_has_totaldamage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerDamage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional string icon = 2;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->icon(), output);
  }
  
  // optional string playerId = 3;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->playerid(), output);
  }
  
  // optional int32 lv = 4;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lv(), output);
  }
  
  // optional int32 attackCnt = 5;
  if (has_attackcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->attackcnt(), output);
  }
  
  // optional int64 totalDamage = 6;
  if (has_totaldamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->totaldamage(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerDamage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional string icon = 2;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->icon(), target);
  }
  
  // optional string playerId = 3;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->playerid(), target);
  }
  
  // optional int32 lv = 4;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lv(), target);
  }
  
  // optional int32 attackCnt = 5;
  if (has_attackcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->attackcnt(), target);
  }
  
  // optional int64 totalDamage = 6;
  if (has_totaldamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->totaldamage(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerDamage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string icon = 2;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }
    
    // optional string playerId = 3;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }
    
    // optional int32 lv = 4;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }
    
    // optional int32 attackCnt = 5;
    if (has_attackcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attackcnt());
    }
    
    // optional int64 totalDamage = 6;
    if (has_totaldamage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->totaldamage());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerDamage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerDamage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerDamage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerDamage::MergeFrom(const PlayerDamage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_attackcnt()) {
      set_attackcnt(from.attackcnt());
    }
    if (from.has_totaldamage()) {
      set_totaldamage(from.totaldamage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerDamage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerDamage::CopyFrom(const PlayerDamage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerDamage::IsInitialized() const {
  
  return true;
}

void PlayerDamage::Swap(PlayerDamage* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(icon_, other->icon_);
    std::swap(playerid_, other->playerid_);
    std::swap(lv_, other->lv_);
    std::swap(attackcnt_, other->attackcnt_);
    std::swap(totaldamage_, other->totaldamage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerDamage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerDamage_descriptor_;
  metadata.reflection = PlayerDamage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildApplyInfo::kPlayerInfoFieldNumber;
#endif  // !_MSC_VER

GuildApplyInfo::GuildApplyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildApplyInfo::InitAsDefaultInstance() {
}

GuildApplyInfo::GuildApplyInfo(const GuildApplyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildApplyInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildApplyInfo::~GuildApplyInfo() {
  SharedDtor();
}

void GuildApplyInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildApplyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildApplyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildApplyInfo_descriptor_;
}

const GuildApplyInfo& GuildApplyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();  return *default_instance_;
}

GuildApplyInfo* GuildApplyInfo::default_instance_ = NULL;

GuildApplyInfo* GuildApplyInfo::New() const {
  return new GuildApplyInfo;
}

void GuildApplyInfo::Clear() {
  playerinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildApplyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.guild.GuildPlayer playerInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playerinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_playerInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildApplyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.guild.GuildPlayer playerInfo = 1;
  for (int i = 0; i < this->playerinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->playerinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildApplyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.guild.GuildPlayer playerInfo = 1;
  for (int i = 0; i < this->playerinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->playerinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildApplyInfo::ByteSize() const {
  int total_size = 0;
  
  // repeated .protobuf.guild.GuildPlayer playerInfo = 1;
  total_size += 1 * this->playerinfo_size();
  for (int i = 0; i < this->playerinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildApplyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildApplyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildApplyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildApplyInfo::MergeFrom(const GuildApplyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerinfo_.MergeFrom(from.playerinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildApplyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildApplyInfo::CopyFrom(const GuildApplyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildApplyInfo::IsInitialized() const {
  
  for (int i = 0; i < playerinfo_size(); i++) {
    if (!this->playerinfo(i).IsInitialized()) return false;
  }
  return true;
}

void GuildApplyInfo::Swap(GuildApplyInfo* other) {
  if (other != this) {
    playerinfo_.Swap(&other->playerinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildApplyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildApplyInfo_descriptor_;
  metadata.reflection = GuildApplyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildBaseInfo::kGuildidFieldNumber;
const int GuildBaseInfo::kGuildnameFieldNumber;
const int GuildBaseInfo::kGuildiconFieldNumber;
const int GuildBaseInfo::kNoticeFieldNumber;
const int GuildBaseInfo::kLimitGradeFieldNumber;
const int GuildBaseInfo::kNeedapprovalFieldNumber;
const int GuildBaseInfo::kLvlFieldNumber;
const int GuildBaseInfo::kExpFieldNumber;
const int GuildBaseInfo::kPlayercntFieldNumber;
const int GuildBaseInfo::kRankFieldNumber;
const int GuildBaseInfo::kFinalRankFieldNumber;
const int GuildBaseInfo::kIndexFieldNumber;
const int GuildBaseInfo::kServerNameFieldNumber;
const int GuildBaseInfo::kIdFieldNumber;
const int GuildBaseInfo::kYesterdayExpFieldNumber;
const int GuildBaseInfo::kLanguageFieldNumber;
const int GuildBaseInfo::kJoinNoticeFieldNumber;
const int GuildBaseInfo::kResidueExpFieldNumber;
#endif  // !_MSC_VER

GuildBaseInfo::GuildBaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildBaseInfo::InitAsDefaultInstance() {
}

GuildBaseInfo::GuildBaseInfo(const GuildBaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildBaseInfo::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = 0;
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guildicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  limitgrade_ = 0;
  needapproval_ = false;
  lvl_ = 0;
  exp_ = 0;
  playercnt_ = 0;
  rank_ = 0;
  finalrank_ = 0;
  index_ = 0;
  servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  yesterdayexp_ = 0;
  language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  joinnotice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  residueexp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildBaseInfo::~GuildBaseInfo() {
  SharedDtor();
}

void GuildBaseInfo::SharedDtor() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (guildicon_ != &::google::protobuf::internal::kEmptyString) {
    delete guildicon_;
  }
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    delete servername_;
  }
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (language_ != &::google::protobuf::internal::kEmptyString) {
    delete language_;
  }
  if (joinnotice_ != &::google::protobuf::internal::kEmptyString) {
    delete joinnotice_;
  }
  if (this != default_instance_) {
  }
}

void GuildBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildBaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildBaseInfo_descriptor_;
}

const GuildBaseInfo& GuildBaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();  return *default_instance_;
}

GuildBaseInfo* GuildBaseInfo::default_instance_ = NULL;

GuildBaseInfo* GuildBaseInfo::New() const {
  return new GuildBaseInfo;
}

void GuildBaseInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = 0;
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
    if (has_guildicon()) {
      if (guildicon_ != &::google::protobuf::internal::kEmptyString) {
        guildicon_->clear();
      }
    }
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
    limitgrade_ = 0;
    needapproval_ = false;
    lvl_ = 0;
    exp_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    playercnt_ = 0;
    rank_ = 0;
    finalrank_ = 0;
    index_ = 0;
    if (has_servername()) {
      if (servername_ != &::google::protobuf::internal::kEmptyString) {
        servername_->clear();
      }
    }
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    yesterdayexp_ = 0;
    if (has_language()) {
      if (language_ != &::google::protobuf::internal::kEmptyString) {
        language_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_joinnotice()) {
      if (joinnotice_ != &::google::protobuf::internal::kEmptyString) {
        joinnotice_->clear();
      }
    }
    residueexp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 guildid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_guildname;
        break;
      }
      
      // optional string guildname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_guildicon;
        break;
      }
      
      // optional string guildicon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildicon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildicon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildicon().data(), this->guildicon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_notice;
        break;
      }
      
      // optional string notice = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notice().data(), this->notice().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_limitGrade;
        break;
      }
      
      // optional int32 limitGrade = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limitGrade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limitgrade_)));
          set_has_limitgrade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_needapproval;
        break;
      }
      
      // optional bool needapproval = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needapproval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needapproval_)));
          set_has_needapproval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_lvl;
        break;
      }
      
      // optional int32 lvl = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lvl_)));
          set_has_lvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_exp;
        break;
      }
      
      // optional int32 exp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_playercnt;
        break;
      }
      
      // optional int32 playercnt = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playercnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playercnt_)));
          set_has_playercnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_rank;
        break;
      }
      
      // optional int32 rank = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_finalRank;
        break;
      }
      
      // optional int32 finalRank = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finalRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &finalrank_)));
          set_has_finalrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_index;
        break;
      }
      
      // optional int32 index = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_serverName;
        break;
      }
      
      // optional string serverName = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serverName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->servername().data(), this->servername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_id;
        break;
      }
      
      // optional string id = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_yesterdayExp;
        break;
      }
      
      // optional int32 yesterdayExp = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yesterdayExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yesterdayexp_)));
          set_has_yesterdayexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_language;
        break;
      }
      
      // optional string language = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_joinNotice;
        break;
      }
      
      // optional string joinNotice = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_joinNotice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_joinnotice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->joinnotice().data(), this->joinnotice().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_residueExp;
        break;
      }
      
      // optional int32 residueExp = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_residueExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &residueexp_)));
          set_has_residueexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 guildid = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->guildid(), output);
  }
  
  // optional string guildname = 2;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->guildname(), output);
  }
  
  // optional string guildicon = 3;
  if (has_guildicon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildicon().data(), this->guildicon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->guildicon(), output);
  }
  
  // optional string notice = 4;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->notice(), output);
  }
  
  // optional int32 limitGrade = 5;
  if (has_limitgrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->limitgrade(), output);
  }
  
  // optional bool needapproval = 6;
  if (has_needapproval()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->needapproval(), output);
  }
  
  // optional int32 lvl = 7;
  if (has_lvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->lvl(), output);
  }
  
  // optional int32 exp = 8;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->exp(), output);
  }
  
  // optional int32 playercnt = 9;
  if (has_playercnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->playercnt(), output);
  }
  
  // optional int32 rank = 10;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->rank(), output);
  }
  
  // optional int32 finalRank = 11;
  if (has_finalrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->finalrank(), output);
  }
  
  // optional int32 index = 12;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->index(), output);
  }
  
  // optional string serverName = 13;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->servername(), output);
  }
  
  // optional string id = 14;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->id(), output);
  }
  
  // optional int32 yesterdayExp = 15;
  if (has_yesterdayexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->yesterdayexp(), output);
  }
  
  // optional string language = 16;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->language(), output);
  }
  
  // optional string joinNotice = 17;
  if (has_joinnotice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->joinnotice().data(), this->joinnotice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->joinnotice(), output);
  }
  
  // optional int32 residueExp = 18;
  if (has_residueexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->residueexp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildBaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 guildid = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->guildid(), target);
  }
  
  // optional string guildname = 2;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->guildname(), target);
  }
  
  // optional string guildicon = 3;
  if (has_guildicon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildicon().data(), this->guildicon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->guildicon(), target);
  }
  
  // optional string notice = 4;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->notice(), target);
  }
  
  // optional int32 limitGrade = 5;
  if (has_limitgrade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->limitgrade(), target);
  }
  
  // optional bool needapproval = 6;
  if (has_needapproval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->needapproval(), target);
  }
  
  // optional int32 lvl = 7;
  if (has_lvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->lvl(), target);
  }
  
  // optional int32 exp = 8;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->exp(), target);
  }
  
  // optional int32 playercnt = 9;
  if (has_playercnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->playercnt(), target);
  }
  
  // optional int32 rank = 10;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->rank(), target);
  }
  
  // optional int32 finalRank = 11;
  if (has_finalrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->finalrank(), target);
  }
  
  // optional int32 index = 12;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->index(), target);
  }
  
  // optional string serverName = 13;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->servername(), target);
  }
  
  // optional string id = 14;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->id(), target);
  }
  
  // optional int32 yesterdayExp = 15;
  if (has_yesterdayexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->yesterdayexp(), target);
  }
  
  // optional string language = 16;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->language(), target);
  }
  
  // optional string joinNotice = 17;
  if (has_joinnotice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->joinnotice().data(), this->joinnotice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->joinnotice(), target);
  }
  
  // optional int32 residueExp = 18;
  if (has_residueexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->residueexp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildBaseInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 guildid = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildid());
    }
    
    // optional string guildname = 2;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }
    
    // optional string guildicon = 3;
    if (has_guildicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildicon());
    }
    
    // optional string notice = 4;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }
    
    // optional int32 limitGrade = 5;
    if (has_limitgrade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limitgrade());
    }
    
    // optional bool needapproval = 6;
    if (has_needapproval()) {
      total_size += 1 + 1;
    }
    
    // optional int32 lvl = 7;
    if (has_lvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lvl());
    }
    
    // optional int32 exp = 8;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 playercnt = 9;
    if (has_playercnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playercnt());
    }
    
    // optional int32 rank = 10;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }
    
    // optional int32 finalRank = 11;
    if (has_finalrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->finalrank());
    }
    
    // optional int32 index = 12;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional string serverName = 13;
    if (has_servername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servername());
    }
    
    // optional string id = 14;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
    // optional int32 yesterdayExp = 15;
    if (has_yesterdayexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yesterdayexp());
    }
    
    // optional string language = 16;
    if (has_language()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string joinNotice = 17;
    if (has_joinnotice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->joinnotice());
    }
    
    // optional int32 residueExp = 18;
    if (has_residueexp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->residueexp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildBaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildBaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildBaseInfo::MergeFrom(const GuildBaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_guildicon()) {
      set_guildicon(from.guildicon());
    }
    if (from.has_notice()) {
      set_notice(from.notice());
    }
    if (from.has_limitgrade()) {
      set_limitgrade(from.limitgrade());
    }
    if (from.has_needapproval()) {
      set_needapproval(from.needapproval());
    }
    if (from.has_lvl()) {
      set_lvl(from.lvl());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_playercnt()) {
      set_playercnt(from.playercnt());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_finalrank()) {
      set_finalrank(from.finalrank());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_servername()) {
      set_servername(from.servername());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_yesterdayexp()) {
      set_yesterdayexp(from.yesterdayexp());
    }
    if (from.has_language()) {
      set_language(from.language());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_joinnotice()) {
      set_joinnotice(from.joinnotice());
    }
    if (from.has_residueexp()) {
      set_residueexp(from.residueexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildBaseInfo::CopyFrom(const GuildBaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildBaseInfo::IsInitialized() const {
  
  return true;
}

void GuildBaseInfo::Swap(GuildBaseInfo* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(guildname_, other->guildname_);
    std::swap(guildicon_, other->guildicon_);
    std::swap(notice_, other->notice_);
    std::swap(limitgrade_, other->limitgrade_);
    std::swap(needapproval_, other->needapproval_);
    std::swap(lvl_, other->lvl_);
    std::swap(exp_, other->exp_);
    std::swap(playercnt_, other->playercnt_);
    std::swap(rank_, other->rank_);
    std::swap(finalrank_, other->finalrank_);
    std::swap(index_, other->index_);
    std::swap(servername_, other->servername_);
    std::swap(id_, other->id_);
    std::swap(yesterdayexp_, other->yesterdayexp_);
    std::swap(language_, other->language_);
    std::swap(joinnotice_, other->joinnotice_);
    std::swap(residueexp_, other->residueexp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildBaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildBaseInfo_descriptor_;
  metadata.reflection = GuildBaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildPlayers::kBaseinfoFieldNumber;
const int GuildPlayers::kPlayersFieldNumber;
#endif  // !_MSC_VER

GuildPlayers::GuildPlayers()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildPlayers::InitAsDefaultInstance() {
  baseinfo_ = const_cast< ::protobuf::guild::GuildBaseInfo*>(&::protobuf::guild::GuildBaseInfo::default_instance());
}

GuildPlayers::GuildPlayers(const GuildPlayers& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildPlayers::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildPlayers::~GuildPlayers() {
  SharedDtor();
}

void GuildPlayers::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

void GuildPlayers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildPlayers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildPlayers_descriptor_;
}

const GuildPlayers& GuildPlayers::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();  return *default_instance_;
}

GuildPlayers* GuildPlayers::default_instance_ = NULL;

GuildPlayers* GuildPlayers::New() const {
  return new GuildPlayers;
}

void GuildPlayers::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_baseinfo()) {
      if (baseinfo_ != NULL) baseinfo_->::protobuf::guild::GuildBaseInfo::Clear();
    }
  }
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildPlayers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protobuf.guild.GuildBaseInfo baseinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_players;
        break;
      }
      
      // repeated .protobuf.guild.GuildPlayer players = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_players;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildPlayers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protobuf.guild.GuildBaseInfo baseinfo = 1;
  if (has_baseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->baseinfo(), output);
  }
  
  // repeated .protobuf.guild.GuildPlayer players = 5;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->players(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildPlayers::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protobuf.guild.GuildBaseInfo baseinfo = 1;
  if (has_baseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->baseinfo(), target);
  }
  
  // repeated .protobuf.guild.GuildPlayer players = 5;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->players(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildPlayers::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protobuf.guild.GuildBaseInfo baseinfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinfo());
    }
    
  }
  // repeated .protobuf.guild.GuildPlayer players = 5;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildPlayers::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildPlayers* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildPlayers*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildPlayers::MergeFrom(const GuildPlayers& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baseinfo()) {
      mutable_baseinfo()->::protobuf::guild::GuildBaseInfo::MergeFrom(from.baseinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildPlayers::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildPlayers::CopyFrom(const GuildPlayers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildPlayers::IsInitialized() const {
  
  for (int i = 0; i < players_size(); i++) {
    if (!this->players(i).IsInitialized()) return false;
  }
  return true;
}

void GuildPlayers::Swap(GuildPlayers* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    players_.Swap(&other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildPlayers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildPlayers_descriptor_;
  metadata.reflection = GuildPlayers_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildListInfo::kMyrankFieldNumber;
const int GuildListInfo::kInfosFieldNumber;
#endif  // !_MSC_VER

GuildListInfo::GuildListInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildListInfo::InitAsDefaultInstance() {
}

GuildListInfo::GuildListInfo(const GuildListInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildListInfo::SharedCtor() {
  _cached_size_ = 0;
  myrank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildListInfo::~GuildListInfo() {
  SharedDtor();
}

void GuildListInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildListInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildListInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildListInfo_descriptor_;
}

const GuildListInfo& GuildListInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();  return *default_instance_;
}

GuildListInfo* GuildListInfo::default_instance_ = NULL;

GuildListInfo* GuildListInfo::New() const {
  return new GuildListInfo;
}

void GuildListInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    myrank_ = 0;
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildListInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.guild.GuildBaseInfo infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectTag(16)) goto parse_myrank;
        break;
      }
      
      // optional int32 myrank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_myrank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &myrank_)));
          set_has_myrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildListInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.guild.GuildBaseInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }
  
  // optional int32 myrank = 2;
  if (has_myrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->myrank(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildListInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.guild.GuildBaseInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }
  
  // optional int32 myrank = 2;
  if (has_myrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->myrank(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildListInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 myrank = 2;
    if (has_myrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->myrank());
    }
    
  }
  // repeated .protobuf.guild.GuildBaseInfo infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildListInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildListInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildListInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildListInfo::MergeFrom(const GuildListInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_myrank()) {
      set_myrank(from.myrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildListInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildListInfo::CopyFrom(const GuildListInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildListInfo::IsInitialized() const {
  
  return true;
}

void GuildListInfo::Swap(GuildListInfo* other) {
  if (other != this) {
    std::swap(myrank_, other->myrank_);
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildListInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildListInfo_descriptor_;
  metadata.reflection = GuildListInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildDyInfo::kCurexpFieldNumber;
const int GuildDyInfo::kCurlvlFieldNumber;
const int GuildDyInfo::kItemsFieldNumber;
#endif  // !_MSC_VER

GuildDyInfo::GuildDyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildDyInfo::InitAsDefaultInstance() {
}

GuildDyInfo::GuildDyInfo(const GuildDyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildDyInfo::SharedCtor() {
  _cached_size_ = 0;
  curexp_ = 0;
  curlvl_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildDyInfo::~GuildDyInfo() {
  SharedDtor();
}

void GuildDyInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildDyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildDyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildDyInfo_descriptor_;
}

const GuildDyInfo& GuildDyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();  return *default_instance_;
}

GuildDyInfo* GuildDyInfo::default_instance_ = NULL;

GuildDyInfo* GuildDyInfo::New() const {
  return new GuildDyInfo;
}

void GuildDyInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    curexp_ = 0;
    curlvl_ = 0;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildDyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 curexp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curexp_)));
          set_has_curexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_curlvl;
        break;
      }
      
      // required int32 curlvl = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curlvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curlvl_)));
          set_has_curlvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }
      
      // repeated .protobuf.common.KVint3232 items = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildDyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 curexp = 1;
  if (has_curexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->curexp(), output);
  }
  
  // required int32 curlvl = 2;
  if (has_curlvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->curlvl(), output);
  }
  
  // repeated .protobuf.common.KVint3232 items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildDyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 curexp = 1;
  if (has_curexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->curexp(), target);
  }
  
  // required int32 curlvl = 2;
  if (has_curlvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->curlvl(), target);
  }
  
  // repeated .protobuf.common.KVint3232 items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildDyInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 curexp = 1;
    if (has_curexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curexp());
    }
    
    // required int32 curlvl = 2;
    if (has_curlvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curlvl());
    }
    
  }
  // repeated .protobuf.common.KVint3232 items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildDyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildDyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildDyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildDyInfo::MergeFrom(const GuildDyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curexp()) {
      set_curexp(from.curexp());
    }
    if (from.has_curlvl()) {
      set_curlvl(from.curlvl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildDyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildDyInfo::CopyFrom(const GuildDyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildDyInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void GuildDyInfo::Swap(GuildDyInfo* other) {
  if (other != this) {
    std::swap(curexp_, other->curexp_);
    std::swap(curlvl_, other->curlvl_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildDyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildDyInfo_descriptor_;
  metadata.reflection = GuildDyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BossDamage::kPlayeridFieldNumber;
const int BossDamage::kAttackcntFieldNumber;
const int BossDamage::kTotaldamageFieldNumber;
const int BossDamage::kReceivedFieldNumber;
const int BossDamage::kPlayernameFieldNumber;
const int BossDamage::kPlayerheadFieldNumber;
const int BossDamage::kPowerFieldNumber;
const int BossDamage::kPlayerlvlFieldNumber;
const int BossDamage::kIdentityFieldNumber;
const int BossDamage::kHeadFrameFieldNumber;
#endif  // !_MSC_VER

BossDamage::BossDamage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BossDamage::InitAsDefaultInstance() {
}

BossDamage::BossDamage(const BossDamage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BossDamage::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  attackcnt_ = 0;
  totaldamage_ = GOOGLE_LONGLONG(0);
  received_ = false;
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playerhead_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  power_ = 0;
  playerlvl_ = 0;
  identity_ = 0;
  headframe_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossDamage::~BossDamage() {
  SharedDtor();
}

void BossDamage::SharedDtor() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (playerhead_ != &::google::protobuf::internal::kEmptyString) {
    delete playerhead_;
  }
  if (this != default_instance_) {
  }
}

void BossDamage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BossDamage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BossDamage_descriptor_;
}

const BossDamage& BossDamage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();  return *default_instance_;
}

BossDamage* BossDamage::default_instance_ = NULL;

BossDamage* BossDamage::New() const {
  return new BossDamage;
}

void BossDamage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    attackcnt_ = 0;
    totaldamage_ = GOOGLE_LONGLONG(0);
    received_ = false;
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
    if (has_playerhead()) {
      if (playerhead_ != &::google::protobuf::internal::kEmptyString) {
        playerhead_->clear();
      }
    }
    power_ = 0;
    playerlvl_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    identity_ = 0;
    headframe_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BossDamage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attackcnt;
        break;
      }
      
      // optional int32 attackcnt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attackcnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attackcnt_)));
          set_has_attackcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_totaldamage;
        break;
      }
      
      // required int64 totaldamage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totaldamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totaldamage_)));
          set_has_totaldamage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_received;
        break;
      }
      
      // optional bool received = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_received:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &received_)));
          set_has_received();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_playername;
        break;
      }
      
      // required string playername = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_playerhead;
        break;
      }
      
      // required string playerhead = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerhead:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerhead()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerhead().data(), this->playerhead().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_power;
        break;
      }
      
      // required int32 power = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_playerlvl;
        break;
      }
      
      // required int32 playerlvl = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerlvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerlvl_)));
          set_has_playerlvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_identity;
        break;
      }
      
      // optional int32 identity = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_identity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &identity_)));
          set_has_identity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_headFrame;
        break;
      }
      
      // optional int32 headFrame = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headFrame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headframe_)));
          set_has_headframe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BossDamage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->playerid(), output);
  }
  
  // optional int32 attackcnt = 2;
  if (has_attackcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->attackcnt(), output);
  }
  
  // required int64 totaldamage = 3;
  if (has_totaldamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->totaldamage(), output);
  }
  
  // optional bool received = 4;
  if (has_received()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->received(), output);
  }
  
  // required string playername = 5;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->playername(), output);
  }
  
  // required string playerhead = 6;
  if (has_playerhead()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerhead().data(), this->playerhead().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->playerhead(), output);
  }
  
  // required int32 power = 7;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->power(), output);
  }
  
  // required int32 playerlvl = 8;
  if (has_playerlvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->playerlvl(), output);
  }
  
  // optional int32 identity = 9;
  if (has_identity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->identity(), output);
  }
  
  // optional int32 headFrame = 10;
  if (has_headframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->headframe(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BossDamage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playerid(), target);
  }
  
  // optional int32 attackcnt = 2;
  if (has_attackcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->attackcnt(), target);
  }
  
  // required int64 totaldamage = 3;
  if (has_totaldamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->totaldamage(), target);
  }
  
  // optional bool received = 4;
  if (has_received()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->received(), target);
  }
  
  // required string playername = 5;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->playername(), target);
  }
  
  // required string playerhead = 6;
  if (has_playerhead()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerhead().data(), this->playerhead().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->playerhead(), target);
  }
  
  // required int32 power = 7;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->power(), target);
  }
  
  // required int32 playerlvl = 8;
  if (has_playerlvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->playerlvl(), target);
  }
  
  // optional int32 identity = 9;
  if (has_identity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->identity(), target);
  }
  
  // optional int32 headFrame = 10;
  if (has_headframe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->headframe(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BossDamage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }
    
    // optional int32 attackcnt = 2;
    if (has_attackcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attackcnt());
    }
    
    // required int64 totaldamage = 3;
    if (has_totaldamage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->totaldamage());
    }
    
    // optional bool received = 4;
    if (has_received()) {
      total_size += 1 + 1;
    }
    
    // required string playername = 5;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }
    
    // required string playerhead = 6;
    if (has_playerhead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerhead());
    }
    
    // required int32 power = 7;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }
    
    // required int32 playerlvl = 8;
    if (has_playerlvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerlvl());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 identity = 9;
    if (has_identity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->identity());
    }
    
    // optional int32 headFrame = 10;
    if (has_headframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headframe());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossDamage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BossDamage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BossDamage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BossDamage::MergeFrom(const BossDamage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_attackcnt()) {
      set_attackcnt(from.attackcnt());
    }
    if (from.has_totaldamage()) {
      set_totaldamage(from.totaldamage());
    }
    if (from.has_received()) {
      set_received(from.received());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_playerhead()) {
      set_playerhead(from.playerhead());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_playerlvl()) {
      set_playerlvl(from.playerlvl());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_identity()) {
      set_identity(from.identity());
    }
    if (from.has_headframe()) {
      set_headframe(from.headframe());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BossDamage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BossDamage::CopyFrom(const BossDamage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossDamage::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000f5) != 0x000000f5) return false;
  
  return true;
}

void BossDamage::Swap(BossDamage* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(attackcnt_, other->attackcnt_);
    std::swap(totaldamage_, other->totaldamage_);
    std::swap(received_, other->received_);
    std::swap(playername_, other->playername_);
    std::swap(playerhead_, other->playerhead_);
    std::swap(power_, other->power_);
    std::swap(playerlvl_, other->playerlvl_);
    std::swap(identity_, other->identity_);
    std::swap(headframe_, other->headframe_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BossDamage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BossDamage_descriptor_;
  metadata.reflection = BossDamage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildBossInfo::kRefreshattackcntFieldNumber;
const int GuildBossInfo::kRefreshfreecnttimeFieldNumber;
const int GuildBossInfo::kBossidFieldNumber;
const int GuildBossInfo::kBloodFieldNumber;
const int GuildBossInfo::kIsOpenFieldNumber;
const int GuildBossInfo::kPlayerdamagesFieldNumber;
const int GuildBossInfo::kFreeExpFieldNumber;
const int GuildBossInfo::kExpFieldNumber;
#endif  // !_MSC_VER

GuildBossInfo::GuildBossInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildBossInfo::InitAsDefaultInstance() {
}

GuildBossInfo::GuildBossInfo(const GuildBossInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildBossInfo::SharedCtor() {
  _cached_size_ = 0;
  refreshattackcnt_ = 0;
  refreshfreecnttime_ = GOOGLE_LONGLONG(0);
  bossid_ = 0;
  blood_ = 0;
  isopen_ = false;
  freeexp_ = 0;
  exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildBossInfo::~GuildBossInfo() {
  SharedDtor();
}

void GuildBossInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildBossInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildBossInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildBossInfo_descriptor_;
}

const GuildBossInfo& GuildBossInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();  return *default_instance_;
}

GuildBossInfo* GuildBossInfo::default_instance_ = NULL;

GuildBossInfo* GuildBossInfo::New() const {
  return new GuildBossInfo;
}

void GuildBossInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    refreshattackcnt_ = 0;
    refreshfreecnttime_ = GOOGLE_LONGLONG(0);
    bossid_ = 0;
    blood_ = 0;
    isopen_ = false;
    freeexp_ = 0;
    exp_ = 0;
  }
  playerdamages_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildBossInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 refreshattackcnt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refreshattackcnt_)));
          set_has_refreshattackcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_refreshfreecnttime;
        break;
      }
      
      // optional int64 refreshfreecnttime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refreshfreecnttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &refreshfreecnttime_)));
          set_has_refreshfreecnttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bossid;
        break;
      }
      
      // optional int32 bossid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_blood;
        break;
      }
      
      // optional int32 blood = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blood_)));
          set_has_blood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isOpen;
        break;
      }
      
      // optional bool isOpen = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isOpen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isopen_)));
          set_has_isopen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_playerdamages;
        break;
      }
      
      // repeated .protobuf.guild.BossDamage playerdamages = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerdamages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playerdamages()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_playerdamages;
        if (input->ExpectTag(56)) goto parse_freeExp;
        break;
      }
      
      // optional int32 freeExp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freeExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freeexp_)));
          set_has_freeexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_exp;
        break;
      }
      
      // optional int32 exp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildBossInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 refreshattackcnt = 1;
  if (has_refreshattackcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->refreshattackcnt(), output);
  }
  
  // optional int64 refreshfreecnttime = 2;
  if (has_refreshfreecnttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->refreshfreecnttime(), output);
  }
  
  // optional int32 bossid = 3;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bossid(), output);
  }
  
  // optional int32 blood = 4;
  if (has_blood()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->blood(), output);
  }
  
  // optional bool isOpen = 5;
  if (has_isopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isopen(), output);
  }
  
  // repeated .protobuf.guild.BossDamage playerdamages = 6;
  for (int i = 0; i < this->playerdamages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->playerdamages(i), output);
  }
  
  // optional int32 freeExp = 7;
  if (has_freeexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->freeexp(), output);
  }
  
  // optional int32 exp = 8;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->exp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildBossInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 refreshattackcnt = 1;
  if (has_refreshattackcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->refreshattackcnt(), target);
  }
  
  // optional int64 refreshfreecnttime = 2;
  if (has_refreshfreecnttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->refreshfreecnttime(), target);
  }
  
  // optional int32 bossid = 3;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bossid(), target);
  }
  
  // optional int32 blood = 4;
  if (has_blood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->blood(), target);
  }
  
  // optional bool isOpen = 5;
  if (has_isopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isopen(), target);
  }
  
  // repeated .protobuf.guild.BossDamage playerdamages = 6;
  for (int i = 0; i < this->playerdamages_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->playerdamages(i), target);
  }
  
  // optional int32 freeExp = 7;
  if (has_freeexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->freeexp(), target);
  }
  
  // optional int32 exp = 8;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->exp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildBossInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 refreshattackcnt = 1;
    if (has_refreshattackcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refreshattackcnt());
    }
    
    // optional int64 refreshfreecnttime = 2;
    if (has_refreshfreecnttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->refreshfreecnttime());
    }
    
    // optional int32 bossid = 3;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bossid());
    }
    
    // optional int32 blood = 4;
    if (has_blood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blood());
    }
    
    // optional bool isOpen = 5;
    if (has_isopen()) {
      total_size += 1 + 1;
    }
    
    // optional int32 freeExp = 7;
    if (has_freeexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->freeexp());
    }
    
    // optional int32 exp = 8;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
  }
  // repeated .protobuf.guild.BossDamage playerdamages = 6;
  total_size += 1 * this->playerdamages_size();
  for (int i = 0; i < this->playerdamages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerdamages(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildBossInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildBossInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildBossInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildBossInfo::MergeFrom(const GuildBossInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerdamages_.MergeFrom(from.playerdamages_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_refreshattackcnt()) {
      set_refreshattackcnt(from.refreshattackcnt());
    }
    if (from.has_refreshfreecnttime()) {
      set_refreshfreecnttime(from.refreshfreecnttime());
    }
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_blood()) {
      set_blood(from.blood());
    }
    if (from.has_isopen()) {
      set_isopen(from.isopen());
    }
    if (from.has_freeexp()) {
      set_freeexp(from.freeexp());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildBossInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildBossInfo::CopyFrom(const GuildBossInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildBossInfo::IsInitialized() const {
  
  for (int i = 0; i < playerdamages_size(); i++) {
    if (!this->playerdamages(i).IsInitialized()) return false;
  }
  return true;
}

void GuildBossInfo::Swap(GuildBossInfo* other) {
  if (other != this) {
    std::swap(refreshattackcnt_, other->refreshattackcnt_);
    std::swap(refreshfreecnttime_, other->refreshfreecnttime_);
    std::swap(bossid_, other->bossid_);
    std::swap(blood_, other->blood_);
    std::swap(isopen_, other->isopen_);
    playerdamages_.Swap(&other->playerdamages_);
    std::swap(freeexp_, other->freeexp_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildBossInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildBossInfo_descriptor_;
  metadata.reflection = GuildBossInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MillRobbery::kPlayeridFieldNumber;
const int MillRobbery::kTimeFieldNumber;
const int MillRobbery::kGuildidFieldNumber;
const int MillRobbery::kGuildnameFieldNumber;
const int MillRobbery::kPlayernameFieldNumber;
const int MillRobbery::kPlayerlvlFieldNumber;
const int MillRobbery::kPlayerheadFieldNumber;
const int MillRobbery::kMillidFieldNumber;
const int MillRobbery::kMilllvlFieldNumber;
const int MillRobbery::kStateFieldNumber;
const int MillRobbery::kRobberyIdFieldNumber;
const int MillRobbery::kHeadFrameFieldNumber;
#endif  // !_MSC_VER

MillRobbery::MillRobbery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MillRobbery::InitAsDefaultInstance() {
}

MillRobbery::MillRobbery(const MillRobbery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MillRobbery::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = GOOGLE_LONGLONG(0);
  guildid_ = 0;
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playerlvl_ = 0;
  playerhead_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  millid_ = 0;
  milllvl_ = 0;
  state_ = 0;
  robberyid_ = GOOGLE_LONGLONG(0);
  headframe_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MillRobbery::~MillRobbery() {
  SharedDtor();
}

void MillRobbery::SharedDtor() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (playerhead_ != &::google::protobuf::internal::kEmptyString) {
    delete playerhead_;
  }
  if (this != default_instance_) {
  }
}

void MillRobbery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MillRobbery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MillRobbery_descriptor_;
}

const MillRobbery& MillRobbery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();  return *default_instance_;
}

MillRobbery* MillRobbery::default_instance_ = NULL;

MillRobbery* MillRobbery::New() const {
  return new MillRobbery;
}

void MillRobbery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    time_ = GOOGLE_LONGLONG(0);
    guildid_ = 0;
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
    playerlvl_ = 0;
    if (has_playerhead()) {
      if (playerhead_ != &::google::protobuf::internal::kEmptyString) {
        playerhead_->clear();
      }
    }
    millid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    milllvl_ = 0;
    state_ = 0;
    robberyid_ = GOOGLE_LONGLONG(0);
    headframe_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MillRobbery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }
      
      // required int64 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_guildid;
        break;
      }
      
      // required int32 guildid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_guildname;
        break;
      }
      
      // required string guildname = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_playername;
        break;
      }
      
      // required string playername = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_playerlvl;
        break;
      }
      
      // required int32 playerlvl = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerlvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerlvl_)));
          set_has_playerlvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_playerhead;
        break;
      }
      
      // required string playerhead = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerhead:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerhead()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerhead().data(), this->playerhead().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_millid;
        break;
      }
      
      // required int32 millid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_millid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &millid_)));
          set_has_millid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_milllvl;
        break;
      }
      
      // required int32 milllvl = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_milllvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &milllvl_)));
          set_has_milllvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_state;
        break;
      }
      
      // required int32 state = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_robberyId;
        break;
      }
      
      // required int64 robberyId = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_robberyId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &robberyid_)));
          set_has_robberyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_headFrame;
        break;
      }
      
      // optional int32 headFrame = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headFrame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headframe_)));
          set_has_headframe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MillRobbery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->playerid(), output);
  }
  
  // required int64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time(), output);
  }
  
  // required int32 guildid = 3;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->guildid(), output);
  }
  
  // required string guildname = 4;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->guildname(), output);
  }
  
  // required string playername = 5;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->playername(), output);
  }
  
  // required int32 playerlvl = 6;
  if (has_playerlvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->playerlvl(), output);
  }
  
  // required string playerhead = 7;
  if (has_playerhead()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerhead().data(), this->playerhead().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->playerhead(), output);
  }
  
  // required int32 millid = 8;
  if (has_millid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->millid(), output);
  }
  
  // required int32 milllvl = 9;
  if (has_milllvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->milllvl(), output);
  }
  
  // required int32 state = 10;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->state(), output);
  }
  
  // required int64 robberyId = 11;
  if (has_robberyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->robberyid(), output);
  }
  
  // optional int32 headFrame = 12;
  if (has_headframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->headframe(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MillRobbery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playerid(), target);
  }
  
  // required int64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time(), target);
  }
  
  // required int32 guildid = 3;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->guildid(), target);
  }
  
  // required string guildname = 4;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->guildname(), target);
  }
  
  // required string playername = 5;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->playername(), target);
  }
  
  // required int32 playerlvl = 6;
  if (has_playerlvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->playerlvl(), target);
  }
  
  // required string playerhead = 7;
  if (has_playerhead()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerhead().data(), this->playerhead().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->playerhead(), target);
  }
  
  // required int32 millid = 8;
  if (has_millid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->millid(), target);
  }
  
  // required int32 milllvl = 9;
  if (has_milllvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->milllvl(), target);
  }
  
  // required int32 state = 10;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->state(), target);
  }
  
  // required int64 robberyId = 11;
  if (has_robberyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->robberyid(), target);
  }
  
  // optional int32 headFrame = 12;
  if (has_headframe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->headframe(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MillRobbery::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }
    
    // required int64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }
    
    // required int32 guildid = 3;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildid());
    }
    
    // required string guildname = 4;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }
    
    // required string playername = 5;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }
    
    // required int32 playerlvl = 6;
    if (has_playerlvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerlvl());
    }
    
    // required string playerhead = 7;
    if (has_playerhead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerhead());
    }
    
    // required int32 millid = 8;
    if (has_millid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->millid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 milllvl = 9;
    if (has_milllvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->milllvl());
    }
    
    // required int32 state = 10;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }
    
    // required int64 robberyId = 11;
    if (has_robberyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->robberyid());
    }
    
    // optional int32 headFrame = 12;
    if (has_headframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headframe());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MillRobbery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MillRobbery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MillRobbery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MillRobbery::MergeFrom(const MillRobbery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_playerlvl()) {
      set_playerlvl(from.playerlvl());
    }
    if (from.has_playerhead()) {
      set_playerhead(from.playerhead());
    }
    if (from.has_millid()) {
      set_millid(from.millid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_milllvl()) {
      set_milllvl(from.milllvl());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_robberyid()) {
      set_robberyid(from.robberyid());
    }
    if (from.has_headframe()) {
      set_headframe(from.headframe());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MillRobbery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MillRobbery::CopyFrom(const MillRobbery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MillRobbery::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;
  
  return true;
}

void MillRobbery::Swap(MillRobbery* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(time_, other->time_);
    std::swap(guildid_, other->guildid_);
    std::swap(guildname_, other->guildname_);
    std::swap(playername_, other->playername_);
    std::swap(playerlvl_, other->playerlvl_);
    std::swap(playerhead_, other->playerhead_);
    std::swap(millid_, other->millid_);
    std::swap(milllvl_, other->milllvl_);
    std::swap(state_, other->state_);
    std::swap(robberyid_, other->robberyid_);
    std::swap(headframe_, other->headframe_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MillRobbery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MillRobbery_descriptor_;
  metadata.reflection = MillRobbery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MillMyInfo::kMillidFieldNumber;
const int MillMyInfo::kMilllvlFieldNumber;
const int MillMyInfo::kMillFinishTimeFieldNumber;
const int MillMyInfo::kReceivedFieldNumber;
const int MillMyInfo::kRobberylistFieldNumber;
#endif  // !_MSC_VER

MillMyInfo::MillMyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MillMyInfo::InitAsDefaultInstance() {
}

MillMyInfo::MillMyInfo(const MillMyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MillMyInfo::SharedCtor() {
  _cached_size_ = 0;
  millid_ = 0;
  milllvl_ = 0;
  millfinishtime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MillMyInfo::~MillMyInfo() {
  SharedDtor();
}

void MillMyInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MillMyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MillMyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MillMyInfo_descriptor_;
}

const MillMyInfo& MillMyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();  return *default_instance_;
}

MillMyInfo* MillMyInfo::default_instance_ = NULL;

MillMyInfo* MillMyInfo::New() const {
  return new MillMyInfo;
}

void MillMyInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    millid_ = 0;
    milllvl_ = 0;
    millfinishtime_ = GOOGLE_LONGLONG(0);
  }
  received_.Clear();
  robberylist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MillMyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 millid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &millid_)));
          set_has_millid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_millFinishTime;
        break;
      }
      
      // optional int64 millFinishTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_millFinishTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &millfinishtime_)));
          set_has_millfinishtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_received;
        break;
      }
      
      // repeated .protobuf.common.KVint3232 received = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_received:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_received()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_received;
        if (input->ExpectTag(34)) goto parse_robberylist;
        break;
      }
      
      // repeated .protobuf.guild.MillRobbery robberylist = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_robberylist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_robberylist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_robberylist;
        if (input->ExpectTag(40)) goto parse_milllvl;
        break;
      }
      
      // required int32 milllvl = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_milllvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &milllvl_)));
          set_has_milllvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MillMyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 millid = 1;
  if (has_millid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->millid(), output);
  }
  
  // optional int64 millFinishTime = 2;
  if (has_millfinishtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->millfinishtime(), output);
  }
  
  // repeated .protobuf.common.KVint3232 received = 3;
  for (int i = 0; i < this->received_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->received(i), output);
  }
  
  // repeated .protobuf.guild.MillRobbery robberylist = 4;
  for (int i = 0; i < this->robberylist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->robberylist(i), output);
  }
  
  // required int32 milllvl = 5;
  if (has_milllvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->milllvl(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MillMyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 millid = 1;
  if (has_millid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->millid(), target);
  }
  
  // optional int64 millFinishTime = 2;
  if (has_millfinishtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->millfinishtime(), target);
  }
  
  // repeated .protobuf.common.KVint3232 received = 3;
  for (int i = 0; i < this->received_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->received(i), target);
  }
  
  // repeated .protobuf.guild.MillRobbery robberylist = 4;
  for (int i = 0; i < this->robberylist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->robberylist(i), target);
  }
  
  // required int32 milllvl = 5;
  if (has_milllvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->milllvl(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MillMyInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 millid = 1;
    if (has_millid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->millid());
    }
    
    // required int32 milllvl = 5;
    if (has_milllvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->milllvl());
    }
    
    // optional int64 millFinishTime = 2;
    if (has_millfinishtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->millfinishtime());
    }
    
  }
  // repeated .protobuf.common.KVint3232 received = 3;
  total_size += 1 * this->received_size();
  for (int i = 0; i < this->received_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->received(i));
  }
  
  // repeated .protobuf.guild.MillRobbery robberylist = 4;
  total_size += 1 * this->robberylist_size();
  for (int i = 0; i < this->robberylist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->robberylist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MillMyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MillMyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MillMyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MillMyInfo::MergeFrom(const MillMyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  received_.MergeFrom(from.received_);
  robberylist_.MergeFrom(from.robberylist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_millid()) {
      set_millid(from.millid());
    }
    if (from.has_milllvl()) {
      set_milllvl(from.milllvl());
    }
    if (from.has_millfinishtime()) {
      set_millfinishtime(from.millfinishtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MillMyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MillMyInfo::CopyFrom(const MillMyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MillMyInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < received_size(); i++) {
    if (!this->received(i).IsInitialized()) return false;
  }
  for (int i = 0; i < robberylist_size(); i++) {
    if (!this->robberylist(i).IsInitialized()) return false;
  }
  return true;
}

void MillMyInfo::Swap(MillMyInfo* other) {
  if (other != this) {
    std::swap(millid_, other->millid_);
    std::swap(milllvl_, other->milllvl_);
    std::swap(millfinishtime_, other->millfinishtime_);
    received_.Swap(&other->received_);
    robberylist_.Swap(&other->robberylist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MillMyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MillMyInfo_descriptor_;
  metadata.reflection = MillMyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MillOtherInfo::kPlayeridFieldNumber;
const int MillOtherInfo::kPlayernameFieldNumber;
const int MillOtherInfo::kGuildinfoFieldNumber;
const int MillOtherInfo::kPowerFieldNumber;
const int MillOtherInfo::kMillidFieldNumber;
const int MillOtherInfo::kMilllvlFieldNumber;
const int MillOtherInfo::kRobberyedFieldNumber;
#endif  // !_MSC_VER

MillOtherInfo::MillOtherInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MillOtherInfo::InitAsDefaultInstance() {
  guildinfo_ = const_cast< ::protobuf::guild::GuildBaseInfo*>(&::protobuf::guild::GuildBaseInfo::default_instance());
}

MillOtherInfo::MillOtherInfo(const MillOtherInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MillOtherInfo::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guildinfo_ = NULL;
  power_ = 0;
  millid_ = 0;
  milllvl_ = 0;
  robberyed_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MillOtherInfo::~MillOtherInfo() {
  SharedDtor();
}

void MillOtherInfo::SharedDtor() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (this != default_instance_) {
    delete guildinfo_;
  }
}

void MillOtherInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MillOtherInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MillOtherInfo_descriptor_;
}

const MillOtherInfo& MillOtherInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();  return *default_instance_;
}

MillOtherInfo* MillOtherInfo::default_instance_ = NULL;

MillOtherInfo* MillOtherInfo::New() const {
  return new MillOtherInfo;
}

void MillOtherInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
    if (has_guildinfo()) {
      if (guildinfo_ != NULL) guildinfo_->::protobuf::guild::GuildBaseInfo::Clear();
    }
    power_ = 0;
    millid_ = 0;
    milllvl_ = 0;
    robberyed_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MillOtherInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playername;
        break;
      }
      
      // optional string playername = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_guildinfo;
        break;
      }
      
      // required .protobuf.guild.GuildBaseInfo guildinfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guildinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_power;
        break;
      }
      
      // optional int32 power = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_millid;
        break;
      }
      
      // optional int32 millid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_millid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &millid_)));
          set_has_millid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_milllvl;
        break;
      }
      
      // optional int32 milllvl = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_milllvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &milllvl_)));
          set_has_milllvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_robberyed;
        break;
      }
      
      // optional bool robberyed = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_robberyed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &robberyed_)));
          set_has_robberyed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MillOtherInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->playerid(), output);
  }
  
  // optional string playername = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->playername(), output);
  }
  
  // required .protobuf.guild.GuildBaseInfo guildinfo = 3;
  if (has_guildinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->guildinfo(), output);
  }
  
  // optional int32 power = 4;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->power(), output);
  }
  
  // optional int32 millid = 5;
  if (has_millid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->millid(), output);
  }
  
  // optional int32 milllvl = 6;
  if (has_milllvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->milllvl(), output);
  }
  
  // optional bool robberyed = 7;
  if (has_robberyed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->robberyed(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MillOtherInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playerid(), target);
  }
  
  // optional string playername = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playername(), target);
  }
  
  // required .protobuf.guild.GuildBaseInfo guildinfo = 3;
  if (has_guildinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->guildinfo(), target);
  }
  
  // optional int32 power = 4;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->power(), target);
  }
  
  // optional int32 millid = 5;
  if (has_millid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->millid(), target);
  }
  
  // optional int32 milllvl = 6;
  if (has_milllvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->milllvl(), target);
  }
  
  // optional bool robberyed = 7;
  if (has_robberyed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->robberyed(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MillOtherInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }
    
    // optional string playername = 2;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }
    
    // required .protobuf.guild.GuildBaseInfo guildinfo = 3;
    if (has_guildinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guildinfo());
    }
    
    // optional int32 power = 4;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }
    
    // optional int32 millid = 5;
    if (has_millid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->millid());
    }
    
    // optional int32 milllvl = 6;
    if (has_milllvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->milllvl());
    }
    
    // optional bool robberyed = 7;
    if (has_robberyed()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MillOtherInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MillOtherInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MillOtherInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MillOtherInfo::MergeFrom(const MillOtherInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_guildinfo()) {
      mutable_guildinfo()->::protobuf::guild::GuildBaseInfo::MergeFrom(from.guildinfo());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_millid()) {
      set_millid(from.millid());
    }
    if (from.has_milllvl()) {
      set_milllvl(from.milllvl());
    }
    if (from.has_robberyed()) {
      set_robberyed(from.robberyed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MillOtherInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MillOtherInfo::CopyFrom(const MillOtherInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MillOtherInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  
  return true;
}

void MillOtherInfo::Swap(MillOtherInfo* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(playername_, other->playername_);
    std::swap(guildinfo_, other->guildinfo_);
    std::swap(power_, other->power_);
    std::swap(millid_, other->millid_);
    std::swap(milllvl_, other->milllvl_);
    std::swap(robberyed_, other->robberyed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MillOtherInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MillOtherInfo_descriptor_;
  metadata.reflection = MillOtherInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MillLvlInfo::kMilllvlFieldNumber;
const int MillLvlInfo::kMillexpFieldNumber;
const int MillLvlInfo::kGuildgoldFieldNumber;
const int MillLvlInfo::kHistoryFieldNumber;
#endif  // !_MSC_VER

MillLvlInfo::MillLvlInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MillLvlInfo::InitAsDefaultInstance() {
}

MillLvlInfo::MillLvlInfo(const MillLvlInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MillLvlInfo::SharedCtor() {
  _cached_size_ = 0;
  milllvl_ = 0;
  millexp_ = 0;
  guildgold_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MillLvlInfo::~MillLvlInfo() {
  SharedDtor();
}

void MillLvlInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MillLvlInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MillLvlInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MillLvlInfo_descriptor_;
}

const MillLvlInfo& MillLvlInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();  return *default_instance_;
}

MillLvlInfo* MillLvlInfo::default_instance_ = NULL;

MillLvlInfo* MillLvlInfo::New() const {
  return new MillLvlInfo;
}

void MillLvlInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    milllvl_ = 0;
    millexp_ = 0;
    guildgold_ = GOOGLE_LONGLONG(0);
  }
  history_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MillLvlInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 milllvl = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &milllvl_)));
          set_has_milllvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_millexp;
        break;
      }
      
      // required int32 millexp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_millexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &millexp_)));
          set_has_millexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_history;
        break;
      }
      
      // repeated .protobuf.guild.MillExpHistory history = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_history()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_history;
        if (input->ExpectTag(32)) goto parse_guildgold;
        break;
      }
      
      // required int64 guildgold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildgold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guildgold_)));
          set_has_guildgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MillLvlInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 milllvl = 1;
  if (has_milllvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->milllvl(), output);
  }
  
  // required int32 millexp = 2;
  if (has_millexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->millexp(), output);
  }
  
  // repeated .protobuf.guild.MillExpHistory history = 3;
  for (int i = 0; i < this->history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->history(i), output);
  }
  
  // required int64 guildgold = 4;
  if (has_guildgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->guildgold(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MillLvlInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 milllvl = 1;
  if (has_milllvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->milllvl(), target);
  }
  
  // required int32 millexp = 2;
  if (has_millexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->millexp(), target);
  }
  
  // repeated .protobuf.guild.MillExpHistory history = 3;
  for (int i = 0; i < this->history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->history(i), target);
  }
  
  // required int64 guildgold = 4;
  if (has_guildgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->guildgold(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MillLvlInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 milllvl = 1;
    if (has_milllvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->milllvl());
    }
    
    // required int32 millexp = 2;
    if (has_millexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->millexp());
    }
    
    // required int64 guildgold = 4;
    if (has_guildgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guildgold());
    }
    
  }
  // repeated .protobuf.guild.MillExpHistory history = 3;
  total_size += 1 * this->history_size();
  for (int i = 0; i < this->history_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->history(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MillLvlInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MillLvlInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MillLvlInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MillLvlInfo::MergeFrom(const MillLvlInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  history_.MergeFrom(from.history_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_milllvl()) {
      set_milllvl(from.milllvl());
    }
    if (from.has_millexp()) {
      set_millexp(from.millexp());
    }
    if (from.has_guildgold()) {
      set_guildgold(from.guildgold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MillLvlInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MillLvlInfo::CopyFrom(const MillLvlInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MillLvlInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < history_size(); i++) {
    if (!this->history(i).IsInitialized()) return false;
  }
  return true;
}

void MillLvlInfo::Swap(MillLvlInfo* other) {
  if (other != this) {
    std::swap(milllvl_, other->milllvl_);
    std::swap(millexp_, other->millexp_);
    std::swap(guildgold_, other->guildgold_);
    history_.Swap(&other->history_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MillLvlInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MillLvlInfo_descriptor_;
  metadata.reflection = MillLvlInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DonationHistory::kHistoryFieldNumber;
#endif  // !_MSC_VER

DonationHistory::DonationHistory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DonationHistory::InitAsDefaultInstance() {
}

DonationHistory::DonationHistory(const DonationHistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DonationHistory::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DonationHistory::~DonationHistory() {
  SharedDtor();
}

void DonationHistory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DonationHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DonationHistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DonationHistory_descriptor_;
}

const DonationHistory& DonationHistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();  return *default_instance_;
}

DonationHistory* DonationHistory::default_instance_ = NULL;

DonationHistory* DonationHistory::New() const {
  return new DonationHistory;
}

void DonationHistory::Clear() {
  history_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DonationHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.guild.MillExpHistory history = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_history()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_history;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DonationHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.guild.MillExpHistory history = 1;
  for (int i = 0; i < this->history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->history(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DonationHistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.guild.MillExpHistory history = 1;
  for (int i = 0; i < this->history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->history(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DonationHistory::ByteSize() const {
  int total_size = 0;
  
  // repeated .protobuf.guild.MillExpHistory history = 1;
  total_size += 1 * this->history_size();
  for (int i = 0; i < this->history_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->history(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DonationHistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DonationHistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DonationHistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DonationHistory::MergeFrom(const DonationHistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  history_.MergeFrom(from.history_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DonationHistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DonationHistory::CopyFrom(const DonationHistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DonationHistory::IsInitialized() const {
  
  for (int i = 0; i < history_size(); i++) {
    if (!this->history(i).IsInitialized()) return false;
  }
  return true;
}

void DonationHistory::Swap(DonationHistory* other) {
  if (other != this) {
    history_.Swap(&other->history_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DonationHistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DonationHistory_descriptor_;
  metadata.reflection = DonationHistory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MillExpHistory::kPlayeridFieldNumber;
const int MillExpHistory::kPlayernameFieldNumber;
const int MillExpHistory::kGoldFieldNumber;
const int MillExpHistory::kTimeFieldNumber;
const int MillExpHistory::kPlayerlvlFieldNumber;
const int MillExpHistory::kIdentityFieldNumber;
const int MillExpHistory::kHeadFieldNumber;
const int MillExpHistory::kHeadFrameFieldNumber;
#endif  // !_MSC_VER

MillExpHistory::MillExpHistory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MillExpHistory::InitAsDefaultInstance() {
}

MillExpHistory::MillExpHistory(const MillExpHistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MillExpHistory::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gold_ = GOOGLE_LONGLONG(0);
  time_ = GOOGLE_LONGLONG(0);
  playerlvl_ = 0;
  identity_ = 0;
  head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  headframe_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MillExpHistory::~MillExpHistory() {
  SharedDtor();
}

void MillExpHistory::SharedDtor() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    delete playerid_;
  }
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    delete head_;
  }
  if (this != default_instance_) {
  }
}

void MillExpHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MillExpHistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MillExpHistory_descriptor_;
}

const MillExpHistory& MillExpHistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();  return *default_instance_;
}

MillExpHistory* MillExpHistory::default_instance_ = NULL;

MillExpHistory* MillExpHistory::New() const {
  return new MillExpHistory;
}

void MillExpHistory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerid()) {
      if (playerid_ != &::google::protobuf::internal::kEmptyString) {
        playerid_->clear();
      }
    }
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
    gold_ = GOOGLE_LONGLONG(0);
    time_ = GOOGLE_LONGLONG(0);
    playerlvl_ = 0;
    identity_ = 0;
    if (has_head()) {
      if (head_ != &::google::protobuf::internal::kEmptyString) {
        head_->clear();
      }
    }
    headframe_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MillExpHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playername;
        break;
      }
      
      // required string playername = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gold;
        break;
      }
      
      // required int64 gold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }
      
      // required int64 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_playerlvl;
        break;
      }
      
      // required int32 playerlvl = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerlvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerlvl_)));
          set_has_playerlvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_identity;
        break;
      }
      
      // required int32 identity = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_identity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &identity_)));
          set_has_identity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_head;
        break;
      }
      
      // required string head = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_head()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->head().data(), this->head().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_headFrame;
        break;
      }
      
      // optional int32 headFrame = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headFrame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headframe_)));
          set_has_headframe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MillExpHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->playerid(), output);
  }
  
  // required string playername = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->playername(), output);
  }
  
  // required int64 gold = 3;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->gold(), output);
  }
  
  // required int64 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->time(), output);
  }
  
  // required int32 playerlvl = 5;
  if (has_playerlvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->playerlvl(), output);
  }
  
  // required int32 identity = 6;
  if (has_identity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->identity(), output);
  }
  
  // required string head = 7;
  if (has_head()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head().data(), this->head().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->head(), output);
  }
  
  // optional int32 headFrame = 8;
  if (has_headframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->headframe(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MillExpHistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playerid(), target);
  }
  
  // required string playername = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playername(), target);
  }
  
  // required int64 gold = 3;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->gold(), target);
  }
  
  // required int64 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->time(), target);
  }
  
  // required int32 playerlvl = 5;
  if (has_playerlvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->playerlvl(), target);
  }
  
  // required int32 identity = 6;
  if (has_identity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->identity(), target);
  }
  
  // required string head = 7;
  if (has_head()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head().data(), this->head().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->head(), target);
  }
  
  // optional int32 headFrame = 8;
  if (has_headframe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->headframe(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MillExpHistory::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerid());
    }
    
    // required string playername = 2;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }
    
    // required int64 gold = 3;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }
    
    // required int64 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }
    
    // required int32 playerlvl = 5;
    if (has_playerlvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerlvl());
    }
    
    // required int32 identity = 6;
    if (has_identity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->identity());
    }
    
    // required string head = 7;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->head());
    }
    
    // optional int32 headFrame = 8;
    if (has_headframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headframe());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MillExpHistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MillExpHistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MillExpHistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MillExpHistory::MergeFrom(const MillExpHistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_playerlvl()) {
      set_playerlvl(from.playerlvl());
    }
    if (from.has_identity()) {
      set_identity(from.identity());
    }
    if (from.has_head()) {
      set_head(from.head());
    }
    if (from.has_headframe()) {
      set_headframe(from.headframe());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MillExpHistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MillExpHistory::CopyFrom(const MillExpHistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MillExpHistory::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void MillExpHistory::Swap(MillExpHistory* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(playername_, other->playername_);
    std::swap(gold_, other->gold_);
    std::swap(time_, other->time_);
    std::swap(playerlvl_, other->playerlvl_);
    std::swap(identity_, other->identity_);
    std::swap(head_, other->head_);
    std::swap(headframe_, other->headframe_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MillExpHistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MillExpHistory_descriptor_;
  metadata.reflection = MillExpHistory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModGuildInfo::kTypeFieldNumber;
const int ModGuildInfo::kInfoFieldNumber;
#endif  // !_MSC_VER

ModGuildInfo::ModGuildInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModGuildInfo::InitAsDefaultInstance() {
  info_ = const_cast< ::protobuf::guild::GuildBaseInfo*>(&::protobuf::guild::GuildBaseInfo::default_instance());
}

ModGuildInfo::ModGuildInfo(const ModGuildInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModGuildInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModGuildInfo::~ModGuildInfo() {
  SharedDtor();
}

void ModGuildInfo::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void ModGuildInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModGuildInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModGuildInfo_descriptor_;
}

const ModGuildInfo& ModGuildInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();  return *default_instance_;
}

ModGuildInfo* ModGuildInfo::default_instance_ = NULL;

ModGuildInfo* ModGuildInfo::New() const {
  return new ModGuildInfo;
}

void ModGuildInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_info()) {
      if (info_ != NULL) info_->::protobuf::guild::GuildBaseInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModGuildInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }
      
      // required .protobuf.guild.GuildBaseInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModGuildInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // required .protobuf.guild.GuildBaseInfo info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModGuildInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // required .protobuf.guild.GuildBaseInfo info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModGuildInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required .protobuf.guild.GuildBaseInfo info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModGuildInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModGuildInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModGuildInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModGuildInfo::MergeFrom(const ModGuildInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_info()) {
      mutable_info()->::protobuf::guild::GuildBaseInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModGuildInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModGuildInfo::CopyFrom(const ModGuildInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModGuildInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ModGuildInfo::Swap(ModGuildInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModGuildInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModGuildInfo_descriptor_;
  metadata.reflection = ModGuildInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DynIcon::kIconFieldNumber;
const int DynIcon::kOuttimeFieldNumber;
const int DynIcon::kUsetimeFieldNumber;
#endif  // !_MSC_VER

DynIcon::DynIcon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DynIcon::InitAsDefaultInstance() {
}

DynIcon::DynIcon(const DynIcon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DynIcon::SharedCtor() {
  _cached_size_ = 0;
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  outtime_ = GOOGLE_LONGLONG(0);
  usetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DynIcon::~DynIcon() {
  SharedDtor();
}

void DynIcon::SharedDtor() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (this != default_instance_) {
  }
}

void DynIcon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DynIcon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DynIcon_descriptor_;
}

const DynIcon& DynIcon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();  return *default_instance_;
}

DynIcon* DynIcon::default_instance_ = NULL;

DynIcon* DynIcon::New() const {
  return new DynIcon;
}

void DynIcon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
    outtime_ = GOOGLE_LONGLONG(0);
    usetime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DynIcon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string icon = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_outtime;
        break;
      }
      
      // required int64 outtime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &outtime_)));
          set_has_outtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_usetime;
        break;
      }
      
      // required int64 usetime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &usetime_)));
          set_has_usetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DynIcon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string icon = 1;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->icon(), output);
  }
  
  // required int64 outtime = 2;
  if (has_outtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->outtime(), output);
  }
  
  // required int64 usetime = 3;
  if (has_usetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->usetime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DynIcon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string icon = 1;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->icon(), target);
  }
  
  // required int64 outtime = 2;
  if (has_outtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->outtime(), target);
  }
  
  // required int64 usetime = 3;
  if (has_usetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->usetime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DynIcon::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string icon = 1;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }
    
    // required int64 outtime = 2;
    if (has_outtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->outtime());
    }
    
    // required int64 usetime = 3;
    if (has_usetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->usetime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DynIcon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DynIcon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DynIcon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DynIcon::MergeFrom(const DynIcon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_outtime()) {
      set_outtime(from.outtime());
    }
    if (from.has_usetime()) {
      set_usetime(from.usetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DynIcon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DynIcon::CopyFrom(const DynIcon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynIcon::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void DynIcon::Swap(DynIcon* other) {
  if (other != this) {
    std::swap(icon_, other->icon_);
    std::swap(outtime_, other->outtime_);
    std::swap(usetime_, other->usetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DynIcon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DynIcon_descriptor_;
  metadata.reflection = DynIcon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DynIconList::kIconsFieldNumber;
#endif  // !_MSC_VER

DynIconList::DynIconList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DynIconList::InitAsDefaultInstance() {
}

DynIconList::DynIconList(const DynIconList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DynIconList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DynIconList::~DynIconList() {
  SharedDtor();
}

void DynIconList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DynIconList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DynIconList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DynIconList_descriptor_;
}

const DynIconList& DynIconList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();  return *default_instance_;
}

DynIconList* DynIconList::default_instance_ = NULL;

DynIconList* DynIconList::New() const {
  return new DynIconList;
}

void DynIconList::Clear() {
  icons_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DynIconList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.guild.DynIcon icons = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_icons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_icons;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DynIconList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.guild.DynIcon icons = 1;
  for (int i = 0; i < this->icons_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->icons(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DynIconList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.guild.DynIcon icons = 1;
  for (int i = 0; i < this->icons_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->icons(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DynIconList::ByteSize() const {
  int total_size = 0;
  
  // repeated .protobuf.guild.DynIcon icons = 1;
  total_size += 1 * this->icons_size();
  for (int i = 0; i < this->icons_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->icons(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DynIconList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DynIconList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DynIconList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DynIconList::MergeFrom(const DynIconList& from) {
  GOOGLE_CHECK_NE(&from, this);
  icons_.MergeFrom(from.icons_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DynIconList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DynIconList::CopyFrom(const DynIconList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynIconList::IsInitialized() const {
  
  for (int i = 0; i < icons_size(); i++) {
    if (!this->icons(i).IsInitialized()) return false;
  }
  return true;
}

void DynIconList::Swap(DynIconList* other) {
  if (other != this) {
    icons_.Swap(&other->icons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DynIconList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DynIconList_descriptor_;
  metadata.reflection = DynIconList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterHall::kStateFieldNumber;
const int EnterHall::kTimeFieldNumber;
const int EnterHall::kIsJoinFieldNumber;
const int EnterHall::kRankFieldNumber;
const int EnterHall::kScoreFieldNumber;
const int EnterHall::kEnergyFieldNumber;
const int EnterHall::kEnergyTimeFieldNumber;
const int EnterHall::kLineupFieldNumber;
const int EnterHall::kContributionFieldNumber;
const int EnterHall::kIsSetOtherFieldNumber;
#endif  // !_MSC_VER

EnterHall::EnterHall()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnterHall::InitAsDefaultInstance() {
}

EnterHall::EnterHall(const EnterHall& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnterHall::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  isjoin_ = false;
  rank_ = 0;
  score_ = 0;
  energy_ = 0;
  energytime_ = GOOGLE_LONGLONG(0);
  issetother_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterHall::~EnterHall() {
  SharedDtor();
}

void EnterHall::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnterHall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterHall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterHall_descriptor_;
}

const EnterHall& EnterHall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();  return *default_instance_;
}

EnterHall* EnterHall::default_instance_ = NULL;

EnterHall* EnterHall::New() const {
  return new EnterHall;
}

void EnterHall::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 0;
    time_ = GOOGLE_LONGLONG(0);
    isjoin_ = false;
    rank_ = 0;
    score_ = 0;
    energy_ = 0;
    energytime_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    issetother_ = false;
  }
  lineup_.Clear();
  contribution_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterHall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }
      
      // required int64 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isJoin;
        break;
      }
      
      // required bool isJoin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isJoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isjoin_)));
          set_has_isjoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rank;
        break;
      }
      
      // optional int32 rank = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_score;
        break;
      }
      
      // optional int32 score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_energy;
        break;
      }
      
      // optional int32 energy = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &energy_)));
          set_has_energy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_energyTime;
        break;
      }
      
      // optional int64 energyTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_energyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &energytime_)));
          set_has_energytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_lineup;
        break;
      }
      
      // repeated .protobuf.guild.LineupShow lineup = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lineup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lineup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_lineup;
        if (input->ExpectTag(74)) goto parse_contribution;
        break;
      }
      
      // repeated .protobuf.guild.RankInfo contribution = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contribution:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contribution()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_contribution;
        if (input->ExpectTag(80)) goto parse_isSetOther;
        break;
      }
      
      // optional bool isSetOther = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isSetOther:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issetother_)));
          set_has_issetother();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnterHall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }
  
  // required int64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time(), output);
  }
  
  // required bool isJoin = 3;
  if (has_isjoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isjoin(), output);
  }
  
  // optional int32 rank = 4;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rank(), output);
  }
  
  // optional int32 score = 5;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->score(), output);
  }
  
  // optional int32 energy = 6;
  if (has_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->energy(), output);
  }
  
  // optional int64 energyTime = 7;
  if (has_energytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->energytime(), output);
  }
  
  // repeated .protobuf.guild.LineupShow lineup = 8;
  for (int i = 0; i < this->lineup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->lineup(i), output);
  }
  
  // repeated .protobuf.guild.RankInfo contribution = 9;
  for (int i = 0; i < this->contribution_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->contribution(i), output);
  }
  
  // optional bool isSetOther = 10;
  if (has_issetother()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->issetother(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnterHall::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }
  
  // required int64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time(), target);
  }
  
  // required bool isJoin = 3;
  if (has_isjoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isjoin(), target);
  }
  
  // optional int32 rank = 4;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rank(), target);
  }
  
  // optional int32 score = 5;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->score(), target);
  }
  
  // optional int32 energy = 6;
  if (has_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->energy(), target);
  }
  
  // optional int64 energyTime = 7;
  if (has_energytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->energytime(), target);
  }
  
  // repeated .protobuf.guild.LineupShow lineup = 8;
  for (int i = 0; i < this->lineup_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->lineup(i), target);
  }
  
  // repeated .protobuf.guild.RankInfo contribution = 9;
  for (int i = 0; i < this->contribution_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->contribution(i), target);
  }
  
  // optional bool isSetOther = 10;
  if (has_issetother()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->issetother(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnterHall::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }
    
    // required int64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }
    
    // required bool isJoin = 3;
    if (has_isjoin()) {
      total_size += 1 + 1;
    }
    
    // optional int32 rank = 4;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }
    
    // optional int32 score = 5;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }
    
    // optional int32 energy = 6;
    if (has_energy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->energy());
    }
    
    // optional int64 energyTime = 7;
    if (has_energytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->energytime());
    }
    
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional bool isSetOther = 10;
    if (has_issetother()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .protobuf.guild.LineupShow lineup = 8;
  total_size += 1 * this->lineup_size();
  for (int i = 0; i < this->lineup_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lineup(i));
  }
  
  // repeated .protobuf.guild.RankInfo contribution = 9;
  total_size += 1 * this->contribution_size();
  for (int i = 0; i < this->contribution_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contribution(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterHall::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterHall* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterHall*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterHall::MergeFrom(const EnterHall& from) {
  GOOGLE_CHECK_NE(&from, this);
  lineup_.MergeFrom(from.lineup_);
  contribution_.MergeFrom(from.contribution_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_isjoin()) {
      set_isjoin(from.isjoin());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_energy()) {
      set_energy(from.energy());
    }
    if (from.has_energytime()) {
      set_energytime(from.energytime());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_issetother()) {
      set_issetother(from.issetother());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterHall::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterHall::CopyFrom(const EnterHall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterHall::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < lineup_size(); i++) {
    if (!this->lineup(i).IsInitialized()) return false;
  }
  for (int i = 0; i < contribution_size(); i++) {
    if (!this->contribution(i).IsInitialized()) return false;
  }
  return true;
}

void EnterHall::Swap(EnterHall* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(time_, other->time_);
    std::swap(isjoin_, other->isjoin_);
    std::swap(rank_, other->rank_);
    std::swap(score_, other->score_);
    std::swap(energy_, other->energy_);
    std::swap(energytime_, other->energytime_);
    lineup_.Swap(&other->lineup_);
    contribution_.Swap(&other->contribution_);
    std::swap(issetother_, other->issetother_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterHall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterHall_descriptor_;
  metadata.reflection = EnterHall_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LineupShow::kIdFieldNumber;
const int LineupShow::kNameFieldNumber;
const int LineupShow::kIsJoinFieldNumber;
const int LineupShow::kIsHideFieldNumber;
const int LineupShow::kPowerFieldNumber;
const int LineupShow::kHerosFieldNumber;
#endif  // !_MSC_VER

LineupShow::LineupShow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LineupShow::InitAsDefaultInstance() {
}

LineupShow::LineupShow(const LineupShow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LineupShow::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isjoin_ = false;
  ishide_ = false;
  power_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LineupShow::~LineupShow() {
  SharedDtor();
}

void LineupShow::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void LineupShow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LineupShow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LineupShow_descriptor_;
}

const LineupShow& LineupShow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();  return *default_instance_;
}

LineupShow* LineupShow::default_instance_ = NULL;

LineupShow* LineupShow::New() const {
  return new LineupShow;
}

void LineupShow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    isjoin_ = false;
    ishide_ = false;
    power_ = 0;
  }
  heros_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LineupShow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isJoin;
        break;
      }
      
      // required bool isJoin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isJoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isjoin_)));
          set_has_isjoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isHide;
        break;
      }
      
      // required bool isHide = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isHide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishide_)));
          set_has_ishide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_power;
        break;
      }
      
      // required int32 power = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_heros;
        break;
      }
      
      // repeated .protobuf.common.KVint3232 heros = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_heros()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_heros;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LineupShow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // required bool isJoin = 3;
  if (has_isjoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isjoin(), output);
  }
  
  // required bool isHide = 4;
  if (has_ishide()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->ishide(), output);
  }
  
  // required int32 power = 5;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->power(), output);
  }
  
  // repeated .protobuf.common.KVint3232 heros = 6;
  for (int i = 0; i < this->heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->heros(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LineupShow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // required bool isJoin = 3;
  if (has_isjoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isjoin(), target);
  }
  
  // required bool isHide = 4;
  if (has_ishide()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->ishide(), target);
  }
  
  // required int32 power = 5;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->power(), target);
  }
  
  // repeated .protobuf.common.KVint3232 heros = 6;
  for (int i = 0; i < this->heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->heros(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LineupShow::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required bool isJoin = 3;
    if (has_isjoin()) {
      total_size += 1 + 1;
    }
    
    // required bool isHide = 4;
    if (has_ishide()) {
      total_size += 1 + 1;
    }
    
    // required int32 power = 5;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }
    
  }
  // repeated .protobuf.common.KVint3232 heros = 6;
  total_size += 1 * this->heros_size();
  for (int i = 0; i < this->heros_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heros(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LineupShow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LineupShow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LineupShow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LineupShow::MergeFrom(const LineupShow& from) {
  GOOGLE_CHECK_NE(&from, this);
  heros_.MergeFrom(from.heros_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_isjoin()) {
      set_isjoin(from.isjoin());
    }
    if (from.has_ishide()) {
      set_ishide(from.ishide());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LineupShow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LineupShow::CopyFrom(const LineupShow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineupShow::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  for (int i = 0; i < heros_size(); i++) {
    if (!this->heros(i).IsInitialized()) return false;
  }
  return true;
}

void LineupShow::Swap(LineupShow* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(isjoin_, other->isjoin_);
    std::swap(ishide_, other->ishide_);
    std::swap(power_, other->power_);
    heros_.Swap(&other->heros_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LineupShow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LineupShow_descriptor_;
  metadata.reflection = LineupShow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnemyInfoRequest::kIdFieldNumber;
const int EnemyInfoRequest::kRefreshFieldNumber;
#endif  // !_MSC_VER

EnemyInfoRequest::EnemyInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnemyInfoRequest::InitAsDefaultInstance() {
}

EnemyInfoRequest::EnemyInfoRequest(const EnemyInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnemyInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  refresh_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnemyInfoRequest::~EnemyInfoRequest() {
  SharedDtor();
}

void EnemyInfoRequest::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void EnemyInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnemyInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnemyInfoRequest_descriptor_;
}

const EnemyInfoRequest& EnemyInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();  return *default_instance_;
}

EnemyInfoRequest* EnemyInfoRequest::default_instance_ = NULL;

EnemyInfoRequest* EnemyInfoRequest::New() const {
  return new EnemyInfoRequest;
}

void EnemyInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    refresh_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnemyInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_refresh;
        break;
      }
      
      // required bool refresh = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &refresh_)));
          set_has_refresh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnemyInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }
  
  // required bool refresh = 2;
  if (has_refresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->refresh(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnemyInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }
  
  // required bool refresh = 2;
  if (has_refresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->refresh(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnemyInfoRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
    // required bool refresh = 2;
    if (has_refresh()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnemyInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnemyInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnemyInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnemyInfoRequest::MergeFrom(const EnemyInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_refresh()) {
      set_refresh(from.refresh());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnemyInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnemyInfoRequest::CopyFrom(const EnemyInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnemyInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void EnemyInfoRequest::Swap(EnemyInfoRequest* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(refresh_, other->refresh_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnemyInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnemyInfoRequest_descriptor_;
  metadata.reflection = EnemyInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnemyInfoReply::kInfoFieldNumber;
const int EnemyInfoReply::kEnergyFieldNumber;
const int EnemyInfoReply::kEnergyTimeFieldNumber;
#endif  // !_MSC_VER

EnemyInfoReply::EnemyInfoReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnemyInfoReply::InitAsDefaultInstance() {
  info_ = const_cast< ::protobuf::guild::EnemyInfo*>(&::protobuf::guild::EnemyInfo::default_instance());
}

EnemyInfoReply::EnemyInfoReply(const EnemyInfoReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnemyInfoReply::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  energy_ = 0;
  energytime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnemyInfoReply::~EnemyInfoReply() {
  SharedDtor();
}

void EnemyInfoReply::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void EnemyInfoReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnemyInfoReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnemyInfoReply_descriptor_;
}

const EnemyInfoReply& EnemyInfoReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();  return *default_instance_;
}

EnemyInfoReply* EnemyInfoReply::default_instance_ = NULL;

EnemyInfoReply* EnemyInfoReply::New() const {
  return new EnemyInfoReply;
}

void EnemyInfoReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::protobuf::guild::EnemyInfo::Clear();
    }
    energy_ = 0;
    energytime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnemyInfoReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protobuf.guild.EnemyInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_energy;
        break;
      }
      
      // optional int32 energy = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &energy_)));
          set_has_energy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_energyTime;
        break;
      }
      
      // optional int64 energyTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_energyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &energytime_)));
          set_has_energytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnemyInfoReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protobuf.guild.EnemyInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }
  
  // optional int32 energy = 6;
  if (has_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->energy(), output);
  }
  
  // optional int64 energyTime = 7;
  if (has_energytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->energytime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnemyInfoReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protobuf.guild.EnemyInfo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }
  
  // optional int32 energy = 6;
  if (has_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->energy(), target);
  }
  
  // optional int64 energyTime = 7;
  if (has_energytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->energytime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnemyInfoReply::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protobuf.guild.EnemyInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
    // optional int32 energy = 6;
    if (has_energy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->energy());
    }
    
    // optional int64 energyTime = 7;
    if (has_energytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->energytime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnemyInfoReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnemyInfoReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnemyInfoReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnemyInfoReply::MergeFrom(const EnemyInfoReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::protobuf::guild::EnemyInfo::MergeFrom(from.info());
    }
    if (from.has_energy()) {
      set_energy(from.energy());
    }
    if (from.has_energytime()) {
      set_energytime(from.energytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnemyInfoReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnemyInfoReply::CopyFrom(const EnemyInfoReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnemyInfoReply::IsInitialized() const {
  
  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void EnemyInfoReply::Swap(EnemyInfoReply* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(energy_, other->energy_);
    std::swap(energytime_, other->energytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnemyInfoReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnemyInfoReply_descriptor_;
  metadata.reflection = EnemyInfoReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnemyInfo::kRankFieldNumber;
const int EnemyInfo::kScoreFieldNumber;
const int EnemyInfo::kGuildnameFieldNumber;
const int EnemyInfo::kGuildiconFieldNumber;
const int EnemyInfo::kServerNameFieldNumber;
const int EnemyInfo::kLineupFieldNumber;
const int EnemyInfo::kFinalRankFieldNumber;
#endif  // !_MSC_VER

EnemyInfo::EnemyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnemyInfo::InitAsDefaultInstance() {
}

EnemyInfo::EnemyInfo(const EnemyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnemyInfo::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  score_ = 0;
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guildicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  finalrank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnemyInfo::~EnemyInfo() {
  SharedDtor();
}

void EnemyInfo::SharedDtor() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (guildicon_ != &::google::protobuf::internal::kEmptyString) {
    delete guildicon_;
  }
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    delete servername_;
  }
  if (this != default_instance_) {
  }
}

void EnemyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnemyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnemyInfo_descriptor_;
}

const EnemyInfo& EnemyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();  return *default_instance_;
}

EnemyInfo* EnemyInfo::default_instance_ = NULL;

EnemyInfo* EnemyInfo::New() const {
  return new EnemyInfo;
}

void EnemyInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0;
    score_ = 0;
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
    if (has_guildicon()) {
      if (guildicon_ != &::google::protobuf::internal::kEmptyString) {
        guildicon_->clear();
      }
    }
    if (has_servername()) {
      if (servername_ != &::google::protobuf::internal::kEmptyString) {
        servername_->clear();
      }
    }
    finalrank_ = 0;
  }
  lineup_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnemyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }
      
      // required int32 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_guildname;
        break;
      }
      
      // required string guildname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_guildicon;
        break;
      }
      
      // required string guildicon = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildicon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildicon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildicon().data(), this->guildicon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_serverName;
        break;
      }
      
      // required string serverName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serverName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->servername().data(), this->servername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_lineup;
        break;
      }
      
      // repeated .protobuf.guild.EnemyLineupShow lineup = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lineup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lineup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_lineup;
        if (input->ExpectTag(56)) goto parse_finalRank;
        break;
      }
      
      // optional int32 finalRank = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finalRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &finalrank_)));
          set_has_finalrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnemyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }
  
  // required int32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->score(), output);
  }
  
  // required string guildname = 3;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->guildname(), output);
  }
  
  // required string guildicon = 4;
  if (has_guildicon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildicon().data(), this->guildicon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->guildicon(), output);
  }
  
  // required string serverName = 5;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->servername(), output);
  }
  
  // repeated .protobuf.guild.EnemyLineupShow lineup = 6;
  for (int i = 0; i < this->lineup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->lineup(i), output);
  }
  
  // optional int32 finalRank = 7;
  if (has_finalrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->finalrank(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnemyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }
  
  // required int32 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->score(), target);
  }
  
  // required string guildname = 3;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->guildname(), target);
  }
  
  // required string guildicon = 4;
  if (has_guildicon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildicon().data(), this->guildicon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->guildicon(), target);
  }
  
  // required string serverName = 5;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->servername(), target);
  }
  
  // repeated .protobuf.guild.EnemyLineupShow lineup = 6;
  for (int i = 0; i < this->lineup_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->lineup(i), target);
  }
  
  // optional int32 finalRank = 7;
  if (has_finalrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->finalrank(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnemyInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }
    
    // required int32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }
    
    // required string guildname = 3;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }
    
    // required string guildicon = 4;
    if (has_guildicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildicon());
    }
    
    // required string serverName = 5;
    if (has_servername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servername());
    }
    
    // optional int32 finalRank = 7;
    if (has_finalrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->finalrank());
    }
    
  }
  // repeated .protobuf.guild.EnemyLineupShow lineup = 6;
  total_size += 1 * this->lineup_size();
  for (int i = 0; i < this->lineup_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lineup(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnemyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnemyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnemyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnemyInfo::MergeFrom(const EnemyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  lineup_.MergeFrom(from.lineup_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_guildicon()) {
      set_guildicon(from.guildicon());
    }
    if (from.has_servername()) {
      set_servername(from.servername());
    }
    if (from.has_finalrank()) {
      set_finalrank(from.finalrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnemyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnemyInfo::CopyFrom(const EnemyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnemyInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  for (int i = 0; i < lineup_size(); i++) {
    if (!this->lineup(i).IsInitialized()) return false;
  }
  return true;
}

void EnemyInfo::Swap(EnemyInfo* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(score_, other->score_);
    std::swap(guildname_, other->guildname_);
    std::swap(guildicon_, other->guildicon_);
    std::swap(servername_, other->servername_);
    lineup_.Swap(&other->lineup_);
    std::swap(finalrank_, other->finalrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnemyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnemyInfo_descriptor_;
  metadata.reflection = EnemyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnemyLineupShow::kNameFieldNumber;
const int EnemyLineupShow::kIsHideFieldNumber;
const int EnemyLineupShow::kHerosFieldNumber;
#endif  // !_MSC_VER

EnemyLineupShow::EnemyLineupShow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnemyLineupShow::InitAsDefaultInstance() {
}

EnemyLineupShow::EnemyLineupShow(const EnemyLineupShow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnemyLineupShow::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ishide_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnemyLineupShow::~EnemyLineupShow() {
  SharedDtor();
}

void EnemyLineupShow::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void EnemyLineupShow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnemyLineupShow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnemyLineupShow_descriptor_;
}

const EnemyLineupShow& EnemyLineupShow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();  return *default_instance_;
}

EnemyLineupShow* EnemyLineupShow::default_instance_ = NULL;

EnemyLineupShow* EnemyLineupShow::New() const {
  return new EnemyLineupShow;
}

void EnemyLineupShow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    ishide_ = false;
  }
  heros_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnemyLineupShow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isHide;
        break;
      }
      
      // required bool isHide = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isHide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishide_)));
          set_has_ishide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_heros;
        break;
      }
      
      // repeated .protobuf.common.KVint3232 heros = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_heros()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_heros;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnemyLineupShow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required bool isHide = 2;
  if (has_ishide()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ishide(), output);
  }
  
  // repeated .protobuf.common.KVint3232 heros = 3;
  for (int i = 0; i < this->heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->heros(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnemyLineupShow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required bool isHide = 2;
  if (has_ishide()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ishide(), target);
  }
  
  // repeated .protobuf.common.KVint3232 heros = 3;
  for (int i = 0; i < this->heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->heros(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnemyLineupShow::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required bool isHide = 2;
    if (has_ishide()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .protobuf.common.KVint3232 heros = 3;
  total_size += 1 * this->heros_size();
  for (int i = 0; i < this->heros_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heros(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnemyLineupShow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnemyLineupShow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnemyLineupShow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnemyLineupShow::MergeFrom(const EnemyLineupShow& from) {
  GOOGLE_CHECK_NE(&from, this);
  heros_.MergeFrom(from.heros_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_ishide()) {
      set_ishide(from.ishide());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnemyLineupShow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnemyLineupShow::CopyFrom(const EnemyLineupShow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnemyLineupShow::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < heros_size(); i++) {
    if (!this->heros(i).IsInitialized()) return false;
  }
  return true;
}

void EnemyLineupShow::Swap(EnemyLineupShow* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(ishide_, other->ishide_);
    heros_.Swap(&other->heros_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnemyLineupShow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnemyLineupShow_descriptor_;
  metadata.reflection = EnemyLineupShow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RankInfo::kIdFieldNumber;
const int RankInfo::kLevelFieldNumber;
const int RankInfo::kNameFieldNumber;
const int RankInfo::kHeadFieldNumber;
const int RankInfo::kHeadFrameFieldNumber;
const int RankInfo::kWinTimeFieldNumber;
#endif  // !_MSC_VER

RankInfo::RankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RankInfo::InitAsDefaultInstance() {
}

RankInfo::RankInfo(const RankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RankInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  headframe_ = 0;
  wintime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankInfo::~RankInfo() {
  SharedDtor();
}

void RankInfo::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    delete head_;
  }
  if (this != default_instance_) {
  }
}

void RankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankInfo_descriptor_;
}

const RankInfo& RankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();  return *default_instance_;
}

RankInfo* RankInfo::default_instance_ = NULL;

RankInfo* RankInfo::New() const {
  return new RankInfo;
}

void RankInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    level_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_head()) {
      if (head_ != &::google::protobuf::internal::kEmptyString) {
        head_->clear();
      }
    }
    headframe_ = 0;
    wintime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }
      
      // required int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_head;
        break;
      }
      
      // required string head = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_head()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->head().data(), this->head().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_headFrame;
        break;
      }
      
      // required int32 headFrame = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headFrame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headframe_)));
          set_has_headframe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_winTime;
        break;
      }
      
      // required int32 winTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wintime_)));
          set_has_wintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }
  
  // required int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }
  
  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }
  
  // required string head = 4;
  if (has_head()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head().data(), this->head().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->head(), output);
  }
  
  // required int32 headFrame = 5;
  if (has_headframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->headframe(), output);
  }
  
  // required int32 winTime = 6;
  if (has_wintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->wintime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }
  
  // required int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }
  
  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }
  
  // required string head = 4;
  if (has_head()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head().data(), this->head().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->head(), target);
  }
  
  // required int32 headFrame = 5;
  if (has_headframe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->headframe(), target);
  }
  
  // required int32 winTime = 6;
  if (has_wintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->wintime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RankInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
    // required int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string head = 4;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->head());
    }
    
    // required int32 headFrame = 5;
    if (has_headframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headframe());
    }
    
    // required int32 winTime = 6;
    if (has_wintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wintime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankInfo::MergeFrom(const RankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_head()) {
      set_head(from.head());
    }
    if (from.has_headframe()) {
      set_headframe(from.headframe());
    }
    if (from.has_wintime()) {
      set_wintime(from.wintime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankInfo::CopyFrom(const RankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void RankInfo::Swap(RankInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(name_, other->name_);
    std::swap(head_, other->head_);
    std::swap(headframe_, other->headframe_);
    std::swap(wintime_, other->wintime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankInfo_descriptor_;
  metadata.reflection = RankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecordReply::kRecordsFieldNumber;
#endif  // !_MSC_VER

RecordReply::RecordReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecordReply::InitAsDefaultInstance() {
}

RecordReply::RecordReply(const RecordReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecordReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecordReply::~RecordReply() {
  SharedDtor();
}

void RecordReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecordReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordReply_descriptor_;
}

const RecordReply& RecordReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();  return *default_instance_;
}

RecordReply* RecordReply::default_instance_ = NULL;

RecordReply* RecordReply::New() const {
  return new RecordReply;
}

void RecordReply::Clear() {
  records_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecordReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.guild.Record records = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_records()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_records;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecordReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.guild.Record records = 1;
  for (int i = 0; i < this->records_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->records(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecordReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.guild.Record records = 1;
  for (int i = 0; i < this->records_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->records(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecordReply::ByteSize() const {
  int total_size = 0;
  
  // repeated .protobuf.guild.Record records = 1;
  total_size += 1 * this->records_size();
  for (int i = 0; i < this->records_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->records(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecordReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecordReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecordReply::MergeFrom(const RecordReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  records_.MergeFrom(from.records_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecordReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordReply::CopyFrom(const RecordReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordReply::IsInitialized() const {
  
  for (int i = 0; i < records_size(); i++) {
    if (!this->records(i).IsInitialized()) return false;
  }
  return true;
}

void RecordReply::Swap(RecordReply* other) {
  if (other != this) {
    records_.Swap(&other->records_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecordReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecordReply_descriptor_;
  metadata.reflection = RecordReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Record::kIdFieldNumber;
const int Record::kServerNameFieldNumber;
const int Record::kNameFieldNumber;
const int Record::kIconFieldNumber;
const int Record::kScoreFieldNumber;
const int Record::kTimeFieldNumber;
const int Record::kIsWinFieldNumber;
#endif  // !_MSC_VER

Record::Record()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Record::InitAsDefaultInstance() {
}

Record::Record(const Record& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Record::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  score_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  iswin_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Record::~Record() {
  SharedDtor();
}

void Record::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    delete servername_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (this != default_instance_) {
  }
}

void Record::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Record::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Record_descriptor_;
}

const Record& Record::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();  return *default_instance_;
}

Record* Record::default_instance_ = NULL;

Record* Record::New() const {
  return new Record;
}

void Record::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_servername()) {
      if (servername_ != &::google::protobuf::internal::kEmptyString) {
        servername_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
    score_ = 0;
    time_ = GOOGLE_LONGLONG(0);
    iswin_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_serverName;
        break;
      }
      
      // required string serverName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serverName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->servername().data(), this->servername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_icon;
        break;
      }
      
      // required string icon = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_score;
        break;
      }
      
      // required int32 score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_time;
        break;
      }
      
      // required int64 time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_isWin;
        break;
      }
      
      // required bool isWin = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iswin_)));
          set_has_iswin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }
  
  // required string serverName = 2;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->servername(), output);
  }
  
  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }
  
  // required string icon = 4;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->icon(), output);
  }
  
  // required int32 score = 5;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->score(), output);
  }
  
  // required int64 time = 6;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->time(), output);
  }
  
  // required bool isWin = 7;
  if (has_iswin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->iswin(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Record::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }
  
  // required string serverName = 2;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->servername(), target);
  }
  
  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }
  
  // required string icon = 4;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->icon(), target);
  }
  
  // required int32 score = 5;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->score(), target);
  }
  
  // required int64 time = 6;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->time(), target);
  }
  
  // required bool isWin = 7;
  if (has_iswin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->iswin(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Record::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
    // required string serverName = 2;
    if (has_servername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servername());
    }
    
    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string icon = 4;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }
    
    // required int32 score = 5;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }
    
    // required int64 time = 6;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }
    
    // required bool isWin = 7;
    if (has_iswin()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Record::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Record* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Record*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Record::MergeFrom(const Record& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_servername()) {
      set_servername(from.servername());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_iswin()) {
      set_iswin(from.iswin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Record::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Record::CopyFrom(const Record& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Record::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void Record::Swap(Record* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(servername_, other->servername_);
    std::swap(name_, other->name_);
    std::swap(icon_, other->icon_);
    std::swap(score_, other->score_);
    std::swap(time_, other->time_);
    std::swap(iswin_, other->iswin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Record::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Record_descriptor_;
  metadata.reflection = Record_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatRecord::kIdFieldNumber;
const int ChatRecord::kAtServerNameFieldNumber;
const int ChatRecord::kAtNameFieldNumber;
const int ChatRecord::kAtIconFieldNumber;
const int ChatRecord::kDeServerNameFieldNumber;
const int ChatRecord::kDeNameFieldNumber;
const int ChatRecord::kDeIconFieldNumber;
const int ChatRecord::kScoreFieldNumber;
const int ChatRecord::kTimeFieldNumber;
const int ChatRecord::kIsWinFieldNumber;
const int ChatRecord::kWinTimeFieldNumber;
const int ChatRecord::kFailTimeFieldNumber;
#endif  // !_MSC_VER

ChatRecord::ChatRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatRecord::InitAsDefaultInstance() {
}

ChatRecord::ChatRecord(const ChatRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatRecord::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  atservername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  atname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  aticon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deservername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  score_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  iswin_ = false;
  wintime_ = 0;
  failtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatRecord::~ChatRecord() {
  SharedDtor();
}

void ChatRecord::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (atservername_ != &::google::protobuf::internal::kEmptyString) {
    delete atservername_;
  }
  if (atname_ != &::google::protobuf::internal::kEmptyString) {
    delete atname_;
  }
  if (aticon_ != &::google::protobuf::internal::kEmptyString) {
    delete aticon_;
  }
  if (deservername_ != &::google::protobuf::internal::kEmptyString) {
    delete deservername_;
  }
  if (dename_ != &::google::protobuf::internal::kEmptyString) {
    delete dename_;
  }
  if (deicon_ != &::google::protobuf::internal::kEmptyString) {
    delete deicon_;
  }
  if (this != default_instance_) {
  }
}

void ChatRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatRecord_descriptor_;
}

const ChatRecord& ChatRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();  return *default_instance_;
}

ChatRecord* ChatRecord::default_instance_ = NULL;

ChatRecord* ChatRecord::New() const {
  return new ChatRecord;
}

void ChatRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_atservername()) {
      if (atservername_ != &::google::protobuf::internal::kEmptyString) {
        atservername_->clear();
      }
    }
    if (has_atname()) {
      if (atname_ != &::google::protobuf::internal::kEmptyString) {
        atname_->clear();
      }
    }
    if (has_aticon()) {
      if (aticon_ != &::google::protobuf::internal::kEmptyString) {
        aticon_->clear();
      }
    }
    if (has_deservername()) {
      if (deservername_ != &::google::protobuf::internal::kEmptyString) {
        deservername_->clear();
      }
    }
    if (has_dename()) {
      if (dename_ != &::google::protobuf::internal::kEmptyString) {
        dename_->clear();
      }
    }
    if (has_deicon()) {
      if (deicon_ != &::google::protobuf::internal::kEmptyString) {
        deicon_->clear();
      }
    }
    score_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    time_ = GOOGLE_LONGLONG(0);
    iswin_ = false;
    wintime_ = 0;
    failtime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_atServerName;
        break;
      }
      
      // required string atServerName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_atServerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_atservername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->atservername().data(), this->atservername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_atName;
        break;
      }
      
      // required string atName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_atName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_atname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->atname().data(), this->atname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_atIcon;
        break;
      }
      
      // required string atIcon = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_atIcon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_aticon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->aticon().data(), this->aticon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_deServerName;
        break;
      }
      
      // required string deServerName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deServerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deservername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deservername().data(), this->deservername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_deName;
        break;
      }
      
      // required string deName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dename().data(), this->dename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_deIcon;
        break;
      }
      
      // required string deIcon = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deIcon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deicon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deicon().data(), this->deicon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_score;
        break;
      }
      
      // required int32 score = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_time;
        break;
      }
      
      // required int64 time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_isWin;
        break;
      }
      
      // required bool isWin = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iswin_)));
          set_has_iswin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_winTime;
        break;
      }
      
      // required int32 winTime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wintime_)));
          set_has_wintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_failTime;
        break;
      }
      
      // required int32 failTime = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_failTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &failtime_)));
          set_has_failtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }
  
  // required string atServerName = 2;
  if (has_atservername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->atservername().data(), this->atservername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->atservername(), output);
  }
  
  // required string atName = 3;
  if (has_atname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->atname().data(), this->atname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->atname(), output);
  }
  
  // required string atIcon = 4;
  if (has_aticon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->aticon().data(), this->aticon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->aticon(), output);
  }
  
  // required string deServerName = 5;
  if (has_deservername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deservername().data(), this->deservername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->deservername(), output);
  }
  
  // required string deName = 6;
  if (has_dename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dename().data(), this->dename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->dename(), output);
  }
  
  // required string deIcon = 7;
  if (has_deicon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deicon().data(), this->deicon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->deicon(), output);
  }
  
  // required int32 score = 8;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->score(), output);
  }
  
  // required int64 time = 9;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->time(), output);
  }
  
  // required bool isWin = 10;
  if (has_iswin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->iswin(), output);
  }
  
  // required int32 winTime = 11;
  if (has_wintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->wintime(), output);
  }
  
  // required int32 failTime = 12;
  if (has_failtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->failtime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }
  
  // required string atServerName = 2;
  if (has_atservername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->atservername().data(), this->atservername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->atservername(), target);
  }
  
  // required string atName = 3;
  if (has_atname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->atname().data(), this->atname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->atname(), target);
  }
  
  // required string atIcon = 4;
  if (has_aticon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->aticon().data(), this->aticon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->aticon(), target);
  }
  
  // required string deServerName = 5;
  if (has_deservername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deservername().data(), this->deservername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->deservername(), target);
  }
  
  // required string deName = 6;
  if (has_dename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dename().data(), this->dename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->dename(), target);
  }
  
  // required string deIcon = 7;
  if (has_deicon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deicon().data(), this->deicon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->deicon(), target);
  }
  
  // required int32 score = 8;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->score(), target);
  }
  
  // required int64 time = 9;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->time(), target);
  }
  
  // required bool isWin = 10;
  if (has_iswin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->iswin(), target);
  }
  
  // required int32 winTime = 11;
  if (has_wintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->wintime(), target);
  }
  
  // required int32 failTime = 12;
  if (has_failtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->failtime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatRecord::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
    // required string atServerName = 2;
    if (has_atservername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->atservername());
    }
    
    // required string atName = 3;
    if (has_atname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->atname());
    }
    
    // required string atIcon = 4;
    if (has_aticon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->aticon());
    }
    
    // required string deServerName = 5;
    if (has_deservername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deservername());
    }
    
    // required string deName = 6;
    if (has_dename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dename());
    }
    
    // required string deIcon = 7;
    if (has_deicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deicon());
    }
    
    // required int32 score = 8;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 time = 9;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }
    
    // required bool isWin = 10;
    if (has_iswin()) {
      total_size += 1 + 1;
    }
    
    // required int32 winTime = 11;
    if (has_wintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wintime());
    }
    
    // required int32 failTime = 12;
    if (has_failtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->failtime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatRecord::MergeFrom(const ChatRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_atservername()) {
      set_atservername(from.atservername());
    }
    if (from.has_atname()) {
      set_atname(from.atname());
    }
    if (from.has_aticon()) {
      set_aticon(from.aticon());
    }
    if (from.has_deservername()) {
      set_deservername(from.deservername());
    }
    if (from.has_dename()) {
      set_dename(from.dename());
    }
    if (from.has_deicon()) {
      set_deicon(from.deicon());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_iswin()) {
      set_iswin(from.iswin());
    }
    if (from.has_wintime()) {
      set_wintime(from.wintime());
    }
    if (from.has_failtime()) {
      set_failtime(from.failtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatRecord::CopyFrom(const ChatRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;
  
  return true;
}

void ChatRecord::Swap(ChatRecord* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(atservername_, other->atservername_);
    std::swap(atname_, other->atname_);
    std::swap(aticon_, other->aticon_);
    std::swap(deservername_, other->deservername_);
    std::swap(dename_, other->dename_);
    std::swap(deicon_, other->deicon_);
    std::swap(score_, other->score_);
    std::swap(time_, other->time_);
    std::swap(iswin_, other->iswin_);
    std::swap(wintime_, other->wintime_);
    std::swap(failtime_, other->failtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatRecord_descriptor_;
  metadata.reflection = ChatRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetLineup::kIdsFieldNumber;
const int SetLineup::kHidesFieldNumber;
#endif  // !_MSC_VER

SetLineup::SetLineup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetLineup::InitAsDefaultInstance() {
}

SetLineup::SetLineup(const SetLineup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetLineup::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetLineup::~SetLineup() {
  SharedDtor();
}

void SetLineup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetLineup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetLineup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetLineup_descriptor_;
}

const SetLineup& SetLineup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();  return *default_instance_;
}

SetLineup* SetLineup::default_instance_ = NULL;

SetLineup* SetLineup::New() const {
  return new SetLineup;
}

void SetLineup::Clear() {
  ids_.Clear();
  hides_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetLineup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ids(0).data(), this->ids(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ids;
        if (input->ExpectTag(18)) goto parse_hides;
        break;
      }
      
      // repeated string hides = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hides:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_hides()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hides(0).data(), this->hides(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hides;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetLineup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string ids = 1;
  for (int i = 0; i < this->ids_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->ids(i).data(), this->ids(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ids(i), output);
  }
  
  // repeated string hides = 2;
  for (int i = 0; i < this->hides_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->hides(i).data(), this->hides(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->hides(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetLineup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string ids = 1;
  for (int i = 0; i < this->ids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ids(i).data(), this->ids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->ids(i), target);
  }
  
  // repeated string hides = 2;
  for (int i = 0; i < this->hides_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hides(i).data(), this->hides(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->hides(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetLineup::ByteSize() const {
  int total_size = 0;
  
  // repeated string ids = 1;
  total_size += 1 * this->ids_size();
  for (int i = 0; i < this->ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ids(i));
  }
  
  // repeated string hides = 2;
  total_size += 1 * this->hides_size();
  for (int i = 0; i < this->hides_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->hides(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetLineup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetLineup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetLineup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetLineup::MergeFrom(const SetLineup& from) {
  GOOGLE_CHECK_NE(&from, this);
  ids_.MergeFrom(from.ids_);
  hides_.MergeFrom(from.hides_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetLineup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetLineup::CopyFrom(const SetLineup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetLineup::IsInitialized() const {
  
  return true;
}

void SetLineup::Swap(SetLineup* other) {
  if (other != this) {
    ids_.Swap(&other->ids_);
    hides_.Swap(&other->hides_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetLineup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetLineup_descriptor_;
  metadata.reflection = SetLineup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecordDetailReply::kRecordsFieldNumber;
#endif  // !_MSC_VER

RecordDetailReply::RecordDetailReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecordDetailReply::InitAsDefaultInstance() {
}

RecordDetailReply::RecordDetailReply(const RecordDetailReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecordDetailReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecordDetailReply::~RecordDetailReply() {
  SharedDtor();
}

void RecordDetailReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecordDetailReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordDetailReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordDetailReply_descriptor_;
}

const RecordDetailReply& RecordDetailReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();  return *default_instance_;
}

RecordDetailReply* RecordDetailReply::default_instance_ = NULL;

RecordDetailReply* RecordDetailReply::New() const {
  return new RecordDetailReply;
}

void RecordDetailReply::Clear() {
  records_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecordDetailReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.guild.RecordDetail records = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_records()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_records;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecordDetailReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.guild.RecordDetail records = 1;
  for (int i = 0; i < this->records_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->records(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecordDetailReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.guild.RecordDetail records = 1;
  for (int i = 0; i < this->records_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->records(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecordDetailReply::ByteSize() const {
  int total_size = 0;
  
  // repeated .protobuf.guild.RecordDetail records = 1;
  total_size += 1 * this->records_size();
  for (int i = 0; i < this->records_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->records(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordDetailReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecordDetailReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecordDetailReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecordDetailReply::MergeFrom(const RecordDetailReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  records_.MergeFrom(from.records_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecordDetailReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordDetailReply::CopyFrom(const RecordDetailReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordDetailReply::IsInitialized() const {
  
  for (int i = 0; i < records_size(); i++) {
    if (!this->records(i).IsInitialized()) return false;
  }
  return true;
}

void RecordDetailReply::Swap(RecordDetailReply* other) {
  if (other != this) {
    records_.Swap(&other->records_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecordDetailReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecordDetailReply_descriptor_;
  metadata.reflection = RecordDetailReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecordDetail::kIdFieldNumber;
const int RecordDetail::kAtLvFieldNumber;
const int RecordDetail::kAtNameFieldNumber;
const int RecordDetail::kAtHeadFieldNumber;
const int RecordDetail::kAtHeadFrameFieldNumber;
const int RecordDetail::kDeLvFieldNumber;
const int RecordDetail::kDeNameFieldNumber;
const int RecordDetail::kDeHeadFieldNumber;
const int RecordDetail::kDeHeadFrameFieldNumber;
const int RecordDetail::kAtIsWinFieldNumber;
const int RecordDetail::kAtHerosFieldNumber;
const int RecordDetail::kDeHerosFieldNumber;
#endif  // !_MSC_VER

RecordDetail::RecordDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecordDetail::InitAsDefaultInstance() {
}

RecordDetail::RecordDetail(const RecordDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecordDetail::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  atlv_ = 0;
  atname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  athead_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  atheadframe_ = 0;
  delv_ = 0;
  dename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dehead_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deheadframe_ = 0;
  atiswin_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecordDetail::~RecordDetail() {
  SharedDtor();
}

void RecordDetail::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (atname_ != &::google::protobuf::internal::kEmptyString) {
    delete atname_;
  }
  if (athead_ != &::google::protobuf::internal::kEmptyString) {
    delete athead_;
  }
  if (dename_ != &::google::protobuf::internal::kEmptyString) {
    delete dename_;
  }
  if (dehead_ != &::google::protobuf::internal::kEmptyString) {
    delete dehead_;
  }
  if (this != default_instance_) {
  }
}

void RecordDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordDetail_descriptor_;
}

const RecordDetail& RecordDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();  return *default_instance_;
}

RecordDetail* RecordDetail::default_instance_ = NULL;

RecordDetail* RecordDetail::New() const {
  return new RecordDetail;
}

void RecordDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    atlv_ = 0;
    if (has_atname()) {
      if (atname_ != &::google::protobuf::internal::kEmptyString) {
        atname_->clear();
      }
    }
    if (has_athead()) {
      if (athead_ != &::google::protobuf::internal::kEmptyString) {
        athead_->clear();
      }
    }
    atheadframe_ = 0;
    delv_ = 0;
    if (has_dename()) {
      if (dename_ != &::google::protobuf::internal::kEmptyString) {
        dename_->clear();
      }
    }
    if (has_dehead()) {
      if (dehead_ != &::google::protobuf::internal::kEmptyString) {
        dehead_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    deheadframe_ = 0;
    atiswin_ = false;
  }
  atheros_.Clear();
  deheros_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecordDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_atLv;
        break;
      }
      
      // required int32 atLv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &atlv_)));
          set_has_atlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_atName;
        break;
      }
      
      // required string atName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_atName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_atname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->atname().data(), this->atname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_atHead;
        break;
      }
      
      // required string atHead = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_atHead:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_athead()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->athead().data(), this->athead().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_atHeadFrame;
        break;
      }
      
      // required int32 atHeadFrame = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atHeadFrame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &atheadframe_)));
          set_has_atheadframe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_deLv;
        break;
      }
      
      // required int32 deLv = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delv_)));
          set_has_delv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_deName;
        break;
      }
      
      // required string deName = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dename().data(), this->dename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_deHead;
        break;
      }
      
      // required string deHead = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deHead:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dehead()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dehead().data(), this->dehead().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_deHeadFrame;
        break;
      }
      
      // required int32 deHeadFrame = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deHeadFrame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deheadframe_)));
          set_has_deheadframe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_atIsWin;
        break;
      }
      
      // required bool atIsWin = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atIsWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &atiswin_)));
          set_has_atiswin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_atHeros;
        break;
      }
      
      // repeated .protobuf.guild.HeroShow atHeros = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_atHeros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_atheros()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_atHeros;
        if (input->ExpectTag(98)) goto parse_deHeros;
        break;
      }
      
      // repeated .protobuf.guild.HeroShow deHeros = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deHeros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_deheros()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_deHeros;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecordDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }
  
  // required int32 atLv = 2;
  if (has_atlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->atlv(), output);
  }
  
  // required string atName = 3;
  if (has_atname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->atname().data(), this->atname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->atname(), output);
  }
  
  // required string atHead = 4;
  if (has_athead()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->athead().data(), this->athead().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->athead(), output);
  }
  
  // required int32 atHeadFrame = 5;
  if (has_atheadframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->atheadframe(), output);
  }
  
  // required int32 deLv = 6;
  if (has_delv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->delv(), output);
  }
  
  // required string deName = 7;
  if (has_dename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dename().data(), this->dename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->dename(), output);
  }
  
  // required string deHead = 8;
  if (has_dehead()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dehead().data(), this->dehead().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->dehead(), output);
  }
  
  // required int32 deHeadFrame = 9;
  if (has_deheadframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->deheadframe(), output);
  }
  
  // required bool atIsWin = 10;
  if (has_atiswin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->atiswin(), output);
  }
  
  // repeated .protobuf.guild.HeroShow atHeros = 11;
  for (int i = 0; i < this->atheros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->atheros(i), output);
  }
  
  // repeated .protobuf.guild.HeroShow deHeros = 12;
  for (int i = 0; i < this->deheros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->deheros(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecordDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }
  
  // required int32 atLv = 2;
  if (has_atlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->atlv(), target);
  }
  
  // required string atName = 3;
  if (has_atname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->atname().data(), this->atname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->atname(), target);
  }
  
  // required string atHead = 4;
  if (has_athead()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->athead().data(), this->athead().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->athead(), target);
  }
  
  // required int32 atHeadFrame = 5;
  if (has_atheadframe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->atheadframe(), target);
  }
  
  // required int32 deLv = 6;
  if (has_delv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->delv(), target);
  }
  
  // required string deName = 7;
  if (has_dename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dename().data(), this->dename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->dename(), target);
  }
  
  // required string deHead = 8;
  if (has_dehead()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dehead().data(), this->dehead().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->dehead(), target);
  }
  
  // required int32 deHeadFrame = 9;
  if (has_deheadframe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->deheadframe(), target);
  }
  
  // required bool atIsWin = 10;
  if (has_atiswin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->atiswin(), target);
  }
  
  // repeated .protobuf.guild.HeroShow atHeros = 11;
  for (int i = 0; i < this->atheros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->atheros(i), target);
  }
  
  // repeated .protobuf.guild.HeroShow deHeros = 12;
  for (int i = 0; i < this->deheros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->deheros(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecordDetail::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
    // required int32 atLv = 2;
    if (has_atlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->atlv());
    }
    
    // required string atName = 3;
    if (has_atname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->atname());
    }
    
    // required string atHead = 4;
    if (has_athead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->athead());
    }
    
    // required int32 atHeadFrame = 5;
    if (has_atheadframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->atheadframe());
    }
    
    // required int32 deLv = 6;
    if (has_delv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delv());
    }
    
    // required string deName = 7;
    if (has_dename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dename());
    }
    
    // required string deHead = 8;
    if (has_dehead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dehead());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 deHeadFrame = 9;
    if (has_deheadframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deheadframe());
    }
    
    // required bool atIsWin = 10;
    if (has_atiswin()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .protobuf.guild.HeroShow atHeros = 11;
  total_size += 1 * this->atheros_size();
  for (int i = 0; i < this->atheros_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->atheros(i));
  }
  
  // repeated .protobuf.guild.HeroShow deHeros = 12;
  total_size += 1 * this->deheros_size();
  for (int i = 0; i < this->deheros_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->deheros(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecordDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecordDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecordDetail::MergeFrom(const RecordDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  atheros_.MergeFrom(from.atheros_);
  deheros_.MergeFrom(from.deheros_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_atlv()) {
      set_atlv(from.atlv());
    }
    if (from.has_atname()) {
      set_atname(from.atname());
    }
    if (from.has_athead()) {
      set_athead(from.athead());
    }
    if (from.has_atheadframe()) {
      set_atheadframe(from.atheadframe());
    }
    if (from.has_delv()) {
      set_delv(from.delv());
    }
    if (from.has_dename()) {
      set_dename(from.dename());
    }
    if (from.has_dehead()) {
      set_dehead(from.dehead());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_deheadframe()) {
      set_deheadframe(from.deheadframe());
    }
    if (from.has_atiswin()) {
      set_atiswin(from.atiswin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecordDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordDetail::CopyFrom(const RecordDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordDetail::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;
  
  for (int i = 0; i < atheros_size(); i++) {
    if (!this->atheros(i).IsInitialized()) return false;
  }
  for (int i = 0; i < deheros_size(); i++) {
    if (!this->deheros(i).IsInitialized()) return false;
  }
  return true;
}

void RecordDetail::Swap(RecordDetail* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(atlv_, other->atlv_);
    std::swap(atname_, other->atname_);
    std::swap(athead_, other->athead_);
    std::swap(atheadframe_, other->atheadframe_);
    std::swap(delv_, other->delv_);
    std::swap(dename_, other->dename_);
    std::swap(dehead_, other->dehead_);
    std::swap(deheadframe_, other->deheadframe_);
    std::swap(atiswin_, other->atiswin_);
    atheros_.Swap(&other->atheros_);
    deheros_.Swap(&other->deheros_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecordDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecordDetail_descriptor_;
  metadata.reflection = RecordDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroShow::kIndexFieldNumber;
const int HeroShow::kIdFieldNumber;
const int HeroShow::kLvFieldNumber;
const int HeroShow::kIsDieFieldNumber;
#endif  // !_MSC_VER

HeroShow::HeroShow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeroShow::InitAsDefaultInstance() {
}

HeroShow::HeroShow(const HeroShow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeroShow::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  id_ = 0;
  lv_ = 0;
  isdie_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroShow::~HeroShow() {
  SharedDtor();
}

void HeroShow::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeroShow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroShow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroShow_descriptor_;
}

const HeroShow& HeroShow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();  return *default_instance_;
}

HeroShow* HeroShow::default_instance_ = NULL;

HeroShow* HeroShow::New() const {
  return new HeroShow;
}

void HeroShow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    id_ = 0;
    lv_ = 0;
    isdie_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroShow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // required int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lv;
        break;
      }
      
      // required int32 lv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isDie;
        break;
      }
      
      // required bool isDie = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isDie:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdie_)));
          set_has_isdie();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeroShow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }
  
  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  // required int32 lv = 3;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lv(), output);
  }
  
  // required bool isDie = 4;
  if (has_isdie()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isdie(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeroShow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }
  
  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  // required int32 lv = 3;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lv(), target);
  }
  
  // required bool isDie = 4;
  if (has_isdie()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isdie(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeroShow::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required int32 lv = 3;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }
    
    // required bool isDie = 4;
    if (has_isdie()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroShow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroShow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroShow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroShow::MergeFrom(const HeroShow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_isdie()) {
      set_isdie(from.isdie());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroShow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroShow::CopyFrom(const HeroShow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroShow::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void HeroShow::Swap(HeroShow* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(id_, other->id_);
    std::swap(lv_, other->lv_);
    std::swap(isdie_, other->isdie_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroShow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroShow_descriptor_;
  metadata.reflection = HeroShow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FinalRecord::kAtServerNameFieldNumber;
const int FinalRecord::kAtNameFieldNumber;
const int FinalRecord::kAtIconFieldNumber;
const int FinalRecord::kDeServerNameFieldNumber;
const int FinalRecord::kDeNameFieldNumber;
const int FinalRecord::kDeIconFieldNumber;
const int FinalRecord::kIsWinFieldNumber;
const int FinalRecord::kRecordsFieldNumber;
#endif  // !_MSC_VER

FinalRecord::FinalRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FinalRecord::InitAsDefaultInstance() {
}

FinalRecord::FinalRecord(const FinalRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FinalRecord::SharedCtor() {
  _cached_size_ = 0;
  atservername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  atname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  aticon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deservername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  iswin_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FinalRecord::~FinalRecord() {
  SharedDtor();
}

void FinalRecord::SharedDtor() {
  if (atservername_ != &::google::protobuf::internal::kEmptyString) {
    delete atservername_;
  }
  if (atname_ != &::google::protobuf::internal::kEmptyString) {
    delete atname_;
  }
  if (aticon_ != &::google::protobuf::internal::kEmptyString) {
    delete aticon_;
  }
  if (deservername_ != &::google::protobuf::internal::kEmptyString) {
    delete deservername_;
  }
  if (dename_ != &::google::protobuf::internal::kEmptyString) {
    delete dename_;
  }
  if (deicon_ != &::google::protobuf::internal::kEmptyString) {
    delete deicon_;
  }
  if (this != default_instance_) {
  }
}

void FinalRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FinalRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FinalRecord_descriptor_;
}

const FinalRecord& FinalRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();  return *default_instance_;
}

FinalRecord* FinalRecord::default_instance_ = NULL;

FinalRecord* FinalRecord::New() const {
  return new FinalRecord;
}

void FinalRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_atservername()) {
      if (atservername_ != &::google::protobuf::internal::kEmptyString) {
        atservername_->clear();
      }
    }
    if (has_atname()) {
      if (atname_ != &::google::protobuf::internal::kEmptyString) {
        atname_->clear();
      }
    }
    if (has_aticon()) {
      if (aticon_ != &::google::protobuf::internal::kEmptyString) {
        aticon_->clear();
      }
    }
    if (has_deservername()) {
      if (deservername_ != &::google::protobuf::internal::kEmptyString) {
        deservername_->clear();
      }
    }
    if (has_dename()) {
      if (dename_ != &::google::protobuf::internal::kEmptyString) {
        dename_->clear();
      }
    }
    if (has_deicon()) {
      if (deicon_ != &::google::protobuf::internal::kEmptyString) {
        deicon_->clear();
      }
    }
    iswin_ = false;
  }
  records_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FinalRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string atServerName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_atservername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->atservername().data(), this->atservername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_atName;
        break;
      }
      
      // required string atName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_atName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_atname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->atname().data(), this->atname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_atIcon;
        break;
      }
      
      // required string atIcon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_atIcon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_aticon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->aticon().data(), this->aticon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_deServerName;
        break;
      }
      
      // required string deServerName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deServerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deservername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deservername().data(), this->deservername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_deName;
        break;
      }
      
      // required string deName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dename().data(), this->dename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_deIcon;
        break;
      }
      
      // required string deIcon = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deIcon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deicon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deicon().data(), this->deicon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_isWin;
        break;
      }
      
      // required bool isWin = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iswin_)));
          set_has_iswin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_records;
        break;
      }
      
      // repeated .protobuf.guild.RecordDetail records = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_records()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_records;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FinalRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string atServerName = 1;
  if (has_atservername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->atservername().data(), this->atservername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->atservername(), output);
  }
  
  // required string atName = 2;
  if (has_atname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->atname().data(), this->atname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->atname(), output);
  }
  
  // required string atIcon = 3;
  if (has_aticon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->aticon().data(), this->aticon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->aticon(), output);
  }
  
  // required string deServerName = 4;
  if (has_deservername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deservername().data(), this->deservername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->deservername(), output);
  }
  
  // required string deName = 5;
  if (has_dename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dename().data(), this->dename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->dename(), output);
  }
  
  // required string deIcon = 6;
  if (has_deicon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deicon().data(), this->deicon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->deicon(), output);
  }
  
  // required bool isWin = 7;
  if (has_iswin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->iswin(), output);
  }
  
  // repeated .protobuf.guild.RecordDetail records = 8;
  for (int i = 0; i < this->records_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->records(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FinalRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string atServerName = 1;
  if (has_atservername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->atservername().data(), this->atservername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->atservername(), target);
  }
  
  // required string atName = 2;
  if (has_atname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->atname().data(), this->atname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->atname(), target);
  }
  
  // required string atIcon = 3;
  if (has_aticon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->aticon().data(), this->aticon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->aticon(), target);
  }
  
  // required string deServerName = 4;
  if (has_deservername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deservername().data(), this->deservername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->deservername(), target);
  }
  
  // required string deName = 5;
  if (has_dename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dename().data(), this->dename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->dename(), target);
  }
  
  // required string deIcon = 6;
  if (has_deicon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deicon().data(), this->deicon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->deicon(), target);
  }
  
  // required bool isWin = 7;
  if (has_iswin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->iswin(), target);
  }
  
  // repeated .protobuf.guild.RecordDetail records = 8;
  for (int i = 0; i < this->records_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->records(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FinalRecord::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string atServerName = 1;
    if (has_atservername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->atservername());
    }
    
    // required string atName = 2;
    if (has_atname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->atname());
    }
    
    // required string atIcon = 3;
    if (has_aticon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->aticon());
    }
    
    // required string deServerName = 4;
    if (has_deservername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deservername());
    }
    
    // required string deName = 5;
    if (has_dename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dename());
    }
    
    // required string deIcon = 6;
    if (has_deicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deicon());
    }
    
    // required bool isWin = 7;
    if (has_iswin()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .protobuf.guild.RecordDetail records = 8;
  total_size += 1 * this->records_size();
  for (int i = 0; i < this->records_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->records(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FinalRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FinalRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FinalRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FinalRecord::MergeFrom(const FinalRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  records_.MergeFrom(from.records_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_atservername()) {
      set_atservername(from.atservername());
    }
    if (from.has_atname()) {
      set_atname(from.atname());
    }
    if (from.has_aticon()) {
      set_aticon(from.aticon());
    }
    if (from.has_deservername()) {
      set_deservername(from.deservername());
    }
    if (from.has_dename()) {
      set_dename(from.dename());
    }
    if (from.has_deicon()) {
      set_deicon(from.deicon());
    }
    if (from.has_iswin()) {
      set_iswin(from.iswin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FinalRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FinalRecord::CopyFrom(const FinalRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinalRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  for (int i = 0; i < records_size(); i++) {
    if (!this->records(i).IsInitialized()) return false;
  }
  return true;
}

void FinalRecord::Swap(FinalRecord* other) {
  if (other != this) {
    std::swap(atservername_, other->atservername_);
    std::swap(atname_, other->atname_);
    std::swap(aticon_, other->aticon_);
    std::swap(deservername_, other->deservername_);
    std::swap(dename_, other->dename_);
    std::swap(deicon_, other->deicon_);
    std::swap(iswin_, other->iswin_);
    records_.Swap(&other->records_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FinalRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FinalRecord_descriptor_;
  metadata.reflection = FinalRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FinalGuildShow::kIdFieldNumber;
const int FinalGuildShow::kNameFieldNumber;
const int FinalGuildShow::kIconFieldNumber;
const int FinalGuildShow::kServerNameFieldNumber;
const int FinalGuildShow::kRankFieldNumber;
const int FinalGuildShow::kLastRankFieldNumber;
const int FinalGuildShow::kFinalRankFieldNumber;
#endif  // !_MSC_VER

FinalGuildShow::FinalGuildShow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FinalGuildShow::InitAsDefaultInstance() {
}

FinalGuildShow::FinalGuildShow(const FinalGuildShow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FinalGuildShow::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rank_ = 0;
  lastrank_ = 0;
  finalrank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FinalGuildShow::~FinalGuildShow() {
  SharedDtor();
}

void FinalGuildShow::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    delete servername_;
  }
  if (this != default_instance_) {
  }
}

void FinalGuildShow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FinalGuildShow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FinalGuildShow_descriptor_;
}

const FinalGuildShow& FinalGuildShow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();  return *default_instance_;
}

FinalGuildShow* FinalGuildShow::default_instance_ = NULL;

FinalGuildShow* FinalGuildShow::New() const {
  return new FinalGuildShow;
}

void FinalGuildShow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
    if (has_servername()) {
      if (servername_ != &::google::protobuf::internal::kEmptyString) {
        servername_->clear();
      }
    }
    rank_ = 0;
    lastrank_ = 0;
    finalrank_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FinalGuildShow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_icon;
        break;
      }
      
      // required string icon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_serverName;
        break;
      }
      
      // required string serverName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serverName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->servername().data(), this->servername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rank;
        break;
      }
      
      // required int32 rank = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_lastRank;
        break;
      }
      
      // optional int32 lastRank = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastrank_)));
          set_has_lastrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_finalRank;
        break;
      }
      
      // optional int32 finalRank = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finalRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &finalrank_)));
          set_has_finalrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FinalGuildShow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // required string icon = 3;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->icon(), output);
  }
  
  // required string serverName = 4;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->servername(), output);
  }
  
  // required int32 rank = 5;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rank(), output);
  }
  
  // optional int32 lastRank = 6;
  if (has_lastrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lastrank(), output);
  }
  
  // optional int32 finalRank = 7;
  if (has_finalrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->finalrank(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FinalGuildShow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // required string icon = 3;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->icon(), target);
  }
  
  // required string serverName = 4;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->servername(), target);
  }
  
  // required int32 rank = 5;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rank(), target);
  }
  
  // optional int32 lastRank = 6;
  if (has_lastrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->lastrank(), target);
  }
  
  // optional int32 finalRank = 7;
  if (has_finalrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->finalrank(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FinalGuildShow::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string icon = 3;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }
    
    // required string serverName = 4;
    if (has_servername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servername());
    }
    
    // required int32 rank = 5;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }
    
    // optional int32 lastRank = 6;
    if (has_lastrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastrank());
    }
    
    // optional int32 finalRank = 7;
    if (has_finalrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->finalrank());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FinalGuildShow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FinalGuildShow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FinalGuildShow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FinalGuildShow::MergeFrom(const FinalGuildShow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_servername()) {
      set_servername(from.servername());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_lastrank()) {
      set_lastrank(from.lastrank());
    }
    if (from.has_finalrank()) {
      set_finalrank(from.finalrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FinalGuildShow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FinalGuildShow::CopyFrom(const FinalGuildShow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinalGuildShow::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void FinalGuildShow::Swap(FinalGuildShow* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(icon_, other->icon_);
    std::swap(servername_, other->servername_);
    std::swap(rank_, other->rank_);
    std::swap(lastrank_, other->lastrank_);
    std::swap(finalrank_, other->finalrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FinalGuildShow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FinalGuildShow_descriptor_;
  metadata.reflection = FinalGuildShow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterFinal::kStateFieldNumber;
const int EnterFinal::kTimeFieldNumber;
const int EnterFinal::kIsRankFieldNumber;
const int EnterFinal::kBetFieldNumber;
const int EnterFinal::kLineupFieldNumber;
#endif  // !_MSC_VER

EnterFinal::EnterFinal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnterFinal::InitAsDefaultInstance() {
  bet_ = const_cast< ::protobuf::guild::Bet*>(&::protobuf::guild::Bet::default_instance());
}

EnterFinal::EnterFinal(const EnterFinal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnterFinal::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  isrank_ = false;
  bet_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterFinal::~EnterFinal() {
  SharedDtor();
}

void EnterFinal::SharedDtor() {
  if (this != default_instance_) {
    delete bet_;
  }
}

void EnterFinal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterFinal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterFinal_descriptor_;
}

const EnterFinal& EnterFinal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();  return *default_instance_;
}

EnterFinal* EnterFinal::default_instance_ = NULL;

EnterFinal* EnterFinal::New() const {
  return new EnterFinal;
}

void EnterFinal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 0;
    time_ = GOOGLE_LONGLONG(0);
    isrank_ = false;
    if (has_bet()) {
      if (bet_ != NULL) bet_->::protobuf::guild::Bet::Clear();
    }
  }
  lineup_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterFinal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }
      
      // optional int64 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isRank;
        break;
      }
      
      // optional bool isRank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isrank_)));
          set_has_isrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_bet;
        break;
      }
      
      // optional .protobuf.guild.Bet bet = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_lineup;
        break;
      }
      
      // repeated .protobuf.guild.FinalGuildShow lineup = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lineup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lineup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_lineup;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnterFinal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }
  
  // optional int64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time(), output);
  }
  
  // optional bool isRank = 3;
  if (has_isrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isrank(), output);
  }
  
  // optional .protobuf.guild.Bet bet = 4;
  if (has_bet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->bet(), output);
  }
  
  // repeated .protobuf.guild.FinalGuildShow lineup = 5;
  for (int i = 0; i < this->lineup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->lineup(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnterFinal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }
  
  // optional int64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time(), target);
  }
  
  // optional bool isRank = 3;
  if (has_isrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isrank(), target);
  }
  
  // optional .protobuf.guild.Bet bet = 4;
  if (has_bet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->bet(), target);
  }
  
  // repeated .protobuf.guild.FinalGuildShow lineup = 5;
  for (int i = 0; i < this->lineup_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->lineup(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnterFinal::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }
    
    // optional int64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }
    
    // optional bool isRank = 3;
    if (has_isrank()) {
      total_size += 1 + 1;
    }
    
    // optional .protobuf.guild.Bet bet = 4;
    if (has_bet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bet());
    }
    
  }
  // repeated .protobuf.guild.FinalGuildShow lineup = 5;
  total_size += 1 * this->lineup_size();
  for (int i = 0; i < this->lineup_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lineup(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterFinal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterFinal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterFinal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterFinal::MergeFrom(const EnterFinal& from) {
  GOOGLE_CHECK_NE(&from, this);
  lineup_.MergeFrom(from.lineup_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_isrank()) {
      set_isrank(from.isrank());
    }
    if (from.has_bet()) {
      mutable_bet()->::protobuf::guild::Bet::MergeFrom(from.bet());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterFinal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterFinal::CopyFrom(const EnterFinal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterFinal::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_bet()) {
    if (!this->bet().IsInitialized()) return false;
  }
  for (int i = 0; i < lineup_size(); i++) {
    if (!this->lineup(i).IsInitialized()) return false;
  }
  return true;
}

void EnterFinal::Swap(EnterFinal* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(time_, other->time_);
    std::swap(isrank_, other->isrank_);
    std::swap(bet_, other->bet_);
    lineup_.Swap(&other->lineup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterFinal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterFinal_descriptor_;
  metadata.reflection = EnterFinal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Bet::kIdFieldNumber;
const int Bet::kNumFieldNumber;
const int Bet::kRankFieldNumber;
#endif  // !_MSC_VER

Bet::Bet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Bet::InitAsDefaultInstance() {
}

Bet::Bet(const Bet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Bet::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  num_ = 0;
  rank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Bet::~Bet() {
  SharedDtor();
}

void Bet::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void Bet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Bet_descriptor_;
}

const Bet& Bet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();  return *default_instance_;
}

Bet* Bet::default_instance_ = NULL;

Bet* Bet::New() const {
  return new Bet;
}

void Bet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    num_ = 0;
    rank_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Bet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }
      
      // required int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rank;
        break;
      }
      
      // required int32 rank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Bet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }
  
  // required int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }
  
  // required int32 rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rank(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Bet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }
  
  // required int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }
  
  // required int32 rank = 3;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rank(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Bet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
    // required int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }
    
    // required int32 rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Bet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Bet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Bet::MergeFrom(const Bet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Bet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bet::CopyFrom(const Bet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void Bet::Swap(Bet* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Bet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Bet_descriptor_;
  metadata.reflection = Bet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Box::kItemsFieldNumber;
const int Box::kTypeFieldNumber;
const int Box::kRankFieldNumber;
const int Box::kNextTypeFieldNumber;
#endif  // !_MSC_VER

Box::Box()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Box::InitAsDefaultInstance() {
}

Box::Box(const Box& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Box::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  rank_ = 0;
  nexttype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Box::~Box() {
  SharedDtor();
}

void Box::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Box::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Box::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Box_descriptor_;
}

const Box& Box::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();  return *default_instance_;
}

Box* Box::default_instance_ = NULL;

Box* Box::New() const {
  return new Box;
}

void Box::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    type_ = 0;
    rank_ = 0;
    nexttype_ = 0;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Box::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.common.KVint3264 items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rank;
        break;
      }
      
      // required int32 rank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nextType;
        break;
      }
      
      // required int32 nextType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nexttype_)));
          set_has_nexttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Box::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.common.KVint3264 items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }
  
  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  // required int32 rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rank(), output);
  }
  
  // required int32 nextType = 4;
  if (has_nexttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->nexttype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Box::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.common.KVint3264 items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }
  
  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  // required int32 rank = 3;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rank(), target);
  }
  
  // required int32 nextType = 4;
  if (has_nexttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->nexttype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Box::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required int32 rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }
    
    // required int32 nextType = 4;
    if (has_nexttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nexttype());
    }
    
  }
  // repeated .protobuf.common.KVint3264 items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Box::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Box* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Box*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Box::MergeFrom(const Box& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_nexttype()) {
      set_nexttype(from.nexttype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Box::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Box::CopyFrom(const Box& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Box::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void Box::Swap(Box* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(type_, other->type_);
    std::swap(rank_, other->rank_);
    std::swap(nexttype_, other->nexttype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Box::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Box_descriptor_;
  metadata.reflection = Box_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace guild
}  // namespace protobuf

// @@protoc_insertion_point(global_scope)
