// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mail.proto

#ifndef PROTOBUF_mail_2eproto__INCLUDED
#define PROTOBUF_mail_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf {
namespace mail {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mail_2eproto();
void protobuf_AssignDesc_mail_2eproto();
void protobuf_ShutdownFile_mail_2eproto();

class SendMail;
class ReceiveMail;
class Mail;

// ===================================================================

class SendMail : public ::google::protobuf::Message {
 public:
  SendMail();
  virtual ~SendMail();
  
  SendMail(const SendMail& from);
  
  inline SendMail& operator=(const SendMail& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendMail& default_instance();
  
  void Swap(SendMail* other);
  
  // implements Message ----------------------------------------------
  
  SendMail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SendMail& from);
  void MergeFrom(const SendMail& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline const ::std::string& playerid() const;
  inline void set_playerid(const ::std::string& value);
  inline void set_playerid(const char* value);
  inline void set_playerid(const char* value, size_t size);
  inline ::std::string* mutable_playerid();
  inline ::std::string* release_playerid();
  
  // required string content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  
  // optional string replyInfo = 3;
  inline bool has_replyinfo() const;
  inline void clear_replyinfo();
  static const int kReplyInfoFieldNumber = 3;
  inline const ::std::string& replyinfo() const;
  inline void set_replyinfo(const ::std::string& value);
  inline void set_replyinfo(const char* value);
  inline void set_replyinfo(const char* value, size_t size);
  inline ::std::string* mutable_replyinfo();
  inline ::std::string* release_replyinfo();
  
  // optional string title = 4;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 4;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  
  // @@protoc_insertion_point(class_scope:protobuf.mail.SendMail)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_replyinfo();
  inline void clear_has_replyinfo();
  inline void set_has_title();
  inline void clear_has_title();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* playerid_;
  ::std::string* content_;
  ::std::string* replyinfo_;
  ::std::string* title_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_mail_2eproto();
  friend void protobuf_AssignDesc_mail_2eproto();
  friend void protobuf_ShutdownFile_mail_2eproto();
  
  void InitAsDefaultInstance();
  static SendMail* default_instance_;
};
// -------------------------------------------------------------------

class ReceiveMail : public ::google::protobuf::Message {
 public:
  ReceiveMail();
  virtual ~ReceiveMail();
  
  ReceiveMail(const ReceiveMail& from);
  
  inline ReceiveMail& operator=(const ReceiveMail& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReceiveMail& default_instance();
  
  void Swap(ReceiveMail* other);
  
  // implements Message ----------------------------------------------
  
  ReceiveMail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReceiveMail& from);
  void MergeFrom(const ReceiveMail& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protobuf.mail.Mail mails = 1;
  inline int mails_size() const;
  inline void clear_mails();
  static const int kMailsFieldNumber = 1;
  inline const ::protobuf::mail::Mail& mails(int index) const;
  inline ::protobuf::mail::Mail* mutable_mails(int index);
  inline ::protobuf::mail::Mail* add_mails();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::mail::Mail >&
      mails() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::mail::Mail >*
      mutable_mails();
  
  // @@protoc_insertion_point(class_scope:protobuf.mail.ReceiveMail)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protobuf::mail::Mail > mails_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_mail_2eproto();
  friend void protobuf_AssignDesc_mail_2eproto();
  friend void protobuf_ShutdownFile_mail_2eproto();
  
  void InitAsDefaultInstance();
  static ReceiveMail* default_instance_;
};
// -------------------------------------------------------------------

class Mail : public ::google::protobuf::Message {
 public:
  Mail();
  virtual ~Mail();
  
  Mail(const Mail& from);
  
  inline Mail& operator=(const Mail& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Mail& default_instance();
  
  void Swap(Mail* other);
  
  // implements Message ----------------------------------------------
  
  Mail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Mail& from);
  void MergeFrom(const Mail& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);
  
  // required int32 sendType = 2;
  inline bool has_sendtype() const;
  inline void clear_sendtype();
  static const int kSendTypeFieldNumber = 2;
  inline ::google::protobuf::int32 sendtype() const;
  inline void set_sendtype(::google::protobuf::int32 value);
  
  // required string sendId = 3;
  inline bool has_sendid() const;
  inline void clear_sendid();
  static const int kSendIdFieldNumber = 3;
  inline const ::std::string& sendid() const;
  inline void set_sendid(const ::std::string& value);
  inline void set_sendid(const char* value);
  inline void set_sendid(const char* value, size_t size);
  inline ::std::string* mutable_sendid();
  inline ::std::string* release_sendid();
  
  // required string content = 4;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 4;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  
  // repeated string parameter = 5;
  inline int parameter_size() const;
  inline void clear_parameter();
  static const int kParameterFieldNumber = 5;
  inline const ::std::string& parameter(int index) const;
  inline ::std::string* mutable_parameter(int index);
  inline void set_parameter(int index, const ::std::string& value);
  inline void set_parameter(int index, const char* value);
  inline void set_parameter(int index, const char* value, size_t size);
  inline ::std::string* add_parameter();
  inline void add_parameter(const ::std::string& value);
  inline void add_parameter(const char* value);
  inline void add_parameter(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& parameter() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_parameter();
  
  // repeated .protobuf.common.KVint3264 items = 6;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 6;
  inline const ::protobuf::common::KVint3264& items(int index) const;
  inline ::protobuf::common::KVint3264* mutable_items(int index);
  inline ::protobuf::common::KVint3264* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 >*
      mutable_items();
  
  // required int32 type = 7;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 7;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // required int32 state = 8;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 8;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);
  
  // required int64 sendTime = 9;
  inline bool has_sendtime() const;
  inline void clear_sendtime();
  static const int kSendTimeFieldNumber = 9;
  inline ::google::protobuf::int64 sendtime() const;
  inline void set_sendtime(::google::protobuf::int64 value);
  
  // required int64 outTime = 10;
  inline bool has_outtime() const;
  inline void clear_outtime();
  static const int kOutTimeFieldNumber = 10;
  inline ::google::protobuf::int64 outtime() const;
  inline void set_outtime(::google::protobuf::int64 value);
  
  // optional string title = 11;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 11;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  
  // optional string sendName = 12;
  inline bool has_sendname() const;
  inline void clear_sendname();
  static const int kSendNameFieldNumber = 12;
  inline const ::std::string& sendname() const;
  inline void set_sendname(const ::std::string& value);
  inline void set_sendname(const char* value);
  inline void set_sendname(const char* value, size_t size);
  inline ::std::string* mutable_sendname();
  inline ::std::string* release_sendname();
  
  // optional int32 sendGid = 13;
  inline bool has_sendgid() const;
  inline void clear_sendgid();
  static const int kSendGidFieldNumber = 13;
  inline ::google::protobuf::int32 sendgid() const;
  inline void set_sendgid(::google::protobuf::int32 value);
  
  // optional string link = 14;
  inline bool has_link() const;
  inline void clear_link();
  static const int kLinkFieldNumber = 14;
  inline const ::std::string& link() const;
  inline void set_link(const ::std::string& value);
  inline void set_link(const char* value);
  inline void set_link(const char* value, size_t size);
  inline ::std::string* mutable_link();
  inline ::std::string* release_link();
  
  // @@protoc_insertion_point(class_scope:protobuf.mail.Mail)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_sendtype();
  inline void clear_has_sendtype();
  inline void set_has_sendid();
  inline void clear_has_sendid();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_sendtime();
  inline void clear_has_sendtime();
  inline void set_has_outtime();
  inline void clear_has_outtime();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_sendname();
  inline void clear_has_sendname();
  inline void set_has_sendgid();
  inline void clear_has_sendgid();
  inline void set_has_link();
  inline void clear_has_link();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 id_;
  ::std::string* sendid_;
  ::std::string* content_;
  ::google::protobuf::int32 sendtype_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::RepeatedPtrField< ::std::string> parameter_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 > items_;
  ::google::protobuf::int64 sendtime_;
  ::google::protobuf::int64 outtime_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 sendgid_;
  ::std::string* title_;
  ::std::string* sendname_;
  ::std::string* link_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];
  
  friend void  protobuf_AddDesc_mail_2eproto();
  friend void protobuf_AssignDesc_mail_2eproto();
  friend void protobuf_ShutdownFile_mail_2eproto();
  
  void InitAsDefaultInstance();
  static Mail* default_instance_;
};
// ===================================================================


// ===================================================================

// SendMail

// required string playerId = 1;
inline bool SendMail::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SendMail::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SendMail::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SendMail::clear_playerid() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    playerid_->clear();
  }
  clear_has_playerid();
}
inline const ::std::string& SendMail::playerid() const {
  return *playerid_;
}
inline void SendMail::set_playerid(const ::std::string& value) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(value);
}
inline void SendMail::set_playerid(const char* value) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(value);
}
inline void SendMail::set_playerid(const char* value, size_t size) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SendMail::mutable_playerid() {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  return playerid_;
}
inline ::std::string* SendMail::release_playerid() {
  clear_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playerid_;
    playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string content = 2;
inline bool SendMail::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SendMail::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SendMail::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SendMail::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& SendMail::content() const {
  return *content_;
}
inline void SendMail::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void SendMail::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void SendMail::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SendMail::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* SendMail::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string replyInfo = 3;
inline bool SendMail::has_replyinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SendMail::set_has_replyinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SendMail::clear_has_replyinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SendMail::clear_replyinfo() {
  if (replyinfo_ != &::google::protobuf::internal::kEmptyString) {
    replyinfo_->clear();
  }
  clear_has_replyinfo();
}
inline const ::std::string& SendMail::replyinfo() const {
  return *replyinfo_;
}
inline void SendMail::set_replyinfo(const ::std::string& value) {
  set_has_replyinfo();
  if (replyinfo_ == &::google::protobuf::internal::kEmptyString) {
    replyinfo_ = new ::std::string;
  }
  replyinfo_->assign(value);
}
inline void SendMail::set_replyinfo(const char* value) {
  set_has_replyinfo();
  if (replyinfo_ == &::google::protobuf::internal::kEmptyString) {
    replyinfo_ = new ::std::string;
  }
  replyinfo_->assign(value);
}
inline void SendMail::set_replyinfo(const char* value, size_t size) {
  set_has_replyinfo();
  if (replyinfo_ == &::google::protobuf::internal::kEmptyString) {
    replyinfo_ = new ::std::string;
  }
  replyinfo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SendMail::mutable_replyinfo() {
  set_has_replyinfo();
  if (replyinfo_ == &::google::protobuf::internal::kEmptyString) {
    replyinfo_ = new ::std::string;
  }
  return replyinfo_;
}
inline ::std::string* SendMail::release_replyinfo() {
  clear_has_replyinfo();
  if (replyinfo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = replyinfo_;
    replyinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string title = 4;
inline bool SendMail::has_title() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SendMail::set_has_title() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SendMail::clear_has_title() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SendMail::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& SendMail::title() const {
  return *title_;
}
inline void SendMail::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void SendMail::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void SendMail::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SendMail::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* SendMail::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ReceiveMail

// repeated .protobuf.mail.Mail mails = 1;
inline int ReceiveMail::mails_size() const {
  return mails_.size();
}
inline void ReceiveMail::clear_mails() {
  mails_.Clear();
}
inline const ::protobuf::mail::Mail& ReceiveMail::mails(int index) const {
  return mails_.Get(index);
}
inline ::protobuf::mail::Mail* ReceiveMail::mutable_mails(int index) {
  return mails_.Mutable(index);
}
inline ::protobuf::mail::Mail* ReceiveMail::add_mails() {
  return mails_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::mail::Mail >&
ReceiveMail::mails() const {
  return mails_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::mail::Mail >*
ReceiveMail::mutable_mails() {
  return &mails_;
}

// -------------------------------------------------------------------

// Mail

// required int64 id = 1;
inline bool Mail::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Mail::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Mail::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Mail::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 Mail::id() const {
  return id_;
}
inline void Mail::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// required int32 sendType = 2;
inline bool Mail::has_sendtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Mail::set_has_sendtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Mail::clear_has_sendtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Mail::clear_sendtype() {
  sendtype_ = 0;
  clear_has_sendtype();
}
inline ::google::protobuf::int32 Mail::sendtype() const {
  return sendtype_;
}
inline void Mail::set_sendtype(::google::protobuf::int32 value) {
  set_has_sendtype();
  sendtype_ = value;
}

// required string sendId = 3;
inline bool Mail::has_sendid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Mail::set_has_sendid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Mail::clear_has_sendid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Mail::clear_sendid() {
  if (sendid_ != &::google::protobuf::internal::kEmptyString) {
    sendid_->clear();
  }
  clear_has_sendid();
}
inline const ::std::string& Mail::sendid() const {
  return *sendid_;
}
inline void Mail::set_sendid(const ::std::string& value) {
  set_has_sendid();
  if (sendid_ == &::google::protobuf::internal::kEmptyString) {
    sendid_ = new ::std::string;
  }
  sendid_->assign(value);
}
inline void Mail::set_sendid(const char* value) {
  set_has_sendid();
  if (sendid_ == &::google::protobuf::internal::kEmptyString) {
    sendid_ = new ::std::string;
  }
  sendid_->assign(value);
}
inline void Mail::set_sendid(const char* value, size_t size) {
  set_has_sendid();
  if (sendid_ == &::google::protobuf::internal::kEmptyString) {
    sendid_ = new ::std::string;
  }
  sendid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Mail::mutable_sendid() {
  set_has_sendid();
  if (sendid_ == &::google::protobuf::internal::kEmptyString) {
    sendid_ = new ::std::string;
  }
  return sendid_;
}
inline ::std::string* Mail::release_sendid() {
  clear_has_sendid();
  if (sendid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sendid_;
    sendid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string content = 4;
inline bool Mail::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Mail::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Mail::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Mail::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& Mail::content() const {
  return *content_;
}
inline void Mail::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void Mail::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void Mail::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Mail::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* Mail::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated string parameter = 5;
inline int Mail::parameter_size() const {
  return parameter_.size();
}
inline void Mail::clear_parameter() {
  parameter_.Clear();
}
inline const ::std::string& Mail::parameter(int index) const {
  return parameter_.Get(index);
}
inline ::std::string* Mail::mutable_parameter(int index) {
  return parameter_.Mutable(index);
}
inline void Mail::set_parameter(int index, const ::std::string& value) {
  parameter_.Mutable(index)->assign(value);
}
inline void Mail::set_parameter(int index, const char* value) {
  parameter_.Mutable(index)->assign(value);
}
inline void Mail::set_parameter(int index, const char* value, size_t size) {
  parameter_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Mail::add_parameter() {
  return parameter_.Add();
}
inline void Mail::add_parameter(const ::std::string& value) {
  parameter_.Add()->assign(value);
}
inline void Mail::add_parameter(const char* value) {
  parameter_.Add()->assign(value);
}
inline void Mail::add_parameter(const char* value, size_t size) {
  parameter_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Mail::parameter() const {
  return parameter_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Mail::mutable_parameter() {
  return &parameter_;
}

// repeated .protobuf.common.KVint3264 items = 6;
inline int Mail::items_size() const {
  return items_.size();
}
inline void Mail::clear_items() {
  items_.Clear();
}
inline const ::protobuf::common::KVint3264& Mail::items(int index) const {
  return items_.Get(index);
}
inline ::protobuf::common::KVint3264* Mail::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::protobuf::common::KVint3264* Mail::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 >&
Mail::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3264 >*
Mail::mutable_items() {
  return &items_;
}

// required int32 type = 7;
inline bool Mail::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Mail::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Mail::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Mail::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Mail::type() const {
  return type_;
}
inline void Mail::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required int32 state = 8;
inline bool Mail::has_state() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Mail::set_has_state() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Mail::clear_has_state() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Mail::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 Mail::state() const {
  return state_;
}
inline void Mail::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// required int64 sendTime = 9;
inline bool Mail::has_sendtime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Mail::set_has_sendtime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Mail::clear_has_sendtime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Mail::clear_sendtime() {
  sendtime_ = GOOGLE_LONGLONG(0);
  clear_has_sendtime();
}
inline ::google::protobuf::int64 Mail::sendtime() const {
  return sendtime_;
}
inline void Mail::set_sendtime(::google::protobuf::int64 value) {
  set_has_sendtime();
  sendtime_ = value;
}

// required int64 outTime = 10;
inline bool Mail::has_outtime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Mail::set_has_outtime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Mail::clear_has_outtime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Mail::clear_outtime() {
  outtime_ = GOOGLE_LONGLONG(0);
  clear_has_outtime();
}
inline ::google::protobuf::int64 Mail::outtime() const {
  return outtime_;
}
inline void Mail::set_outtime(::google::protobuf::int64 value) {
  set_has_outtime();
  outtime_ = value;
}

// optional string title = 11;
inline bool Mail::has_title() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Mail::set_has_title() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Mail::clear_has_title() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Mail::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& Mail::title() const {
  return *title_;
}
inline void Mail::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void Mail::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void Mail::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Mail::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* Mail::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string sendName = 12;
inline bool Mail::has_sendname() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Mail::set_has_sendname() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Mail::clear_has_sendname() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Mail::clear_sendname() {
  if (sendname_ != &::google::protobuf::internal::kEmptyString) {
    sendname_->clear();
  }
  clear_has_sendname();
}
inline const ::std::string& Mail::sendname() const {
  return *sendname_;
}
inline void Mail::set_sendname(const ::std::string& value) {
  set_has_sendname();
  if (sendname_ == &::google::protobuf::internal::kEmptyString) {
    sendname_ = new ::std::string;
  }
  sendname_->assign(value);
}
inline void Mail::set_sendname(const char* value) {
  set_has_sendname();
  if (sendname_ == &::google::protobuf::internal::kEmptyString) {
    sendname_ = new ::std::string;
  }
  sendname_->assign(value);
}
inline void Mail::set_sendname(const char* value, size_t size) {
  set_has_sendname();
  if (sendname_ == &::google::protobuf::internal::kEmptyString) {
    sendname_ = new ::std::string;
  }
  sendname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Mail::mutable_sendname() {
  set_has_sendname();
  if (sendname_ == &::google::protobuf::internal::kEmptyString) {
    sendname_ = new ::std::string;
  }
  return sendname_;
}
inline ::std::string* Mail::release_sendname() {
  clear_has_sendname();
  if (sendname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sendname_;
    sendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 sendGid = 13;
inline bool Mail::has_sendgid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Mail::set_has_sendgid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Mail::clear_has_sendgid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Mail::clear_sendgid() {
  sendgid_ = 0;
  clear_has_sendgid();
}
inline ::google::protobuf::int32 Mail::sendgid() const {
  return sendgid_;
}
inline void Mail::set_sendgid(::google::protobuf::int32 value) {
  set_has_sendgid();
  sendgid_ = value;
}

// optional string link = 14;
inline bool Mail::has_link() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Mail::set_has_link() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Mail::clear_has_link() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Mail::clear_link() {
  if (link_ != &::google::protobuf::internal::kEmptyString) {
    link_->clear();
  }
  clear_has_link();
}
inline const ::std::string& Mail::link() const {
  return *link_;
}
inline void Mail::set_link(const ::std::string& value) {
  set_has_link();
  if (link_ == &::google::protobuf::internal::kEmptyString) {
    link_ = new ::std::string;
  }
  link_->assign(value);
}
inline void Mail::set_link(const char* value) {
  set_has_link();
  if (link_ == &::google::protobuf::internal::kEmptyString) {
    link_ = new ::std::string;
  }
  link_->assign(value);
}
inline void Mail::set_link(const char* value, size_t size) {
  set_has_link();
  if (link_ == &::google::protobuf::internal::kEmptyString) {
    link_ = new ::std::string;
  }
  link_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Mail::mutable_link() {
  set_has_link();
  if (link_ == &::google::protobuf::internal::kEmptyString) {
    link_ = new ::std::string;
  }
  return link_;
}
inline ::std::string* Mail::release_link() {
  clear_has_link();
  if (link_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = link_;
    link_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mail
}  // namespace protobuf

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mail_2eproto__INCLUDED
