// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: friend.proto

#ifndef PROTOBUF_friend_2eproto__INCLUDED
#define PROTOBUF_friend_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf {
namespace friend {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_friend_2eproto();
void protobuf_AssignDesc_friend_2eproto();
void protobuf_ShutdownFile_friend_2eproto();

class iconinfo;
class playerInfoList;
class playerFriends;
class BossDamage;
class GuildBossInfo;
class EnterBossReply;
class FriendRefuseReply;
class FriendRefuseInfo;

// ===================================================================

class iconinfo : public ::google::protobuf::Message {
 public:
  iconinfo();
  virtual ~iconinfo();
  
  iconinfo(const iconinfo& from);
  
  inline iconinfo& operator=(const iconinfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const iconinfo& default_instance();
  
  void Swap(iconinfo* other);
  
  // implements Message ----------------------------------------------
  
  iconinfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const iconinfo& from);
  void MergeFrom(const iconinfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required string head = 3;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 3;
  inline const ::std::string& head() const;
  inline void set_head(const ::std::string& value);
  inline void set_head(const char* value);
  inline void set_head(const char* value, size_t size);
  inline ::std::string* mutable_head();
  inline ::std::string* release_head();
  
  // optional int32 gid = 4;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 4;
  inline ::google::protobuf::int32 gid() const;
  inline void set_gid(::google::protobuf::int32 value);
  
  // optional int64 lastlogintime = 5;
  inline bool has_lastlogintime() const;
  inline void clear_lastlogintime();
  static const int kLastlogintimeFieldNumber = 5;
  inline ::google::protobuf::int64 lastlogintime() const;
  inline void set_lastlogintime(::google::protobuf::int64 value);
  
  // optional string playerid = 6;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 6;
  inline const ::std::string& playerid() const;
  inline void set_playerid(const ::std::string& value);
  inline void set_playerid(const char* value);
  inline void set_playerid(const char* value, size_t size);
  inline ::std::string* mutable_playerid();
  inline ::std::string* release_playerid();
  
  // optional bool heartSend = 7;
  inline bool has_heartsend() const;
  inline void clear_heartsend();
  static const int kHeartSendFieldNumber = 7;
  inline bool heartsend() const;
  inline void set_heartsend(bool value);
  
  // optional int32 heartgot = 8;
  inline bool has_heartgot() const;
  inline void clear_heartgot();
  static const int kHeartgotFieldNumber = 8;
  inline ::google::protobuf::int32 heartgot() const;
  inline void set_heartgot(::google::protobuf::int32 value);
  
  // optional bool isShadow = 9;
  inline bool has_isshadow() const;
  inline void clear_isshadow();
  static const int kIsShadowFieldNumber = 9;
  inline bool isshadow() const;
  inline void set_isshadow(bool value);
  
  // optional int32 bossid = 10;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossidFieldNumber = 10;
  inline ::google::protobuf::int32 bossid() const;
  inline void set_bossid(::google::protobuf::int32 value);
  
  // optional int32 blood = 11;
  inline bool has_blood() const;
  inline void clear_blood();
  static const int kBloodFieldNumber = 11;
  inline ::google::protobuf::int32 blood() const;
  inline void set_blood(::google::protobuf::int32 value);
  
  // optional bool isFriend = 12;
  inline bool has_isfriend() const;
  inline void clear_isfriend();
  static const int kIsFriendFieldNumber = 12;
  inline bool isfriend() const;
  inline void set_isfriend(bool value);
  
  // optional int32 headFrame = 13;
  inline bool has_headframe() const;
  inline void clear_headframe();
  static const int kHeadFrameFieldNumber = 13;
  inline ::google::protobuf::int32 headframe() const;
  inline void set_headframe(::google::protobuf::int32 value);
  
  // optional int32 serverid = 14;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 14;
  inline ::google::protobuf::int32 serverid() const;
  inline void set_serverid(::google::protobuf::int32 value);
  
  // optional int32 maxpower = 15;
  inline bool has_maxpower() const;
  inline void clear_maxpower();
  static const int kMaxpowerFieldNumber = 15;
  inline ::google::protobuf::int32 maxpower() const;
  inline void set_maxpower(::google::protobuf::int32 value);
  
  // optional int32 hangMaxMap = 16;
  inline bool has_hangmaxmap() const;
  inline void clear_hangmaxmap();
  static const int kHangMaxMapFieldNumber = 16;
  inline ::google::protobuf::int32 hangmaxmap() const;
  inline void set_hangmaxmap(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protobuf.friend.iconinfo)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_gid();
  inline void clear_has_gid();
  inline void set_has_lastlogintime();
  inline void clear_has_lastlogintime();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_heartsend();
  inline void clear_has_heartsend();
  inline void set_has_heartgot();
  inline void clear_has_heartgot();
  inline void set_has_isshadow();
  inline void clear_has_isshadow();
  inline void set_has_bossid();
  inline void clear_has_bossid();
  inline void set_has_blood();
  inline void clear_has_blood();
  inline void set_has_isfriend();
  inline void clear_has_isfriend();
  inline void set_has_headframe();
  inline void clear_has_headframe();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_maxpower();
  inline void clear_has_maxpower();
  inline void set_has_hangmaxmap();
  inline void clear_has_hangmaxmap();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 gid_;
  ::std::string* head_;
  ::google::protobuf::int64 lastlogintime_;
  ::std::string* playerid_;
  ::google::protobuf::int32 heartgot_;
  bool heartsend_;
  bool isshadow_;
  bool isfriend_;
  ::google::protobuf::int32 bossid_;
  ::google::protobuf::int32 blood_;
  ::google::protobuf::int32 headframe_;
  ::google::protobuf::int32 serverid_;
  ::google::protobuf::int32 maxpower_;
  ::google::protobuf::int32 hangmaxmap_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];
  
  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();
  
  void InitAsDefaultInstance();
  static iconinfo* default_instance_;
};
// -------------------------------------------------------------------

class playerInfoList : public ::google::protobuf::Message {
 public:
  playerInfoList();
  virtual ~playerInfoList();
  
  playerInfoList(const playerInfoList& from);
  
  inline playerInfoList& operator=(const playerInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const playerInfoList& default_instance();
  
  void Swap(playerInfoList* other);
  
  // implements Message ----------------------------------------------
  
  playerInfoList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const playerInfoList& from);
  void MergeFrom(const playerInfoList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protobuf.friend.iconinfo showinfo = 1;
  inline int showinfo_size() const;
  inline void clear_showinfo();
  static const int kShowinfoFieldNumber = 1;
  inline const ::protobuf::friend::iconinfo& showinfo(int index) const;
  inline ::protobuf::friend::iconinfo* mutable_showinfo(int index);
  inline ::protobuf::friend::iconinfo* add_showinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::friend::iconinfo >&
      showinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::friend::iconinfo >*
      mutable_showinfo();
  
  // @@protoc_insertion_point(class_scope:protobuf.friend.playerInfoList)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protobuf::friend::iconinfo > showinfo_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();
  
  void InitAsDefaultInstance();
  static playerInfoList* default_instance_;
};
// -------------------------------------------------------------------

class playerFriends : public ::google::protobuf::Message {
 public:
  playerFriends();
  virtual ~playerFriends();
  
  playerFriends(const playerFriends& from);
  
  inline playerFriends& operator=(const playerFriends& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const playerFriends& default_instance();
  
  void Swap(playerFriends* other);
  
  // implements Message ----------------------------------------------
  
  playerFriends* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const playerFriends& from);
  void MergeFrom(const playerFriends& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // repeated .protobuf.friend.iconinfo showinfo = 2;
  inline int showinfo_size() const;
  inline void clear_showinfo();
  static const int kShowinfoFieldNumber = 2;
  inline const ::protobuf::friend::iconinfo& showinfo(int index) const;
  inline ::protobuf::friend::iconinfo* mutable_showinfo(int index);
  inline ::protobuf::friend::iconinfo* add_showinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::friend::iconinfo >&
      showinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::friend::iconinfo >*
      mutable_showinfo();
  
  // optional int64 searchFreshTime = 3;
  inline bool has_searchfreshtime() const;
  inline void clear_searchfreshtime();
  static const int kSearchFreshTimeFieldNumber = 3;
  inline ::google::protobuf::int64 searchfreshtime() const;
  inline void set_searchfreshtime(::google::protobuf::int64 value);
  
  // optional int32 tiliCnt = 4;
  inline bool has_tilicnt() const;
  inline void clear_tilicnt();
  static const int kTiliCntFieldNumber = 4;
  inline ::google::protobuf::int32 tilicnt() const;
  inline void set_tilicnt(::google::protobuf::int32 value);
  
  // optional int64 tiliFreshTime = 5;
  inline bool has_tilifreshtime() const;
  inline void clear_tilifreshtime();
  static const int kTiliFreshTimeFieldNumber = 5;
  inline ::google::protobuf::int64 tilifreshtime() const;
  inline void set_tilifreshtime(::google::protobuf::int64 value);
  
  // optional bool hasApplyPlayer = 6;
  inline bool has_hasapplyplayer() const;
  inline void clear_hasapplyplayer();
  static const int kHasApplyPlayerFieldNumber = 6;
  inline bool hasapplyplayer() const;
  inline void set_hasapplyplayer(bool value);
  
  // optional int32 heartToday = 7;
  inline bool has_hearttoday() const;
  inline void clear_hearttoday();
  static const int kHeartTodayFieldNumber = 7;
  inline ::google::protobuf::int32 hearttoday() const;
  inline void set_hearttoday(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protobuf.friend.playerFriends)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_searchfreshtime();
  inline void clear_has_searchfreshtime();
  inline void set_has_tilicnt();
  inline void clear_has_tilicnt();
  inline void set_has_tilifreshtime();
  inline void clear_has_tilifreshtime();
  inline void set_has_hasapplyplayer();
  inline void clear_has_hasapplyplayer();
  inline void set_has_hearttoday();
  inline void clear_has_hearttoday();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protobuf::friend::iconinfo > showinfo_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 tilicnt_;
  ::google::protobuf::int64 searchfreshtime_;
  ::google::protobuf::int64 tilifreshtime_;
  bool hasapplyplayer_;
  ::google::protobuf::int32 hearttoday_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();
  
  void InitAsDefaultInstance();
  static playerFriends* default_instance_;
};
// -------------------------------------------------------------------

class BossDamage : public ::google::protobuf::Message {
 public:
  BossDamage();
  virtual ~BossDamage();
  
  BossDamage(const BossDamage& from);
  
  inline BossDamage& operator=(const BossDamage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BossDamage& default_instance();
  
  void Swap(BossDamage* other);
  
  // implements Message ----------------------------------------------
  
  BossDamage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BossDamage& from);
  void MergeFrom(const BossDamage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline const ::std::string& playerid() const;
  inline void set_playerid(const ::std::string& value);
  inline void set_playerid(const char* value);
  inline void set_playerid(const char* value, size_t size);
  inline ::std::string* mutable_playerid();
  inline ::std::string* release_playerid();
  
  // required int64 totaldamage = 2;
  inline bool has_totaldamage() const;
  inline void clear_totaldamage();
  static const int kTotaldamageFieldNumber = 2;
  inline ::google::protobuf::int64 totaldamage() const;
  inline void set_totaldamage(::google::protobuf::int64 value);
  
  // required string playername = 3;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayernameFieldNumber = 3;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  inline ::std::string* release_playername();
  
  // required string playerhead = 4;
  inline bool has_playerhead() const;
  inline void clear_playerhead();
  static const int kPlayerheadFieldNumber = 4;
  inline const ::std::string& playerhead() const;
  inline void set_playerhead(const ::std::string& value);
  inline void set_playerhead(const char* value);
  inline void set_playerhead(const char* value, size_t size);
  inline ::std::string* mutable_playerhead();
  inline ::std::string* release_playerhead();
  
  // required int32 power = 5;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 5;
  inline ::google::protobuf::int32 power() const;
  inline void set_power(::google::protobuf::int32 value);
  
  // required int32 playerlvl = 6;
  inline bool has_playerlvl() const;
  inline void clear_playerlvl();
  static const int kPlayerlvlFieldNumber = 6;
  inline ::google::protobuf::int32 playerlvl() const;
  inline void set_playerlvl(::google::protobuf::int32 value);
  
  // optional int32 headFrame = 7;
  inline bool has_headframe() const;
  inline void clear_headframe();
  static const int kHeadFrameFieldNumber = 7;
  inline ::google::protobuf::int32 headframe() const;
  inline void set_headframe(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protobuf.friend.BossDamage)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_totaldamage();
  inline void clear_has_totaldamage();
  inline void set_has_playername();
  inline void clear_has_playername();
  inline void set_has_playerhead();
  inline void clear_has_playerhead();
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_playerlvl();
  inline void clear_has_playerlvl();
  inline void set_has_headframe();
  inline void clear_has_headframe();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* playerid_;
  ::google::protobuf::int64 totaldamage_;
  ::std::string* playername_;
  ::std::string* playerhead_;
  ::google::protobuf::int32 power_;
  ::google::protobuf::int32 playerlvl_;
  ::google::protobuf::int32 headframe_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();
  
  void InitAsDefaultInstance();
  static BossDamage* default_instance_;
};
// -------------------------------------------------------------------

class GuildBossInfo : public ::google::protobuf::Message {
 public:
  GuildBossInfo();
  virtual ~GuildBossInfo();
  
  GuildBossInfo(const GuildBossInfo& from);
  
  inline GuildBossInfo& operator=(const GuildBossInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildBossInfo& default_instance();
  
  void Swap(GuildBossInfo* other);
  
  // implements Message ----------------------------------------------
  
  GuildBossInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildBossInfo& from);
  void MergeFrom(const GuildBossInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protobuf.friend.BossDamage playerdamages = 1;
  inline int playerdamages_size() const;
  inline void clear_playerdamages();
  static const int kPlayerdamagesFieldNumber = 1;
  inline const ::protobuf::friend::BossDamage& playerdamages(int index) const;
  inline ::protobuf::friend::BossDamage* mutable_playerdamages(int index);
  inline ::protobuf::friend::BossDamage* add_playerdamages();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::friend::BossDamage >&
      playerdamages() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::friend::BossDamage >*
      mutable_playerdamages();
  
  // @@protoc_insertion_point(class_scope:protobuf.friend.GuildBossInfo)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protobuf::friend::BossDamage > playerdamages_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();
  
  void InitAsDefaultInstance();
  static GuildBossInfo* default_instance_;
};
// -------------------------------------------------------------------

class EnterBossReply : public ::google::protobuf::Message {
 public:
  EnterBossReply();
  virtual ~EnterBossReply();
  
  EnterBossReply(const EnterBossReply& from);
  
  inline EnterBossReply& operator=(const EnterBossReply& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EnterBossReply& default_instance();
  
  void Swap(EnterBossReply* other);
  
  // implements Message ----------------------------------------------
  
  EnterBossReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnterBossReply& from);
  void MergeFrom(const EnterBossReply& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 finishTime = 1;
  inline bool has_finishtime() const;
  inline void clear_finishtime();
  static const int kFinishTimeFieldNumber = 1;
  inline ::google::protobuf::int64 finishtime() const;
  inline void set_finishtime(::google::protobuf::int64 value);
  
  // required int32 season = 2;
  inline bool has_season() const;
  inline void clear_season();
  static const int kSeasonFieldNumber = 2;
  inline ::google::protobuf::int32 season() const;
  inline void set_season(::google::protobuf::int32 value);
  
  // optional int64 nextSearchTime = 3;
  inline bool has_nextsearchtime() const;
  inline void clear_nextsearchtime();
  static const int kNextSearchTimeFieldNumber = 3;
  inline ::google::protobuf::int64 nextsearchtime() const;
  inline void set_nextsearchtime(::google::protobuf::int64 value);
  
  // optional .protobuf.common.KVint3232 boss = 4;
  inline bool has_boss() const;
  inline void clear_boss();
  static const int kBossFieldNumber = 4;
  inline const ::protobuf::common::KVint3232& boss() const;
  inline ::protobuf::common::KVint3232* mutable_boss();
  inline ::protobuf::common::KVint3232* release_boss();
  
  // @@protoc_insertion_point(class_scope:protobuf.friend.EnterBossReply)
 private:
  inline void set_has_finishtime();
  inline void clear_has_finishtime();
  inline void set_has_season();
  inline void clear_has_season();
  inline void set_has_nextsearchtime();
  inline void clear_has_nextsearchtime();
  inline void set_has_boss();
  inline void clear_has_boss();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 finishtime_;
  ::google::protobuf::int64 nextsearchtime_;
  ::protobuf::common::KVint3232* boss_;
  ::google::protobuf::int32 season_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();
  
  void InitAsDefaultInstance();
  static EnterBossReply* default_instance_;
};
// -------------------------------------------------------------------

class FriendRefuseReply : public ::google::protobuf::Message {
 public:
  FriendRefuseReply();
  virtual ~FriendRefuseReply();
  
  FriendRefuseReply(const FriendRefuseReply& from);
  
  inline FriendRefuseReply& operator=(const FriendRefuseReply& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendRefuseReply& default_instance();
  
  void Swap(FriendRefuseReply* other);
  
  // implements Message ----------------------------------------------
  
  FriendRefuseReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendRefuseReply& from);
  void MergeFrom(const FriendRefuseReply& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protobuf.friend.FriendRefuseInfo refuseInfo = 1;
  inline int refuseinfo_size() const;
  inline void clear_refuseinfo();
  static const int kRefuseInfoFieldNumber = 1;
  inline const ::protobuf::friend::FriendRefuseInfo& refuseinfo(int index) const;
  inline ::protobuf::friend::FriendRefuseInfo* mutable_refuseinfo(int index);
  inline ::protobuf::friend::FriendRefuseInfo* add_refuseinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::friend::FriendRefuseInfo >&
      refuseinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::friend::FriendRefuseInfo >*
      mutable_refuseinfo();
  
  // @@protoc_insertion_point(class_scope:protobuf.friend.FriendRefuseReply)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protobuf::friend::FriendRefuseInfo > refuseinfo_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();
  
  void InitAsDefaultInstance();
  static FriendRefuseReply* default_instance_;
};
// -------------------------------------------------------------------

class FriendRefuseInfo : public ::google::protobuf::Message {
 public:
  FriendRefuseInfo();
  virtual ~FriendRefuseInfo();
  
  FriendRefuseInfo(const FriendRefuseInfo& from);
  
  inline FriendRefuseInfo& operator=(const FriendRefuseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendRefuseInfo& default_instance();
  
  void Swap(FriendRefuseInfo* other);
  
  // implements Message ----------------------------------------------
  
  FriendRefuseInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendRefuseInfo& from);
  void MergeFrom(const FriendRefuseInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline const ::std::string& playerid() const;
  inline void set_playerid(const ::std::string& value);
  inline void set_playerid(const char* value);
  inline void set_playerid(const char* value, size_t size);
  inline ::std::string* mutable_playerid();
  inline ::std::string* release_playerid();
  
  // required int32 season = 2;
  inline bool has_season() const;
  inline void clear_season();
  static const int kSeasonFieldNumber = 2;
  inline ::google::protobuf::int32 season() const;
  inline void set_season(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protobuf.friend.FriendRefuseInfo)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_season();
  inline void clear_has_season();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* playerid_;
  ::google::protobuf::int32 season_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_friend_2eproto();
  friend void protobuf_AssignDesc_friend_2eproto();
  friend void protobuf_ShutdownFile_friend_2eproto();
  
  void InitAsDefaultInstance();
  static FriendRefuseInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// iconinfo

// required int32 level = 1;
inline bool iconinfo::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void iconinfo::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void iconinfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void iconinfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 iconinfo::level() const {
  return level_;
}
inline void iconinfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// required string name = 2;
inline bool iconinfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void iconinfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void iconinfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void iconinfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& iconinfo::name() const {
  return *name_;
}
inline void iconinfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void iconinfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void iconinfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* iconinfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* iconinfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string head = 3;
inline bool iconinfo::has_head() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void iconinfo::set_has_head() {
  _has_bits_[0] |= 0x00000004u;
}
inline void iconinfo::clear_has_head() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void iconinfo::clear_head() {
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    head_->clear();
  }
  clear_has_head();
}
inline const ::std::string& iconinfo::head() const {
  return *head_;
}
inline void iconinfo::set_head(const ::std::string& value) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(value);
}
inline void iconinfo::set_head(const char* value) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(value);
}
inline void iconinfo::set_head(const char* value, size_t size) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* iconinfo::mutable_head() {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  return head_;
}
inline ::std::string* iconinfo::release_head() {
  clear_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = head_;
    head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 gid = 4;
inline bool iconinfo::has_gid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void iconinfo::set_has_gid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void iconinfo::clear_has_gid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void iconinfo::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
inline ::google::protobuf::int32 iconinfo::gid() const {
  return gid_;
}
inline void iconinfo::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
}

// optional int64 lastlogintime = 5;
inline bool iconinfo::has_lastlogintime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void iconinfo::set_has_lastlogintime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void iconinfo::clear_has_lastlogintime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void iconinfo::clear_lastlogintime() {
  lastlogintime_ = GOOGLE_LONGLONG(0);
  clear_has_lastlogintime();
}
inline ::google::protobuf::int64 iconinfo::lastlogintime() const {
  return lastlogintime_;
}
inline void iconinfo::set_lastlogintime(::google::protobuf::int64 value) {
  set_has_lastlogintime();
  lastlogintime_ = value;
}

// optional string playerid = 6;
inline bool iconinfo::has_playerid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void iconinfo::set_has_playerid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void iconinfo::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void iconinfo::clear_playerid() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    playerid_->clear();
  }
  clear_has_playerid();
}
inline const ::std::string& iconinfo::playerid() const {
  return *playerid_;
}
inline void iconinfo::set_playerid(const ::std::string& value) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(value);
}
inline void iconinfo::set_playerid(const char* value) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(value);
}
inline void iconinfo::set_playerid(const char* value, size_t size) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* iconinfo::mutable_playerid() {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  return playerid_;
}
inline ::std::string* iconinfo::release_playerid() {
  clear_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playerid_;
    playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool heartSend = 7;
inline bool iconinfo::has_heartsend() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void iconinfo::set_has_heartsend() {
  _has_bits_[0] |= 0x00000040u;
}
inline void iconinfo::clear_has_heartsend() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void iconinfo::clear_heartsend() {
  heartsend_ = false;
  clear_has_heartsend();
}
inline bool iconinfo::heartsend() const {
  return heartsend_;
}
inline void iconinfo::set_heartsend(bool value) {
  set_has_heartsend();
  heartsend_ = value;
}

// optional int32 heartgot = 8;
inline bool iconinfo::has_heartgot() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void iconinfo::set_has_heartgot() {
  _has_bits_[0] |= 0x00000080u;
}
inline void iconinfo::clear_has_heartgot() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void iconinfo::clear_heartgot() {
  heartgot_ = 0;
  clear_has_heartgot();
}
inline ::google::protobuf::int32 iconinfo::heartgot() const {
  return heartgot_;
}
inline void iconinfo::set_heartgot(::google::protobuf::int32 value) {
  set_has_heartgot();
  heartgot_ = value;
}

// optional bool isShadow = 9;
inline bool iconinfo::has_isshadow() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void iconinfo::set_has_isshadow() {
  _has_bits_[0] |= 0x00000100u;
}
inline void iconinfo::clear_has_isshadow() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void iconinfo::clear_isshadow() {
  isshadow_ = false;
  clear_has_isshadow();
}
inline bool iconinfo::isshadow() const {
  return isshadow_;
}
inline void iconinfo::set_isshadow(bool value) {
  set_has_isshadow();
  isshadow_ = value;
}

// optional int32 bossid = 10;
inline bool iconinfo::has_bossid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void iconinfo::set_has_bossid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void iconinfo::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void iconinfo::clear_bossid() {
  bossid_ = 0;
  clear_has_bossid();
}
inline ::google::protobuf::int32 iconinfo::bossid() const {
  return bossid_;
}
inline void iconinfo::set_bossid(::google::protobuf::int32 value) {
  set_has_bossid();
  bossid_ = value;
}

// optional int32 blood = 11;
inline bool iconinfo::has_blood() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void iconinfo::set_has_blood() {
  _has_bits_[0] |= 0x00000400u;
}
inline void iconinfo::clear_has_blood() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void iconinfo::clear_blood() {
  blood_ = 0;
  clear_has_blood();
}
inline ::google::protobuf::int32 iconinfo::blood() const {
  return blood_;
}
inline void iconinfo::set_blood(::google::protobuf::int32 value) {
  set_has_blood();
  blood_ = value;
}

// optional bool isFriend = 12;
inline bool iconinfo::has_isfriend() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void iconinfo::set_has_isfriend() {
  _has_bits_[0] |= 0x00000800u;
}
inline void iconinfo::clear_has_isfriend() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void iconinfo::clear_isfriend() {
  isfriend_ = false;
  clear_has_isfriend();
}
inline bool iconinfo::isfriend() const {
  return isfriend_;
}
inline void iconinfo::set_isfriend(bool value) {
  set_has_isfriend();
  isfriend_ = value;
}

// optional int32 headFrame = 13;
inline bool iconinfo::has_headframe() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void iconinfo::set_has_headframe() {
  _has_bits_[0] |= 0x00001000u;
}
inline void iconinfo::clear_has_headframe() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void iconinfo::clear_headframe() {
  headframe_ = 0;
  clear_has_headframe();
}
inline ::google::protobuf::int32 iconinfo::headframe() const {
  return headframe_;
}
inline void iconinfo::set_headframe(::google::protobuf::int32 value) {
  set_has_headframe();
  headframe_ = value;
}

// optional int32 serverid = 14;
inline bool iconinfo::has_serverid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void iconinfo::set_has_serverid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void iconinfo::clear_has_serverid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void iconinfo::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
inline ::google::protobuf::int32 iconinfo::serverid() const {
  return serverid_;
}
inline void iconinfo::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
}

// optional int32 maxpower = 15;
inline bool iconinfo::has_maxpower() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void iconinfo::set_has_maxpower() {
  _has_bits_[0] |= 0x00004000u;
}
inline void iconinfo::clear_has_maxpower() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void iconinfo::clear_maxpower() {
  maxpower_ = 0;
  clear_has_maxpower();
}
inline ::google::protobuf::int32 iconinfo::maxpower() const {
  return maxpower_;
}
inline void iconinfo::set_maxpower(::google::protobuf::int32 value) {
  set_has_maxpower();
  maxpower_ = value;
}

// optional int32 hangMaxMap = 16;
inline bool iconinfo::has_hangmaxmap() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void iconinfo::set_has_hangmaxmap() {
  _has_bits_[0] |= 0x00008000u;
}
inline void iconinfo::clear_has_hangmaxmap() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void iconinfo::clear_hangmaxmap() {
  hangmaxmap_ = 0;
  clear_has_hangmaxmap();
}
inline ::google::protobuf::int32 iconinfo::hangmaxmap() const {
  return hangmaxmap_;
}
inline void iconinfo::set_hangmaxmap(::google::protobuf::int32 value) {
  set_has_hangmaxmap();
  hangmaxmap_ = value;
}

// -------------------------------------------------------------------

// playerInfoList

// repeated .protobuf.friend.iconinfo showinfo = 1;
inline int playerInfoList::showinfo_size() const {
  return showinfo_.size();
}
inline void playerInfoList::clear_showinfo() {
  showinfo_.Clear();
}
inline const ::protobuf::friend::iconinfo& playerInfoList::showinfo(int index) const {
  return showinfo_.Get(index);
}
inline ::protobuf::friend::iconinfo* playerInfoList::mutable_showinfo(int index) {
  return showinfo_.Mutable(index);
}
inline ::protobuf::friend::iconinfo* playerInfoList::add_showinfo() {
  return showinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::friend::iconinfo >&
playerInfoList::showinfo() const {
  return showinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::friend::iconinfo >*
playerInfoList::mutable_showinfo() {
  return &showinfo_;
}

// -------------------------------------------------------------------

// playerFriends

// optional int32 type = 1;
inline bool playerFriends::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void playerFriends::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void playerFriends::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void playerFriends::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 playerFriends::type() const {
  return type_;
}
inline void playerFriends::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// repeated .protobuf.friend.iconinfo showinfo = 2;
inline int playerFriends::showinfo_size() const {
  return showinfo_.size();
}
inline void playerFriends::clear_showinfo() {
  showinfo_.Clear();
}
inline const ::protobuf::friend::iconinfo& playerFriends::showinfo(int index) const {
  return showinfo_.Get(index);
}
inline ::protobuf::friend::iconinfo* playerFriends::mutable_showinfo(int index) {
  return showinfo_.Mutable(index);
}
inline ::protobuf::friend::iconinfo* playerFriends::add_showinfo() {
  return showinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::friend::iconinfo >&
playerFriends::showinfo() const {
  return showinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::friend::iconinfo >*
playerFriends::mutable_showinfo() {
  return &showinfo_;
}

// optional int64 searchFreshTime = 3;
inline bool playerFriends::has_searchfreshtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void playerFriends::set_has_searchfreshtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void playerFriends::clear_has_searchfreshtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void playerFriends::clear_searchfreshtime() {
  searchfreshtime_ = GOOGLE_LONGLONG(0);
  clear_has_searchfreshtime();
}
inline ::google::protobuf::int64 playerFriends::searchfreshtime() const {
  return searchfreshtime_;
}
inline void playerFriends::set_searchfreshtime(::google::protobuf::int64 value) {
  set_has_searchfreshtime();
  searchfreshtime_ = value;
}

// optional int32 tiliCnt = 4;
inline bool playerFriends::has_tilicnt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void playerFriends::set_has_tilicnt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void playerFriends::clear_has_tilicnt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void playerFriends::clear_tilicnt() {
  tilicnt_ = 0;
  clear_has_tilicnt();
}
inline ::google::protobuf::int32 playerFriends::tilicnt() const {
  return tilicnt_;
}
inline void playerFriends::set_tilicnt(::google::protobuf::int32 value) {
  set_has_tilicnt();
  tilicnt_ = value;
}

// optional int64 tiliFreshTime = 5;
inline bool playerFriends::has_tilifreshtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void playerFriends::set_has_tilifreshtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void playerFriends::clear_has_tilifreshtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void playerFriends::clear_tilifreshtime() {
  tilifreshtime_ = GOOGLE_LONGLONG(0);
  clear_has_tilifreshtime();
}
inline ::google::protobuf::int64 playerFriends::tilifreshtime() const {
  return tilifreshtime_;
}
inline void playerFriends::set_tilifreshtime(::google::protobuf::int64 value) {
  set_has_tilifreshtime();
  tilifreshtime_ = value;
}

// optional bool hasApplyPlayer = 6;
inline bool playerFriends::has_hasapplyplayer() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void playerFriends::set_has_hasapplyplayer() {
  _has_bits_[0] |= 0x00000020u;
}
inline void playerFriends::clear_has_hasapplyplayer() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void playerFriends::clear_hasapplyplayer() {
  hasapplyplayer_ = false;
  clear_has_hasapplyplayer();
}
inline bool playerFriends::hasapplyplayer() const {
  return hasapplyplayer_;
}
inline void playerFriends::set_hasapplyplayer(bool value) {
  set_has_hasapplyplayer();
  hasapplyplayer_ = value;
}

// optional int32 heartToday = 7;
inline bool playerFriends::has_hearttoday() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void playerFriends::set_has_hearttoday() {
  _has_bits_[0] |= 0x00000040u;
}
inline void playerFriends::clear_has_hearttoday() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void playerFriends::clear_hearttoday() {
  hearttoday_ = 0;
  clear_has_hearttoday();
}
inline ::google::protobuf::int32 playerFriends::hearttoday() const {
  return hearttoday_;
}
inline void playerFriends::set_hearttoday(::google::protobuf::int32 value) {
  set_has_hearttoday();
  hearttoday_ = value;
}

// -------------------------------------------------------------------

// BossDamage

// required string playerid = 1;
inline bool BossDamage::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BossDamage::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BossDamage::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BossDamage::clear_playerid() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    playerid_->clear();
  }
  clear_has_playerid();
}
inline const ::std::string& BossDamage::playerid() const {
  return *playerid_;
}
inline void BossDamage::set_playerid(const ::std::string& value) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(value);
}
inline void BossDamage::set_playerid(const char* value) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(value);
}
inline void BossDamage::set_playerid(const char* value, size_t size) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BossDamage::mutable_playerid() {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  return playerid_;
}
inline ::std::string* BossDamage::release_playerid() {
  clear_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playerid_;
    playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int64 totaldamage = 2;
inline bool BossDamage::has_totaldamage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BossDamage::set_has_totaldamage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BossDamage::clear_has_totaldamage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BossDamage::clear_totaldamage() {
  totaldamage_ = GOOGLE_LONGLONG(0);
  clear_has_totaldamage();
}
inline ::google::protobuf::int64 BossDamage::totaldamage() const {
  return totaldamage_;
}
inline void BossDamage::set_totaldamage(::google::protobuf::int64 value) {
  set_has_totaldamage();
  totaldamage_ = value;
}

// required string playername = 3;
inline bool BossDamage::has_playername() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BossDamage::set_has_playername() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BossDamage::clear_has_playername() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BossDamage::clear_playername() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    playername_->clear();
  }
  clear_has_playername();
}
inline const ::std::string& BossDamage::playername() const {
  return *playername_;
}
inline void BossDamage::set_playername(const ::std::string& value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void BossDamage::set_playername(const char* value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void BossDamage::set_playername(const char* value, size_t size) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BossDamage::mutable_playername() {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  return playername_;
}
inline ::std::string* BossDamage::release_playername() {
  clear_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playername_;
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string playerhead = 4;
inline bool BossDamage::has_playerhead() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BossDamage::set_has_playerhead() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BossDamage::clear_has_playerhead() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BossDamage::clear_playerhead() {
  if (playerhead_ != &::google::protobuf::internal::kEmptyString) {
    playerhead_->clear();
  }
  clear_has_playerhead();
}
inline const ::std::string& BossDamage::playerhead() const {
  return *playerhead_;
}
inline void BossDamage::set_playerhead(const ::std::string& value) {
  set_has_playerhead();
  if (playerhead_ == &::google::protobuf::internal::kEmptyString) {
    playerhead_ = new ::std::string;
  }
  playerhead_->assign(value);
}
inline void BossDamage::set_playerhead(const char* value) {
  set_has_playerhead();
  if (playerhead_ == &::google::protobuf::internal::kEmptyString) {
    playerhead_ = new ::std::string;
  }
  playerhead_->assign(value);
}
inline void BossDamage::set_playerhead(const char* value, size_t size) {
  set_has_playerhead();
  if (playerhead_ == &::google::protobuf::internal::kEmptyString) {
    playerhead_ = new ::std::string;
  }
  playerhead_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BossDamage::mutable_playerhead() {
  set_has_playerhead();
  if (playerhead_ == &::google::protobuf::internal::kEmptyString) {
    playerhead_ = new ::std::string;
  }
  return playerhead_;
}
inline ::std::string* BossDamage::release_playerhead() {
  clear_has_playerhead();
  if (playerhead_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playerhead_;
    playerhead_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 power = 5;
inline bool BossDamage::has_power() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BossDamage::set_has_power() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BossDamage::clear_has_power() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BossDamage::clear_power() {
  power_ = 0;
  clear_has_power();
}
inline ::google::protobuf::int32 BossDamage::power() const {
  return power_;
}
inline void BossDamage::set_power(::google::protobuf::int32 value) {
  set_has_power();
  power_ = value;
}

// required int32 playerlvl = 6;
inline bool BossDamage::has_playerlvl() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BossDamage::set_has_playerlvl() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BossDamage::clear_has_playerlvl() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BossDamage::clear_playerlvl() {
  playerlvl_ = 0;
  clear_has_playerlvl();
}
inline ::google::protobuf::int32 BossDamage::playerlvl() const {
  return playerlvl_;
}
inline void BossDamage::set_playerlvl(::google::protobuf::int32 value) {
  set_has_playerlvl();
  playerlvl_ = value;
}

// optional int32 headFrame = 7;
inline bool BossDamage::has_headframe() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BossDamage::set_has_headframe() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BossDamage::clear_has_headframe() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BossDamage::clear_headframe() {
  headframe_ = 0;
  clear_has_headframe();
}
inline ::google::protobuf::int32 BossDamage::headframe() const {
  return headframe_;
}
inline void BossDamage::set_headframe(::google::protobuf::int32 value) {
  set_has_headframe();
  headframe_ = value;
}

// -------------------------------------------------------------------

// GuildBossInfo

// repeated .protobuf.friend.BossDamage playerdamages = 1;
inline int GuildBossInfo::playerdamages_size() const {
  return playerdamages_.size();
}
inline void GuildBossInfo::clear_playerdamages() {
  playerdamages_.Clear();
}
inline const ::protobuf::friend::BossDamage& GuildBossInfo::playerdamages(int index) const {
  return playerdamages_.Get(index);
}
inline ::protobuf::friend::BossDamage* GuildBossInfo::mutable_playerdamages(int index) {
  return playerdamages_.Mutable(index);
}
inline ::protobuf::friend::BossDamage* GuildBossInfo::add_playerdamages() {
  return playerdamages_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::friend::BossDamage >&
GuildBossInfo::playerdamages() const {
  return playerdamages_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::friend::BossDamage >*
GuildBossInfo::mutable_playerdamages() {
  return &playerdamages_;
}

// -------------------------------------------------------------------

// EnterBossReply

// required int64 finishTime = 1;
inline bool EnterBossReply::has_finishtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EnterBossReply::set_has_finishtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EnterBossReply::clear_has_finishtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EnterBossReply::clear_finishtime() {
  finishtime_ = GOOGLE_LONGLONG(0);
  clear_has_finishtime();
}
inline ::google::protobuf::int64 EnterBossReply::finishtime() const {
  return finishtime_;
}
inline void EnterBossReply::set_finishtime(::google::protobuf::int64 value) {
  set_has_finishtime();
  finishtime_ = value;
}

// required int32 season = 2;
inline bool EnterBossReply::has_season() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EnterBossReply::set_has_season() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EnterBossReply::clear_has_season() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EnterBossReply::clear_season() {
  season_ = 0;
  clear_has_season();
}
inline ::google::protobuf::int32 EnterBossReply::season() const {
  return season_;
}
inline void EnterBossReply::set_season(::google::protobuf::int32 value) {
  set_has_season();
  season_ = value;
}

// optional int64 nextSearchTime = 3;
inline bool EnterBossReply::has_nextsearchtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EnterBossReply::set_has_nextsearchtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EnterBossReply::clear_has_nextsearchtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EnterBossReply::clear_nextsearchtime() {
  nextsearchtime_ = GOOGLE_LONGLONG(0);
  clear_has_nextsearchtime();
}
inline ::google::protobuf::int64 EnterBossReply::nextsearchtime() const {
  return nextsearchtime_;
}
inline void EnterBossReply::set_nextsearchtime(::google::protobuf::int64 value) {
  set_has_nextsearchtime();
  nextsearchtime_ = value;
}

// optional .protobuf.common.KVint3232 boss = 4;
inline bool EnterBossReply::has_boss() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EnterBossReply::set_has_boss() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EnterBossReply::clear_has_boss() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EnterBossReply::clear_boss() {
  if (boss_ != NULL) boss_->::protobuf::common::KVint3232::Clear();
  clear_has_boss();
}
inline const ::protobuf::common::KVint3232& EnterBossReply::boss() const {
  return boss_ != NULL ? *boss_ : *default_instance_->boss_;
}
inline ::protobuf::common::KVint3232* EnterBossReply::mutable_boss() {
  set_has_boss();
  if (boss_ == NULL) boss_ = new ::protobuf::common::KVint3232;
  return boss_;
}
inline ::protobuf::common::KVint3232* EnterBossReply::release_boss() {
  clear_has_boss();
  ::protobuf::common::KVint3232* temp = boss_;
  boss_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// FriendRefuseReply

// repeated .protobuf.friend.FriendRefuseInfo refuseInfo = 1;
inline int FriendRefuseReply::refuseinfo_size() const {
  return refuseinfo_.size();
}
inline void FriendRefuseReply::clear_refuseinfo() {
  refuseinfo_.Clear();
}
inline const ::protobuf::friend::FriendRefuseInfo& FriendRefuseReply::refuseinfo(int index) const {
  return refuseinfo_.Get(index);
}
inline ::protobuf::friend::FriendRefuseInfo* FriendRefuseReply::mutable_refuseinfo(int index) {
  return refuseinfo_.Mutable(index);
}
inline ::protobuf::friend::FriendRefuseInfo* FriendRefuseReply::add_refuseinfo() {
  return refuseinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::friend::FriendRefuseInfo >&
FriendRefuseReply::refuseinfo() const {
  return refuseinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::friend::FriendRefuseInfo >*
FriendRefuseReply::mutable_refuseinfo() {
  return &refuseinfo_;
}

// -------------------------------------------------------------------

// FriendRefuseInfo

// required string playerId = 1;
inline bool FriendRefuseInfo::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendRefuseInfo::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendRefuseInfo::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendRefuseInfo::clear_playerid() {
  if (playerid_ != &::google::protobuf::internal::kEmptyString) {
    playerid_->clear();
  }
  clear_has_playerid();
}
inline const ::std::string& FriendRefuseInfo::playerid() const {
  return *playerid_;
}
inline void FriendRefuseInfo::set_playerid(const ::std::string& value) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(value);
}
inline void FriendRefuseInfo::set_playerid(const char* value) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(value);
}
inline void FriendRefuseInfo::set_playerid(const char* value, size_t size) {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  playerid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FriendRefuseInfo::mutable_playerid() {
  set_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    playerid_ = new ::std::string;
  }
  return playerid_;
}
inline ::std::string* FriendRefuseInfo::release_playerid() {
  clear_has_playerid();
  if (playerid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playerid_;
    playerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 season = 2;
inline bool FriendRefuseInfo::has_season() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendRefuseInfo::set_has_season() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendRefuseInfo::clear_has_season() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendRefuseInfo::clear_season() {
  season_ = 0;
  clear_has_season();
}
inline ::google::protobuf::int32 FriendRefuseInfo::season() const {
  return season_;
}
inline void FriendRefuseInfo::set_season(::google::protobuf::int32 value) {
  set_has_season();
  season_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace friend
}  // namespace protobuf

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_friend_2eproto__INCLUDED
