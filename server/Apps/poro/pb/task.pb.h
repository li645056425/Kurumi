// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: task.proto

#ifndef PROTOBUF_task_2eproto__INCLUDED
#define PROTOBUF_task_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf {
namespace task {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_task_2eproto();
void protobuf_AssignDesc_task_2eproto();
void protobuf_ShutdownFile_task_2eproto();

class Achievement;
class PlayerTask;
class DayTask;
class SevenDayTask;
class AchievementList;
class WishLottery;
class PassCheck;
class PassExpGet;
class PassLivenessAward;

// ===================================================================

class Achievement : public ::google::protobuf::Message {
 public:
  Achievement();
  virtual ~Achievement();
  
  Achievement(const Achievement& from);
  
  inline Achievement& operator=(const Achievement& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Achievement& default_instance();
  
  void Swap(Achievement* other);
  
  // implements Message ----------------------------------------------
  
  Achievement* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Achievement& from);
  void MergeFrom(const Achievement& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // required int32 status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);
  
  // required int32 value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);
  
  // optional int64 showRate = 4;
  inline bool has_showrate() const;
  inline void clear_showrate();
  static const int kShowRateFieldNumber = 4;
  inline ::google::protobuf::int64 showrate() const;
  inline void set_showrate(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:protobuf.task.Achievement)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_showrate();
  inline void clear_has_showrate();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int64 showrate_;
  ::google::protobuf::int32 value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_task_2eproto();
  friend void protobuf_AssignDesc_task_2eproto();
  friend void protobuf_ShutdownFile_task_2eproto();
  
  void InitAsDefaultInstance();
  static Achievement* default_instance_;
};
// -------------------------------------------------------------------

class PlayerTask : public ::google::protobuf::Message {
 public:
  PlayerTask();
  virtual ~PlayerTask();
  
  PlayerTask(const PlayerTask& from);
  
  inline PlayerTask& operator=(const PlayerTask& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerTask& default_instance();
  
  void Swap(PlayerTask* other);
  
  // implements Message ----------------------------------------------
  
  PlayerTask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerTask& from);
  void MergeFrom(const PlayerTask& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protobuf.task.DayTask task = 1;
  inline int task_size() const;
  inline void clear_task();
  static const int kTaskFieldNumber = 1;
  inline const ::protobuf::task::DayTask& task(int index) const;
  inline ::protobuf::task::DayTask* mutable_task(int index);
  inline ::protobuf::task::DayTask* add_task();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::task::DayTask >&
      task() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::task::DayTask >*
      mutable_task();
  
  // @@protoc_insertion_point(class_scope:protobuf.task.PlayerTask)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protobuf::task::DayTask > task_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_task_2eproto();
  friend void protobuf_AssignDesc_task_2eproto();
  friend void protobuf_ShutdownFile_task_2eproto();
  
  void InitAsDefaultInstance();
  static PlayerTask* default_instance_;
};
// -------------------------------------------------------------------

class DayTask : public ::google::protobuf::Message {
 public:
  DayTask();
  virtual ~DayTask();
  
  DayTask(const DayTask& from);
  
  inline DayTask& operator=(const DayTask& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DayTask& default_instance();
  
  void Swap(DayTask* other);
  
  // implements Message ----------------------------------------------
  
  DayTask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DayTask& from);
  void MergeFrom(const DayTask& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protobuf.task.Achievement achievement = 1;
  inline int achievement_size() const;
  inline void clear_achievement();
  static const int kAchievementFieldNumber = 1;
  inline const ::protobuf::task::Achievement& achievement(int index) const;
  inline ::protobuf::task::Achievement* mutable_achievement(int index);
  inline ::protobuf::task::Achievement* add_achievement();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::task::Achievement >&
      achievement() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::task::Achievement >*
      mutable_achievement();
  
  // repeated int32 awardSit = 2;
  inline int awardsit_size() const;
  inline void clear_awardsit();
  static const int kAwardSitFieldNumber = 2;
  inline ::google::protobuf::int32 awardsit(int index) const;
  inline void set_awardsit(int index, ::google::protobuf::int32 value);
  inline void add_awardsit(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      awardsit() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_awardsit();
  
  // optional int64 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);
  
  // optional int32 taskType = 4;
  inline bool has_tasktype() const;
  inline void clear_tasktype();
  static const int kTaskTypeFieldNumber = 4;
  inline ::google::protobuf::int32 tasktype() const;
  inline void set_tasktype(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protobuf.task.DayTask)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_tasktype();
  inline void clear_has_tasktype();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protobuf::task::Achievement > achievement_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > awardsit_;
  ::google::protobuf::int64 time_;
  ::google::protobuf::int32 tasktype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_task_2eproto();
  friend void protobuf_AssignDesc_task_2eproto();
  friend void protobuf_ShutdownFile_task_2eproto();
  
  void InitAsDefaultInstance();
  static DayTask* default_instance_;
};
// -------------------------------------------------------------------

class SevenDayTask : public ::google::protobuf::Message {
 public:
  SevenDayTask();
  virtual ~SevenDayTask();
  
  SevenDayTask(const SevenDayTask& from);
  
  inline SevenDayTask& operator=(const SevenDayTask& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SevenDayTask& default_instance();
  
  void Swap(SevenDayTask* other);
  
  // implements Message ----------------------------------------------
  
  SevenDayTask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SevenDayTask& from);
  void MergeFrom(const SevenDayTask& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protobuf.task.Achievement achievement = 1;
  inline int achievement_size() const;
  inline void clear_achievement();
  static const int kAchievementFieldNumber = 1;
  inline const ::protobuf::task::Achievement& achievement(int index) const;
  inline ::protobuf::task::Achievement* mutable_achievement(int index);
  inline ::protobuf::task::Achievement* add_achievement();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::task::Achievement >&
      achievement() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::task::Achievement >*
      mutable_achievement();
  
  // repeated int32 awardSit = 2;
  inline int awardsit_size() const;
  inline void clear_awardsit();
  static const int kAwardSitFieldNumber = 2;
  inline ::google::protobuf::int32 awardsit(int index) const;
  inline void set_awardsit(int index, ::google::protobuf::int32 value);
  inline void add_awardsit(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      awardsit() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_awardsit();
  
  // optional int32 totalAwardExp = 3;
  inline bool has_totalawardexp() const;
  inline void clear_totalawardexp();
  static const int kTotalAwardExpFieldNumber = 3;
  inline ::google::protobuf::int32 totalawardexp() const;
  inline void set_totalawardexp(::google::protobuf::int32 value);
  
  // optional int32 signInDayNum = 4;
  inline bool has_signindaynum() const;
  inline void clear_signindaynum();
  static const int kSignInDayNumFieldNumber = 4;
  inline ::google::protobuf::int32 signindaynum() const;
  inline void set_signindaynum(::google::protobuf::int32 value);
  
  // optional int64 time = 5;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);
  
  // optional bool allowSignIn = 6;
  inline bool has_allowsignin() const;
  inline void clear_allowsignin();
  static const int kAllowSignInFieldNumber = 6;
  inline bool allowsignin() const;
  inline void set_allowsignin(bool value);
  
  // @@protoc_insertion_point(class_scope:protobuf.task.SevenDayTask)
 private:
  inline void set_has_totalawardexp();
  inline void clear_has_totalawardexp();
  inline void set_has_signindaynum();
  inline void clear_has_signindaynum();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_allowsignin();
  inline void clear_has_allowsignin();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protobuf::task::Achievement > achievement_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > awardsit_;
  ::google::protobuf::int32 totalawardexp_;
  ::google::protobuf::int32 signindaynum_;
  ::google::protobuf::int64 time_;
  bool allowsignin_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_task_2eproto();
  friend void protobuf_AssignDesc_task_2eproto();
  friend void protobuf_ShutdownFile_task_2eproto();
  
  void InitAsDefaultInstance();
  static SevenDayTask* default_instance_;
};
// -------------------------------------------------------------------

class AchievementList : public ::google::protobuf::Message {
 public:
  AchievementList();
  virtual ~AchievementList();
  
  AchievementList(const AchievementList& from);
  
  inline AchievementList& operator=(const AchievementList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AchievementList& default_instance();
  
  void Swap(AchievementList* other);
  
  // implements Message ----------------------------------------------
  
  AchievementList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AchievementList& from);
  void MergeFrom(const AchievementList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protobuf.task.Achievement achievement = 1;
  inline int achievement_size() const;
  inline void clear_achievement();
  static const int kAchievementFieldNumber = 1;
  inline const ::protobuf::task::Achievement& achievement(int index) const;
  inline ::protobuf::task::Achievement* mutable_achievement(int index);
  inline ::protobuf::task::Achievement* add_achievement();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::task::Achievement >&
      achievement() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::task::Achievement >*
      mutable_achievement();
  
  // @@protoc_insertion_point(class_scope:protobuf.task.AchievementList)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protobuf::task::Achievement > achievement_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_task_2eproto();
  friend void protobuf_AssignDesc_task_2eproto();
  friend void protobuf_ShutdownFile_task_2eproto();
  
  void InitAsDefaultInstance();
  static AchievementList* default_instance_;
};
// -------------------------------------------------------------------

class WishLottery : public ::google::protobuf::Message {
 public:
  WishLottery();
  virtual ~WishLottery();
  
  WishLottery(const WishLottery& from);
  
  inline WishLottery& operator=(const WishLottery& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WishLottery& default_instance();
  
  void Swap(WishLottery* other);
  
  // implements Message ----------------------------------------------
  
  WishLottery* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WishLottery& from);
  void MergeFrom(const WishLottery& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protobuf.common.KVint3232 items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::protobuf::common::KVint3232& items(int index) const;
  inline ::protobuf::common::KVint3232* mutable_items(int index);
  inline ::protobuf::common::KVint3232* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >*
      mutable_items();
  
  // @@protoc_insertion_point(class_scope:protobuf.task.WishLottery)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 > items_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_task_2eproto();
  friend void protobuf_AssignDesc_task_2eproto();
  friend void protobuf_ShutdownFile_task_2eproto();
  
  void InitAsDefaultInstance();
  static WishLottery* default_instance_;
};
// -------------------------------------------------------------------

class PassCheck : public ::google::protobuf::Message {
 public:
  PassCheck();
  virtual ~PassCheck();
  
  PassCheck(const PassCheck& from);
  
  inline PassCheck& operator=(const PassCheck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PassCheck& default_instance();
  
  void Swap(PassCheck* other);
  
  // implements Message ----------------------------------------------
  
  PassCheck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PassCheck& from);
  void MergeFrom(const PassCheck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protobuf.task.Achievement achievement = 1;
  inline int achievement_size() const;
  inline void clear_achievement();
  static const int kAchievementFieldNumber = 1;
  inline const ::protobuf::task::Achievement& achievement(int index) const;
  inline ::protobuf::task::Achievement* mutable_achievement(int index);
  inline ::protobuf::task::Achievement* add_achievement();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::task::Achievement >&
      achievement() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::task::Achievement >*
      mutable_achievement();
  
  // required int32 isGetAllAward = 2;
  inline bool has_isgetallaward() const;
  inline void clear_isgetallaward();
  static const int kIsGetAllAwardFieldNumber = 2;
  inline ::google::protobuf::int32 isgetallaward() const;
  inline void set_isgetallaward(::google::protobuf::int32 value);
  
  // optional int64 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);
  
  // required int32 isGetPass = 4;
  inline bool has_isgetpass() const;
  inline void clear_isgetpass();
  static const int kIsGetPassFieldNumber = 4;
  inline ::google::protobuf::int32 isgetpass() const;
  inline void set_isgetpass(::google::protobuf::int32 value);
  
  // required int64 experience = 5;
  inline bool has_experience() const;
  inline void clear_experience();
  static const int kExperienceFieldNumber = 5;
  inline ::google::protobuf::int64 experience() const;
  inline void set_experience(::google::protobuf::int64 value);
  
  // optional int64 endTime = 6;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 6;
  inline ::google::protobuf::int64 endtime() const;
  inline void set_endtime(::google::protobuf::int64 value);
  
  // optional int64 week = 7;
  inline bool has_week() const;
  inline void clear_week();
  static const int kWeekFieldNumber = 7;
  inline ::google::protobuf::int64 week() const;
  inline void set_week(::google::protobuf::int64 value);
  
  // repeated .protobuf.task.PassExpGet PassExpGet = 8;
  inline int passexpget_size() const;
  inline void clear_passexpget();
  static const int kPassExpGetFieldNumber = 8;
  inline const ::protobuf::task::PassExpGet& passexpget(int index) const;
  inline ::protobuf::task::PassExpGet* mutable_passexpget(int index);
  inline ::protobuf::task::PassExpGet* add_passexpget();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::task::PassExpGet >&
      passexpget() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::task::PassExpGet >*
      mutable_passexpget();
  
  // optional bool isGetOverFlowExpAward = 9;
  inline bool has_isgetoverflowexpaward() const;
  inline void clear_isgetoverflowexpaward();
  static const int kIsGetOverFlowExpAwardFieldNumber = 9;
  inline bool isgetoverflowexpaward() const;
  inline void set_isgetoverflowexpaward(bool value);
  
  // repeated .protobuf.common.KVint3232 expireGoods = 10;
  inline int expiregoods_size() const;
  inline void clear_expiregoods();
  static const int kExpireGoodsFieldNumber = 10;
  inline const ::protobuf::common::KVint3232& expiregoods(int index) const;
  inline ::protobuf::common::KVint3232* mutable_expiregoods(int index);
  inline ::protobuf::common::KVint3232* add_expiregoods();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >&
      expiregoods() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >*
      mutable_expiregoods();
  
  // optional int32 liveness = 11;
  inline bool has_liveness() const;
  inline void clear_liveness();
  static const int kLivenessFieldNumber = 11;
  inline ::google::protobuf::int32 liveness() const;
  inline void set_liveness(::google::protobuf::int32 value);
  
  // repeated int32 getLivenessList = 12;
  inline int getlivenesslist_size() const;
  inline void clear_getlivenesslist();
  static const int kGetLivenessListFieldNumber = 12;
  inline ::google::protobuf::int32 getlivenesslist(int index) const;
  inline void set_getlivenesslist(int index, ::google::protobuf::int32 value);
  inline void add_getlivenesslist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      getlivenesslist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_getlivenesslist();
  
  // @@protoc_insertion_point(class_scope:protobuf.task.PassCheck)
 private:
  inline void set_has_isgetallaward();
  inline void clear_has_isgetallaward();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_isgetpass();
  inline void clear_has_isgetpass();
  inline void set_has_experience();
  inline void clear_has_experience();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_week();
  inline void clear_has_week();
  inline void set_has_isgetoverflowexpaward();
  inline void clear_has_isgetoverflowexpaward();
  inline void set_has_liveness();
  inline void clear_has_liveness();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protobuf::task::Achievement > achievement_;
  ::google::protobuf::int64 time_;
  ::google::protobuf::int32 isgetallaward_;
  ::google::protobuf::int32 isgetpass_;
  ::google::protobuf::int64 experience_;
  ::google::protobuf::int64 endtime_;
  ::google::protobuf::int64 week_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::task::PassExpGet > passexpget_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 > expiregoods_;
  bool isgetoverflowexpaward_;
  ::google::protobuf::int32 liveness_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > getlivenesslist_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  friend void  protobuf_AddDesc_task_2eproto();
  friend void protobuf_AssignDesc_task_2eproto();
  friend void protobuf_ShutdownFile_task_2eproto();
  
  void InitAsDefaultInstance();
  static PassCheck* default_instance_;
};
// -------------------------------------------------------------------

class PassExpGet : public ::google::protobuf::Message {
 public:
  PassExpGet();
  virtual ~PassExpGet();
  
  PassExpGet(const PassExpGet& from);
  
  inline PassExpGet& operator=(const PassExpGet& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PassExpGet& default_instance();
  
  void Swap(PassExpGet* other);
  
  // implements Message ----------------------------------------------
  
  PassExpGet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PassExpGet& from);
  void MergeFrom(const PassExpGet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // required int32 status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protobuf.task.PassExpGet)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_status();
  inline void clear_has_status();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 status_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_task_2eproto();
  friend void protobuf_AssignDesc_task_2eproto();
  friend void protobuf_ShutdownFile_task_2eproto();
  
  void InitAsDefaultInstance();
  static PassExpGet* default_instance_;
};
// -------------------------------------------------------------------

class PassLivenessAward : public ::google::protobuf::Message {
 public:
  PassLivenessAward();
  virtual ~PassLivenessAward();
  
  PassLivenessAward(const PassLivenessAward& from);
  
  inline PassLivenessAward& operator=(const PassLivenessAward& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PassLivenessAward& default_instance();
  
  void Swap(PassLivenessAward* other);
  
  // implements Message ----------------------------------------------
  
  PassLivenessAward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PassLivenessAward& from);
  void MergeFrom(const PassLivenessAward& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // repeated .protobuf.common.KVint3232 award = 2;
  inline int award_size() const;
  inline void clear_award();
  static const int kAwardFieldNumber = 2;
  inline const ::protobuf::common::KVint3232& award(int index) const;
  inline ::protobuf::common::KVint3232* mutable_award(int index);
  inline ::protobuf::common::KVint3232* add_award();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >&
      award() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >*
      mutable_award();
  
  // @@protoc_insertion_point(class_scope:protobuf.task.PassLivenessAward)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 > award_;
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_task_2eproto();
  friend void protobuf_AssignDesc_task_2eproto();
  friend void protobuf_ShutdownFile_task_2eproto();
  
  void InitAsDefaultInstance();
  static PassLivenessAward* default_instance_;
};
// ===================================================================


// ===================================================================

// Achievement

// required int32 id = 1;
inline bool Achievement::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Achievement::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Achievement::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Achievement::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Achievement::id() const {
  return id_;
}
inline void Achievement::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 status = 2;
inline bool Achievement::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Achievement::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Achievement::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Achievement::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 Achievement::status() const {
  return status_;
}
inline void Achievement::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// required int32 value = 3;
inline bool Achievement::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Achievement::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Achievement::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Achievement::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 Achievement::value() const {
  return value_;
}
inline void Achievement::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// optional int64 showRate = 4;
inline bool Achievement::has_showrate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Achievement::set_has_showrate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Achievement::clear_has_showrate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Achievement::clear_showrate() {
  showrate_ = GOOGLE_LONGLONG(0);
  clear_has_showrate();
}
inline ::google::protobuf::int64 Achievement::showrate() const {
  return showrate_;
}
inline void Achievement::set_showrate(::google::protobuf::int64 value) {
  set_has_showrate();
  showrate_ = value;
}

// -------------------------------------------------------------------

// PlayerTask

// repeated .protobuf.task.DayTask task = 1;
inline int PlayerTask::task_size() const {
  return task_.size();
}
inline void PlayerTask::clear_task() {
  task_.Clear();
}
inline const ::protobuf::task::DayTask& PlayerTask::task(int index) const {
  return task_.Get(index);
}
inline ::protobuf::task::DayTask* PlayerTask::mutable_task(int index) {
  return task_.Mutable(index);
}
inline ::protobuf::task::DayTask* PlayerTask::add_task() {
  return task_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::task::DayTask >&
PlayerTask::task() const {
  return task_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::task::DayTask >*
PlayerTask::mutable_task() {
  return &task_;
}

// -------------------------------------------------------------------

// DayTask

// repeated .protobuf.task.Achievement achievement = 1;
inline int DayTask::achievement_size() const {
  return achievement_.size();
}
inline void DayTask::clear_achievement() {
  achievement_.Clear();
}
inline const ::protobuf::task::Achievement& DayTask::achievement(int index) const {
  return achievement_.Get(index);
}
inline ::protobuf::task::Achievement* DayTask::mutable_achievement(int index) {
  return achievement_.Mutable(index);
}
inline ::protobuf::task::Achievement* DayTask::add_achievement() {
  return achievement_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::task::Achievement >&
DayTask::achievement() const {
  return achievement_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::task::Achievement >*
DayTask::mutable_achievement() {
  return &achievement_;
}

// repeated int32 awardSit = 2;
inline int DayTask::awardsit_size() const {
  return awardsit_.size();
}
inline void DayTask::clear_awardsit() {
  awardsit_.Clear();
}
inline ::google::protobuf::int32 DayTask::awardsit(int index) const {
  return awardsit_.Get(index);
}
inline void DayTask::set_awardsit(int index, ::google::protobuf::int32 value) {
  awardsit_.Set(index, value);
}
inline void DayTask::add_awardsit(::google::protobuf::int32 value) {
  awardsit_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DayTask::awardsit() const {
  return awardsit_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DayTask::mutable_awardsit() {
  return &awardsit_;
}

// optional int64 time = 3;
inline bool DayTask::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DayTask::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DayTask::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DayTask::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 DayTask::time() const {
  return time_;
}
inline void DayTask::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// optional int32 taskType = 4;
inline bool DayTask::has_tasktype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DayTask::set_has_tasktype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DayTask::clear_has_tasktype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DayTask::clear_tasktype() {
  tasktype_ = 0;
  clear_has_tasktype();
}
inline ::google::protobuf::int32 DayTask::tasktype() const {
  return tasktype_;
}
inline void DayTask::set_tasktype(::google::protobuf::int32 value) {
  set_has_tasktype();
  tasktype_ = value;
}

// -------------------------------------------------------------------

// SevenDayTask

// repeated .protobuf.task.Achievement achievement = 1;
inline int SevenDayTask::achievement_size() const {
  return achievement_.size();
}
inline void SevenDayTask::clear_achievement() {
  achievement_.Clear();
}
inline const ::protobuf::task::Achievement& SevenDayTask::achievement(int index) const {
  return achievement_.Get(index);
}
inline ::protobuf::task::Achievement* SevenDayTask::mutable_achievement(int index) {
  return achievement_.Mutable(index);
}
inline ::protobuf::task::Achievement* SevenDayTask::add_achievement() {
  return achievement_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::task::Achievement >&
SevenDayTask::achievement() const {
  return achievement_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::task::Achievement >*
SevenDayTask::mutable_achievement() {
  return &achievement_;
}

// repeated int32 awardSit = 2;
inline int SevenDayTask::awardsit_size() const {
  return awardsit_.size();
}
inline void SevenDayTask::clear_awardsit() {
  awardsit_.Clear();
}
inline ::google::protobuf::int32 SevenDayTask::awardsit(int index) const {
  return awardsit_.Get(index);
}
inline void SevenDayTask::set_awardsit(int index, ::google::protobuf::int32 value) {
  awardsit_.Set(index, value);
}
inline void SevenDayTask::add_awardsit(::google::protobuf::int32 value) {
  awardsit_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SevenDayTask::awardsit() const {
  return awardsit_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SevenDayTask::mutable_awardsit() {
  return &awardsit_;
}

// optional int32 totalAwardExp = 3;
inline bool SevenDayTask::has_totalawardexp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SevenDayTask::set_has_totalawardexp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SevenDayTask::clear_has_totalawardexp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SevenDayTask::clear_totalawardexp() {
  totalawardexp_ = 0;
  clear_has_totalawardexp();
}
inline ::google::protobuf::int32 SevenDayTask::totalawardexp() const {
  return totalawardexp_;
}
inline void SevenDayTask::set_totalawardexp(::google::protobuf::int32 value) {
  set_has_totalawardexp();
  totalawardexp_ = value;
}

// optional int32 signInDayNum = 4;
inline bool SevenDayTask::has_signindaynum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SevenDayTask::set_has_signindaynum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SevenDayTask::clear_has_signindaynum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SevenDayTask::clear_signindaynum() {
  signindaynum_ = 0;
  clear_has_signindaynum();
}
inline ::google::protobuf::int32 SevenDayTask::signindaynum() const {
  return signindaynum_;
}
inline void SevenDayTask::set_signindaynum(::google::protobuf::int32 value) {
  set_has_signindaynum();
  signindaynum_ = value;
}

// optional int64 time = 5;
inline bool SevenDayTask::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SevenDayTask::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SevenDayTask::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SevenDayTask::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 SevenDayTask::time() const {
  return time_;
}
inline void SevenDayTask::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// optional bool allowSignIn = 6;
inline bool SevenDayTask::has_allowsignin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SevenDayTask::set_has_allowsignin() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SevenDayTask::clear_has_allowsignin() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SevenDayTask::clear_allowsignin() {
  allowsignin_ = false;
  clear_has_allowsignin();
}
inline bool SevenDayTask::allowsignin() const {
  return allowsignin_;
}
inline void SevenDayTask::set_allowsignin(bool value) {
  set_has_allowsignin();
  allowsignin_ = value;
}

// -------------------------------------------------------------------

// AchievementList

// repeated .protobuf.task.Achievement achievement = 1;
inline int AchievementList::achievement_size() const {
  return achievement_.size();
}
inline void AchievementList::clear_achievement() {
  achievement_.Clear();
}
inline const ::protobuf::task::Achievement& AchievementList::achievement(int index) const {
  return achievement_.Get(index);
}
inline ::protobuf::task::Achievement* AchievementList::mutable_achievement(int index) {
  return achievement_.Mutable(index);
}
inline ::protobuf::task::Achievement* AchievementList::add_achievement() {
  return achievement_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::task::Achievement >&
AchievementList::achievement() const {
  return achievement_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::task::Achievement >*
AchievementList::mutable_achievement() {
  return &achievement_;
}

// -------------------------------------------------------------------

// WishLottery

// repeated .protobuf.common.KVint3232 items = 1;
inline int WishLottery::items_size() const {
  return items_.size();
}
inline void WishLottery::clear_items() {
  items_.Clear();
}
inline const ::protobuf::common::KVint3232& WishLottery::items(int index) const {
  return items_.Get(index);
}
inline ::protobuf::common::KVint3232* WishLottery::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::protobuf::common::KVint3232* WishLottery::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >&
WishLottery::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >*
WishLottery::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// PassCheck

// repeated .protobuf.task.Achievement achievement = 1;
inline int PassCheck::achievement_size() const {
  return achievement_.size();
}
inline void PassCheck::clear_achievement() {
  achievement_.Clear();
}
inline const ::protobuf::task::Achievement& PassCheck::achievement(int index) const {
  return achievement_.Get(index);
}
inline ::protobuf::task::Achievement* PassCheck::mutable_achievement(int index) {
  return achievement_.Mutable(index);
}
inline ::protobuf::task::Achievement* PassCheck::add_achievement() {
  return achievement_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::task::Achievement >&
PassCheck::achievement() const {
  return achievement_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::task::Achievement >*
PassCheck::mutable_achievement() {
  return &achievement_;
}

// required int32 isGetAllAward = 2;
inline bool PassCheck::has_isgetallaward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PassCheck::set_has_isgetallaward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PassCheck::clear_has_isgetallaward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PassCheck::clear_isgetallaward() {
  isgetallaward_ = 0;
  clear_has_isgetallaward();
}
inline ::google::protobuf::int32 PassCheck::isgetallaward() const {
  return isgetallaward_;
}
inline void PassCheck::set_isgetallaward(::google::protobuf::int32 value) {
  set_has_isgetallaward();
  isgetallaward_ = value;
}

// optional int64 time = 3;
inline bool PassCheck::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PassCheck::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PassCheck::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PassCheck::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 PassCheck::time() const {
  return time_;
}
inline void PassCheck::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// required int32 isGetPass = 4;
inline bool PassCheck::has_isgetpass() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PassCheck::set_has_isgetpass() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PassCheck::clear_has_isgetpass() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PassCheck::clear_isgetpass() {
  isgetpass_ = 0;
  clear_has_isgetpass();
}
inline ::google::protobuf::int32 PassCheck::isgetpass() const {
  return isgetpass_;
}
inline void PassCheck::set_isgetpass(::google::protobuf::int32 value) {
  set_has_isgetpass();
  isgetpass_ = value;
}

// required int64 experience = 5;
inline bool PassCheck::has_experience() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PassCheck::set_has_experience() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PassCheck::clear_has_experience() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PassCheck::clear_experience() {
  experience_ = GOOGLE_LONGLONG(0);
  clear_has_experience();
}
inline ::google::protobuf::int64 PassCheck::experience() const {
  return experience_;
}
inline void PassCheck::set_experience(::google::protobuf::int64 value) {
  set_has_experience();
  experience_ = value;
}

// optional int64 endTime = 6;
inline bool PassCheck::has_endtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PassCheck::set_has_endtime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PassCheck::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PassCheck::clear_endtime() {
  endtime_ = GOOGLE_LONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::int64 PassCheck::endtime() const {
  return endtime_;
}
inline void PassCheck::set_endtime(::google::protobuf::int64 value) {
  set_has_endtime();
  endtime_ = value;
}

// optional int64 week = 7;
inline bool PassCheck::has_week() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PassCheck::set_has_week() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PassCheck::clear_has_week() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PassCheck::clear_week() {
  week_ = GOOGLE_LONGLONG(0);
  clear_has_week();
}
inline ::google::protobuf::int64 PassCheck::week() const {
  return week_;
}
inline void PassCheck::set_week(::google::protobuf::int64 value) {
  set_has_week();
  week_ = value;
}

// repeated .protobuf.task.PassExpGet PassExpGet = 8;
inline int PassCheck::passexpget_size() const {
  return passexpget_.size();
}
inline void PassCheck::clear_passexpget() {
  passexpget_.Clear();
}
inline const ::protobuf::task::PassExpGet& PassCheck::passexpget(int index) const {
  return passexpget_.Get(index);
}
inline ::protobuf::task::PassExpGet* PassCheck::mutable_passexpget(int index) {
  return passexpget_.Mutable(index);
}
inline ::protobuf::task::PassExpGet* PassCheck::add_passexpget() {
  return passexpget_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::task::PassExpGet >&
PassCheck::passexpget() const {
  return passexpget_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::task::PassExpGet >*
PassCheck::mutable_passexpget() {
  return &passexpget_;
}

// optional bool isGetOverFlowExpAward = 9;
inline bool PassCheck::has_isgetoverflowexpaward() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PassCheck::set_has_isgetoverflowexpaward() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PassCheck::clear_has_isgetoverflowexpaward() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PassCheck::clear_isgetoverflowexpaward() {
  isgetoverflowexpaward_ = false;
  clear_has_isgetoverflowexpaward();
}
inline bool PassCheck::isgetoverflowexpaward() const {
  return isgetoverflowexpaward_;
}
inline void PassCheck::set_isgetoverflowexpaward(bool value) {
  set_has_isgetoverflowexpaward();
  isgetoverflowexpaward_ = value;
}

// repeated .protobuf.common.KVint3232 expireGoods = 10;
inline int PassCheck::expiregoods_size() const {
  return expiregoods_.size();
}
inline void PassCheck::clear_expiregoods() {
  expiregoods_.Clear();
}
inline const ::protobuf::common::KVint3232& PassCheck::expiregoods(int index) const {
  return expiregoods_.Get(index);
}
inline ::protobuf::common::KVint3232* PassCheck::mutable_expiregoods(int index) {
  return expiregoods_.Mutable(index);
}
inline ::protobuf::common::KVint3232* PassCheck::add_expiregoods() {
  return expiregoods_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >&
PassCheck::expiregoods() const {
  return expiregoods_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >*
PassCheck::mutable_expiregoods() {
  return &expiregoods_;
}

// optional int32 liveness = 11;
inline bool PassCheck::has_liveness() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PassCheck::set_has_liveness() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PassCheck::clear_has_liveness() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PassCheck::clear_liveness() {
  liveness_ = 0;
  clear_has_liveness();
}
inline ::google::protobuf::int32 PassCheck::liveness() const {
  return liveness_;
}
inline void PassCheck::set_liveness(::google::protobuf::int32 value) {
  set_has_liveness();
  liveness_ = value;
}

// repeated int32 getLivenessList = 12;
inline int PassCheck::getlivenesslist_size() const {
  return getlivenesslist_.size();
}
inline void PassCheck::clear_getlivenesslist() {
  getlivenesslist_.Clear();
}
inline ::google::protobuf::int32 PassCheck::getlivenesslist(int index) const {
  return getlivenesslist_.Get(index);
}
inline void PassCheck::set_getlivenesslist(int index, ::google::protobuf::int32 value) {
  getlivenesslist_.Set(index, value);
}
inline void PassCheck::add_getlivenesslist(::google::protobuf::int32 value) {
  getlivenesslist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PassCheck::getlivenesslist() const {
  return getlivenesslist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PassCheck::mutable_getlivenesslist() {
  return &getlivenesslist_;
}

// -------------------------------------------------------------------

// PassExpGet

// required int32 id = 1;
inline bool PassExpGet::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PassExpGet::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PassExpGet::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PassExpGet::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PassExpGet::id() const {
  return id_;
}
inline void PassExpGet::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 status = 2;
inline bool PassExpGet::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PassExpGet::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PassExpGet::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PassExpGet::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 PassExpGet::status() const {
  return status_;
}
inline void PassExpGet::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// PassLivenessAward

// required int32 id = 1;
inline bool PassLivenessAward::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PassLivenessAward::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PassLivenessAward::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PassLivenessAward::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PassLivenessAward::id() const {
  return id_;
}
inline void PassLivenessAward::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// repeated .protobuf.common.KVint3232 award = 2;
inline int PassLivenessAward::award_size() const {
  return award_.size();
}
inline void PassLivenessAward::clear_award() {
  award_.Clear();
}
inline const ::protobuf::common::KVint3232& PassLivenessAward::award(int index) const {
  return award_.Get(index);
}
inline ::protobuf::common::KVint3232* PassLivenessAward::mutable_award(int index) {
  return award_.Mutable(index);
}
inline ::protobuf::common::KVint3232* PassLivenessAward::add_award() {
  return award_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >&
PassLivenessAward::award() const {
  return award_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::common::KVint3232 >*
PassLivenessAward::mutable_award() {
  return &award_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace task
}  // namespace protobuf

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_task_2eproto__INCLUDED
