// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "task.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protobuf {
namespace task {

namespace {

const ::google::protobuf::Descriptor* Achievement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Achievement_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* DayTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DayTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* SevenDayTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SevenDayTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* AchievementList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AchievementList_reflection_ = NULL;
const ::google::protobuf::Descriptor* WishLottery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WishLottery_reflection_ = NULL;
const ::google::protobuf::Descriptor* PassCheck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PassCheck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PassExpGet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PassExpGet_reflection_ = NULL;
const ::google::protobuf::Descriptor* PassLivenessAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PassLivenessAward_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_task_2eproto() {
  protobuf_AddDesc_task_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "task.proto");
  GOOGLE_CHECK(file != NULL);
  Achievement_descriptor_ = file->message_type(0);
  static const int Achievement_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achievement, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achievement, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achievement, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achievement, showrate_),
  };
  Achievement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Achievement_descriptor_,
      Achievement::default_instance_,
      Achievement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achievement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achievement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Achievement));
  PlayerTask_descriptor_ = file->message_type(1);
  static const int PlayerTask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTask, task_),
  };
  PlayerTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerTask_descriptor_,
      PlayerTask::default_instance_,
      PlayerTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerTask));
  DayTask_descriptor_ = file->message_type(2);
  static const int DayTask_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayTask, achievement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayTask, awardsit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayTask, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayTask, tasktype_),
  };
  DayTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DayTask_descriptor_,
      DayTask::default_instance_,
      DayTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DayTask));
  SevenDayTask_descriptor_ = file->message_type(3);
  static const int SevenDayTask_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SevenDayTask, achievement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SevenDayTask, awardsit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SevenDayTask, totalawardexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SevenDayTask, signindaynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SevenDayTask, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SevenDayTask, allowsignin_),
  };
  SevenDayTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SevenDayTask_descriptor_,
      SevenDayTask::default_instance_,
      SevenDayTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SevenDayTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SevenDayTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SevenDayTask));
  AchievementList_descriptor_ = file->message_type(4);
  static const int AchievementList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchievementList, achievement_),
  };
  AchievementList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AchievementList_descriptor_,
      AchievementList::default_instance_,
      AchievementList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchievementList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchievementList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AchievementList));
  WishLottery_descriptor_ = file->message_type(5);
  static const int WishLottery_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WishLottery, items_),
  };
  WishLottery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WishLottery_descriptor_,
      WishLottery::default_instance_,
      WishLottery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WishLottery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WishLottery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WishLottery));
  PassCheck_descriptor_ = file->message_type(6);
  static const int PassCheck_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassCheck, achievement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassCheck, isgetallaward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassCheck, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassCheck, isgetpass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassCheck, experience_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassCheck, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassCheck, week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassCheck, passexpget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassCheck, isgetoverflowexpaward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassCheck, expiregoods_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassCheck, liveness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassCheck, getlivenesslist_),
  };
  PassCheck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PassCheck_descriptor_,
      PassCheck::default_instance_,
      PassCheck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassCheck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassCheck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PassCheck));
  PassExpGet_descriptor_ = file->message_type(7);
  static const int PassExpGet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassExpGet, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassExpGet, status_),
  };
  PassExpGet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PassExpGet_descriptor_,
      PassExpGet::default_instance_,
      PassExpGet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassExpGet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassExpGet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PassExpGet));
  PassLivenessAward_descriptor_ = file->message_type(8);
  static const int PassLivenessAward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassLivenessAward, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassLivenessAward, award_),
  };
  PassLivenessAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PassLivenessAward_descriptor_,
      PassLivenessAward::default_instance_,
      PassLivenessAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassLivenessAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassLivenessAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PassLivenessAward));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_task_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Achievement_descriptor_, &Achievement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerTask_descriptor_, &PlayerTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DayTask_descriptor_, &DayTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SevenDayTask_descriptor_, &SevenDayTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AchievementList_descriptor_, &AchievementList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WishLottery_descriptor_, &WishLottery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PassCheck_descriptor_, &PassCheck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PassExpGet_descriptor_, &PassExpGet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PassLivenessAward_descriptor_, &PassLivenessAward::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_task_2eproto() {
  delete Achievement::default_instance_;
  delete Achievement_reflection_;
  delete PlayerTask::default_instance_;
  delete PlayerTask_reflection_;
  delete DayTask::default_instance_;
  delete DayTask_reflection_;
  delete SevenDayTask::default_instance_;
  delete SevenDayTask_reflection_;
  delete AchievementList::default_instance_;
  delete AchievementList_reflection_;
  delete WishLottery::default_instance_;
  delete WishLottery_reflection_;
  delete PassCheck::default_instance_;
  delete PassCheck_reflection_;
  delete PassExpGet::default_instance_;
  delete PassExpGet_reflection_;
  delete PassLivenessAward::default_instance_;
  delete PassLivenessAward_reflection_;
}

void protobuf_AddDesc_task_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf::common::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ntask.proto\022\rprotobuf.task\032\014common.prot"
    "o\"J\n\013Achievement\022\n\n\002id\030\001 \002(\005\022\016\n\006status\030\002"
    " \002(\005\022\r\n\005value\030\003 \002(\005\022\020\n\010showRate\030\004 \001(\003\"2\n"
    "\nPlayerTask\022$\n\004task\030\001 \003(\0132\026.protobuf.tas"
    "k.DayTask\"l\n\007DayTask\022/\n\013achievement\030\001 \003("
    "\0132\032.protobuf.task.Achievement\022\020\n\010awardSi"
    "t\030\002 \003(\005\022\014\n\004time\030\003 \001(\003\022\020\n\010taskType\030\004 \001(\005\""
    "\241\001\n\014SevenDayTask\022/\n\013achievement\030\001 \003(\0132\032."
    "protobuf.task.Achievement\022\020\n\010awardSit\030\002 "
    "\003(\005\022\025\n\rtotalAwardExp\030\003 \001(\005\022\024\n\014signInDayN"
    "um\030\004 \001(\005\022\014\n\004time\030\005 \001(\003\022\023\n\013allowSignIn\030\006 "
    "\001(\010\"B\n\017AchievementList\022/\n\013achievement\030\001 "
    "\003(\0132\032.protobuf.task.Achievement\"8\n\013WishL"
    "ottery\022)\n\005items\030\001 \003(\0132\032.protobuf.common."
    "KVint3232\"\321\002\n\tPassCheck\022/\n\013achievement\030\001"
    " \003(\0132\032.protobuf.task.Achievement\022\025\n\risGe"
    "tAllAward\030\002 \002(\005\022\014\n\004time\030\003 \001(\003\022\021\n\tisGetPa"
    "ss\030\004 \002(\005\022\022\n\nexperience\030\005 \002(\003\022\017\n\007endTime\030"
    "\006 \001(\003\022\014\n\004week\030\007 \001(\003\022-\n\nPassExpGet\030\010 \003(\0132"
    "\031.protobuf.task.PassExpGet\022\035\n\025isGetOverF"
    "lowExpAward\030\t \001(\010\022/\n\013expireGoods\030\n \003(\0132\032"
    ".protobuf.common.KVint3232\022\020\n\010liveness\030\013"
    " \001(\005\022\027\n\017getLivenessList\030\014 \003(\005\"(\n\nPassExp"
    "Get\022\n\n\002id\030\001 \002(\005\022\016\n\006status\030\002 \002(\005\"J\n\021PassL"
    "ivenessAward\022\n\n\002id\030\001 \002(\005\022)\n\005award\030\002 \003(\0132"
    "\032.protobuf.common.KVint3232B \n\023xag.idgo."
    "core.protoB\tTaskProto", 1061);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "task.proto", &protobuf_RegisterTypes);
  Achievement::default_instance_ = new Achievement();
  PlayerTask::default_instance_ = new PlayerTask();
  DayTask::default_instance_ = new DayTask();
  SevenDayTask::default_instance_ = new SevenDayTask();
  AchievementList::default_instance_ = new AchievementList();
  WishLottery::default_instance_ = new WishLottery();
  PassCheck::default_instance_ = new PassCheck();
  PassExpGet::default_instance_ = new PassExpGet();
  PassLivenessAward::default_instance_ = new PassLivenessAward();
  Achievement::default_instance_->InitAsDefaultInstance();
  PlayerTask::default_instance_->InitAsDefaultInstance();
  DayTask::default_instance_->InitAsDefaultInstance();
  SevenDayTask::default_instance_->InitAsDefaultInstance();
  AchievementList::default_instance_->InitAsDefaultInstance();
  WishLottery::default_instance_->InitAsDefaultInstance();
  PassCheck::default_instance_->InitAsDefaultInstance();
  PassExpGet::default_instance_->InitAsDefaultInstance();
  PassLivenessAward::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_task_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_task_2eproto {
  StaticDescriptorInitializer_task_2eproto() {
    protobuf_AddDesc_task_2eproto();
  }
} static_descriptor_initializer_task_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Achievement::kIdFieldNumber;
const int Achievement::kStatusFieldNumber;
const int Achievement::kValueFieldNumber;
const int Achievement::kShowRateFieldNumber;
#endif  // !_MSC_VER

Achievement::Achievement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Achievement::InitAsDefaultInstance() {
}

Achievement::Achievement(const Achievement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Achievement::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  status_ = 0;
  value_ = 0;
  showrate_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Achievement::~Achievement() {
  SharedDtor();
}

void Achievement::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Achievement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Achievement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Achievement_descriptor_;
}

const Achievement& Achievement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();  return *default_instance_;
}

Achievement* Achievement::default_instance_ = NULL;

Achievement* Achievement::New() const {
  return new Achievement;
}

void Achievement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    status_ = 0;
    value_ = 0;
    showrate_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Achievement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }
      
      // required int32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }
      
      // required int32 value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_showRate;
        break;
      }
      
      // optional int64 showRate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_showRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &showrate_)));
          set_has_showrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Achievement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // required int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }
  
  // required int32 value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->value(), output);
  }
  
  // optional int64 showRate = 4;
  if (has_showrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->showrate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Achievement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // required int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }
  
  // required int32 value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->value(), target);
  }
  
  // optional int64 showRate = 4;
  if (has_showrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->showrate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Achievement::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // required int32 value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }
    
    // optional int64 showRate = 4;
    if (has_showrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->showrate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Achievement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Achievement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Achievement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Achievement::MergeFrom(const Achievement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_showrate()) {
      set_showrate(from.showrate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Achievement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Achievement::CopyFrom(const Achievement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Achievement::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void Achievement::Swap(Achievement* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(status_, other->status_);
    std::swap(value_, other->value_);
    std::swap(showrate_, other->showrate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Achievement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Achievement_descriptor_;
  metadata.reflection = Achievement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerTask::kTaskFieldNumber;
#endif  // !_MSC_VER

PlayerTask::PlayerTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerTask::InitAsDefaultInstance() {
}

PlayerTask::PlayerTask(const PlayerTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerTask::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerTask::~PlayerTask() {
  SharedDtor();
}

void PlayerTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerTask_descriptor_;
}

const PlayerTask& PlayerTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();  return *default_instance_;
}

PlayerTask* PlayerTask::default_instance_ = NULL;

PlayerTask* PlayerTask::New() const {
  return new PlayerTask;
}

void PlayerTask::Clear() {
  task_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.task.DayTask task = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_task;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.task.DayTask task = 1;
  for (int i = 0; i < this->task_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->task(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.task.DayTask task = 1;
  for (int i = 0; i < this->task_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->task(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerTask::ByteSize() const {
  int total_size = 0;
  
  // repeated .protobuf.task.DayTask task = 1;
  total_size += 1 * this->task_size();
  for (int i = 0; i < this->task_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->task(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerTask::MergeFrom(const PlayerTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  task_.MergeFrom(from.task_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerTask::CopyFrom(const PlayerTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerTask::IsInitialized() const {
  
  for (int i = 0; i < task_size(); i++) {
    if (!this->task(i).IsInitialized()) return false;
  }
  return true;
}

void PlayerTask::Swap(PlayerTask* other) {
  if (other != this) {
    task_.Swap(&other->task_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerTask_descriptor_;
  metadata.reflection = PlayerTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DayTask::kAchievementFieldNumber;
const int DayTask::kAwardSitFieldNumber;
const int DayTask::kTimeFieldNumber;
const int DayTask::kTaskTypeFieldNumber;
#endif  // !_MSC_VER

DayTask::DayTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DayTask::InitAsDefaultInstance() {
}

DayTask::DayTask(const DayTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DayTask::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  tasktype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DayTask::~DayTask() {
  SharedDtor();
}

void DayTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DayTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DayTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DayTask_descriptor_;
}

const DayTask& DayTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();  return *default_instance_;
}

DayTask* DayTask::default_instance_ = NULL;

DayTask* DayTask::New() const {
  return new DayTask;
}

void DayTask::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    time_ = GOOGLE_LONGLONG(0);
    tasktype_ = 0;
  }
  achievement_.Clear();
  awardsit_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DayTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.task.Achievement achievement = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_achievement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_achievement()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_achievement;
        if (input->ExpectTag(16)) goto parse_awardSit;
        break;
      }
      
      // repeated int32 awardSit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awardSit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_awardsit())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_awardsit())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_awardSit;
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }
      
      // optional int64 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_taskType;
        break;
      }
      
      // optional int32 taskType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_taskType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tasktype_)));
          set_has_tasktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DayTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.task.Achievement achievement = 1;
  for (int i = 0; i < this->achievement_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->achievement(i), output);
  }
  
  // repeated int32 awardSit = 2;
  for (int i = 0; i < this->awardsit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->awardsit(i), output);
  }
  
  // optional int64 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time(), output);
  }
  
  // optional int32 taskType = 4;
  if (has_tasktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tasktype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DayTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.task.Achievement achievement = 1;
  for (int i = 0; i < this->achievement_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->achievement(i), target);
  }
  
  // repeated int32 awardSit = 2;
  for (int i = 0; i < this->awardsit_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->awardsit(i), target);
  }
  
  // optional int64 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time(), target);
  }
  
  // optional int32 taskType = 4;
  if (has_tasktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tasktype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DayTask::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional int64 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }
    
    // optional int32 taskType = 4;
    if (has_tasktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tasktype());
    }
    
  }
  // repeated .protobuf.task.Achievement achievement = 1;
  total_size += 1 * this->achievement_size();
  for (int i = 0; i < this->achievement_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->achievement(i));
  }
  
  // repeated int32 awardSit = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->awardsit_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->awardsit(i));
    }
    total_size += 1 * this->awardsit_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DayTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DayTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DayTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DayTask::MergeFrom(const DayTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  achievement_.MergeFrom(from.achievement_);
  awardsit_.MergeFrom(from.awardsit_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_tasktype()) {
      set_tasktype(from.tasktype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DayTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DayTask::CopyFrom(const DayTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DayTask::IsInitialized() const {
  
  for (int i = 0; i < achievement_size(); i++) {
    if (!this->achievement(i).IsInitialized()) return false;
  }
  return true;
}

void DayTask::Swap(DayTask* other) {
  if (other != this) {
    achievement_.Swap(&other->achievement_);
    awardsit_.Swap(&other->awardsit_);
    std::swap(time_, other->time_);
    std::swap(tasktype_, other->tasktype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DayTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DayTask_descriptor_;
  metadata.reflection = DayTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SevenDayTask::kAchievementFieldNumber;
const int SevenDayTask::kAwardSitFieldNumber;
const int SevenDayTask::kTotalAwardExpFieldNumber;
const int SevenDayTask::kSignInDayNumFieldNumber;
const int SevenDayTask::kTimeFieldNumber;
const int SevenDayTask::kAllowSignInFieldNumber;
#endif  // !_MSC_VER

SevenDayTask::SevenDayTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SevenDayTask::InitAsDefaultInstance() {
}

SevenDayTask::SevenDayTask(const SevenDayTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SevenDayTask::SharedCtor() {
  _cached_size_ = 0;
  totalawardexp_ = 0;
  signindaynum_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  allowsignin_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SevenDayTask::~SevenDayTask() {
  SharedDtor();
}

void SevenDayTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SevenDayTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SevenDayTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SevenDayTask_descriptor_;
}

const SevenDayTask& SevenDayTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();  return *default_instance_;
}

SevenDayTask* SevenDayTask::default_instance_ = NULL;

SevenDayTask* SevenDayTask::New() const {
  return new SevenDayTask;
}

void SevenDayTask::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    totalawardexp_ = 0;
    signindaynum_ = 0;
    time_ = GOOGLE_LONGLONG(0);
    allowsignin_ = false;
  }
  achievement_.Clear();
  awardsit_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SevenDayTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.task.Achievement achievement = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_achievement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_achievement()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_achievement;
        if (input->ExpectTag(16)) goto parse_awardSit;
        break;
      }
      
      // repeated int32 awardSit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awardSit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_awardsit())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_awardsit())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_awardSit;
        if (input->ExpectTag(24)) goto parse_totalAwardExp;
        break;
      }
      
      // optional int32 totalAwardExp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalAwardExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalawardexp_)));
          set_has_totalawardexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_signInDayNum;
        break;
      }
      
      // optional int32 signInDayNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_signInDayNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signindaynum_)));
          set_has_signindaynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }
      
      // optional int64 time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_allowSignIn;
        break;
      }
      
      // optional bool allowSignIn = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allowSignIn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allowsignin_)));
          set_has_allowsignin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SevenDayTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.task.Achievement achievement = 1;
  for (int i = 0; i < this->achievement_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->achievement(i), output);
  }
  
  // repeated int32 awardSit = 2;
  for (int i = 0; i < this->awardsit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->awardsit(i), output);
  }
  
  // optional int32 totalAwardExp = 3;
  if (has_totalawardexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->totalawardexp(), output);
  }
  
  // optional int32 signInDayNum = 4;
  if (has_signindaynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->signindaynum(), output);
  }
  
  // optional int64 time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->time(), output);
  }
  
  // optional bool allowSignIn = 6;
  if (has_allowsignin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->allowsignin(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SevenDayTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.task.Achievement achievement = 1;
  for (int i = 0; i < this->achievement_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->achievement(i), target);
  }
  
  // repeated int32 awardSit = 2;
  for (int i = 0; i < this->awardsit_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->awardsit(i), target);
  }
  
  // optional int32 totalAwardExp = 3;
  if (has_totalawardexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->totalawardexp(), target);
  }
  
  // optional int32 signInDayNum = 4;
  if (has_signindaynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->signindaynum(), target);
  }
  
  // optional int64 time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->time(), target);
  }
  
  // optional bool allowSignIn = 6;
  if (has_allowsignin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->allowsignin(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SevenDayTask::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional int32 totalAwardExp = 3;
    if (has_totalawardexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalawardexp());
    }
    
    // optional int32 signInDayNum = 4;
    if (has_signindaynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->signindaynum());
    }
    
    // optional int64 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }
    
    // optional bool allowSignIn = 6;
    if (has_allowsignin()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .protobuf.task.Achievement achievement = 1;
  total_size += 1 * this->achievement_size();
  for (int i = 0; i < this->achievement_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->achievement(i));
  }
  
  // repeated int32 awardSit = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->awardsit_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->awardsit(i));
    }
    total_size += 1 * this->awardsit_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SevenDayTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SevenDayTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SevenDayTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SevenDayTask::MergeFrom(const SevenDayTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  achievement_.MergeFrom(from.achievement_);
  awardsit_.MergeFrom(from.awardsit_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_totalawardexp()) {
      set_totalawardexp(from.totalawardexp());
    }
    if (from.has_signindaynum()) {
      set_signindaynum(from.signindaynum());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_allowsignin()) {
      set_allowsignin(from.allowsignin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SevenDayTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SevenDayTask::CopyFrom(const SevenDayTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SevenDayTask::IsInitialized() const {
  
  for (int i = 0; i < achievement_size(); i++) {
    if (!this->achievement(i).IsInitialized()) return false;
  }
  return true;
}

void SevenDayTask::Swap(SevenDayTask* other) {
  if (other != this) {
    achievement_.Swap(&other->achievement_);
    awardsit_.Swap(&other->awardsit_);
    std::swap(totalawardexp_, other->totalawardexp_);
    std::swap(signindaynum_, other->signindaynum_);
    std::swap(time_, other->time_);
    std::swap(allowsignin_, other->allowsignin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SevenDayTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SevenDayTask_descriptor_;
  metadata.reflection = SevenDayTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AchievementList::kAchievementFieldNumber;
#endif  // !_MSC_VER

AchievementList::AchievementList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AchievementList::InitAsDefaultInstance() {
}

AchievementList::AchievementList(const AchievementList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AchievementList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AchievementList::~AchievementList() {
  SharedDtor();
}

void AchievementList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AchievementList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AchievementList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AchievementList_descriptor_;
}

const AchievementList& AchievementList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();  return *default_instance_;
}

AchievementList* AchievementList::default_instance_ = NULL;

AchievementList* AchievementList::New() const {
  return new AchievementList;
}

void AchievementList::Clear() {
  achievement_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AchievementList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.task.Achievement achievement = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_achievement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_achievement()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_achievement;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AchievementList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.task.Achievement achievement = 1;
  for (int i = 0; i < this->achievement_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->achievement(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AchievementList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.task.Achievement achievement = 1;
  for (int i = 0; i < this->achievement_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->achievement(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AchievementList::ByteSize() const {
  int total_size = 0;
  
  // repeated .protobuf.task.Achievement achievement = 1;
  total_size += 1 * this->achievement_size();
  for (int i = 0; i < this->achievement_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->achievement(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AchievementList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AchievementList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AchievementList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AchievementList::MergeFrom(const AchievementList& from) {
  GOOGLE_CHECK_NE(&from, this);
  achievement_.MergeFrom(from.achievement_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AchievementList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AchievementList::CopyFrom(const AchievementList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AchievementList::IsInitialized() const {
  
  for (int i = 0; i < achievement_size(); i++) {
    if (!this->achievement(i).IsInitialized()) return false;
  }
  return true;
}

void AchievementList::Swap(AchievementList* other) {
  if (other != this) {
    achievement_.Swap(&other->achievement_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AchievementList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AchievementList_descriptor_;
  metadata.reflection = AchievementList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WishLottery::kItemsFieldNumber;
#endif  // !_MSC_VER

WishLottery::WishLottery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WishLottery::InitAsDefaultInstance() {
}

WishLottery::WishLottery(const WishLottery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WishLottery::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WishLottery::~WishLottery() {
  SharedDtor();
}

void WishLottery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WishLottery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WishLottery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WishLottery_descriptor_;
}

const WishLottery& WishLottery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();  return *default_instance_;
}

WishLottery* WishLottery::default_instance_ = NULL;

WishLottery* WishLottery::New() const {
  return new WishLottery;
}

void WishLottery::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WishLottery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.common.KVint3232 items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WishLottery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.common.KVint3232 items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WishLottery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.common.KVint3232 items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WishLottery::ByteSize() const {
  int total_size = 0;
  
  // repeated .protobuf.common.KVint3232 items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WishLottery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WishLottery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WishLottery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WishLottery::MergeFrom(const WishLottery& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WishLottery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WishLottery::CopyFrom(const WishLottery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WishLottery::IsInitialized() const {
  
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void WishLottery::Swap(WishLottery* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WishLottery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WishLottery_descriptor_;
  metadata.reflection = WishLottery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PassCheck::kAchievementFieldNumber;
const int PassCheck::kIsGetAllAwardFieldNumber;
const int PassCheck::kTimeFieldNumber;
const int PassCheck::kIsGetPassFieldNumber;
const int PassCheck::kExperienceFieldNumber;
const int PassCheck::kEndTimeFieldNumber;
const int PassCheck::kWeekFieldNumber;
const int PassCheck::kPassExpGetFieldNumber;
const int PassCheck::kIsGetOverFlowExpAwardFieldNumber;
const int PassCheck::kExpireGoodsFieldNumber;
const int PassCheck::kLivenessFieldNumber;
const int PassCheck::kGetLivenessListFieldNumber;
#endif  // !_MSC_VER

PassCheck::PassCheck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PassCheck::InitAsDefaultInstance() {
}

PassCheck::PassCheck(const PassCheck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PassCheck::SharedCtor() {
  _cached_size_ = 0;
  isgetallaward_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  isgetpass_ = 0;
  experience_ = GOOGLE_LONGLONG(0);
  endtime_ = GOOGLE_LONGLONG(0);
  week_ = GOOGLE_LONGLONG(0);
  isgetoverflowexpaward_ = false;
  liveness_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PassCheck::~PassCheck() {
  SharedDtor();
}

void PassCheck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PassCheck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PassCheck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PassCheck_descriptor_;
}

const PassCheck& PassCheck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();  return *default_instance_;
}

PassCheck* PassCheck::default_instance_ = NULL;

PassCheck* PassCheck::New() const {
  return new PassCheck;
}

void PassCheck::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    isgetallaward_ = 0;
    time_ = GOOGLE_LONGLONG(0);
    isgetpass_ = 0;
    experience_ = GOOGLE_LONGLONG(0);
    endtime_ = GOOGLE_LONGLONG(0);
    week_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    isgetoverflowexpaward_ = false;
    liveness_ = 0;
  }
  achievement_.Clear();
  passexpget_.Clear();
  expiregoods_.Clear();
  getlivenesslist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PassCheck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.task.Achievement achievement = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_achievement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_achievement()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_achievement;
        if (input->ExpectTag(16)) goto parse_isGetAllAward;
        break;
      }
      
      // required int32 isGetAllAward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isGetAllAward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isgetallaward_)));
          set_has_isgetallaward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }
      
      // optional int64 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isGetPass;
        break;
      }
      
      // required int32 isGetPass = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isGetPass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isgetpass_)));
          set_has_isgetpass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_experience;
        break;
      }
      
      // required int64 experience = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_experience:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &experience_)));
          set_has_experience();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_endTime;
        break;
      }
      
      // optional int64 endTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_week;
        break;
      }
      
      // optional int64 week = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &week_)));
          set_has_week();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_PassExpGet;
        break;
      }
      
      // repeated .protobuf.task.PassExpGet PassExpGet = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PassExpGet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_passexpget()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_PassExpGet;
        if (input->ExpectTag(72)) goto parse_isGetOverFlowExpAward;
        break;
      }
      
      // optional bool isGetOverFlowExpAward = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isGetOverFlowExpAward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isgetoverflowexpaward_)));
          set_has_isgetoverflowexpaward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_expireGoods;
        break;
      }
      
      // repeated .protobuf.common.KVint3232 expireGoods = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_expireGoods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_expiregoods()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_expireGoods;
        if (input->ExpectTag(88)) goto parse_liveness;
        break;
      }
      
      // optional int32 liveness = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_liveness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &liveness_)));
          set_has_liveness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_getLivenessList;
        break;
      }
      
      // repeated int32 getLivenessList = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getLivenessList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_getlivenesslist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_getlivenesslist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_getLivenessList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PassCheck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.task.Achievement achievement = 1;
  for (int i = 0; i < this->achievement_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->achievement(i), output);
  }
  
  // required int32 isGetAllAward = 2;
  if (has_isgetallaward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->isgetallaward(), output);
  }
  
  // optional int64 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time(), output);
  }
  
  // required int32 isGetPass = 4;
  if (has_isgetpass()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->isgetpass(), output);
  }
  
  // required int64 experience = 5;
  if (has_experience()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->experience(), output);
  }
  
  // optional int64 endTime = 6;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->endtime(), output);
  }
  
  // optional int64 week = 7;
  if (has_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->week(), output);
  }
  
  // repeated .protobuf.task.PassExpGet PassExpGet = 8;
  for (int i = 0; i < this->passexpget_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->passexpget(i), output);
  }
  
  // optional bool isGetOverFlowExpAward = 9;
  if (has_isgetoverflowexpaward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->isgetoverflowexpaward(), output);
  }
  
  // repeated .protobuf.common.KVint3232 expireGoods = 10;
  for (int i = 0; i < this->expiregoods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->expiregoods(i), output);
  }
  
  // optional int32 liveness = 11;
  if (has_liveness()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->liveness(), output);
  }
  
  // repeated int32 getLivenessList = 12;
  for (int i = 0; i < this->getlivenesslist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->getlivenesslist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PassCheck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.task.Achievement achievement = 1;
  for (int i = 0; i < this->achievement_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->achievement(i), target);
  }
  
  // required int32 isGetAllAward = 2;
  if (has_isgetallaward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->isgetallaward(), target);
  }
  
  // optional int64 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time(), target);
  }
  
  // required int32 isGetPass = 4;
  if (has_isgetpass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->isgetpass(), target);
  }
  
  // required int64 experience = 5;
  if (has_experience()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->experience(), target);
  }
  
  // optional int64 endTime = 6;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->endtime(), target);
  }
  
  // optional int64 week = 7;
  if (has_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->week(), target);
  }
  
  // repeated .protobuf.task.PassExpGet PassExpGet = 8;
  for (int i = 0; i < this->passexpget_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->passexpget(i), target);
  }
  
  // optional bool isGetOverFlowExpAward = 9;
  if (has_isgetoverflowexpaward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->isgetoverflowexpaward(), target);
  }
  
  // repeated .protobuf.common.KVint3232 expireGoods = 10;
  for (int i = 0; i < this->expiregoods_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->expiregoods(i), target);
  }
  
  // optional int32 liveness = 11;
  if (has_liveness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->liveness(), target);
  }
  
  // repeated int32 getLivenessList = 12;
  for (int i = 0; i < this->getlivenesslist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->getlivenesslist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PassCheck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 isGetAllAward = 2;
    if (has_isgetallaward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isgetallaward());
    }
    
    // optional int64 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }
    
    // required int32 isGetPass = 4;
    if (has_isgetpass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isgetpass());
    }
    
    // required int64 experience = 5;
    if (has_experience()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->experience());
    }
    
    // optional int64 endTime = 6;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }
    
    // optional int64 week = 7;
    if (has_week()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->week());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool isGetOverFlowExpAward = 9;
    if (has_isgetoverflowexpaward()) {
      total_size += 1 + 1;
    }
    
    // optional int32 liveness = 11;
    if (has_liveness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->liveness());
    }
    
  }
  // repeated .protobuf.task.Achievement achievement = 1;
  total_size += 1 * this->achievement_size();
  for (int i = 0; i < this->achievement_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->achievement(i));
  }
  
  // repeated .protobuf.task.PassExpGet PassExpGet = 8;
  total_size += 1 * this->passexpget_size();
  for (int i = 0; i < this->passexpget_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->passexpget(i));
  }
  
  // repeated .protobuf.common.KVint3232 expireGoods = 10;
  total_size += 1 * this->expiregoods_size();
  for (int i = 0; i < this->expiregoods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->expiregoods(i));
  }
  
  // repeated int32 getLivenessList = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->getlivenesslist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->getlivenesslist(i));
    }
    total_size += 1 * this->getlivenesslist_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PassCheck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PassCheck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PassCheck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PassCheck::MergeFrom(const PassCheck& from) {
  GOOGLE_CHECK_NE(&from, this);
  achievement_.MergeFrom(from.achievement_);
  passexpget_.MergeFrom(from.passexpget_);
  expiregoods_.MergeFrom(from.expiregoods_);
  getlivenesslist_.MergeFrom(from.getlivenesslist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_isgetallaward()) {
      set_isgetallaward(from.isgetallaward());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_isgetpass()) {
      set_isgetpass(from.isgetpass());
    }
    if (from.has_experience()) {
      set_experience(from.experience());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_week()) {
      set_week(from.week());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isgetoverflowexpaward()) {
      set_isgetoverflowexpaward(from.isgetoverflowexpaward());
    }
    if (from.has_liveness()) {
      set_liveness(from.liveness());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PassCheck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PassCheck::CopyFrom(const PassCheck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassCheck::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001a) != 0x0000001a) return false;
  
  for (int i = 0; i < achievement_size(); i++) {
    if (!this->achievement(i).IsInitialized()) return false;
  }
  for (int i = 0; i < passexpget_size(); i++) {
    if (!this->passexpget(i).IsInitialized()) return false;
  }
  for (int i = 0; i < expiregoods_size(); i++) {
    if (!this->expiregoods(i).IsInitialized()) return false;
  }
  return true;
}

void PassCheck::Swap(PassCheck* other) {
  if (other != this) {
    achievement_.Swap(&other->achievement_);
    std::swap(isgetallaward_, other->isgetallaward_);
    std::swap(time_, other->time_);
    std::swap(isgetpass_, other->isgetpass_);
    std::swap(experience_, other->experience_);
    std::swap(endtime_, other->endtime_);
    std::swap(week_, other->week_);
    passexpget_.Swap(&other->passexpget_);
    std::swap(isgetoverflowexpaward_, other->isgetoverflowexpaward_);
    expiregoods_.Swap(&other->expiregoods_);
    std::swap(liveness_, other->liveness_);
    getlivenesslist_.Swap(&other->getlivenesslist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PassCheck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PassCheck_descriptor_;
  metadata.reflection = PassCheck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PassExpGet::kIdFieldNumber;
const int PassExpGet::kStatusFieldNumber;
#endif  // !_MSC_VER

PassExpGet::PassExpGet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PassExpGet::InitAsDefaultInstance() {
}

PassExpGet::PassExpGet(const PassExpGet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PassExpGet::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PassExpGet::~PassExpGet() {
  SharedDtor();
}

void PassExpGet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PassExpGet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PassExpGet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PassExpGet_descriptor_;
}

const PassExpGet& PassExpGet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();  return *default_instance_;
}

PassExpGet* PassExpGet::default_instance_ = NULL;

PassExpGet* PassExpGet::New() const {
  return new PassExpGet;
}

void PassExpGet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PassExpGet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }
      
      // required int32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PassExpGet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // required int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PassExpGet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // required int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PassExpGet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PassExpGet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PassExpGet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PassExpGet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PassExpGet::MergeFrom(const PassExpGet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PassExpGet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PassExpGet::CopyFrom(const PassExpGet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassExpGet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PassExpGet::Swap(PassExpGet* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PassExpGet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PassExpGet_descriptor_;
  metadata.reflection = PassExpGet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PassLivenessAward::kIdFieldNumber;
const int PassLivenessAward::kAwardFieldNumber;
#endif  // !_MSC_VER

PassLivenessAward::PassLivenessAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PassLivenessAward::InitAsDefaultInstance() {
}

PassLivenessAward::PassLivenessAward(const PassLivenessAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PassLivenessAward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PassLivenessAward::~PassLivenessAward() {
  SharedDtor();
}

void PassLivenessAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PassLivenessAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PassLivenessAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PassLivenessAward_descriptor_;
}

const PassLivenessAward& PassLivenessAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();  return *default_instance_;
}

PassLivenessAward* PassLivenessAward::default_instance_ = NULL;

PassLivenessAward* PassLivenessAward::New() const {
  return new PassLivenessAward;
}

void PassLivenessAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  award_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PassLivenessAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_award;
        break;
      }
      
      // repeated .protobuf.common.KVint3232 award = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_award:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_award()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_award;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PassLivenessAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // repeated .protobuf.common.KVint3232 award = 2;
  for (int i = 0; i < this->award_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->award(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PassLivenessAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // repeated .protobuf.common.KVint3232 award = 2;
  for (int i = 0; i < this->award_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->award(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PassLivenessAward::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  // repeated .protobuf.common.KVint3232 award = 2;
  total_size += 1 * this->award_size();
  for (int i = 0; i < this->award_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->award(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PassLivenessAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PassLivenessAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PassLivenessAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PassLivenessAward::MergeFrom(const PassLivenessAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  award_.MergeFrom(from.award_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PassLivenessAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PassLivenessAward::CopyFrom(const PassLivenessAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassLivenessAward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < award_size(); i++) {
    if (!this->award(i).IsInitialized()) return false;
  }
  return true;
}

void PassLivenessAward::Swap(PassLivenessAward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    award_.Swap(&other->award_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PassLivenessAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PassLivenessAward_descriptor_;
  metadata.reflection = PassLivenessAward_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace task
}  // namespace protobuf

// @@protoc_insertion_point(global_scope)
