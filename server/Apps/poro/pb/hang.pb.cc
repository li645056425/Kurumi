// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "hang.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protobuf {
namespace hang {

namespace {

const ::google::protobuf::Descriptor* EntryHangMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EntryHangMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* HangCurMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HangCurMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* OfflineGold_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OfflineGold_reflection_ = NULL;
const ::google::protobuf::Descriptor* Moster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Moster_reflection_ = NULL;
const ::google::protobuf::Descriptor* HangLineup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HangLineup_reflection_ = NULL;
const ::google::protobuf::Descriptor* TakeHangBoxReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TakeHangBoxReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TakeHangBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TakeHangBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* KillGbl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KillGbl_reflection_ = NULL;
const ::google::protobuf::Descriptor* KillGb2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KillGb2_reflection_ = NULL;
const ::google::protobuf::Descriptor* HangQuickInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HangQuickInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_hang_2eproto() {
  protobuf_AddDesc_hang_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "hang.proto");
  GOOGLE_CHECK(file != NULL);
  EntryHangMap_descriptor_ = file->message_type(0);
  static const int EntryHangMap_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntryHangMap, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntryHangMap, guidev_),
  };
  EntryHangMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EntryHangMap_descriptor_,
      EntryHangMap::default_instance_,
      EntryHangMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntryHangMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntryHangMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EntryHangMap));
  HangCurMap_descriptor_ = file->message_type(1);
  static const int HangCurMap_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HangCurMap, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HangCurMap, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HangCurMap, moster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HangCurMap, rand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HangCurMap, goldheap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HangCurMap, expheap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HangCurMap, box_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HangCurMap, boss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HangCurMap, hangmaxmap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HangCurMap, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HangCurMap, hangtime_),
  };
  HangCurMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HangCurMap_descriptor_,
      HangCurMap::default_instance_,
      HangCurMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HangCurMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HangCurMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HangCurMap));
  OfflineGold_descriptor_ = file->message_type(2);
  static const int OfflineGold_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineGold, goldheap_),
  };
  OfflineGold_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OfflineGold_descriptor_,
      OfflineGold::default_instance_,
      OfflineGold_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineGold, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineGold, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OfflineGold));
  Moster_descriptor_ = file->message_type(3);
  static const int Moster_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Moster, mosterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Moster, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Moster, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Moster, item_),
  };
  Moster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Moster_descriptor_,
      Moster::default_instance_,
      Moster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Moster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Moster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Moster));
  HangLineup_descriptor_ = file->message_type(4);
  static const int HangLineup_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HangLineup, heros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HangLineup, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HangLineup, guidev_),
  };
  HangLineup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HangLineup_descriptor_,
      HangLineup::default_instance_,
      HangLineup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HangLineup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HangLineup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HangLineup));
  TakeHangBoxReq_descriptor_ = file->message_type(5);
  static const int TakeHangBoxReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeHangBoxReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeHangBoxReq, guildstr_),
  };
  TakeHangBoxReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TakeHangBoxReq_descriptor_,
      TakeHangBoxReq::default_instance_,
      TakeHangBoxReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeHangBoxReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeHangBoxReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TakeHangBoxReq));
  TakeHangBox_descriptor_ = file->message_type(6);
  static const int TakeHangBox_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeHangBox, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeHangBox, box_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeHangBox, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeHangBox, hangtime_),
  };
  TakeHangBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TakeHangBox_descriptor_,
      TakeHangBox::default_instance_,
      TakeHangBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeHangBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeHangBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TakeHangBox));
  KillGbl_descriptor_ = file->message_type(7);
  static const int KillGbl_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillGbl, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillGbl, b_),
  };
  KillGbl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KillGbl_descriptor_,
      KillGbl::default_instance_,
      KillGbl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillGbl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillGbl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KillGbl));
  KillGb2_descriptor_ = file->message_type(8);
  static const int KillGb2_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillGb2, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillGb2, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillGb2, percent_),
  };
  KillGb2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KillGb2_descriptor_,
      KillGb2::default_instance_,
      KillGb2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillGb2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillGb2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KillGb2));
  HangQuickInfo_descriptor_ = file->message_type(9);
  static const int HangQuickInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HangQuickInfo, lasttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HangQuickInfo, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HangQuickInfo, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HangQuickInfo, period_),
  };
  HangQuickInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HangQuickInfo_descriptor_,
      HangQuickInfo::default_instance_,
      HangQuickInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HangQuickInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HangQuickInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HangQuickInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_hang_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EntryHangMap_descriptor_, &EntryHangMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HangCurMap_descriptor_, &HangCurMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OfflineGold_descriptor_, &OfflineGold::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Moster_descriptor_, &Moster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HangLineup_descriptor_, &HangLineup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TakeHangBoxReq_descriptor_, &TakeHangBoxReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TakeHangBox_descriptor_, &TakeHangBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KillGbl_descriptor_, &KillGbl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KillGb2_descriptor_, &KillGb2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HangQuickInfo_descriptor_, &HangQuickInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_hang_2eproto() {
  delete EntryHangMap::default_instance_;
  delete EntryHangMap_reflection_;
  delete HangCurMap::default_instance_;
  delete HangCurMap_reflection_;
  delete OfflineGold::default_instance_;
  delete OfflineGold_reflection_;
  delete Moster::default_instance_;
  delete Moster_reflection_;
  delete HangLineup::default_instance_;
  delete HangLineup_reflection_;
  delete TakeHangBoxReq::default_instance_;
  delete TakeHangBoxReq_reflection_;
  delete TakeHangBox::default_instance_;
  delete TakeHangBox_reflection_;
  delete KillGbl::default_instance_;
  delete KillGbl_reflection_;
  delete KillGb2::default_instance_;
  delete KillGb2_reflection_;
  delete HangQuickInfo::default_instance_;
  delete HangQuickInfo_reflection_;
}

void protobuf_AddDesc_hang_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf::common::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nhang.proto\022\rprotobuf.hang\032\014common.prot"
    "o\"*\n\014EntryHangMap\022\n\n\002id\030\001 \001(\005\022\016\n\006guidev\030"
    "\002 \001(\t\"\210\002\n\nHangCurMap\022\r\n\005mapId\030\001 \002(\005\022\014\n\004s"
    "tep\030\002 \002(\005\022%\n\006moster\030\003 \003(\0132\025.protobuf.han"
    "g.Moster\022\014\n\004rand\030\004 \002(\003\022,\n\010goldHeap\030\005 \003(\013"
    "2\032.protobuf.common.KVint3264\022+\n\007expHeap\030"
    "\006 \003(\0132\032.protobuf.common.KVint3264\022\013\n\003box"
    "\030\007 \002(\005\022\014\n\004boss\030\010 \002(\005\022\022\n\nhangMaxMap\030\t \002(\005"
    "\022\014\n\004time\030\n \001(\005\022\020\n\010hangTime\030\013 \001(\003\";\n\013Offl"
    "ineGold\022,\n\010goldHeap\030\001 \003(\0132\032.protobuf.com"
    "mon.KVint3264\"_\n\006Moster\022\020\n\010mosterId\030\001 \002("
    "\005\022\014\n\004gold\030\002 \002(\005\022\013\n\003exp\030\003 \002(\005\022(\n\004item\030\004 \003"
    "(\0132\032.protobuf.common.KVint3232\":\n\nHangLi"
    "neup\022\r\n\005heros\030\001 \003(\005\022\r\n\005power\030\003 \001(\005\022\016\n\006gu"
    "idev\030\004 \001(\t\"N\n\016TakeHangBoxReq\022\014\n\004type\030\001 \002"
    "(\005\022.\n\010guildStr\030\002 \001(\0132\034.protobuf.common.G"
    "uideString\"e\n\013TakeHangBox\022)\n\005items\030\001 \003(\013"
    "2\032.protobuf.common.KVint3264\022\013\n\003box\030\002 \002("
    "\005\022\014\n\004type\030\003 \001(\005\022\020\n\010hangTime\030\004 \001(\003\"\?\n\007Kil"
    "lGbl\022)\n\005items\030\001 \003(\0132\032.protobuf.common.KV"
    "int3264\022\t\n\001b\030\002 \002(\010\"S\n\007KillGb2\022)\n\005items\030\001"
    " \003(\0132\032.protobuf.common.KVint3264\022\014\n\004type"
    "\030\002 \002(\005\022\017\n\007percent\030\003 \001(\005\"T\n\rHangQuickInfo"
    "\022\020\n\010lastTime\030\001 \002(\003\022\022\n\nupdateTime\030\002 \002(\003\022\r"
    "\n\005count\030\003 \001(\005\022\016\n\006period\030\004 \001(\005B \n\023xag.idg"
    "o.core.protoB\tHangProto", 1023);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "hang.proto", &protobuf_RegisterTypes);
  EntryHangMap::default_instance_ = new EntryHangMap();
  HangCurMap::default_instance_ = new HangCurMap();
  OfflineGold::default_instance_ = new OfflineGold();
  Moster::default_instance_ = new Moster();
  HangLineup::default_instance_ = new HangLineup();
  TakeHangBoxReq::default_instance_ = new TakeHangBoxReq();
  TakeHangBox::default_instance_ = new TakeHangBox();
  KillGbl::default_instance_ = new KillGbl();
  KillGb2::default_instance_ = new KillGb2();
  HangQuickInfo::default_instance_ = new HangQuickInfo();
  EntryHangMap::default_instance_->InitAsDefaultInstance();
  HangCurMap::default_instance_->InitAsDefaultInstance();
  OfflineGold::default_instance_->InitAsDefaultInstance();
  Moster::default_instance_->InitAsDefaultInstance();
  HangLineup::default_instance_->InitAsDefaultInstance();
  TakeHangBoxReq::default_instance_->InitAsDefaultInstance();
  TakeHangBox::default_instance_->InitAsDefaultInstance();
  KillGbl::default_instance_->InitAsDefaultInstance();
  KillGb2::default_instance_->InitAsDefaultInstance();
  HangQuickInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_hang_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_hang_2eproto {
  StaticDescriptorInitializer_hang_2eproto() {
    protobuf_AddDesc_hang_2eproto();
  }
} static_descriptor_initializer_hang_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int EntryHangMap::kIdFieldNumber;
const int EntryHangMap::kGuidevFieldNumber;
#endif  // !_MSC_VER

EntryHangMap::EntryHangMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EntryHangMap::InitAsDefaultInstance() {
}

EntryHangMap::EntryHangMap(const EntryHangMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EntryHangMap::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  guidev_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EntryHangMap::~EntryHangMap() {
  SharedDtor();
}

void EntryHangMap::SharedDtor() {
  if (guidev_ != &::google::protobuf::internal::kEmptyString) {
    delete guidev_;
  }
  if (this != default_instance_) {
  }
}

void EntryHangMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntryHangMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntryHangMap_descriptor_;
}

const EntryHangMap& EntryHangMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hang_2eproto();  return *default_instance_;
}

EntryHangMap* EntryHangMap::default_instance_ = NULL;

EntryHangMap* EntryHangMap::New() const {
  return new EntryHangMap;
}

void EntryHangMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_guidev()) {
      if (guidev_ != &::google::protobuf::internal::kEmptyString) {
        guidev_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EntryHangMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_guidev;
        break;
      }
      
      // optional string guidev = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guidev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guidev()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guidev().data(), this->guidev().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EntryHangMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional string guidev = 2;
  if (has_guidev()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guidev().data(), this->guidev().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->guidev(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EntryHangMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional string guidev = 2;
  if (has_guidev()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guidev().data(), this->guidev().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->guidev(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EntryHangMap::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string guidev = 2;
    if (has_guidev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guidev());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntryHangMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EntryHangMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EntryHangMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EntryHangMap::MergeFrom(const EntryHangMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_guidev()) {
      set_guidev(from.guidev());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EntryHangMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntryHangMap::CopyFrom(const EntryHangMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntryHangMap::IsInitialized() const {
  
  return true;
}

void EntryHangMap::Swap(EntryHangMap* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(guidev_, other->guidev_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EntryHangMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EntryHangMap_descriptor_;
  metadata.reflection = EntryHangMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HangCurMap::kMapIdFieldNumber;
const int HangCurMap::kStepFieldNumber;
const int HangCurMap::kMosterFieldNumber;
const int HangCurMap::kRandFieldNumber;
const int HangCurMap::kGoldHeapFieldNumber;
const int HangCurMap::kExpHeapFieldNumber;
const int HangCurMap::kBoxFieldNumber;
const int HangCurMap::kBossFieldNumber;
const int HangCurMap::kHangMaxMapFieldNumber;
const int HangCurMap::kTimeFieldNumber;
const int HangCurMap::kHangTimeFieldNumber;
#endif  // !_MSC_VER

HangCurMap::HangCurMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HangCurMap::InitAsDefaultInstance() {
}

HangCurMap::HangCurMap(const HangCurMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HangCurMap::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0;
  step_ = 0;
  rand_ = GOOGLE_LONGLONG(0);
  box_ = 0;
  boss_ = 0;
  hangmaxmap_ = 0;
  time_ = 0;
  hangtime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HangCurMap::~HangCurMap() {
  SharedDtor();
}

void HangCurMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HangCurMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HangCurMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HangCurMap_descriptor_;
}

const HangCurMap& HangCurMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hang_2eproto();  return *default_instance_;
}

HangCurMap* HangCurMap::default_instance_ = NULL;

HangCurMap* HangCurMap::New() const {
  return new HangCurMap;
}

void HangCurMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0;
    step_ = 0;
    rand_ = GOOGLE_LONGLONG(0);
    box_ = 0;
    boss_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    hangmaxmap_ = 0;
    time_ = 0;
    hangtime_ = GOOGLE_LONGLONG(0);
  }
  moster_.Clear();
  goldheap_.Clear();
  expheap_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HangCurMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mapId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_step;
        break;
      }
      
      // required int32 step = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &step_)));
          set_has_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_moster;
        break;
      }
      
      // repeated .protobuf.hang.Moster moster = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_moster:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_moster()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_moster;
        if (input->ExpectTag(32)) goto parse_rand;
        break;
      }
      
      // required int64 rand = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rand_)));
          set_has_rand();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_goldHeap;
        break;
      }
      
      // repeated .protobuf.common.KVint3264 goldHeap = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goldHeap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goldheap()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_goldHeap;
        if (input->ExpectTag(50)) goto parse_expHeap;
        break;
      }
      
      // repeated .protobuf.common.KVint3264 expHeap = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_expHeap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_expheap()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_expHeap;
        if (input->ExpectTag(56)) goto parse_box;
        break;
      }
      
      // required int32 box = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_box:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &box_)));
          set_has_box();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_boss;
        break;
      }
      
      // required int32 boss = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boss_)));
          set_has_boss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_hangMaxMap;
        break;
      }
      
      // required int32 hangMaxMap = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hangMaxMap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hangmaxmap_)));
          set_has_hangmaxmap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_time;
        break;
      }
      
      // optional int32 time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_hangTime;
        break;
      }
      
      // optional int64 hangTime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hangTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hangtime_)));
          set_has_hangtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HangCurMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mapId = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mapid(), output);
  }
  
  // required int32 step = 2;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->step(), output);
  }
  
  // repeated .protobuf.hang.Moster moster = 3;
  for (int i = 0; i < this->moster_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->moster(i), output);
  }
  
  // required int64 rand = 4;
  if (has_rand()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->rand(), output);
  }
  
  // repeated .protobuf.common.KVint3264 goldHeap = 5;
  for (int i = 0; i < this->goldheap_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->goldheap(i), output);
  }
  
  // repeated .protobuf.common.KVint3264 expHeap = 6;
  for (int i = 0; i < this->expheap_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->expheap(i), output);
  }
  
  // required int32 box = 7;
  if (has_box()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->box(), output);
  }
  
  // required int32 boss = 8;
  if (has_boss()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->boss(), output);
  }
  
  // required int32 hangMaxMap = 9;
  if (has_hangmaxmap()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->hangmaxmap(), output);
  }
  
  // optional int32 time = 10;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->time(), output);
  }
  
  // optional int64 hangTime = 11;
  if (has_hangtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->hangtime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HangCurMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mapId = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mapid(), target);
  }
  
  // required int32 step = 2;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->step(), target);
  }
  
  // repeated .protobuf.hang.Moster moster = 3;
  for (int i = 0; i < this->moster_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->moster(i), target);
  }
  
  // required int64 rand = 4;
  if (has_rand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->rand(), target);
  }
  
  // repeated .protobuf.common.KVint3264 goldHeap = 5;
  for (int i = 0; i < this->goldheap_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->goldheap(i), target);
  }
  
  // repeated .protobuf.common.KVint3264 expHeap = 6;
  for (int i = 0; i < this->expheap_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->expheap(i), target);
  }
  
  // required int32 box = 7;
  if (has_box()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->box(), target);
  }
  
  // required int32 boss = 8;
  if (has_boss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->boss(), target);
  }
  
  // required int32 hangMaxMap = 9;
  if (has_hangmaxmap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->hangmaxmap(), target);
  }
  
  // optional int32 time = 10;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->time(), target);
  }
  
  // optional int64 hangTime = 11;
  if (has_hangtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->hangtime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HangCurMap::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mapId = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }
    
    // required int32 step = 2;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->step());
    }
    
    // required int64 rand = 4;
    if (has_rand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rand());
    }
    
    // required int32 box = 7;
    if (has_box()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->box());
    }
    
    // required int32 boss = 8;
    if (has_boss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boss());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 hangMaxMap = 9;
    if (has_hangmaxmap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hangmaxmap());
    }
    
    // optional int32 time = 10;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }
    
    // optional int64 hangTime = 11;
    if (has_hangtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hangtime());
    }
    
  }
  // repeated .protobuf.hang.Moster moster = 3;
  total_size += 1 * this->moster_size();
  for (int i = 0; i < this->moster_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->moster(i));
  }
  
  // repeated .protobuf.common.KVint3264 goldHeap = 5;
  total_size += 1 * this->goldheap_size();
  for (int i = 0; i < this->goldheap_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goldheap(i));
  }
  
  // repeated .protobuf.common.KVint3264 expHeap = 6;
  total_size += 1 * this->expheap_size();
  for (int i = 0; i < this->expheap_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->expheap(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HangCurMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HangCurMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HangCurMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HangCurMap::MergeFrom(const HangCurMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  moster_.MergeFrom(from.moster_);
  goldheap_.MergeFrom(from.goldheap_);
  expheap_.MergeFrom(from.expheap_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_step()) {
      set_step(from.step());
    }
    if (from.has_rand()) {
      set_rand(from.rand());
    }
    if (from.has_box()) {
      set_box(from.box());
    }
    if (from.has_boss()) {
      set_boss(from.boss());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hangmaxmap()) {
      set_hangmaxmap(from.hangmaxmap());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_hangtime()) {
      set_hangtime(from.hangtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HangCurMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HangCurMap::CopyFrom(const HangCurMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HangCurMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001cb) != 0x000001cb) return false;
  
  for (int i = 0; i < moster_size(); i++) {
    if (!this->moster(i).IsInitialized()) return false;
  }
  for (int i = 0; i < goldheap_size(); i++) {
    if (!this->goldheap(i).IsInitialized()) return false;
  }
  for (int i = 0; i < expheap_size(); i++) {
    if (!this->expheap(i).IsInitialized()) return false;
  }
  return true;
}

void HangCurMap::Swap(HangCurMap* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(step_, other->step_);
    moster_.Swap(&other->moster_);
    std::swap(rand_, other->rand_);
    goldheap_.Swap(&other->goldheap_);
    expheap_.Swap(&other->expheap_);
    std::swap(box_, other->box_);
    std::swap(boss_, other->boss_);
    std::swap(hangmaxmap_, other->hangmaxmap_);
    std::swap(time_, other->time_);
    std::swap(hangtime_, other->hangtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HangCurMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HangCurMap_descriptor_;
  metadata.reflection = HangCurMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OfflineGold::kGoldHeapFieldNumber;
#endif  // !_MSC_VER

OfflineGold::OfflineGold()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OfflineGold::InitAsDefaultInstance() {
}

OfflineGold::OfflineGold(const OfflineGold& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OfflineGold::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfflineGold::~OfflineGold() {
  SharedDtor();
}

void OfflineGold::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OfflineGold::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OfflineGold::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OfflineGold_descriptor_;
}

const OfflineGold& OfflineGold::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hang_2eproto();  return *default_instance_;
}

OfflineGold* OfflineGold::default_instance_ = NULL;

OfflineGold* OfflineGold::New() const {
  return new OfflineGold;
}

void OfflineGold::Clear() {
  goldheap_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OfflineGold::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.common.KVint3264 goldHeap = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goldHeap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goldheap()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_goldHeap;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OfflineGold::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.common.KVint3264 goldHeap = 1;
  for (int i = 0; i < this->goldheap_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->goldheap(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OfflineGold::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.common.KVint3264 goldHeap = 1;
  for (int i = 0; i < this->goldheap_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->goldheap(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OfflineGold::ByteSize() const {
  int total_size = 0;
  
  // repeated .protobuf.common.KVint3264 goldHeap = 1;
  total_size += 1 * this->goldheap_size();
  for (int i = 0; i < this->goldheap_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goldheap(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfflineGold::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OfflineGold* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OfflineGold*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OfflineGold::MergeFrom(const OfflineGold& from) {
  GOOGLE_CHECK_NE(&from, this);
  goldheap_.MergeFrom(from.goldheap_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OfflineGold::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OfflineGold::CopyFrom(const OfflineGold& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfflineGold::IsInitialized() const {
  
  for (int i = 0; i < goldheap_size(); i++) {
    if (!this->goldheap(i).IsInitialized()) return false;
  }
  return true;
}

void OfflineGold::Swap(OfflineGold* other) {
  if (other != this) {
    goldheap_.Swap(&other->goldheap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OfflineGold::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OfflineGold_descriptor_;
  metadata.reflection = OfflineGold_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Moster::kMosterIdFieldNumber;
const int Moster::kGoldFieldNumber;
const int Moster::kExpFieldNumber;
const int Moster::kItemFieldNumber;
#endif  // !_MSC_VER

Moster::Moster()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Moster::InitAsDefaultInstance() {
}

Moster::Moster(const Moster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Moster::SharedCtor() {
  _cached_size_ = 0;
  mosterid_ = 0;
  gold_ = 0;
  exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Moster::~Moster() {
  SharedDtor();
}

void Moster::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Moster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Moster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Moster_descriptor_;
}

const Moster& Moster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hang_2eproto();  return *default_instance_;
}

Moster* Moster::default_instance_ = NULL;

Moster* Moster::New() const {
  return new Moster;
}

void Moster::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mosterid_ = 0;
    gold_ = 0;
    exp_ = 0;
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Moster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mosterId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mosterid_)));
          set_has_mosterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gold;
        break;
      }
      
      // required int32 gold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }
      
      // required int32 exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_item;
        break;
      }
      
      // repeated .protobuf.common.KVint3232 item = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Moster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mosterId = 1;
  if (has_mosterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mosterid(), output);
  }
  
  // required int32 gold = 2;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gold(), output);
  }
  
  // required int32 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->exp(), output);
  }
  
  // repeated .protobuf.common.KVint3232 item = 4;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->item(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Moster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mosterId = 1;
  if (has_mosterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mosterid(), target);
  }
  
  // required int32 gold = 2;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gold(), target);
  }
  
  // required int32 exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->exp(), target);
  }
  
  // repeated .protobuf.common.KVint3232 item = 4;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->item(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Moster::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mosterId = 1;
    if (has_mosterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mosterid());
    }
    
    // required int32 gold = 2;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }
    
    // required int32 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
  }
  // repeated .protobuf.common.KVint3232 item = 4;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Moster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Moster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Moster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Moster::MergeFrom(const Moster& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mosterid()) {
      set_mosterid(from.mosterid());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Moster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Moster::CopyFrom(const Moster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Moster::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  return true;
}

void Moster::Swap(Moster* other) {
  if (other != this) {
    std::swap(mosterid_, other->mosterid_);
    std::swap(gold_, other->gold_);
    std::swap(exp_, other->exp_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Moster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Moster_descriptor_;
  metadata.reflection = Moster_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HangLineup::kHerosFieldNumber;
const int HangLineup::kPowerFieldNumber;
const int HangLineup::kGuidevFieldNumber;
#endif  // !_MSC_VER

HangLineup::HangLineup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HangLineup::InitAsDefaultInstance() {
}

HangLineup::HangLineup(const HangLineup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HangLineup::SharedCtor() {
  _cached_size_ = 0;
  power_ = 0;
  guidev_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HangLineup::~HangLineup() {
  SharedDtor();
}

void HangLineup::SharedDtor() {
  if (guidev_ != &::google::protobuf::internal::kEmptyString) {
    delete guidev_;
  }
  if (this != default_instance_) {
  }
}

void HangLineup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HangLineup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HangLineup_descriptor_;
}

const HangLineup& HangLineup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hang_2eproto();  return *default_instance_;
}

HangLineup* HangLineup::default_instance_ = NULL;

HangLineup* HangLineup::New() const {
  return new HangLineup;
}

void HangLineup::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    power_ = 0;
    if (has_guidev()) {
      if (guidev_ != &::google::protobuf::internal::kEmptyString) {
        guidev_->clear();
      }
    }
  }
  heros_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HangLineup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 heros = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_heros())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_heros())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_heros;
        if (input->ExpectTag(24)) goto parse_power;
        break;
      }
      
      // optional int32 power = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_guidev;
        break;
      }
      
      // optional string guidev = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guidev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guidev()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guidev().data(), this->guidev().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HangLineup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 heros = 1;
  for (int i = 0; i < this->heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->heros(i), output);
  }
  
  // optional int32 power = 3;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->power(), output);
  }
  
  // optional string guidev = 4;
  if (has_guidev()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guidev().data(), this->guidev().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->guidev(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HangLineup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 heros = 1;
  for (int i = 0; i < this->heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->heros(i), target);
  }
  
  // optional int32 power = 3;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->power(), target);
  }
  
  // optional string guidev = 4;
  if (has_guidev()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guidev().data(), this->guidev().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->guidev(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HangLineup::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 power = 3;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }
    
    // optional string guidev = 4;
    if (has_guidev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guidev());
    }
    
  }
  // repeated int32 heros = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->heros_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->heros(i));
    }
    total_size += 1 * this->heros_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HangLineup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HangLineup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HangLineup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HangLineup::MergeFrom(const HangLineup& from) {
  GOOGLE_CHECK_NE(&from, this);
  heros_.MergeFrom(from.heros_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_guidev()) {
      set_guidev(from.guidev());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HangLineup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HangLineup::CopyFrom(const HangLineup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HangLineup::IsInitialized() const {
  
  return true;
}

void HangLineup::Swap(HangLineup* other) {
  if (other != this) {
    heros_.Swap(&other->heros_);
    std::swap(power_, other->power_);
    std::swap(guidev_, other->guidev_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HangLineup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HangLineup_descriptor_;
  metadata.reflection = HangLineup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TakeHangBoxReq::kTypeFieldNumber;
const int TakeHangBoxReq::kGuildStrFieldNumber;
#endif  // !_MSC_VER

TakeHangBoxReq::TakeHangBoxReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TakeHangBoxReq::InitAsDefaultInstance() {
  guildstr_ = const_cast< ::protobuf::common::GuideString*>(&::protobuf::common::GuideString::default_instance());
}

TakeHangBoxReq::TakeHangBoxReq(const TakeHangBoxReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TakeHangBoxReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  guildstr_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TakeHangBoxReq::~TakeHangBoxReq() {
  SharedDtor();
}

void TakeHangBoxReq::SharedDtor() {
  if (this != default_instance_) {
    delete guildstr_;
  }
}

void TakeHangBoxReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TakeHangBoxReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TakeHangBoxReq_descriptor_;
}

const TakeHangBoxReq& TakeHangBoxReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hang_2eproto();  return *default_instance_;
}

TakeHangBoxReq* TakeHangBoxReq::default_instance_ = NULL;

TakeHangBoxReq* TakeHangBoxReq::New() const {
  return new TakeHangBoxReq;
}

void TakeHangBoxReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_guildstr()) {
      if (guildstr_ != NULL) guildstr_->::protobuf::common::GuideString::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TakeHangBoxReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_guildStr;
        break;
      }
      
      // optional .protobuf.common.GuideString guildStr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildStr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guildstr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TakeHangBoxReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // optional .protobuf.common.GuideString guildStr = 2;
  if (has_guildstr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->guildstr(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TakeHangBoxReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // optional .protobuf.common.GuideString guildStr = 2;
  if (has_guildstr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->guildstr(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TakeHangBoxReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional .protobuf.common.GuideString guildStr = 2;
    if (has_guildstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guildstr());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TakeHangBoxReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TakeHangBoxReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TakeHangBoxReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TakeHangBoxReq::MergeFrom(const TakeHangBoxReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_guildstr()) {
      mutable_guildstr()->::protobuf::common::GuideString::MergeFrom(from.guildstr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TakeHangBoxReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TakeHangBoxReq::CopyFrom(const TakeHangBoxReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TakeHangBoxReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TakeHangBoxReq::Swap(TakeHangBoxReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(guildstr_, other->guildstr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TakeHangBoxReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TakeHangBoxReq_descriptor_;
  metadata.reflection = TakeHangBoxReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TakeHangBox::kItemsFieldNumber;
const int TakeHangBox::kBoxFieldNumber;
const int TakeHangBox::kTypeFieldNumber;
const int TakeHangBox::kHangTimeFieldNumber;
#endif  // !_MSC_VER

TakeHangBox::TakeHangBox()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TakeHangBox::InitAsDefaultInstance() {
}

TakeHangBox::TakeHangBox(const TakeHangBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TakeHangBox::SharedCtor() {
  _cached_size_ = 0;
  box_ = 0;
  type_ = 0;
  hangtime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TakeHangBox::~TakeHangBox() {
  SharedDtor();
}

void TakeHangBox::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TakeHangBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TakeHangBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TakeHangBox_descriptor_;
}

const TakeHangBox& TakeHangBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hang_2eproto();  return *default_instance_;
}

TakeHangBox* TakeHangBox::default_instance_ = NULL;

TakeHangBox* TakeHangBox::New() const {
  return new TakeHangBox;
}

void TakeHangBox::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    box_ = 0;
    type_ = 0;
    hangtime_ = GOOGLE_LONGLONG(0);
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TakeHangBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.common.KVint3264 items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectTag(16)) goto parse_box;
        break;
      }
      
      // required int32 box = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_box:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &box_)));
          set_has_box();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // optional int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hangTime;
        break;
      }
      
      // optional int64 hangTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hangTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hangtime_)));
          set_has_hangtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TakeHangBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.common.KVint3264 items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }
  
  // required int32 box = 2;
  if (has_box()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->box(), output);
  }
  
  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }
  
  // optional int64 hangTime = 4;
  if (has_hangtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->hangtime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TakeHangBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.common.KVint3264 items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }
  
  // required int32 box = 2;
  if (has_box()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->box(), target);
  }
  
  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }
  
  // optional int64 hangTime = 4;
  if (has_hangtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->hangtime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TakeHangBox::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 box = 2;
    if (has_box()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->box());
    }
    
    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int64 hangTime = 4;
    if (has_hangtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hangtime());
    }
    
  }
  // repeated .protobuf.common.KVint3264 items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TakeHangBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TakeHangBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TakeHangBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TakeHangBox::MergeFrom(const TakeHangBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_box()) {
      set_box(from.box());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_hangtime()) {
      set_hangtime(from.hangtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TakeHangBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TakeHangBox::CopyFrom(const TakeHangBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TakeHangBox::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void TakeHangBox::Swap(TakeHangBox* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(box_, other->box_);
    std::swap(type_, other->type_);
    std::swap(hangtime_, other->hangtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TakeHangBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TakeHangBox_descriptor_;
  metadata.reflection = TakeHangBox_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KillGbl::kItemsFieldNumber;
const int KillGbl::kBFieldNumber;
#endif  // !_MSC_VER

KillGbl::KillGbl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KillGbl::InitAsDefaultInstance() {
}

KillGbl::KillGbl(const KillGbl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KillGbl::SharedCtor() {
  _cached_size_ = 0;
  b_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KillGbl::~KillGbl() {
  SharedDtor();
}

void KillGbl::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KillGbl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KillGbl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KillGbl_descriptor_;
}

const KillGbl& KillGbl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hang_2eproto();  return *default_instance_;
}

KillGbl* KillGbl::default_instance_ = NULL;

KillGbl* KillGbl::New() const {
  return new KillGbl;
}

void KillGbl::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    b_ = false;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KillGbl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.common.KVint3264 items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectTag(16)) goto parse_b;
        break;
      }
      
      // required bool b = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &b_)));
          set_has_b();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KillGbl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.common.KVint3264 items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }
  
  // required bool b = 2;
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->b(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KillGbl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.common.KVint3264 items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }
  
  // required bool b = 2;
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->b(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KillGbl::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required bool b = 2;
    if (has_b()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .protobuf.common.KVint3264 items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KillGbl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KillGbl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KillGbl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KillGbl::MergeFrom(const KillGbl& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_b()) {
      set_b(from.b());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KillGbl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KillGbl::CopyFrom(const KillGbl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KillGbl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void KillGbl::Swap(KillGbl* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(b_, other->b_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KillGbl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KillGbl_descriptor_;
  metadata.reflection = KillGbl_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KillGb2::kItemsFieldNumber;
const int KillGb2::kTypeFieldNumber;
const int KillGb2::kPercentFieldNumber;
#endif  // !_MSC_VER

KillGb2::KillGb2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KillGb2::InitAsDefaultInstance() {
}

KillGb2::KillGb2(const KillGb2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KillGb2::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  percent_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KillGb2::~KillGb2() {
  SharedDtor();
}

void KillGb2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KillGb2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KillGb2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KillGb2_descriptor_;
}

const KillGb2& KillGb2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hang_2eproto();  return *default_instance_;
}

KillGb2* KillGb2::default_instance_ = NULL;

KillGb2* KillGb2::New() const {
  return new KillGb2;
}

void KillGb2::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    type_ = 0;
    percent_ = 0;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KillGb2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.common.KVint3264 items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_percent;
        break;
      }
      
      // optional int32 percent = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &percent_)));
          set_has_percent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KillGb2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.common.KVint3264 items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }
  
  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  // optional int32 percent = 3;
  if (has_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->percent(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KillGb2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.common.KVint3264 items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }
  
  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  // optional int32 percent = 3;
  if (has_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->percent(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KillGb2::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int32 percent = 3;
    if (has_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->percent());
    }
    
  }
  // repeated .protobuf.common.KVint3264 items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KillGb2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KillGb2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KillGb2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KillGb2::MergeFrom(const KillGb2& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_percent()) {
      set_percent(from.percent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KillGb2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KillGb2::CopyFrom(const KillGb2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KillGb2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void KillGb2::Swap(KillGb2* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(type_, other->type_);
    std::swap(percent_, other->percent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KillGb2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KillGb2_descriptor_;
  metadata.reflection = KillGb2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HangQuickInfo::kLastTimeFieldNumber;
const int HangQuickInfo::kUpdateTimeFieldNumber;
const int HangQuickInfo::kCountFieldNumber;
const int HangQuickInfo::kPeriodFieldNumber;
#endif  // !_MSC_VER

HangQuickInfo::HangQuickInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HangQuickInfo::InitAsDefaultInstance() {
}

HangQuickInfo::HangQuickInfo(const HangQuickInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HangQuickInfo::SharedCtor() {
  _cached_size_ = 0;
  lasttime_ = GOOGLE_LONGLONG(0);
  updatetime_ = GOOGLE_LONGLONG(0);
  count_ = 0;
  period_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HangQuickInfo::~HangQuickInfo() {
  SharedDtor();
}

void HangQuickInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HangQuickInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HangQuickInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HangQuickInfo_descriptor_;
}

const HangQuickInfo& HangQuickInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hang_2eproto();  return *default_instance_;
}

HangQuickInfo* HangQuickInfo::default_instance_ = NULL;

HangQuickInfo* HangQuickInfo::New() const {
  return new HangQuickInfo;
}

void HangQuickInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lasttime_ = GOOGLE_LONGLONG(0);
    updatetime_ = GOOGLE_LONGLONG(0);
    count_ = 0;
    period_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HangQuickInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 lastTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_updateTime;
        break;
      }
      
      // required int64 updateTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_updateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }
      
      // optional int32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_period;
        break;
      }
      
      // optional int32 period = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &period_)));
          set_has_period();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HangQuickInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 lastTime = 1;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->lasttime(), output);
  }
  
  // required int64 updateTime = 2;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->updatetime(), output);
  }
  
  // optional int32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }
  
  // optional int32 period = 4;
  if (has_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->period(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HangQuickInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 lastTime = 1;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->lasttime(), target);
  }
  
  // required int64 updateTime = 2;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->updatetime(), target);
  }
  
  // optional int32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }
  
  // optional int32 period = 4;
  if (has_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->period(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HangQuickInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 lastTime = 1;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lasttime());
    }
    
    // required int64 updateTime = 2;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }
    
    // optional int32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
    // optional int32 period = 4;
    if (has_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->period());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HangQuickInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HangQuickInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HangQuickInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HangQuickInfo::MergeFrom(const HangQuickInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_period()) {
      set_period(from.period());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HangQuickInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HangQuickInfo::CopyFrom(const HangQuickInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HangQuickInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void HangQuickInfo::Swap(HangQuickInfo* other) {
  if (other != this) {
    std::swap(lasttime_, other->lasttime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(count_, other->count_);
    std::swap(period_, other->period_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HangQuickInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HangQuickInfo_descriptor_;
  metadata.reflection = HangQuickInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace hang
}  // namespace protobuf

// @@protoc_insertion_point(global_scope)
