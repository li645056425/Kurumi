--------------------------------------------------------------
-- This file was automatically generated by Cocos Studio.
-- Do not make changes to this file.
-- All changes will be lost.
--------------------------------------------------------------

local luaExtend = require "LuaExtend"

-- using for layout to decrease count of local variables
local layout = nil
local localLuaFile = nil
local innerCSD = nil
local innerProject = nil
local localFrame = nil

local Result = {}
------------------------------------------------------------
-- function call description
-- create function caller should provide a function to 
-- get a callback function in creating scene process.
-- the returned callback function will be registered to 
-- the callback event of the control.
-- the function provider is as below :
-- Callback callBackProvider(luaFileName, node, callbackName)
-- parameter description:
-- luaFileName  : a string, lua file name
-- node         : a Node, event source
-- callbackName : a string, callback function name
-- the return value is a callback function
------------------------------------------------------------
function Result.create(callBackProvider)

local result={}
setmetatable(result, luaExtend)

--Create Layer
local Layer=cc.Node:create()
Layer:setName("Layer")
layout = ccui.LayoutComponent:bindLayoutComponent(Layer)
layout:setSize({width = 1136.0000, height = 640.0000})

--Create Panel_5
local Panel_5 = ccui.Layout:create()
Panel_5:ignoreContentAdaptWithSize(false)
Panel_5:setClippingEnabled(false)
Panel_5:setBackGroundColorType(1)
Panel_5:setBackGroundColor({r = 77, g = 77, b = 77})
Panel_5:setTouchEnabled(true);
Panel_5:setLayoutComponentEnabled(true)
Panel_5:setName("Panel_5")
Panel_5:setTag(208)
Panel_5:setCascadeColorEnabled(true)
Panel_5:setCascadeOpacityEnabled(true)
layout = ccui.LayoutComponent:bindLayoutComponent(Panel_5)
layout:setPositionPercentXEnabled(true)
layout:setPercentWidthEnabled(true)
layout:setPercentHeightEnabled(true)
layout:setPercentWidth(1.0000)
layout:setPercentHeight(1.0000)
layout:setSize({width = 1136.0000, height = 640.0000})
Layer:addChild(Panel_5)

--Create scrollList
local scrollList = ccui.ScrollView:create()
scrollList:setInnerContainerSize({width = 1179, height = 533})
scrollList:ignoreContentAdaptWithSize(false)
scrollList:setClippingEnabled(false)
scrollList:setBackGroundColorType(1)
scrollList:setBackGroundColor({r = 255, g = 150, b = 100})
scrollList:setBackGroundColorOpacity(102)
scrollList:setLayoutComponentEnabled(true)
scrollList:setName("scrollList")
scrollList:setTag(13)
scrollList:setCascadeColorEnabled(true)
scrollList:setCascadeOpacityEnabled(true)
scrollList:setAnchorPoint(0.5000, 0.5000)
scrollList:setPosition(568.0107, 320.0005)
layout = ccui.LayoutComponent:bindLayoutComponent(scrollList)
layout:setPositionPercentXEnabled(true)
layout:setPositionPercentYEnabled(true)
layout:setPositionPercentX(0.5000)
layout:setPositionPercentY(0.5000)
layout:setPercentWidth(0.9648)
layout:setPercentHeight(0.6703)
layout:setSize({width = 1096.0000, height = 429.0000})
layout:setLeftMargin(20.0107)
layout:setRightMargin(19.9893)
layout:setTopMargin(105.4995)
layout:setBottomMargin(105.5005)
Layer:addChild(scrollList)

--Create Button_2
local Button_2 = ccui.Button:create()
Button_2:ignoreContentAdaptWithSize(false)
cc.SpriteFrameCache:getInstance():addSpriteFrames("plist/ui/ui2.plist")
Button_2:loadTextureNormal("fbjmt01.png",1)
Button_2:setTitleFontSize(14)
Button_2:setTitleColor({r = 65, g = 65, b = 70})
Button_2:setScale9Enabled(true)
Button_2:setCapInsets({x = 15, y = 11, width = 34, height = 42})
Button_2:setLayoutComponentEnabled(true)
Button_2:setName("Button_2")
Button_2:setTag(14)
Button_2:setCascadeColorEnabled(true)
Button_2:setCascadeOpacityEnabled(true)
Button_2:setPosition(1084.4680, 583.5734)
if callBackProvider~=nil then
      Button_2:addClickEventListener(callBackProvider("UI_TestMain.lua", Button_2, "onClickBack"))
end
layout = ccui.LayoutComponent:bindLayoutComponent(Button_2)
layout:setPositionPercentX(0.9546)
layout:setPositionPercentY(0.9118)
layout:setPercentWidth(0.0563)
layout:setPercentHeight(0.1000)
layout:setSize({width = 64.0000, height = 64.0000})
layout:setLeftMargin(1052.4680)
layout:setRightMargin(19.5316)
layout:setTopMargin(24.4266)
layout:setBottomMargin(551.5734)
Layer:addChild(Button_2)

--Create template
local template = ccui.Layout:create()
template:ignoreContentAdaptWithSize(false)
template:setClippingEnabled(false)
template:setBackGroundColorType(1)
template:setBackGroundColor({r = 150, g = 200, b = 255})
template:setBackGroundColorOpacity(102)
template:setTouchEnabled(true);
template:setLayoutComponentEnabled(true)
template:setName("template")
template:setTag(15)
template:setCascadeColorEnabled(true)
template:setCascadeOpacityEnabled(true)
template:setPosition(-167.7689, 227.6035)
layout = ccui.LayoutComponent:bindLayoutComponent(template)
layout:setPositionPercentX(-0.1477)
layout:setPositionPercentY(0.3556)
layout:setPercentWidth(0.1761)
layout:setPercentHeight(0.3125)
layout:setSize({width = 200.0000, height = 200.0000})
layout:setLeftMargin(-167.7689)
layout:setRightMargin(1103.7690)
layout:setTopMargin(212.3965)
layout:setBottomMargin(227.6035)
Layer:addChild(template)

--Create Text
local Text = ccui.Text:create()
Text:ignoreContentAdaptWithSize(true)
Text:setTextAreaSize({width = 0, height = 0})
Text:setFontName("fonts/huakang.ttf")
Text:setFontSize(20)
Text:setString([[Text Label]])
Text:setLayoutComponentEnabled(true)
Text:setName("Text")
Text:setTag(16)
Text:setCascadeColorEnabled(true)
Text:setCascadeOpacityEnabled(true)
Text:setPosition(100.0000, 100.0000)
layout = ccui.LayoutComponent:bindLayoutComponent(Text)
layout:setPositionPercentXEnabled(true)
layout:setPositionPercentYEnabled(true)
layout:setPositionPercentX(0.5000)
layout:setPositionPercentY(0.5000)
layout:setPercentWidth(0.6250)
layout:setPercentHeight(0.1000)
layout:setSize({width = 125.0000, height = 20.0000})
layout:setLeftMargin(37.5000)
layout:setRightMargin(37.5000)
layout:setTopMargin(90.0000)
layout:setBottomMargin(90.0000)
template:addChild(Text)

--Create Animation
result['animation'] = ccs.ActionTimeline:create()
  
result['animation']:setDuration(0)
result['animation']:setTimeSpeed(1.0000)
--Create Animation List

result['root'] = Layer
return result;
end

return Result

