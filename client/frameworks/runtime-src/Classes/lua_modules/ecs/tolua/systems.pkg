$#include "ecs/system/ArmatureCollisionSystem.h"
$#include "ecs/system/Box2DSystem.h"
$#include "ecs/system/MapFollowSystem.h"
$#include "ecs/system/UpdateSystem.h"
$#include "ecs/system/FilterSystem.h"



////////////////////////////////////////////ArmatureCollisionSystem/////////////////////////////////


class ArmatureCollisionSystem : public anax::System
{
public:

	ArmatureCollisionSystem();

	virtual ~ArmatureCollisionSystem();

	void setDebugDrawNode(DrawNode* debugDrawNode);

	void collisionTest();
};


////////////////////////////////////////////Box2DSystem/////////////////////////////////


#define BOX2D_PIXEL_TO_METER 30.0f

class Box2DSystem : public anax::System
{
public:

	Box2DSystem();

	virtual ~Box2DSystem();
	
	/*************************************************************************
	* @Method  :  initPhysics
	* @brief   :  
	* @inparam :  gravity ÖØÁ¦
	* @outparam:  
	* @author  :  FC
	* @date    :  2018/12/13 21:56
	* @version :  ver 1.0
	*************************************************************************/
	bool initPhysics(Vec2 gravity, Size worldSize, float left_offset, float right_offset, float top_offset, float bottom_offset);

	void updateWorld(float delta);

	void addDiscardB2Body(b2Body* body);

	b2World* getBox2DWorld();
};


////////////////////////////////////////////MapFollowSystem/////////////////////////////////

class MapFollowSystem : public anax::System
{
public:

	MapFollowSystem(GameMap* gameMap);

	virtual ~MapFollowSystem();

	void update();

	void resetGameMap(GameMap* gameMap);

};

////////////////////////////////////////////UpdateSystem/////////////////////////////////
class UpdateSystem : public anax::System
{
public:
	UpdateSystem();

	virtual ~UpdateSystem();

	void update(float delta);

	void lastUpdate(float delta);
};


////////////////////////////////////////////UpdateSystem/////////////////////////////////
class FilterSystem : public anax::System
{
public:

	FilterSystem();

	virtual ~FilterSystem();

	std::vector<Actor*> getAllActorByFilterData(int filterData);

	Actor* randomGetActorByFilterData(int filterData);
};



