$#include "ecs/components/ArmatureComponent.h"
$#include "ecs/components/Box2DComponent.h"
$#include "ecs/components/MapFollowComponent.h"
$#include "ecs/components/OrientationComponent.h"
$#include "ecs/components/UpdateComponent.h"
$#include "ecs/components/FilterComponent.h"
$#include "foundation/Actor.h"


$using namespace cocos2d;
$using namespace cocostudio;


////////////////////////////////////////////ArmatureComponent/////////////////////////////////

// 骨骼动画组件
class ArmatureComponent : public anax::Component
{
public:
	//ArmatureComponent();

	//~ArmatureComponent();

	ccs_Armature* m_armature;
	cc_Node* m_owner;
};

// 骨骼动画碰撞组件
class ArmatureCollisionComponent : public anax::Component
{
public:
	//ArmatureCollisionComponent();
	//virtual ~ArmatureCollisionComponent() {}

	// 作为攻击者碰撞回调
	LuaFunction m_attCollisionCall;
	// 作为受击者碰撞回调
	LuaFunction m_defCollisionCall;

	bool m_defCacheDirty;
	bool m_attCacheDirty;

	// 碰撞矩形缓存
	//std::vector<ArmatureCollisionRect> m_defRectCache;
	//std::vector<ArmatureCollisionRect> m_attRectCache;
};

// 骨骼动画碰撞过滤组件
class CollisionFilterComponent : public anax::Component
{
public:
	//CollisionFilterComponent();
	//virtual ~CollisionFilterComponent() {}
	
	int m_groupIndex;
	bool m_collisionEnable;
};


////////////////////////////////////////////Box2DComponent/////////////////////////////////
class Box2DComponent : public anax::Component
{
public:
	//Box2DComponent(){}

	//virtual ~Box2DComponent() {}

	b2Body* m_body;

	LuaFunction m_syncPhysicsTransformCall;
};

////////////////////////////////////////////MapFollowComponent/////////////////////////////////

class MapFollowComponent : public anax::Component
{
public:
	//MapFollowComponent()
	
	//virtual ~MapFollowComponent();

	cc_Node* m_owner;
};


////////////////////////////////////////////OrientationComponent/////////////////////////////////

class OrientationComponent : public anax::Component
{
public:

	bool setOrientation(int orientation);

	int m_orientation;

	bool m_lockOrientation;

	LuaFunction m_orientationTurnCall;
};

///UpdateComponent

class UpdateComponent : public anax::Component
{
public:
	UpdateComponent();
	virtual ~UpdateComponent();

	LuaFunction m_updateCall;
	LuaFunction m_lastUpdateCall;
};



/// FilterComponent
class FilterComponent : public anax::Component
{
public:
	FilterComponent();

	virtual ~FilterComponent();

	Actor* m_owner;

	int m_filterData;
};












