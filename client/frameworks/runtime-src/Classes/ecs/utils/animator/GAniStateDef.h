#pragma once

#include <string>
#include <assert.h>

namespace anim
{
	// 动画枚举
	enum GANI_STATE_TYPE
	{
		ATTACK1,
		ATTACK2,
		ATTACK3,
		ATTACK4,
		BLOCK,
		COLLAPSE,
		COMMON_BRAKE,
		COMMON_GLIDE,
		COMMON_JUMPDOWN,
		COMMON_JUMPUP,
		COMMON_RUN,
		COMMON_SQUAT,
		COMMON_STAND,
		COMMON_TURN,
		CUT_DOWN,
		CUT_STORE,
		CUT_UP,
		DEATH,
		FIGHT_BRAKE,
		FIGHT_GLIDE,
		FIGHT_JUMPDOWN,
		FIGHT_JUMPUP,
		FIGHT_RUN,
		FIGHT_SQUAT,
		FIGHT_STAND,
		FIGHT_TURN,
		FOLLOW1,
		FOLLOW2,
		FOLLOW3,
		FOLLOW4,
		HIT,
		KATTACK1,
		KATTACK2,
		KATTACK3,
		KATTACK4,
		KFOLLOW1,
		KFOLLOW2,
		KFOLLOW3,
		KFOLLOW4,
		KREPLACE,
		PULL,
		REGAIN,
		REPLACE,
		SKILL1,
		SKILL2,
		SKILL3,
		SKILL4,
		SKILL5,
		SKILL6,
		SKILL7,
		SKILL8,
		SKILL9,
		SKILL10,
		SKILL11,
		SKILL12,
		SKILL13,
		SKILL14,
		SKILL15,
		SKILL16,
		SKILL17,
		SKILL36,
		SPURT_H,
		SPURT_V,
		UKE,

		COUNT
	};

	static const char* GANI_STATE_NAME[] =
	{
		// NAME_BEGIN
		//! Generated by the "autoCode.lua".  DO NOT EDIT!
		"ATTACK1",
		"ATTACK2",
		"ATTACK3",
		"ATTACK4",
		"BLOCK",
		"COLLAPSE",
		"COMMON_BRAKE",
		"COMMON_GLIDE",
		"COMMON_JUMPDOWN",
		"COMMON_JUMPUP",
		"COMMON_RUN",
		"COMMON_SQUAT",
		"COMMON_STAND",
		"COMMON_TURN",
		"CUT_DOWN",
		"CUT_STORE",
		"CUT_UP",
		"DEATH",
		"FIGHT_BRAKE",
		"FIGHT_GLIDE",
		"FIGHT_JUMPDOWN",
		"FIGHT_JUMPUP",
		"FIGHT_RUN",
		"FIGHT_SQUAT",
		"FIGHT_STAND",
		"FIGHT_TURN",
		"FOLLOW1",
		"FOLLOW2",
		"FOLLOW3",
		"FOLLOW4",
		"HIT",
		"KATTACK1",
		"KATTACK2",
		"KATTACK3",
		"KATTACK4",
		"KFOLLOW1",
		"KFOLLOW2",
		"KFOLLOW3",
		"KFOLLOW4",
		"KREPLACE",
		"PULL",
		"REGAIN",
		"REPLACE",
		"SKILL1",
		"SKILL2",
		"SKILL3",
		"SKILL4",
		"SKILL5",
		"SKILL6",
		"SKILL7",
		"SKILL8",
		"SKILL9",
		"SKILL10",
		"SKILL11",
		"SKILL12",
		"SKILL13",
		"SKILL14",
		"SKILL15",
		"SKILL16",
		"SKILL17",
		"SKILL36",
		"SPURT_H",
		"SPURT_V",
		"UKE",
		"COUNT",
		// NAME_END


	};

	static GANI_STATE_TYPE getStateType(const char* name)
	{
		for (auto i = 0; i < GANI_STATE_TYPE::COUNT; ++i)
		{
			if (strcmp(name, GANI_STATE_NAME[i]) == 0)
				return (GANI_STATE_TYPE)i;
		}
		assert(0);
		return GANI_STATE_TYPE::COUNT;
	}
}